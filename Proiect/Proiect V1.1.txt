/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h> // for various integer sub-types
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t RX_Buffer[20];
uint8_t RX_Buffer_Index = 0;
uint8_t TX_Buffer[30];
uint8_t Bluetooth_RX_Buffer[20];
uint8_t Bluetooth_RX_Buffer_Index = 0;
uint8_t Bluetooth_TX_Buffer[10];
static uint8_t nr_sent_messages = 0, TX_Semaphore = 0, message_nr = 0;

//Callback for the GPIO Interrupt
//Executed when the user button is pressed, sending basic commands to the wireless device to check its functionality
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  // User Button ( blue ) is set on the 13th pin of port C
  if(GPIO_Pin == GPIO_PIN_13)
  {
	    // switch clause used for cycling through messages for the wireless device
        switch(message_nr)
        {
        		case 0:
        		// Test Message, should return OK if everything functions well
                sprintf(Bluetooth_TX_Buffer,"AT\r\n\0");
	            if(HAL_UART_Transmit_IT(&huart3,Bluetooth_TX_Buffer,strlen(Bluetooth_TX_Buffer)) != HAL_OK) // transmit message through UART3 to start bluetooth transmission
	            {
	               Error_Handler();
	            }
	            break;

        		case 1:
        		// Message that returns the name of the wireless device
        		sprintf(Bluetooth_TX_Buffer,"AT+NAME\r\n\0");
                if(HAL_UART_Transmit_IT(&huart3,Bluetooth_TX_Buffer,strlen(Bluetooth_TX_Buffer)) != HAL_OK) // transmit message through UART3 to start bluetooth transmission
                {
                   Error_Handler();
   	            }
                break;

        		case 2:
        		// Message that returns the pin code of the wireless device
        		sprintf(Bluetooth_TX_Buffer,"AT+PIN\r\n\0");
        	    if(HAL_UART_Transmit_IT(&huart3,Bluetooth_TX_Buffer,strlen(Bluetooth_TX_Buffer)) != HAL_OK) // transmit message through UART3 to start bluetooth transmission
        		{
        		   Error_Handler();
        		}
        	    break;
        }
        // increment the message counter, reset to 0 when it reaches value 3
        message_nr += 1;
        if(message_nr == 3)
        	message_nr = 0;
  }
}

// callback for completion of message reception through UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	// message received through UART2
	if(huart->Instance == USART2)
  	{
	       // data is being received one byte at a time ( the length of the message is unknown ), so we
	       // we consider a message as completed if it ends with the '\n' character
		   if(*(RX_Buffer + RX_Buffer_Index - 1) == '\n')
		   {
		      // setting TX_Semaphore so that a the message containing the number of messages sent through
		      // UART2 is sent to the terminal only after a full message is received
			   TX_Semaphore = 1;

		      // send the received message to the wireless device
		      if(HAL_UART_Transmit_IT(&huart3,RX_Buffer,RX_Buffer_Index) != HAL_OK)
		      {
		         Error_Handler();
	          }

		      // loop-back the received message so that we can check its integrity
		      if(HAL_UART_Transmit_IT(&huart2,RX_Buffer,RX_Buffer_Index) != HAL_OK) // sending data through UART2
              {
		         Error_Handler();
		      }

		      // reset the buffer index for the buffer containing the received message to 0
		      RX_Buffer_Index = 0;

	       }

		   // restart data reception
           if(HAL_UART_Receive_IT(&huart2,RX_Buffer + (RX_Buffer_Index ++),1) != HAL_OK) // restart receiving data through UART2
		   {
	          Error_Handler();
		   }
  	}

	// message received through UART3
	else if(huart->Instance == USART3)
	{

	       // data is being received one byte at a time ( the length of the message is unknown ), so we
	       // we consider a message as completed if it ends with the '\n' character
		   if( *(Bluetooth_RX_Buffer + Bluetooth_RX_Buffer_Index - 1) == '\n')
		   {
			  // send the message received from the wireless device to the terminal for debugging
			  // purposes
              if(HAL_UART_Transmit_IT(&huart2,Bluetooth_RX_Buffer,Bluetooth_RX_Buffer_Index) != HAL_OK)
		      {
		         Error_Handler();
	          }
              // reset the buffer index for the buffer containing the received message to 0
		      Bluetooth_RX_Buffer_Index = 0;
		   }

		   // restart data reception
		   if(HAL_UART_Receive_IT(&huart3,Bluetooth_RX_Buffer + (Bluetooth_RX_Buffer_Index ++),1) != HAL_OK) // restart receiving data through UART3
		   {
		      Error_Handler();
	       }

           // in case the received message is longer than the buffer ( for example AT+HELP\r\n triggers such a response from
		   // the wireless device ), we reset the buffer index to 0 so that the message doesn't overwrite other memory locations
		   if(Bluetooth_RX_Buffer_Index >= 20)
			    Bluetooth_RX_Buffer_Index = 0;
	}
}

// callback for completion of message transmission through UART
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	// message sent through UART2
	if(huart->Instance == USART2)
	{
	       // only send the message containing the number of sent messages if the semaphore is
	       // set, so that we know a completed message has been received
	       if(TX_Semaphore == 1)
	       {
	    	  // writing the message containing the number of sent messages in the buffer used
	    	  // for data transmission
		      sprintf(TX_Buffer,"\n\rSent messages number :%d\r\n\0",++nr_sent_messages);

		      //sending the message to the terminal
		      if(HAL_UART_Transmit_IT(&huart2,TX_Buffer,strlen(TX_Buffer)) != HAL_OK) // sending data through UART2
		      {
		 	     Error_Handler();
	          }

		      // reseting TX_Semaphore so that no more data is sent to the terminal until another
		      // full message is received
		      TX_Semaphore = 0;
	       }
	}

	// message sent through UART3
	else if(huart->Instance == USART3)
	{
       // nothing implemented here yet, might be used for expansion in the future
	}

}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */

  // Start receiving data through UART2 ( Terminal ) in interrupt mode
  if(HAL_UART_Receive_IT(&huart2,RX_Buffer + (RX_Buffer_Index ++) ,1) != HAL_OK)
  {
	  Error_Handler();
  }

  // Start receiving data through UART3 ( wireless device ) in interrupt mode
  if(HAL_UART_Receive_IT(&huart3,Bluetooth_RX_Buffer + (Bluetooth_RX_Buffer_Index ++),1) != HAL_OK) // start receiving data through UART3
  {
  	  Error_Handler();
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 38400;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 38400;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
