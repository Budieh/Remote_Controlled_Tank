
Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ff0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800a0b0  0800a0b0  0001a0b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a524  0800a524  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a524  0800a524  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a524  0800a524  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a524  0800a524  0001a524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a528  0800a528  0001a528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a52c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  200001d8  0800a704  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007f4  0800a704  000207f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d2ab  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d76  00000000  00000000  0002d4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  0002f268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d6  00000000  00000000  0002fee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011bb1  00000000  00000000  000308be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea63  00000000  00000000  0004246f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006acea  00000000  00000000  00050ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004034  00000000  00000000  000bbbbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000bfbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a098 	.word	0x0800a098

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	0800a098 	.word	0x0800a098

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fda3 	bl	8001f88 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fcf3 	bl	8001e38 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fd95 	bl	8001f88 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fd8b 	bl	8001f88 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fd1b 	bl	8001ebc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fd11 	bl	8001ebc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_f2uiz>:
 80004a8:	219e      	movs	r1, #158	; 0x9e
 80004aa:	b510      	push	{r4, lr}
 80004ac:	05c9      	lsls	r1, r1, #23
 80004ae:	1c04      	adds	r4, r0, #0
 80004b0:	f002 fd34 	bl	8002f1c <__aeabi_fcmpge>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d103      	bne.n	80004c0 <__aeabi_f2uiz+0x18>
 80004b8:	1c20      	adds	r0, r4, #0
 80004ba:	f000 fdb5 	bl	8001028 <__aeabi_f2iz>
 80004be:	bd10      	pop	{r4, pc}
 80004c0:	219e      	movs	r1, #158	; 0x9e
 80004c2:	1c20      	adds	r0, r4, #0
 80004c4:	05c9      	lsls	r1, r1, #23
 80004c6:	f000 fc0f 	bl	8000ce8 <__aeabi_fsub>
 80004ca:	f000 fdad 	bl	8001028 <__aeabi_f2iz>
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	061b      	lsls	r3, r3, #24
 80004d2:	469c      	mov	ip, r3
 80004d4:	4460      	add	r0, ip
 80004d6:	e7f2      	b.n	80004be <__aeabi_f2uiz+0x16>

080004d8 <__aeabi_fadd>:
 80004d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004da:	4647      	mov	r7, r8
 80004dc:	46ce      	mov	lr, r9
 80004de:	024a      	lsls	r2, r1, #9
 80004e0:	0243      	lsls	r3, r0, #9
 80004e2:	0045      	lsls	r5, r0, #1
 80004e4:	0fc4      	lsrs	r4, r0, #31
 80004e6:	0a50      	lsrs	r0, r2, #9
 80004e8:	4680      	mov	r8, r0
 80004ea:	0048      	lsls	r0, r1, #1
 80004ec:	0a5b      	lsrs	r3, r3, #9
 80004ee:	0e00      	lsrs	r0, r0, #24
 80004f0:	0992      	lsrs	r2, r2, #6
 80004f2:	4694      	mov	ip, r2
 80004f4:	b580      	push	{r7, lr}
 80004f6:	001e      	movs	r6, r3
 80004f8:	4681      	mov	r9, r0
 80004fa:	0002      	movs	r2, r0
 80004fc:	0e2d      	lsrs	r5, r5, #24
 80004fe:	00df      	lsls	r7, r3, #3
 8000500:	0fc9      	lsrs	r1, r1, #31
 8000502:	428c      	cmp	r4, r1
 8000504:	d024      	beq.n	8000550 <__aeabi_fadd+0x78>
 8000506:	1a28      	subs	r0, r5, r0
 8000508:	2800      	cmp	r0, #0
 800050a:	dd0e      	ble.n	800052a <__aeabi_fadd+0x52>
 800050c:	2a00      	cmp	r2, #0
 800050e:	d13e      	bne.n	800058e <__aeabi_fadd+0xb6>
 8000510:	4662      	mov	r2, ip
 8000512:	2a00      	cmp	r2, #0
 8000514:	d100      	bne.n	8000518 <__aeabi_fadd+0x40>
 8000516:	e0fd      	b.n	8000714 <__aeabi_fadd+0x23c>
 8000518:	1e42      	subs	r2, r0, #1
 800051a:	2801      	cmp	r0, #1
 800051c:	d100      	bne.n	8000520 <__aeabi_fadd+0x48>
 800051e:	e137      	b.n	8000790 <__aeabi_fadd+0x2b8>
 8000520:	28ff      	cmp	r0, #255	; 0xff
 8000522:	d100      	bne.n	8000526 <__aeabi_fadd+0x4e>
 8000524:	e0a9      	b.n	800067a <__aeabi_fadd+0x1a2>
 8000526:	0010      	movs	r0, r2
 8000528:	e039      	b.n	800059e <__aeabi_fadd+0xc6>
 800052a:	2800      	cmp	r0, #0
 800052c:	d063      	beq.n	80005f6 <__aeabi_fadd+0x11e>
 800052e:	464b      	mov	r3, r9
 8000530:	1b52      	subs	r2, r2, r5
 8000532:	2d00      	cmp	r5, #0
 8000534:	d000      	beq.n	8000538 <__aeabi_fadd+0x60>
 8000536:	e0e0      	b.n	80006fa <__aeabi_fadd+0x222>
 8000538:	2f00      	cmp	r7, #0
 800053a:	d100      	bne.n	800053e <__aeabi_fadd+0x66>
 800053c:	e0ce      	b.n	80006dc <__aeabi_fadd+0x204>
 800053e:	1e53      	subs	r3, r2, #1
 8000540:	2a01      	cmp	r2, #1
 8000542:	d100      	bne.n	8000546 <__aeabi_fadd+0x6e>
 8000544:	e155      	b.n	80007f2 <__aeabi_fadd+0x31a>
 8000546:	2aff      	cmp	r2, #255	; 0xff
 8000548:	d100      	bne.n	800054c <__aeabi_fadd+0x74>
 800054a:	e094      	b.n	8000676 <__aeabi_fadd+0x19e>
 800054c:	001a      	movs	r2, r3
 800054e:	e0d9      	b.n	8000704 <__aeabi_fadd+0x22c>
 8000550:	1a2a      	subs	r2, r5, r0
 8000552:	2a00      	cmp	r2, #0
 8000554:	dc00      	bgt.n	8000558 <__aeabi_fadd+0x80>
 8000556:	e099      	b.n	800068c <__aeabi_fadd+0x1b4>
 8000558:	2800      	cmp	r0, #0
 800055a:	d062      	beq.n	8000622 <__aeabi_fadd+0x14a>
 800055c:	2dff      	cmp	r5, #255	; 0xff
 800055e:	d100      	bne.n	8000562 <__aeabi_fadd+0x8a>
 8000560:	e08b      	b.n	800067a <__aeabi_fadd+0x1a2>
 8000562:	2380      	movs	r3, #128	; 0x80
 8000564:	4661      	mov	r1, ip
 8000566:	04db      	lsls	r3, r3, #19
 8000568:	4319      	orrs	r1, r3
 800056a:	468c      	mov	ip, r1
 800056c:	2a1b      	cmp	r2, #27
 800056e:	dc00      	bgt.n	8000572 <__aeabi_fadd+0x9a>
 8000570:	e0d2      	b.n	8000718 <__aeabi_fadd+0x240>
 8000572:	2301      	movs	r3, #1
 8000574:	19db      	adds	r3, r3, r7
 8000576:	015a      	lsls	r2, r3, #5
 8000578:	d56a      	bpl.n	8000650 <__aeabi_fadd+0x178>
 800057a:	3501      	adds	r5, #1
 800057c:	2dff      	cmp	r5, #255	; 0xff
 800057e:	d05b      	beq.n	8000638 <__aeabi_fadd+0x160>
 8000580:	2201      	movs	r2, #1
 8000582:	49a3      	ldr	r1, [pc, #652]	; (8000810 <__aeabi_fadd+0x338>)
 8000584:	401a      	ands	r2, r3
 8000586:	085b      	lsrs	r3, r3, #1
 8000588:	400b      	ands	r3, r1
 800058a:	4313      	orrs	r3, r2
 800058c:	e01c      	b.n	80005c8 <__aeabi_fadd+0xf0>
 800058e:	2dff      	cmp	r5, #255	; 0xff
 8000590:	d100      	bne.n	8000594 <__aeabi_fadd+0xbc>
 8000592:	e072      	b.n	800067a <__aeabi_fadd+0x1a2>
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	4662      	mov	r2, ip
 8000598:	04db      	lsls	r3, r3, #19
 800059a:	431a      	orrs	r2, r3
 800059c:	4694      	mov	ip, r2
 800059e:	281b      	cmp	r0, #27
 80005a0:	dc00      	bgt.n	80005a4 <__aeabi_fadd+0xcc>
 80005a2:	e090      	b.n	80006c6 <__aeabi_fadd+0x1ee>
 80005a4:	2301      	movs	r3, #1
 80005a6:	1afb      	subs	r3, r7, r3
 80005a8:	015a      	lsls	r2, r3, #5
 80005aa:	d551      	bpl.n	8000650 <__aeabi_fadd+0x178>
 80005ac:	019b      	lsls	r3, r3, #6
 80005ae:	099e      	lsrs	r6, r3, #6
 80005b0:	0030      	movs	r0, r6
 80005b2:	f002 fcbd 	bl	8002f30 <__clzsi2>
 80005b6:	0033      	movs	r3, r6
 80005b8:	3805      	subs	r0, #5
 80005ba:	4083      	lsls	r3, r0
 80005bc:	4285      	cmp	r5, r0
 80005be:	dc00      	bgt.n	80005c2 <__aeabi_fadd+0xea>
 80005c0:	e075      	b.n	80006ae <__aeabi_fadd+0x1d6>
 80005c2:	4a94      	ldr	r2, [pc, #592]	; (8000814 <__aeabi_fadd+0x33c>)
 80005c4:	1a2d      	subs	r5, r5, r0
 80005c6:	4013      	ands	r3, r2
 80005c8:	075a      	lsls	r2, r3, #29
 80005ca:	d004      	beq.n	80005d6 <__aeabi_fadd+0xfe>
 80005cc:	220f      	movs	r2, #15
 80005ce:	401a      	ands	r2, r3
 80005d0:	2a04      	cmp	r2, #4
 80005d2:	d000      	beq.n	80005d6 <__aeabi_fadd+0xfe>
 80005d4:	3304      	adds	r3, #4
 80005d6:	015a      	lsls	r2, r3, #5
 80005d8:	d53c      	bpl.n	8000654 <__aeabi_fadd+0x17c>
 80005da:	1c68      	adds	r0, r5, #1
 80005dc:	2dfe      	cmp	r5, #254	; 0xfe
 80005de:	d02b      	beq.n	8000638 <__aeabi_fadd+0x160>
 80005e0:	019b      	lsls	r3, r3, #6
 80005e2:	0a5e      	lsrs	r6, r3, #9
 80005e4:	b2c0      	uxtb	r0, r0
 80005e6:	05c0      	lsls	r0, r0, #23
 80005e8:	4330      	orrs	r0, r6
 80005ea:	07e4      	lsls	r4, r4, #31
 80005ec:	4320      	orrs	r0, r4
 80005ee:	bcc0      	pop	{r6, r7}
 80005f0:	46b9      	mov	r9, r7
 80005f2:	46b0      	mov	r8, r6
 80005f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005f6:	20fe      	movs	r0, #254	; 0xfe
 80005f8:	1c6a      	adds	r2, r5, #1
 80005fa:	4210      	tst	r0, r2
 80005fc:	d172      	bne.n	80006e4 <__aeabi_fadd+0x20c>
 80005fe:	2d00      	cmp	r5, #0
 8000600:	d000      	beq.n	8000604 <__aeabi_fadd+0x12c>
 8000602:	e0ae      	b.n	8000762 <__aeabi_fadd+0x28a>
 8000604:	2f00      	cmp	r7, #0
 8000606:	d100      	bne.n	800060a <__aeabi_fadd+0x132>
 8000608:	e0ec      	b.n	80007e4 <__aeabi_fadd+0x30c>
 800060a:	4663      	mov	r3, ip
 800060c:	2000      	movs	r0, #0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0e9      	beq.n	80005e6 <__aeabi_fadd+0x10e>
 8000612:	1afb      	subs	r3, r7, r3
 8000614:	015a      	lsls	r2, r3, #5
 8000616:	d400      	bmi.n	800061a <__aeabi_fadd+0x142>
 8000618:	e0f3      	b.n	8000802 <__aeabi_fadd+0x32a>
 800061a:	4663      	mov	r3, ip
 800061c:	000c      	movs	r4, r1
 800061e:	1bdb      	subs	r3, r3, r7
 8000620:	e7d2      	b.n	80005c8 <__aeabi_fadd+0xf0>
 8000622:	4661      	mov	r1, ip
 8000624:	2900      	cmp	r1, #0
 8000626:	d05b      	beq.n	80006e0 <__aeabi_fadd+0x208>
 8000628:	1e51      	subs	r1, r2, #1
 800062a:	2a01      	cmp	r2, #1
 800062c:	d100      	bne.n	8000630 <__aeabi_fadd+0x158>
 800062e:	e0a7      	b.n	8000780 <__aeabi_fadd+0x2a8>
 8000630:	2aff      	cmp	r2, #255	; 0xff
 8000632:	d022      	beq.n	800067a <__aeabi_fadd+0x1a2>
 8000634:	000a      	movs	r2, r1
 8000636:	e799      	b.n	800056c <__aeabi_fadd+0x94>
 8000638:	20ff      	movs	r0, #255	; 0xff
 800063a:	2600      	movs	r6, #0
 800063c:	e7d3      	b.n	80005e6 <__aeabi_fadd+0x10e>
 800063e:	21fe      	movs	r1, #254	; 0xfe
 8000640:	1c6a      	adds	r2, r5, #1
 8000642:	4211      	tst	r1, r2
 8000644:	d073      	beq.n	800072e <__aeabi_fadd+0x256>
 8000646:	2aff      	cmp	r2, #255	; 0xff
 8000648:	d0f6      	beq.n	8000638 <__aeabi_fadd+0x160>
 800064a:	0015      	movs	r5, r2
 800064c:	4467      	add	r7, ip
 800064e:	087b      	lsrs	r3, r7, #1
 8000650:	075a      	lsls	r2, r3, #29
 8000652:	d1bb      	bne.n	80005cc <__aeabi_fadd+0xf4>
 8000654:	08db      	lsrs	r3, r3, #3
 8000656:	2dff      	cmp	r5, #255	; 0xff
 8000658:	d00f      	beq.n	800067a <__aeabi_fadd+0x1a2>
 800065a:	025b      	lsls	r3, r3, #9
 800065c:	0a5e      	lsrs	r6, r3, #9
 800065e:	b2e8      	uxtb	r0, r5
 8000660:	e7c1      	b.n	80005e6 <__aeabi_fadd+0x10e>
 8000662:	4662      	mov	r2, ip
 8000664:	2a00      	cmp	r2, #0
 8000666:	d008      	beq.n	800067a <__aeabi_fadd+0x1a2>
 8000668:	2280      	movs	r2, #128	; 0x80
 800066a:	03d2      	lsls	r2, r2, #15
 800066c:	4213      	tst	r3, r2
 800066e:	d004      	beq.n	800067a <__aeabi_fadd+0x1a2>
 8000670:	4640      	mov	r0, r8
 8000672:	4210      	tst	r0, r2
 8000674:	d101      	bne.n	800067a <__aeabi_fadd+0x1a2>
 8000676:	000c      	movs	r4, r1
 8000678:	4643      	mov	r3, r8
 800067a:	2b00      	cmp	r3, #0
 800067c:	d0dc      	beq.n	8000638 <__aeabi_fadd+0x160>
 800067e:	2680      	movs	r6, #128	; 0x80
 8000680:	03f6      	lsls	r6, r6, #15
 8000682:	431e      	orrs	r6, r3
 8000684:	0276      	lsls	r6, r6, #9
 8000686:	20ff      	movs	r0, #255	; 0xff
 8000688:	0a76      	lsrs	r6, r6, #9
 800068a:	e7ac      	b.n	80005e6 <__aeabi_fadd+0x10e>
 800068c:	2a00      	cmp	r2, #0
 800068e:	d0d6      	beq.n	800063e <__aeabi_fadd+0x166>
 8000690:	1b42      	subs	r2, r0, r5
 8000692:	2d00      	cmp	r5, #0
 8000694:	d05c      	beq.n	8000750 <__aeabi_fadd+0x278>
 8000696:	28ff      	cmp	r0, #255	; 0xff
 8000698:	d0ee      	beq.n	8000678 <__aeabi_fadd+0x1a0>
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	04db      	lsls	r3, r3, #19
 800069e:	431f      	orrs	r7, r3
 80006a0:	2a1b      	cmp	r2, #27
 80006a2:	dc00      	bgt.n	80006a6 <__aeabi_fadd+0x1ce>
 80006a4:	e082      	b.n	80007ac <__aeabi_fadd+0x2d4>
 80006a6:	2301      	movs	r3, #1
 80006a8:	464d      	mov	r5, r9
 80006aa:	4463      	add	r3, ip
 80006ac:	e763      	b.n	8000576 <__aeabi_fadd+0x9e>
 80006ae:	2220      	movs	r2, #32
 80006b0:	1b40      	subs	r0, r0, r5
 80006b2:	3001      	adds	r0, #1
 80006b4:	1a12      	subs	r2, r2, r0
 80006b6:	0019      	movs	r1, r3
 80006b8:	4093      	lsls	r3, r2
 80006ba:	40c1      	lsrs	r1, r0
 80006bc:	1e5a      	subs	r2, r3, #1
 80006be:	4193      	sbcs	r3, r2
 80006c0:	2500      	movs	r5, #0
 80006c2:	430b      	orrs	r3, r1
 80006c4:	e780      	b.n	80005c8 <__aeabi_fadd+0xf0>
 80006c6:	2320      	movs	r3, #32
 80006c8:	4661      	mov	r1, ip
 80006ca:	1a1b      	subs	r3, r3, r0
 80006cc:	4099      	lsls	r1, r3
 80006ce:	4662      	mov	r2, ip
 80006d0:	000b      	movs	r3, r1
 80006d2:	40c2      	lsrs	r2, r0
 80006d4:	1e59      	subs	r1, r3, #1
 80006d6:	418b      	sbcs	r3, r1
 80006d8:	4313      	orrs	r3, r2
 80006da:	e764      	b.n	80005a6 <__aeabi_fadd+0xce>
 80006dc:	000c      	movs	r4, r1
 80006de:	4643      	mov	r3, r8
 80006e0:	0015      	movs	r5, r2
 80006e2:	e7b8      	b.n	8000656 <__aeabi_fadd+0x17e>
 80006e4:	4663      	mov	r3, ip
 80006e6:	1afe      	subs	r6, r7, r3
 80006e8:	0173      	lsls	r3, r6, #5
 80006ea:	d445      	bmi.n	8000778 <__aeabi_fadd+0x2a0>
 80006ec:	2e00      	cmp	r6, #0
 80006ee:	d000      	beq.n	80006f2 <__aeabi_fadd+0x21a>
 80006f0:	e75e      	b.n	80005b0 <__aeabi_fadd+0xd8>
 80006f2:	2400      	movs	r4, #0
 80006f4:	2000      	movs	r0, #0
 80006f6:	2600      	movs	r6, #0
 80006f8:	e775      	b.n	80005e6 <__aeabi_fadd+0x10e>
 80006fa:	2bff      	cmp	r3, #255	; 0xff
 80006fc:	d0bb      	beq.n	8000676 <__aeabi_fadd+0x19e>
 80006fe:	2380      	movs	r3, #128	; 0x80
 8000700:	04db      	lsls	r3, r3, #19
 8000702:	431f      	orrs	r7, r3
 8000704:	2a1b      	cmp	r2, #27
 8000706:	dd47      	ble.n	8000798 <__aeabi_fadd+0x2c0>
 8000708:	2301      	movs	r3, #1
 800070a:	4662      	mov	r2, ip
 800070c:	000c      	movs	r4, r1
 800070e:	464d      	mov	r5, r9
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	e749      	b.n	80005a8 <__aeabi_fadd+0xd0>
 8000714:	0005      	movs	r5, r0
 8000716:	e79e      	b.n	8000656 <__aeabi_fadd+0x17e>
 8000718:	4661      	mov	r1, ip
 800071a:	2320      	movs	r3, #32
 800071c:	40d1      	lsrs	r1, r2
 800071e:	1a9b      	subs	r3, r3, r2
 8000720:	4662      	mov	r2, ip
 8000722:	409a      	lsls	r2, r3
 8000724:	0013      	movs	r3, r2
 8000726:	1e5a      	subs	r2, r3, #1
 8000728:	4193      	sbcs	r3, r2
 800072a:	430b      	orrs	r3, r1
 800072c:	e722      	b.n	8000574 <__aeabi_fadd+0x9c>
 800072e:	2d00      	cmp	r5, #0
 8000730:	d146      	bne.n	80007c0 <__aeabi_fadd+0x2e8>
 8000732:	2f00      	cmp	r7, #0
 8000734:	d062      	beq.n	80007fc <__aeabi_fadd+0x324>
 8000736:	4663      	mov	r3, ip
 8000738:	2000      	movs	r0, #0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d100      	bne.n	8000740 <__aeabi_fadd+0x268>
 800073e:	e752      	b.n	80005e6 <__aeabi_fadd+0x10e>
 8000740:	003b      	movs	r3, r7
 8000742:	4463      	add	r3, ip
 8000744:	015a      	lsls	r2, r3, #5
 8000746:	d583      	bpl.n	8000650 <__aeabi_fadd+0x178>
 8000748:	4a32      	ldr	r2, [pc, #200]	; (8000814 <__aeabi_fadd+0x33c>)
 800074a:	3501      	adds	r5, #1
 800074c:	4013      	ands	r3, r2
 800074e:	e77f      	b.n	8000650 <__aeabi_fadd+0x178>
 8000750:	2f00      	cmp	r7, #0
 8000752:	d0c4      	beq.n	80006de <__aeabi_fadd+0x206>
 8000754:	1e53      	subs	r3, r2, #1
 8000756:	2a01      	cmp	r2, #1
 8000758:	d012      	beq.n	8000780 <__aeabi_fadd+0x2a8>
 800075a:	2aff      	cmp	r2, #255	; 0xff
 800075c:	d08c      	beq.n	8000678 <__aeabi_fadd+0x1a0>
 800075e:	001a      	movs	r2, r3
 8000760:	e79e      	b.n	80006a0 <__aeabi_fadd+0x1c8>
 8000762:	2f00      	cmp	r7, #0
 8000764:	d000      	beq.n	8000768 <__aeabi_fadd+0x290>
 8000766:	e77c      	b.n	8000662 <__aeabi_fadd+0x18a>
 8000768:	4663      	mov	r3, ip
 800076a:	2b00      	cmp	r3, #0
 800076c:	d183      	bne.n	8000676 <__aeabi_fadd+0x19e>
 800076e:	2680      	movs	r6, #128	; 0x80
 8000770:	2400      	movs	r4, #0
 8000772:	20ff      	movs	r0, #255	; 0xff
 8000774:	03f6      	lsls	r6, r6, #15
 8000776:	e736      	b.n	80005e6 <__aeabi_fadd+0x10e>
 8000778:	4663      	mov	r3, ip
 800077a:	000c      	movs	r4, r1
 800077c:	1bde      	subs	r6, r3, r7
 800077e:	e717      	b.n	80005b0 <__aeabi_fadd+0xd8>
 8000780:	003b      	movs	r3, r7
 8000782:	4463      	add	r3, ip
 8000784:	2501      	movs	r5, #1
 8000786:	015a      	lsls	r2, r3, #5
 8000788:	d400      	bmi.n	800078c <__aeabi_fadd+0x2b4>
 800078a:	e761      	b.n	8000650 <__aeabi_fadd+0x178>
 800078c:	2502      	movs	r5, #2
 800078e:	e6f7      	b.n	8000580 <__aeabi_fadd+0xa8>
 8000790:	4663      	mov	r3, ip
 8000792:	2501      	movs	r5, #1
 8000794:	1afb      	subs	r3, r7, r3
 8000796:	e707      	b.n	80005a8 <__aeabi_fadd+0xd0>
 8000798:	2320      	movs	r3, #32
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	0038      	movs	r0, r7
 800079e:	409f      	lsls	r7, r3
 80007a0:	003b      	movs	r3, r7
 80007a2:	40d0      	lsrs	r0, r2
 80007a4:	1e5a      	subs	r2, r3, #1
 80007a6:	4193      	sbcs	r3, r2
 80007a8:	4303      	orrs	r3, r0
 80007aa:	e7ae      	b.n	800070a <__aeabi_fadd+0x232>
 80007ac:	2320      	movs	r3, #32
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	0039      	movs	r1, r7
 80007b2:	409f      	lsls	r7, r3
 80007b4:	003b      	movs	r3, r7
 80007b6:	40d1      	lsrs	r1, r2
 80007b8:	1e5a      	subs	r2, r3, #1
 80007ba:	4193      	sbcs	r3, r2
 80007bc:	430b      	orrs	r3, r1
 80007be:	e773      	b.n	80006a8 <__aeabi_fadd+0x1d0>
 80007c0:	2f00      	cmp	r7, #0
 80007c2:	d100      	bne.n	80007c6 <__aeabi_fadd+0x2ee>
 80007c4:	e758      	b.n	8000678 <__aeabi_fadd+0x1a0>
 80007c6:	4662      	mov	r2, ip
 80007c8:	2a00      	cmp	r2, #0
 80007ca:	d100      	bne.n	80007ce <__aeabi_fadd+0x2f6>
 80007cc:	e755      	b.n	800067a <__aeabi_fadd+0x1a2>
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	03d2      	lsls	r2, r2, #15
 80007d2:	4213      	tst	r3, r2
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fadd+0x300>
 80007d6:	e750      	b.n	800067a <__aeabi_fadd+0x1a2>
 80007d8:	4641      	mov	r1, r8
 80007da:	4211      	tst	r1, r2
 80007dc:	d000      	beq.n	80007e0 <__aeabi_fadd+0x308>
 80007de:	e74c      	b.n	800067a <__aeabi_fadd+0x1a2>
 80007e0:	4643      	mov	r3, r8
 80007e2:	e74a      	b.n	800067a <__aeabi_fadd+0x1a2>
 80007e4:	4663      	mov	r3, ip
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d083      	beq.n	80006f2 <__aeabi_fadd+0x21a>
 80007ea:	000c      	movs	r4, r1
 80007ec:	4646      	mov	r6, r8
 80007ee:	2000      	movs	r0, #0
 80007f0:	e6f9      	b.n	80005e6 <__aeabi_fadd+0x10e>
 80007f2:	4663      	mov	r3, ip
 80007f4:	000c      	movs	r4, r1
 80007f6:	1bdb      	subs	r3, r3, r7
 80007f8:	3501      	adds	r5, #1
 80007fa:	e6d5      	b.n	80005a8 <__aeabi_fadd+0xd0>
 80007fc:	4646      	mov	r6, r8
 80007fe:	2000      	movs	r0, #0
 8000800:	e6f1      	b.n	80005e6 <__aeabi_fadd+0x10e>
 8000802:	2b00      	cmp	r3, #0
 8000804:	d000      	beq.n	8000808 <__aeabi_fadd+0x330>
 8000806:	e723      	b.n	8000650 <__aeabi_fadd+0x178>
 8000808:	2400      	movs	r4, #0
 800080a:	2600      	movs	r6, #0
 800080c:	e6eb      	b.n	80005e6 <__aeabi_fadd+0x10e>
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	7dffffff 	.word	0x7dffffff
 8000814:	fbffffff 	.word	0xfbffffff

08000818 <__aeabi_fdiv>:
 8000818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800081a:	464f      	mov	r7, r9
 800081c:	4646      	mov	r6, r8
 800081e:	46d6      	mov	lr, sl
 8000820:	0245      	lsls	r5, r0, #9
 8000822:	b5c0      	push	{r6, r7, lr}
 8000824:	0047      	lsls	r7, r0, #1
 8000826:	1c0c      	adds	r4, r1, #0
 8000828:	0a6d      	lsrs	r5, r5, #9
 800082a:	0e3f      	lsrs	r7, r7, #24
 800082c:	0fc6      	lsrs	r6, r0, #31
 800082e:	2f00      	cmp	r7, #0
 8000830:	d100      	bne.n	8000834 <__aeabi_fdiv+0x1c>
 8000832:	e06f      	b.n	8000914 <__aeabi_fdiv+0xfc>
 8000834:	2fff      	cmp	r7, #255	; 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fdiv+0x22>
 8000838:	e074      	b.n	8000924 <__aeabi_fdiv+0x10c>
 800083a:	2300      	movs	r3, #0
 800083c:	2280      	movs	r2, #128	; 0x80
 800083e:	4699      	mov	r9, r3
 8000840:	469a      	mov	sl, r3
 8000842:	00ed      	lsls	r5, r5, #3
 8000844:	04d2      	lsls	r2, r2, #19
 8000846:	4315      	orrs	r5, r2
 8000848:	3f7f      	subs	r7, #127	; 0x7f
 800084a:	0263      	lsls	r3, r4, #9
 800084c:	0a5b      	lsrs	r3, r3, #9
 800084e:	4698      	mov	r8, r3
 8000850:	0063      	lsls	r3, r4, #1
 8000852:	0e1b      	lsrs	r3, r3, #24
 8000854:	0fe4      	lsrs	r4, r4, #31
 8000856:	2b00      	cmp	r3, #0
 8000858:	d04d      	beq.n	80008f6 <__aeabi_fdiv+0xde>
 800085a:	2bff      	cmp	r3, #255	; 0xff
 800085c:	d045      	beq.n	80008ea <__aeabi_fdiv+0xd2>
 800085e:	4642      	mov	r2, r8
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	00d2      	lsls	r2, r2, #3
 8000864:	04c9      	lsls	r1, r1, #19
 8000866:	4311      	orrs	r1, r2
 8000868:	4688      	mov	r8, r1
 800086a:	2200      	movs	r2, #0
 800086c:	3b7f      	subs	r3, #127	; 0x7f
 800086e:	0031      	movs	r1, r6
 8000870:	1aff      	subs	r7, r7, r3
 8000872:	464b      	mov	r3, r9
 8000874:	4061      	eors	r1, r4
 8000876:	b2c9      	uxtb	r1, r1
 8000878:	2b0f      	cmp	r3, #15
 800087a:	d900      	bls.n	800087e <__aeabi_fdiv+0x66>
 800087c:	e0b8      	b.n	80009f0 <__aeabi_fdiv+0x1d8>
 800087e:	4870      	ldr	r0, [pc, #448]	; (8000a40 <__aeabi_fdiv+0x228>)
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	58c3      	ldr	r3, [r0, r3]
 8000884:	469f      	mov	pc, r3
 8000886:	2300      	movs	r3, #0
 8000888:	4698      	mov	r8, r3
 800088a:	0026      	movs	r6, r4
 800088c:	4645      	mov	r5, r8
 800088e:	4692      	mov	sl, r2
 8000890:	4653      	mov	r3, sl
 8000892:	2b02      	cmp	r3, #2
 8000894:	d100      	bne.n	8000898 <__aeabi_fdiv+0x80>
 8000896:	e08d      	b.n	80009b4 <__aeabi_fdiv+0x19c>
 8000898:	2b03      	cmp	r3, #3
 800089a:	d100      	bne.n	800089e <__aeabi_fdiv+0x86>
 800089c:	e0a1      	b.n	80009e2 <__aeabi_fdiv+0x1ca>
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d018      	beq.n	80008d4 <__aeabi_fdiv+0xbc>
 80008a2:	003b      	movs	r3, r7
 80008a4:	337f      	adds	r3, #127	; 0x7f
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	dd6d      	ble.n	8000986 <__aeabi_fdiv+0x16e>
 80008aa:	076a      	lsls	r2, r5, #29
 80008ac:	d004      	beq.n	80008b8 <__aeabi_fdiv+0xa0>
 80008ae:	220f      	movs	r2, #15
 80008b0:	402a      	ands	r2, r5
 80008b2:	2a04      	cmp	r2, #4
 80008b4:	d000      	beq.n	80008b8 <__aeabi_fdiv+0xa0>
 80008b6:	3504      	adds	r5, #4
 80008b8:	012a      	lsls	r2, r5, #4
 80008ba:	d503      	bpl.n	80008c4 <__aeabi_fdiv+0xac>
 80008bc:	4b61      	ldr	r3, [pc, #388]	; (8000a44 <__aeabi_fdiv+0x22c>)
 80008be:	401d      	ands	r5, r3
 80008c0:	003b      	movs	r3, r7
 80008c2:	3380      	adds	r3, #128	; 0x80
 80008c4:	2bfe      	cmp	r3, #254	; 0xfe
 80008c6:	dd00      	ble.n	80008ca <__aeabi_fdiv+0xb2>
 80008c8:	e074      	b.n	80009b4 <__aeabi_fdiv+0x19c>
 80008ca:	01aa      	lsls	r2, r5, #6
 80008cc:	0a52      	lsrs	r2, r2, #9
 80008ce:	b2d8      	uxtb	r0, r3
 80008d0:	e002      	b.n	80008d8 <__aeabi_fdiv+0xc0>
 80008d2:	000e      	movs	r6, r1
 80008d4:	2000      	movs	r0, #0
 80008d6:	2200      	movs	r2, #0
 80008d8:	05c0      	lsls	r0, r0, #23
 80008da:	07f6      	lsls	r6, r6, #31
 80008dc:	4310      	orrs	r0, r2
 80008de:	4330      	orrs	r0, r6
 80008e0:	bce0      	pop	{r5, r6, r7}
 80008e2:	46ba      	mov	sl, r7
 80008e4:	46b1      	mov	r9, r6
 80008e6:	46a8      	mov	r8, r5
 80008e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ea:	4643      	mov	r3, r8
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d13f      	bne.n	8000970 <__aeabi_fdiv+0x158>
 80008f0:	2202      	movs	r2, #2
 80008f2:	3fff      	subs	r7, #255	; 0xff
 80008f4:	e003      	b.n	80008fe <__aeabi_fdiv+0xe6>
 80008f6:	4643      	mov	r3, r8
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d12d      	bne.n	8000958 <__aeabi_fdiv+0x140>
 80008fc:	2201      	movs	r2, #1
 80008fe:	0031      	movs	r1, r6
 8000900:	464b      	mov	r3, r9
 8000902:	4061      	eors	r1, r4
 8000904:	b2c9      	uxtb	r1, r1
 8000906:	4313      	orrs	r3, r2
 8000908:	2b0f      	cmp	r3, #15
 800090a:	d838      	bhi.n	800097e <__aeabi_fdiv+0x166>
 800090c:	484e      	ldr	r0, [pc, #312]	; (8000a48 <__aeabi_fdiv+0x230>)
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	58c3      	ldr	r3, [r0, r3]
 8000912:	469f      	mov	pc, r3
 8000914:	2d00      	cmp	r5, #0
 8000916:	d113      	bne.n	8000940 <__aeabi_fdiv+0x128>
 8000918:	2304      	movs	r3, #4
 800091a:	4699      	mov	r9, r3
 800091c:	3b03      	subs	r3, #3
 800091e:	2700      	movs	r7, #0
 8000920:	469a      	mov	sl, r3
 8000922:	e792      	b.n	800084a <__aeabi_fdiv+0x32>
 8000924:	2d00      	cmp	r5, #0
 8000926:	d105      	bne.n	8000934 <__aeabi_fdiv+0x11c>
 8000928:	2308      	movs	r3, #8
 800092a:	4699      	mov	r9, r3
 800092c:	3b06      	subs	r3, #6
 800092e:	27ff      	movs	r7, #255	; 0xff
 8000930:	469a      	mov	sl, r3
 8000932:	e78a      	b.n	800084a <__aeabi_fdiv+0x32>
 8000934:	230c      	movs	r3, #12
 8000936:	4699      	mov	r9, r3
 8000938:	3b09      	subs	r3, #9
 800093a:	27ff      	movs	r7, #255	; 0xff
 800093c:	469a      	mov	sl, r3
 800093e:	e784      	b.n	800084a <__aeabi_fdiv+0x32>
 8000940:	0028      	movs	r0, r5
 8000942:	f002 faf5 	bl	8002f30 <__clzsi2>
 8000946:	2776      	movs	r7, #118	; 0x76
 8000948:	1f43      	subs	r3, r0, #5
 800094a:	409d      	lsls	r5, r3
 800094c:	2300      	movs	r3, #0
 800094e:	427f      	negs	r7, r7
 8000950:	4699      	mov	r9, r3
 8000952:	469a      	mov	sl, r3
 8000954:	1a3f      	subs	r7, r7, r0
 8000956:	e778      	b.n	800084a <__aeabi_fdiv+0x32>
 8000958:	4640      	mov	r0, r8
 800095a:	f002 fae9 	bl	8002f30 <__clzsi2>
 800095e:	4642      	mov	r2, r8
 8000960:	1f43      	subs	r3, r0, #5
 8000962:	409a      	lsls	r2, r3
 8000964:	2376      	movs	r3, #118	; 0x76
 8000966:	425b      	negs	r3, r3
 8000968:	4690      	mov	r8, r2
 800096a:	1a1b      	subs	r3, r3, r0
 800096c:	2200      	movs	r2, #0
 800096e:	e77e      	b.n	800086e <__aeabi_fdiv+0x56>
 8000970:	2303      	movs	r3, #3
 8000972:	464a      	mov	r2, r9
 8000974:	431a      	orrs	r2, r3
 8000976:	4691      	mov	r9, r2
 8000978:	33fc      	adds	r3, #252	; 0xfc
 800097a:	2203      	movs	r2, #3
 800097c:	e777      	b.n	800086e <__aeabi_fdiv+0x56>
 800097e:	000e      	movs	r6, r1
 8000980:	20ff      	movs	r0, #255	; 0xff
 8000982:	2200      	movs	r2, #0
 8000984:	e7a8      	b.n	80008d8 <__aeabi_fdiv+0xc0>
 8000986:	2201      	movs	r2, #1
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	2b1b      	cmp	r3, #27
 800098c:	dca2      	bgt.n	80008d4 <__aeabi_fdiv+0xbc>
 800098e:	379e      	adds	r7, #158	; 0x9e
 8000990:	002a      	movs	r2, r5
 8000992:	40bd      	lsls	r5, r7
 8000994:	40da      	lsrs	r2, r3
 8000996:	1e6b      	subs	r3, r5, #1
 8000998:	419d      	sbcs	r5, r3
 800099a:	4315      	orrs	r5, r2
 800099c:	076a      	lsls	r2, r5, #29
 800099e:	d004      	beq.n	80009aa <__aeabi_fdiv+0x192>
 80009a0:	220f      	movs	r2, #15
 80009a2:	402a      	ands	r2, r5
 80009a4:	2a04      	cmp	r2, #4
 80009a6:	d000      	beq.n	80009aa <__aeabi_fdiv+0x192>
 80009a8:	3504      	adds	r5, #4
 80009aa:	016a      	lsls	r2, r5, #5
 80009ac:	d544      	bpl.n	8000a38 <__aeabi_fdiv+0x220>
 80009ae:	2001      	movs	r0, #1
 80009b0:	2200      	movs	r2, #0
 80009b2:	e791      	b.n	80008d8 <__aeabi_fdiv+0xc0>
 80009b4:	20ff      	movs	r0, #255	; 0xff
 80009b6:	2200      	movs	r2, #0
 80009b8:	e78e      	b.n	80008d8 <__aeabi_fdiv+0xc0>
 80009ba:	2280      	movs	r2, #128	; 0x80
 80009bc:	2600      	movs	r6, #0
 80009be:	20ff      	movs	r0, #255	; 0xff
 80009c0:	03d2      	lsls	r2, r2, #15
 80009c2:	e789      	b.n	80008d8 <__aeabi_fdiv+0xc0>
 80009c4:	2300      	movs	r3, #0
 80009c6:	4698      	mov	r8, r3
 80009c8:	2280      	movs	r2, #128	; 0x80
 80009ca:	03d2      	lsls	r2, r2, #15
 80009cc:	4215      	tst	r5, r2
 80009ce:	d008      	beq.n	80009e2 <__aeabi_fdiv+0x1ca>
 80009d0:	4643      	mov	r3, r8
 80009d2:	4213      	tst	r3, r2
 80009d4:	d105      	bne.n	80009e2 <__aeabi_fdiv+0x1ca>
 80009d6:	431a      	orrs	r2, r3
 80009d8:	0252      	lsls	r2, r2, #9
 80009da:	0026      	movs	r6, r4
 80009dc:	20ff      	movs	r0, #255	; 0xff
 80009de:	0a52      	lsrs	r2, r2, #9
 80009e0:	e77a      	b.n	80008d8 <__aeabi_fdiv+0xc0>
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	03d2      	lsls	r2, r2, #15
 80009e6:	432a      	orrs	r2, r5
 80009e8:	0252      	lsls	r2, r2, #9
 80009ea:	20ff      	movs	r0, #255	; 0xff
 80009ec:	0a52      	lsrs	r2, r2, #9
 80009ee:	e773      	b.n	80008d8 <__aeabi_fdiv+0xc0>
 80009f0:	4642      	mov	r2, r8
 80009f2:	016b      	lsls	r3, r5, #5
 80009f4:	0155      	lsls	r5, r2, #5
 80009f6:	42ab      	cmp	r3, r5
 80009f8:	d21a      	bcs.n	8000a30 <__aeabi_fdiv+0x218>
 80009fa:	201b      	movs	r0, #27
 80009fc:	2200      	movs	r2, #0
 80009fe:	3f01      	subs	r7, #1
 8000a00:	2601      	movs	r6, #1
 8000a02:	001c      	movs	r4, r3
 8000a04:	0052      	lsls	r2, r2, #1
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	2c00      	cmp	r4, #0
 8000a0a:	db01      	blt.n	8000a10 <__aeabi_fdiv+0x1f8>
 8000a0c:	429d      	cmp	r5, r3
 8000a0e:	d801      	bhi.n	8000a14 <__aeabi_fdiv+0x1fc>
 8000a10:	1b5b      	subs	r3, r3, r5
 8000a12:	4332      	orrs	r2, r6
 8000a14:	3801      	subs	r0, #1
 8000a16:	2800      	cmp	r0, #0
 8000a18:	d1f3      	bne.n	8000a02 <__aeabi_fdiv+0x1ea>
 8000a1a:	1e58      	subs	r0, r3, #1
 8000a1c:	4183      	sbcs	r3, r0
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	001d      	movs	r5, r3
 8000a22:	003b      	movs	r3, r7
 8000a24:	337f      	adds	r3, #127	; 0x7f
 8000a26:	000e      	movs	r6, r1
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	dd00      	ble.n	8000a2e <__aeabi_fdiv+0x216>
 8000a2c:	e73d      	b.n	80008aa <__aeabi_fdiv+0x92>
 8000a2e:	e7aa      	b.n	8000986 <__aeabi_fdiv+0x16e>
 8000a30:	201a      	movs	r0, #26
 8000a32:	2201      	movs	r2, #1
 8000a34:	1b5b      	subs	r3, r3, r5
 8000a36:	e7e3      	b.n	8000a00 <__aeabi_fdiv+0x1e8>
 8000a38:	01aa      	lsls	r2, r5, #6
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	0a52      	lsrs	r2, r2, #9
 8000a3e:	e74b      	b.n	80008d8 <__aeabi_fdiv+0xc0>
 8000a40:	0800a0b8 	.word	0x0800a0b8
 8000a44:	f7ffffff 	.word	0xf7ffffff
 8000a48:	0800a0f8 	.word	0x0800a0f8

08000a4c <__aeabi_fmul>:
 8000a4c:	0243      	lsls	r3, r0, #9
 8000a4e:	0a5b      	lsrs	r3, r3, #9
 8000a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a52:	464f      	mov	r7, r9
 8000a54:	4646      	mov	r6, r8
 8000a56:	4699      	mov	r9, r3
 8000a58:	46d6      	mov	lr, sl
 8000a5a:	0fc3      	lsrs	r3, r0, #31
 8000a5c:	0045      	lsls	r5, r0, #1
 8000a5e:	4698      	mov	r8, r3
 8000a60:	b5c0      	push	{r6, r7, lr}
 8000a62:	464b      	mov	r3, r9
 8000a64:	1c0f      	adds	r7, r1, #0
 8000a66:	0e2d      	lsrs	r5, r5, #24
 8000a68:	d100      	bne.n	8000a6c <__aeabi_fmul+0x20>
 8000a6a:	e0cb      	b.n	8000c04 <__aeabi_fmul+0x1b8>
 8000a6c:	2dff      	cmp	r5, #255	; 0xff
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_fmul+0x26>
 8000a70:	e0cf      	b.n	8000c12 <__aeabi_fmul+0x1c6>
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	04d2      	lsls	r2, r2, #19
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	4691      	mov	r9, r2
 8000a7e:	2600      	movs	r6, #0
 8000a80:	469a      	mov	sl, r3
 8000a82:	3d7f      	subs	r5, #127	; 0x7f
 8000a84:	027c      	lsls	r4, r7, #9
 8000a86:	007b      	lsls	r3, r7, #1
 8000a88:	0a64      	lsrs	r4, r4, #9
 8000a8a:	0e1b      	lsrs	r3, r3, #24
 8000a8c:	0fff      	lsrs	r7, r7, #31
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fmul+0x48>
 8000a92:	e0a9      	b.n	8000be8 <__aeabi_fmul+0x19c>
 8000a94:	2bff      	cmp	r3, #255	; 0xff
 8000a96:	d011      	beq.n	8000abc <__aeabi_fmul+0x70>
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	00e4      	lsls	r4, r4, #3
 8000a9c:	04d2      	lsls	r2, r2, #19
 8000a9e:	4314      	orrs	r4, r2
 8000aa0:	4642      	mov	r2, r8
 8000aa2:	3b7f      	subs	r3, #127	; 0x7f
 8000aa4:	195b      	adds	r3, r3, r5
 8000aa6:	407a      	eors	r2, r7
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	1c5d      	adds	r5, r3, #1
 8000aae:	2e0a      	cmp	r6, #10
 8000ab0:	dd13      	ble.n	8000ada <__aeabi_fmul+0x8e>
 8000ab2:	003a      	movs	r2, r7
 8000ab4:	2e0b      	cmp	r6, #11
 8000ab6:	d047      	beq.n	8000b48 <__aeabi_fmul+0xfc>
 8000ab8:	4647      	mov	r7, r8
 8000aba:	e03f      	b.n	8000b3c <__aeabi_fmul+0xf0>
 8000abc:	002b      	movs	r3, r5
 8000abe:	33ff      	adds	r3, #255	; 0xff
 8000ac0:	2c00      	cmp	r4, #0
 8000ac2:	d11e      	bne.n	8000b02 <__aeabi_fmul+0xb6>
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	4316      	orrs	r6, r2
 8000ac8:	4642      	mov	r2, r8
 8000aca:	3501      	adds	r5, #1
 8000acc:	407a      	eors	r2, r7
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	35ff      	adds	r5, #255	; 0xff
 8000ad2:	2e0a      	cmp	r6, #10
 8000ad4:	dd00      	ble.n	8000ad8 <__aeabi_fmul+0x8c>
 8000ad6:	e0e4      	b.n	8000ca2 <__aeabi_fmul+0x256>
 8000ad8:	2002      	movs	r0, #2
 8000ada:	2e02      	cmp	r6, #2
 8000adc:	dc1c      	bgt.n	8000b18 <__aeabi_fmul+0xcc>
 8000ade:	3e01      	subs	r6, #1
 8000ae0:	2e01      	cmp	r6, #1
 8000ae2:	d842      	bhi.n	8000b6a <__aeabi_fmul+0x11e>
 8000ae4:	2802      	cmp	r0, #2
 8000ae6:	d03d      	beq.n	8000b64 <__aeabi_fmul+0x118>
 8000ae8:	2801      	cmp	r0, #1
 8000aea:	d166      	bne.n	8000bba <__aeabi_fmul+0x16e>
 8000aec:	2000      	movs	r0, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	05c0      	lsls	r0, r0, #23
 8000af2:	4308      	orrs	r0, r1
 8000af4:	07d2      	lsls	r2, r2, #31
 8000af6:	4310      	orrs	r0, r2
 8000af8:	bce0      	pop	{r5, r6, r7}
 8000afa:	46ba      	mov	sl, r7
 8000afc:	46b1      	mov	r9, r6
 8000afe:	46a8      	mov	r8, r5
 8000b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b02:	2203      	movs	r2, #3
 8000b04:	4316      	orrs	r6, r2
 8000b06:	4642      	mov	r2, r8
 8000b08:	3501      	adds	r5, #1
 8000b0a:	407a      	eors	r2, r7
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	35ff      	adds	r5, #255	; 0xff
 8000b10:	2e0a      	cmp	r6, #10
 8000b12:	dd00      	ble.n	8000b16 <__aeabi_fmul+0xca>
 8000b14:	e0e4      	b.n	8000ce0 <__aeabi_fmul+0x294>
 8000b16:	2003      	movs	r0, #3
 8000b18:	2101      	movs	r1, #1
 8000b1a:	40b1      	lsls	r1, r6
 8000b1c:	26a6      	movs	r6, #166	; 0xa6
 8000b1e:	00f6      	lsls	r6, r6, #3
 8000b20:	4231      	tst	r1, r6
 8000b22:	d10a      	bne.n	8000b3a <__aeabi_fmul+0xee>
 8000b24:	2690      	movs	r6, #144	; 0x90
 8000b26:	00b6      	lsls	r6, r6, #2
 8000b28:	4231      	tst	r1, r6
 8000b2a:	d116      	bne.n	8000b5a <__aeabi_fmul+0x10e>
 8000b2c:	3eb9      	subs	r6, #185	; 0xb9
 8000b2e:	3eff      	subs	r6, #255	; 0xff
 8000b30:	420e      	tst	r6, r1
 8000b32:	d01a      	beq.n	8000b6a <__aeabi_fmul+0x11e>
 8000b34:	46a1      	mov	r9, r4
 8000b36:	4682      	mov	sl, r0
 8000b38:	e000      	b.n	8000b3c <__aeabi_fmul+0xf0>
 8000b3a:	0017      	movs	r7, r2
 8000b3c:	4653      	mov	r3, sl
 8000b3e:	003a      	movs	r2, r7
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d00f      	beq.n	8000b64 <__aeabi_fmul+0x118>
 8000b44:	464c      	mov	r4, r9
 8000b46:	4650      	mov	r0, sl
 8000b48:	2803      	cmp	r0, #3
 8000b4a:	d1cd      	bne.n	8000ae8 <__aeabi_fmul+0x9c>
 8000b4c:	2180      	movs	r1, #128	; 0x80
 8000b4e:	03c9      	lsls	r1, r1, #15
 8000b50:	4321      	orrs	r1, r4
 8000b52:	0249      	lsls	r1, r1, #9
 8000b54:	20ff      	movs	r0, #255	; 0xff
 8000b56:	0a49      	lsrs	r1, r1, #9
 8000b58:	e7ca      	b.n	8000af0 <__aeabi_fmul+0xa4>
 8000b5a:	2180      	movs	r1, #128	; 0x80
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	20ff      	movs	r0, #255	; 0xff
 8000b60:	03c9      	lsls	r1, r1, #15
 8000b62:	e7c5      	b.n	8000af0 <__aeabi_fmul+0xa4>
 8000b64:	20ff      	movs	r0, #255	; 0xff
 8000b66:	2100      	movs	r1, #0
 8000b68:	e7c2      	b.n	8000af0 <__aeabi_fmul+0xa4>
 8000b6a:	0c20      	lsrs	r0, r4, #16
 8000b6c:	4649      	mov	r1, r9
 8000b6e:	0424      	lsls	r4, r4, #16
 8000b70:	0c24      	lsrs	r4, r4, #16
 8000b72:	0027      	movs	r7, r4
 8000b74:	0c0e      	lsrs	r6, r1, #16
 8000b76:	0409      	lsls	r1, r1, #16
 8000b78:	0c09      	lsrs	r1, r1, #16
 8000b7a:	4374      	muls	r4, r6
 8000b7c:	434f      	muls	r7, r1
 8000b7e:	4346      	muls	r6, r0
 8000b80:	4348      	muls	r0, r1
 8000b82:	0c39      	lsrs	r1, r7, #16
 8000b84:	1900      	adds	r0, r0, r4
 8000b86:	1809      	adds	r1, r1, r0
 8000b88:	428c      	cmp	r4, r1
 8000b8a:	d903      	bls.n	8000b94 <__aeabi_fmul+0x148>
 8000b8c:	2080      	movs	r0, #128	; 0x80
 8000b8e:	0240      	lsls	r0, r0, #9
 8000b90:	4684      	mov	ip, r0
 8000b92:	4466      	add	r6, ip
 8000b94:	043f      	lsls	r7, r7, #16
 8000b96:	0408      	lsls	r0, r1, #16
 8000b98:	0c3f      	lsrs	r7, r7, #16
 8000b9a:	19c0      	adds	r0, r0, r7
 8000b9c:	0184      	lsls	r4, r0, #6
 8000b9e:	1e67      	subs	r7, r4, #1
 8000ba0:	41bc      	sbcs	r4, r7
 8000ba2:	0c09      	lsrs	r1, r1, #16
 8000ba4:	0e80      	lsrs	r0, r0, #26
 8000ba6:	1989      	adds	r1, r1, r6
 8000ba8:	4304      	orrs	r4, r0
 8000baa:	0189      	lsls	r1, r1, #6
 8000bac:	430c      	orrs	r4, r1
 8000bae:	0109      	lsls	r1, r1, #4
 8000bb0:	d571      	bpl.n	8000c96 <__aeabi_fmul+0x24a>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	0861      	lsrs	r1, r4, #1
 8000bb6:	401c      	ands	r4, r3
 8000bb8:	430c      	orrs	r4, r1
 8000bba:	002b      	movs	r3, r5
 8000bbc:	337f      	adds	r3, #127	; 0x7f
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	dd51      	ble.n	8000c66 <__aeabi_fmul+0x21a>
 8000bc2:	0761      	lsls	r1, r4, #29
 8000bc4:	d004      	beq.n	8000bd0 <__aeabi_fmul+0x184>
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	4021      	ands	r1, r4
 8000bca:	2904      	cmp	r1, #4
 8000bcc:	d000      	beq.n	8000bd0 <__aeabi_fmul+0x184>
 8000bce:	3404      	adds	r4, #4
 8000bd0:	0121      	lsls	r1, r4, #4
 8000bd2:	d503      	bpl.n	8000bdc <__aeabi_fmul+0x190>
 8000bd4:	4b43      	ldr	r3, [pc, #268]	; (8000ce4 <__aeabi_fmul+0x298>)
 8000bd6:	401c      	ands	r4, r3
 8000bd8:	002b      	movs	r3, r5
 8000bda:	3380      	adds	r3, #128	; 0x80
 8000bdc:	2bfe      	cmp	r3, #254	; 0xfe
 8000bde:	dcc1      	bgt.n	8000b64 <__aeabi_fmul+0x118>
 8000be0:	01a1      	lsls	r1, r4, #6
 8000be2:	0a49      	lsrs	r1, r1, #9
 8000be4:	b2d8      	uxtb	r0, r3
 8000be6:	e783      	b.n	8000af0 <__aeabi_fmul+0xa4>
 8000be8:	2c00      	cmp	r4, #0
 8000bea:	d12c      	bne.n	8000c46 <__aeabi_fmul+0x1fa>
 8000bec:	2301      	movs	r3, #1
 8000bee:	4642      	mov	r2, r8
 8000bf0:	431e      	orrs	r6, r3
 8000bf2:	002b      	movs	r3, r5
 8000bf4:	407a      	eors	r2, r7
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	1c5d      	adds	r5, r3, #1
 8000bfc:	2e0a      	cmp	r6, #10
 8000bfe:	dd00      	ble.n	8000c02 <__aeabi_fmul+0x1b6>
 8000c00:	e757      	b.n	8000ab2 <__aeabi_fmul+0x66>
 8000c02:	e76a      	b.n	8000ada <__aeabi_fmul+0x8e>
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d110      	bne.n	8000c2a <__aeabi_fmul+0x1de>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	2604      	movs	r6, #4
 8000c0c:	2500      	movs	r5, #0
 8000c0e:	469a      	mov	sl, r3
 8000c10:	e738      	b.n	8000a84 <__aeabi_fmul+0x38>
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d104      	bne.n	8000c20 <__aeabi_fmul+0x1d4>
 8000c16:	2302      	movs	r3, #2
 8000c18:	2608      	movs	r6, #8
 8000c1a:	25ff      	movs	r5, #255	; 0xff
 8000c1c:	469a      	mov	sl, r3
 8000c1e:	e731      	b.n	8000a84 <__aeabi_fmul+0x38>
 8000c20:	2303      	movs	r3, #3
 8000c22:	260c      	movs	r6, #12
 8000c24:	25ff      	movs	r5, #255	; 0xff
 8000c26:	469a      	mov	sl, r3
 8000c28:	e72c      	b.n	8000a84 <__aeabi_fmul+0x38>
 8000c2a:	4648      	mov	r0, r9
 8000c2c:	f002 f980 	bl	8002f30 <__clzsi2>
 8000c30:	464a      	mov	r2, r9
 8000c32:	1f43      	subs	r3, r0, #5
 8000c34:	2576      	movs	r5, #118	; 0x76
 8000c36:	409a      	lsls	r2, r3
 8000c38:	2300      	movs	r3, #0
 8000c3a:	426d      	negs	r5, r5
 8000c3c:	4691      	mov	r9, r2
 8000c3e:	2600      	movs	r6, #0
 8000c40:	469a      	mov	sl, r3
 8000c42:	1a2d      	subs	r5, r5, r0
 8000c44:	e71e      	b.n	8000a84 <__aeabi_fmul+0x38>
 8000c46:	0020      	movs	r0, r4
 8000c48:	f002 f972 	bl	8002f30 <__clzsi2>
 8000c4c:	4642      	mov	r2, r8
 8000c4e:	1f43      	subs	r3, r0, #5
 8000c50:	409c      	lsls	r4, r3
 8000c52:	1a2b      	subs	r3, r5, r0
 8000c54:	3b76      	subs	r3, #118	; 0x76
 8000c56:	407a      	eors	r2, r7
 8000c58:	2000      	movs	r0, #0
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	1c5d      	adds	r5, r3, #1
 8000c5e:	2e0a      	cmp	r6, #10
 8000c60:	dd00      	ble.n	8000c64 <__aeabi_fmul+0x218>
 8000c62:	e726      	b.n	8000ab2 <__aeabi_fmul+0x66>
 8000c64:	e739      	b.n	8000ada <__aeabi_fmul+0x8e>
 8000c66:	2101      	movs	r1, #1
 8000c68:	1acb      	subs	r3, r1, r3
 8000c6a:	2b1b      	cmp	r3, #27
 8000c6c:	dd00      	ble.n	8000c70 <__aeabi_fmul+0x224>
 8000c6e:	e73d      	b.n	8000aec <__aeabi_fmul+0xa0>
 8000c70:	359e      	adds	r5, #158	; 0x9e
 8000c72:	0021      	movs	r1, r4
 8000c74:	40ac      	lsls	r4, r5
 8000c76:	40d9      	lsrs	r1, r3
 8000c78:	1e63      	subs	r3, r4, #1
 8000c7a:	419c      	sbcs	r4, r3
 8000c7c:	4321      	orrs	r1, r4
 8000c7e:	074b      	lsls	r3, r1, #29
 8000c80:	d004      	beq.n	8000c8c <__aeabi_fmul+0x240>
 8000c82:	230f      	movs	r3, #15
 8000c84:	400b      	ands	r3, r1
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	d000      	beq.n	8000c8c <__aeabi_fmul+0x240>
 8000c8a:	3104      	adds	r1, #4
 8000c8c:	014b      	lsls	r3, r1, #5
 8000c8e:	d504      	bpl.n	8000c9a <__aeabi_fmul+0x24e>
 8000c90:	2001      	movs	r0, #1
 8000c92:	2100      	movs	r1, #0
 8000c94:	e72c      	b.n	8000af0 <__aeabi_fmul+0xa4>
 8000c96:	001d      	movs	r5, r3
 8000c98:	e78f      	b.n	8000bba <__aeabi_fmul+0x16e>
 8000c9a:	0189      	lsls	r1, r1, #6
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	0a49      	lsrs	r1, r1, #9
 8000ca0:	e726      	b.n	8000af0 <__aeabi_fmul+0xa4>
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	2e0f      	cmp	r6, #15
 8000ca6:	d10c      	bne.n	8000cc2 <__aeabi_fmul+0x276>
 8000ca8:	2180      	movs	r1, #128	; 0x80
 8000caa:	464b      	mov	r3, r9
 8000cac:	03c9      	lsls	r1, r1, #15
 8000cae:	420b      	tst	r3, r1
 8000cb0:	d00d      	beq.n	8000cce <__aeabi_fmul+0x282>
 8000cb2:	420c      	tst	r4, r1
 8000cb4:	d10b      	bne.n	8000cce <__aeabi_fmul+0x282>
 8000cb6:	4321      	orrs	r1, r4
 8000cb8:	0249      	lsls	r1, r1, #9
 8000cba:	003a      	movs	r2, r7
 8000cbc:	20ff      	movs	r0, #255	; 0xff
 8000cbe:	0a49      	lsrs	r1, r1, #9
 8000cc0:	e716      	b.n	8000af0 <__aeabi_fmul+0xa4>
 8000cc2:	2e0b      	cmp	r6, #11
 8000cc4:	d000      	beq.n	8000cc8 <__aeabi_fmul+0x27c>
 8000cc6:	e6f7      	b.n	8000ab8 <__aeabi_fmul+0x6c>
 8000cc8:	46a1      	mov	r9, r4
 8000cca:	469a      	mov	sl, r3
 8000ccc:	e736      	b.n	8000b3c <__aeabi_fmul+0xf0>
 8000cce:	2180      	movs	r1, #128	; 0x80
 8000cd0:	464b      	mov	r3, r9
 8000cd2:	03c9      	lsls	r1, r1, #15
 8000cd4:	4319      	orrs	r1, r3
 8000cd6:	0249      	lsls	r1, r1, #9
 8000cd8:	4642      	mov	r2, r8
 8000cda:	20ff      	movs	r0, #255	; 0xff
 8000cdc:	0a49      	lsrs	r1, r1, #9
 8000cde:	e707      	b.n	8000af0 <__aeabi_fmul+0xa4>
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e7df      	b.n	8000ca4 <__aeabi_fmul+0x258>
 8000ce4:	f7ffffff 	.word	0xf7ffffff

08000ce8 <__aeabi_fsub>:
 8000ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cea:	46c6      	mov	lr, r8
 8000cec:	0243      	lsls	r3, r0, #9
 8000cee:	0a5b      	lsrs	r3, r3, #9
 8000cf0:	0045      	lsls	r5, r0, #1
 8000cf2:	00da      	lsls	r2, r3, #3
 8000cf4:	0fc4      	lsrs	r4, r0, #31
 8000cf6:	0248      	lsls	r0, r1, #9
 8000cf8:	004f      	lsls	r7, r1, #1
 8000cfa:	4694      	mov	ip, r2
 8000cfc:	0a42      	lsrs	r2, r0, #9
 8000cfe:	001e      	movs	r6, r3
 8000d00:	4690      	mov	r8, r2
 8000d02:	b500      	push	{lr}
 8000d04:	0e2d      	lsrs	r5, r5, #24
 8000d06:	0e3f      	lsrs	r7, r7, #24
 8000d08:	0fc9      	lsrs	r1, r1, #31
 8000d0a:	0980      	lsrs	r0, r0, #6
 8000d0c:	2fff      	cmp	r7, #255	; 0xff
 8000d0e:	d059      	beq.n	8000dc4 <__aeabi_fsub+0xdc>
 8000d10:	2201      	movs	r2, #1
 8000d12:	4051      	eors	r1, r2
 8000d14:	428c      	cmp	r4, r1
 8000d16:	d039      	beq.n	8000d8c <__aeabi_fsub+0xa4>
 8000d18:	1bea      	subs	r2, r5, r7
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	dd58      	ble.n	8000dd0 <__aeabi_fsub+0xe8>
 8000d1e:	2f00      	cmp	r7, #0
 8000d20:	d068      	beq.n	8000df4 <__aeabi_fsub+0x10c>
 8000d22:	2dff      	cmp	r5, #255	; 0xff
 8000d24:	d100      	bne.n	8000d28 <__aeabi_fsub+0x40>
 8000d26:	e0d1      	b.n	8000ecc <__aeabi_fsub+0x1e4>
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	04db      	lsls	r3, r3, #19
 8000d2c:	4318      	orrs	r0, r3
 8000d2e:	2a1b      	cmp	r2, #27
 8000d30:	dc00      	bgt.n	8000d34 <__aeabi_fsub+0x4c>
 8000d32:	e0e3      	b.n	8000efc <__aeabi_fsub+0x214>
 8000d34:	2301      	movs	r3, #1
 8000d36:	4662      	mov	r2, ip
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	015a      	lsls	r2, r3, #5
 8000d3c:	d400      	bmi.n	8000d40 <__aeabi_fsub+0x58>
 8000d3e:	e0ac      	b.n	8000e9a <__aeabi_fsub+0x1b2>
 8000d40:	019b      	lsls	r3, r3, #6
 8000d42:	099e      	lsrs	r6, r3, #6
 8000d44:	0030      	movs	r0, r6
 8000d46:	f002 f8f3 	bl	8002f30 <__clzsi2>
 8000d4a:	0033      	movs	r3, r6
 8000d4c:	3805      	subs	r0, #5
 8000d4e:	4083      	lsls	r3, r0
 8000d50:	4285      	cmp	r5, r0
 8000d52:	dc00      	bgt.n	8000d56 <__aeabi_fsub+0x6e>
 8000d54:	e0c6      	b.n	8000ee4 <__aeabi_fsub+0x1fc>
 8000d56:	4ab2      	ldr	r2, [pc, #712]	; (8001020 <__aeabi_fsub+0x338>)
 8000d58:	1a2d      	subs	r5, r5, r0
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	075a      	lsls	r2, r3, #29
 8000d5e:	d004      	beq.n	8000d6a <__aeabi_fsub+0x82>
 8000d60:	220f      	movs	r2, #15
 8000d62:	401a      	ands	r2, r3
 8000d64:	2a04      	cmp	r2, #4
 8000d66:	d000      	beq.n	8000d6a <__aeabi_fsub+0x82>
 8000d68:	3304      	adds	r3, #4
 8000d6a:	015a      	lsls	r2, r3, #5
 8000d6c:	d400      	bmi.n	8000d70 <__aeabi_fsub+0x88>
 8000d6e:	e097      	b.n	8000ea0 <__aeabi_fsub+0x1b8>
 8000d70:	1c6a      	adds	r2, r5, #1
 8000d72:	2dfe      	cmp	r5, #254	; 0xfe
 8000d74:	d100      	bne.n	8000d78 <__aeabi_fsub+0x90>
 8000d76:	e084      	b.n	8000e82 <__aeabi_fsub+0x19a>
 8000d78:	019b      	lsls	r3, r3, #6
 8000d7a:	0a5e      	lsrs	r6, r3, #9
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	05d0      	lsls	r0, r2, #23
 8000d80:	4330      	orrs	r0, r6
 8000d82:	07e4      	lsls	r4, r4, #31
 8000d84:	4320      	orrs	r0, r4
 8000d86:	bc80      	pop	{r7}
 8000d88:	46b8      	mov	r8, r7
 8000d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d8c:	1bea      	subs	r2, r5, r7
 8000d8e:	2a00      	cmp	r2, #0
 8000d90:	dd41      	ble.n	8000e16 <__aeabi_fsub+0x12e>
 8000d92:	2f00      	cmp	r7, #0
 8000d94:	d06b      	beq.n	8000e6e <__aeabi_fsub+0x186>
 8000d96:	2dff      	cmp	r5, #255	; 0xff
 8000d98:	d100      	bne.n	8000d9c <__aeabi_fsub+0xb4>
 8000d9a:	e097      	b.n	8000ecc <__aeabi_fsub+0x1e4>
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	04db      	lsls	r3, r3, #19
 8000da0:	4318      	orrs	r0, r3
 8000da2:	2a1b      	cmp	r2, #27
 8000da4:	dc00      	bgt.n	8000da8 <__aeabi_fsub+0xc0>
 8000da6:	e0cc      	b.n	8000f42 <__aeabi_fsub+0x25a>
 8000da8:	2301      	movs	r3, #1
 8000daa:	4463      	add	r3, ip
 8000dac:	015a      	lsls	r2, r3, #5
 8000dae:	d574      	bpl.n	8000e9a <__aeabi_fsub+0x1b2>
 8000db0:	3501      	adds	r5, #1
 8000db2:	2dff      	cmp	r5, #255	; 0xff
 8000db4:	d065      	beq.n	8000e82 <__aeabi_fsub+0x19a>
 8000db6:	2201      	movs	r2, #1
 8000db8:	499a      	ldr	r1, [pc, #616]	; (8001024 <__aeabi_fsub+0x33c>)
 8000dba:	401a      	ands	r2, r3
 8000dbc:	085b      	lsrs	r3, r3, #1
 8000dbe:	400b      	ands	r3, r1
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	e7cb      	b.n	8000d5c <__aeabi_fsub+0x74>
 8000dc4:	2800      	cmp	r0, #0
 8000dc6:	d01f      	beq.n	8000e08 <__aeabi_fsub+0x120>
 8000dc8:	428c      	cmp	r4, r1
 8000dca:	d022      	beq.n	8000e12 <__aeabi_fsub+0x12a>
 8000dcc:	002a      	movs	r2, r5
 8000dce:	3aff      	subs	r2, #255	; 0xff
 8000dd0:	2a00      	cmp	r2, #0
 8000dd2:	d035      	beq.n	8000e40 <__aeabi_fsub+0x158>
 8000dd4:	1b7a      	subs	r2, r7, r5
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d000      	beq.n	8000ddc <__aeabi_fsub+0xf4>
 8000dda:	e099      	b.n	8000f10 <__aeabi_fsub+0x228>
 8000ddc:	4663      	mov	r3, ip
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_fsub+0xfc>
 8000de2:	e0dd      	b.n	8000fa0 <__aeabi_fsub+0x2b8>
 8000de4:	1e53      	subs	r3, r2, #1
 8000de6:	2a01      	cmp	r2, #1
 8000de8:	d100      	bne.n	8000dec <__aeabi_fsub+0x104>
 8000dea:	e105      	b.n	8000ff8 <__aeabi_fsub+0x310>
 8000dec:	2aff      	cmp	r2, #255	; 0xff
 8000dee:	d06b      	beq.n	8000ec8 <__aeabi_fsub+0x1e0>
 8000df0:	001a      	movs	r2, r3
 8000df2:	e094      	b.n	8000f1e <__aeabi_fsub+0x236>
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d073      	beq.n	8000ee0 <__aeabi_fsub+0x1f8>
 8000df8:	1e51      	subs	r1, r2, #1
 8000dfa:	2a01      	cmp	r2, #1
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_fsub+0x118>
 8000dfe:	e0df      	b.n	8000fc0 <__aeabi_fsub+0x2d8>
 8000e00:	2aff      	cmp	r2, #255	; 0xff
 8000e02:	d063      	beq.n	8000ecc <__aeabi_fsub+0x1e4>
 8000e04:	000a      	movs	r2, r1
 8000e06:	e792      	b.n	8000d2e <__aeabi_fsub+0x46>
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4051      	eors	r1, r2
 8000e0c:	42a1      	cmp	r1, r4
 8000e0e:	d000      	beq.n	8000e12 <__aeabi_fsub+0x12a>
 8000e10:	e782      	b.n	8000d18 <__aeabi_fsub+0x30>
 8000e12:	002a      	movs	r2, r5
 8000e14:	3aff      	subs	r2, #255	; 0xff
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	d036      	beq.n	8000e88 <__aeabi_fsub+0x1a0>
 8000e1a:	1b7a      	subs	r2, r7, r5
 8000e1c:	2d00      	cmp	r5, #0
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_fsub+0x13a>
 8000e20:	e0aa      	b.n	8000f78 <__aeabi_fsub+0x290>
 8000e22:	2fff      	cmp	r7, #255	; 0xff
 8000e24:	d100      	bne.n	8000e28 <__aeabi_fsub+0x140>
 8000e26:	e0da      	b.n	8000fde <__aeabi_fsub+0x2f6>
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	4661      	mov	r1, ip
 8000e2c:	04db      	lsls	r3, r3, #19
 8000e2e:	4319      	orrs	r1, r3
 8000e30:	468c      	mov	ip, r1
 8000e32:	2a1b      	cmp	r2, #27
 8000e34:	dc00      	bgt.n	8000e38 <__aeabi_fsub+0x150>
 8000e36:	e0d4      	b.n	8000fe2 <__aeabi_fsub+0x2fa>
 8000e38:	2301      	movs	r3, #1
 8000e3a:	003d      	movs	r5, r7
 8000e3c:	181b      	adds	r3, r3, r0
 8000e3e:	e7b5      	b.n	8000dac <__aeabi_fsub+0xc4>
 8000e40:	27fe      	movs	r7, #254	; 0xfe
 8000e42:	1c6a      	adds	r2, r5, #1
 8000e44:	4217      	tst	r7, r2
 8000e46:	d171      	bne.n	8000f2c <__aeabi_fsub+0x244>
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d000      	beq.n	8000e4e <__aeabi_fsub+0x166>
 8000e4c:	e09e      	b.n	8000f8c <__aeabi_fsub+0x2a4>
 8000e4e:	4663      	mov	r3, ip
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d100      	bne.n	8000e56 <__aeabi_fsub+0x16e>
 8000e54:	e0d5      	b.n	8001002 <__aeabi_fsub+0x31a>
 8000e56:	2200      	movs	r2, #0
 8000e58:	2800      	cmp	r0, #0
 8000e5a:	d100      	bne.n	8000e5e <__aeabi_fsub+0x176>
 8000e5c:	e78f      	b.n	8000d7e <__aeabi_fsub+0x96>
 8000e5e:	1a1b      	subs	r3, r3, r0
 8000e60:	015e      	lsls	r6, r3, #5
 8000e62:	d400      	bmi.n	8000e66 <__aeabi_fsub+0x17e>
 8000e64:	e0d6      	b.n	8001014 <__aeabi_fsub+0x32c>
 8000e66:	4663      	mov	r3, ip
 8000e68:	000c      	movs	r4, r1
 8000e6a:	1ac3      	subs	r3, r0, r3
 8000e6c:	e776      	b.n	8000d5c <__aeabi_fsub+0x74>
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	d036      	beq.n	8000ee0 <__aeabi_fsub+0x1f8>
 8000e72:	1e51      	subs	r1, r2, #1
 8000e74:	2a01      	cmp	r2, #1
 8000e76:	d100      	bne.n	8000e7a <__aeabi_fsub+0x192>
 8000e78:	e09a      	b.n	8000fb0 <__aeabi_fsub+0x2c8>
 8000e7a:	2aff      	cmp	r2, #255	; 0xff
 8000e7c:	d026      	beq.n	8000ecc <__aeabi_fsub+0x1e4>
 8000e7e:	000a      	movs	r2, r1
 8000e80:	e78f      	b.n	8000da2 <__aeabi_fsub+0xba>
 8000e82:	22ff      	movs	r2, #255	; 0xff
 8000e84:	2600      	movs	r6, #0
 8000e86:	e77a      	b.n	8000d7e <__aeabi_fsub+0x96>
 8000e88:	27fe      	movs	r7, #254	; 0xfe
 8000e8a:	1c6a      	adds	r2, r5, #1
 8000e8c:	4217      	tst	r7, r2
 8000e8e:	d062      	beq.n	8000f56 <__aeabi_fsub+0x26e>
 8000e90:	2aff      	cmp	r2, #255	; 0xff
 8000e92:	d0f6      	beq.n	8000e82 <__aeabi_fsub+0x19a>
 8000e94:	0015      	movs	r5, r2
 8000e96:	4460      	add	r0, ip
 8000e98:	0843      	lsrs	r3, r0, #1
 8000e9a:	075a      	lsls	r2, r3, #29
 8000e9c:	d000      	beq.n	8000ea0 <__aeabi_fsub+0x1b8>
 8000e9e:	e75f      	b.n	8000d60 <__aeabi_fsub+0x78>
 8000ea0:	08db      	lsrs	r3, r3, #3
 8000ea2:	2dff      	cmp	r5, #255	; 0xff
 8000ea4:	d012      	beq.n	8000ecc <__aeabi_fsub+0x1e4>
 8000ea6:	025b      	lsls	r3, r3, #9
 8000ea8:	0a5e      	lsrs	r6, r3, #9
 8000eaa:	b2ea      	uxtb	r2, r5
 8000eac:	e767      	b.n	8000d7e <__aeabi_fsub+0x96>
 8000eae:	4662      	mov	r2, ip
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_fsub+0x1ce>
 8000eb4:	e093      	b.n	8000fde <__aeabi_fsub+0x2f6>
 8000eb6:	2800      	cmp	r0, #0
 8000eb8:	d008      	beq.n	8000ecc <__aeabi_fsub+0x1e4>
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	03d2      	lsls	r2, r2, #15
 8000ebe:	4213      	tst	r3, r2
 8000ec0:	d004      	beq.n	8000ecc <__aeabi_fsub+0x1e4>
 8000ec2:	4640      	mov	r0, r8
 8000ec4:	4210      	tst	r0, r2
 8000ec6:	d101      	bne.n	8000ecc <__aeabi_fsub+0x1e4>
 8000ec8:	000c      	movs	r4, r1
 8000eca:	4643      	mov	r3, r8
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0d8      	beq.n	8000e82 <__aeabi_fsub+0x19a>
 8000ed0:	2680      	movs	r6, #128	; 0x80
 8000ed2:	03f6      	lsls	r6, r6, #15
 8000ed4:	431e      	orrs	r6, r3
 8000ed6:	0276      	lsls	r6, r6, #9
 8000ed8:	22ff      	movs	r2, #255	; 0xff
 8000eda:	0a76      	lsrs	r6, r6, #9
 8000edc:	e74f      	b.n	8000d7e <__aeabi_fsub+0x96>
 8000ede:	4643      	mov	r3, r8
 8000ee0:	0015      	movs	r5, r2
 8000ee2:	e7de      	b.n	8000ea2 <__aeabi_fsub+0x1ba>
 8000ee4:	2220      	movs	r2, #32
 8000ee6:	1b40      	subs	r0, r0, r5
 8000ee8:	3001      	adds	r0, #1
 8000eea:	1a12      	subs	r2, r2, r0
 8000eec:	0019      	movs	r1, r3
 8000eee:	4093      	lsls	r3, r2
 8000ef0:	40c1      	lsrs	r1, r0
 8000ef2:	1e5a      	subs	r2, r3, #1
 8000ef4:	4193      	sbcs	r3, r2
 8000ef6:	2500      	movs	r5, #0
 8000ef8:	430b      	orrs	r3, r1
 8000efa:	e72f      	b.n	8000d5c <__aeabi_fsub+0x74>
 8000efc:	2320      	movs	r3, #32
 8000efe:	1a9b      	subs	r3, r3, r2
 8000f00:	0001      	movs	r1, r0
 8000f02:	4098      	lsls	r0, r3
 8000f04:	0003      	movs	r3, r0
 8000f06:	40d1      	lsrs	r1, r2
 8000f08:	1e5a      	subs	r2, r3, #1
 8000f0a:	4193      	sbcs	r3, r2
 8000f0c:	430b      	orrs	r3, r1
 8000f0e:	e712      	b.n	8000d36 <__aeabi_fsub+0x4e>
 8000f10:	2fff      	cmp	r7, #255	; 0xff
 8000f12:	d0d9      	beq.n	8000ec8 <__aeabi_fsub+0x1e0>
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	4664      	mov	r4, ip
 8000f18:	04db      	lsls	r3, r3, #19
 8000f1a:	431c      	orrs	r4, r3
 8000f1c:	46a4      	mov	ip, r4
 8000f1e:	2a1b      	cmp	r2, #27
 8000f20:	dd52      	ble.n	8000fc8 <__aeabi_fsub+0x2e0>
 8000f22:	2301      	movs	r3, #1
 8000f24:	000c      	movs	r4, r1
 8000f26:	003d      	movs	r5, r7
 8000f28:	1ac3      	subs	r3, r0, r3
 8000f2a:	e706      	b.n	8000d3a <__aeabi_fsub+0x52>
 8000f2c:	4663      	mov	r3, ip
 8000f2e:	1a1e      	subs	r6, r3, r0
 8000f30:	0173      	lsls	r3, r6, #5
 8000f32:	d439      	bmi.n	8000fa8 <__aeabi_fsub+0x2c0>
 8000f34:	2e00      	cmp	r6, #0
 8000f36:	d000      	beq.n	8000f3a <__aeabi_fsub+0x252>
 8000f38:	e704      	b.n	8000d44 <__aeabi_fsub+0x5c>
 8000f3a:	2400      	movs	r4, #0
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2600      	movs	r6, #0
 8000f40:	e71d      	b.n	8000d7e <__aeabi_fsub+0x96>
 8000f42:	2320      	movs	r3, #32
 8000f44:	1a9b      	subs	r3, r3, r2
 8000f46:	0001      	movs	r1, r0
 8000f48:	4098      	lsls	r0, r3
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	40d1      	lsrs	r1, r2
 8000f4e:	1e5a      	subs	r2, r3, #1
 8000f50:	4193      	sbcs	r3, r2
 8000f52:	430b      	orrs	r3, r1
 8000f54:	e729      	b.n	8000daa <__aeabi_fsub+0xc2>
 8000f56:	2d00      	cmp	r5, #0
 8000f58:	d1a9      	bne.n	8000eae <__aeabi_fsub+0x1c6>
 8000f5a:	4663      	mov	r3, ip
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d056      	beq.n	800100e <__aeabi_fsub+0x326>
 8000f60:	2200      	movs	r2, #0
 8000f62:	2800      	cmp	r0, #0
 8000f64:	d100      	bne.n	8000f68 <__aeabi_fsub+0x280>
 8000f66:	e70a      	b.n	8000d7e <__aeabi_fsub+0x96>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	4463      	add	r3, ip
 8000f6c:	015a      	lsls	r2, r3, #5
 8000f6e:	d594      	bpl.n	8000e9a <__aeabi_fsub+0x1b2>
 8000f70:	4a2b      	ldr	r2, [pc, #172]	; (8001020 <__aeabi_fsub+0x338>)
 8000f72:	3501      	adds	r5, #1
 8000f74:	4013      	ands	r3, r2
 8000f76:	e790      	b.n	8000e9a <__aeabi_fsub+0x1b2>
 8000f78:	4663      	mov	r3, ip
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0af      	beq.n	8000ede <__aeabi_fsub+0x1f6>
 8000f7e:	1e53      	subs	r3, r2, #1
 8000f80:	2a01      	cmp	r2, #1
 8000f82:	d015      	beq.n	8000fb0 <__aeabi_fsub+0x2c8>
 8000f84:	2aff      	cmp	r2, #255	; 0xff
 8000f86:	d02a      	beq.n	8000fde <__aeabi_fsub+0x2f6>
 8000f88:	001a      	movs	r2, r3
 8000f8a:	e752      	b.n	8000e32 <__aeabi_fsub+0x14a>
 8000f8c:	4662      	mov	r2, ip
 8000f8e:	2a00      	cmp	r2, #0
 8000f90:	d191      	bne.n	8000eb6 <__aeabi_fsub+0x1ce>
 8000f92:	2800      	cmp	r0, #0
 8000f94:	d198      	bne.n	8000ec8 <__aeabi_fsub+0x1e0>
 8000f96:	2680      	movs	r6, #128	; 0x80
 8000f98:	2400      	movs	r4, #0
 8000f9a:	22ff      	movs	r2, #255	; 0xff
 8000f9c:	03f6      	lsls	r6, r6, #15
 8000f9e:	e6ee      	b.n	8000d7e <__aeabi_fsub+0x96>
 8000fa0:	000c      	movs	r4, r1
 8000fa2:	4643      	mov	r3, r8
 8000fa4:	0015      	movs	r5, r2
 8000fa6:	e77c      	b.n	8000ea2 <__aeabi_fsub+0x1ba>
 8000fa8:	4663      	mov	r3, ip
 8000faa:	000c      	movs	r4, r1
 8000fac:	1ac6      	subs	r6, r0, r3
 8000fae:	e6c9      	b.n	8000d44 <__aeabi_fsub+0x5c>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	4463      	add	r3, ip
 8000fb4:	2501      	movs	r5, #1
 8000fb6:	015a      	lsls	r2, r3, #5
 8000fb8:	d400      	bmi.n	8000fbc <__aeabi_fsub+0x2d4>
 8000fba:	e76e      	b.n	8000e9a <__aeabi_fsub+0x1b2>
 8000fbc:	2502      	movs	r5, #2
 8000fbe:	e6fa      	b.n	8000db6 <__aeabi_fsub+0xce>
 8000fc0:	4663      	mov	r3, ip
 8000fc2:	2501      	movs	r5, #1
 8000fc4:	1a1b      	subs	r3, r3, r0
 8000fc6:	e6b8      	b.n	8000d3a <__aeabi_fsub+0x52>
 8000fc8:	4664      	mov	r4, ip
 8000fca:	2320      	movs	r3, #32
 8000fcc:	40d4      	lsrs	r4, r2
 8000fce:	1a9b      	subs	r3, r3, r2
 8000fd0:	4662      	mov	r2, ip
 8000fd2:	409a      	lsls	r2, r3
 8000fd4:	0013      	movs	r3, r2
 8000fd6:	1e5a      	subs	r2, r3, #1
 8000fd8:	4193      	sbcs	r3, r2
 8000fda:	4323      	orrs	r3, r4
 8000fdc:	e7a2      	b.n	8000f24 <__aeabi_fsub+0x23c>
 8000fde:	4643      	mov	r3, r8
 8000fe0:	e774      	b.n	8000ecc <__aeabi_fsub+0x1e4>
 8000fe2:	4661      	mov	r1, ip
 8000fe4:	2320      	movs	r3, #32
 8000fe6:	40d1      	lsrs	r1, r2
 8000fe8:	1a9b      	subs	r3, r3, r2
 8000fea:	4662      	mov	r2, ip
 8000fec:	409a      	lsls	r2, r3
 8000fee:	0013      	movs	r3, r2
 8000ff0:	1e5a      	subs	r2, r3, #1
 8000ff2:	4193      	sbcs	r3, r2
 8000ff4:	430b      	orrs	r3, r1
 8000ff6:	e720      	b.n	8000e3a <__aeabi_fsub+0x152>
 8000ff8:	4663      	mov	r3, ip
 8000ffa:	000c      	movs	r4, r1
 8000ffc:	2501      	movs	r5, #1
 8000ffe:	1ac3      	subs	r3, r0, r3
 8001000:	e69b      	b.n	8000d3a <__aeabi_fsub+0x52>
 8001002:	2800      	cmp	r0, #0
 8001004:	d099      	beq.n	8000f3a <__aeabi_fsub+0x252>
 8001006:	000c      	movs	r4, r1
 8001008:	4646      	mov	r6, r8
 800100a:	2200      	movs	r2, #0
 800100c:	e6b7      	b.n	8000d7e <__aeabi_fsub+0x96>
 800100e:	4646      	mov	r6, r8
 8001010:	2200      	movs	r2, #0
 8001012:	e6b4      	b.n	8000d7e <__aeabi_fsub+0x96>
 8001014:	2b00      	cmp	r3, #0
 8001016:	d000      	beq.n	800101a <__aeabi_fsub+0x332>
 8001018:	e73f      	b.n	8000e9a <__aeabi_fsub+0x1b2>
 800101a:	2400      	movs	r4, #0
 800101c:	2600      	movs	r6, #0
 800101e:	e6ae      	b.n	8000d7e <__aeabi_fsub+0x96>
 8001020:	fbffffff 	.word	0xfbffffff
 8001024:	7dffffff 	.word	0x7dffffff

08001028 <__aeabi_f2iz>:
 8001028:	0241      	lsls	r1, r0, #9
 800102a:	0042      	lsls	r2, r0, #1
 800102c:	0fc3      	lsrs	r3, r0, #31
 800102e:	0a49      	lsrs	r1, r1, #9
 8001030:	2000      	movs	r0, #0
 8001032:	0e12      	lsrs	r2, r2, #24
 8001034:	2a7e      	cmp	r2, #126	; 0x7e
 8001036:	dd03      	ble.n	8001040 <__aeabi_f2iz+0x18>
 8001038:	2a9d      	cmp	r2, #157	; 0x9d
 800103a:	dd02      	ble.n	8001042 <__aeabi_f2iz+0x1a>
 800103c:	4a09      	ldr	r2, [pc, #36]	; (8001064 <__aeabi_f2iz+0x3c>)
 800103e:	1898      	adds	r0, r3, r2
 8001040:	4770      	bx	lr
 8001042:	2080      	movs	r0, #128	; 0x80
 8001044:	0400      	lsls	r0, r0, #16
 8001046:	4301      	orrs	r1, r0
 8001048:	2a95      	cmp	r2, #149	; 0x95
 800104a:	dc07      	bgt.n	800105c <__aeabi_f2iz+0x34>
 800104c:	2096      	movs	r0, #150	; 0x96
 800104e:	1a82      	subs	r2, r0, r2
 8001050:	40d1      	lsrs	r1, r2
 8001052:	4248      	negs	r0, r1
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f3      	bne.n	8001040 <__aeabi_f2iz+0x18>
 8001058:	0008      	movs	r0, r1
 800105a:	e7f1      	b.n	8001040 <__aeabi_f2iz+0x18>
 800105c:	3a96      	subs	r2, #150	; 0x96
 800105e:	4091      	lsls	r1, r2
 8001060:	e7f7      	b.n	8001052 <__aeabi_f2iz+0x2a>
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	7fffffff 	.word	0x7fffffff

08001068 <__aeabi_i2f>:
 8001068:	b570      	push	{r4, r5, r6, lr}
 800106a:	2800      	cmp	r0, #0
 800106c:	d013      	beq.n	8001096 <__aeabi_i2f+0x2e>
 800106e:	17c3      	asrs	r3, r0, #31
 8001070:	18c5      	adds	r5, r0, r3
 8001072:	405d      	eors	r5, r3
 8001074:	0fc4      	lsrs	r4, r0, #31
 8001076:	0028      	movs	r0, r5
 8001078:	f001 ff5a 	bl	8002f30 <__clzsi2>
 800107c:	239e      	movs	r3, #158	; 0x9e
 800107e:	0001      	movs	r1, r0
 8001080:	1a1b      	subs	r3, r3, r0
 8001082:	2b96      	cmp	r3, #150	; 0x96
 8001084:	dc0f      	bgt.n	80010a6 <__aeabi_i2f+0x3e>
 8001086:	2808      	cmp	r0, #8
 8001088:	d031      	beq.n	80010ee <__aeabi_i2f+0x86>
 800108a:	3908      	subs	r1, #8
 800108c:	408d      	lsls	r5, r1
 800108e:	026d      	lsls	r5, r5, #9
 8001090:	0a6d      	lsrs	r5, r5, #9
 8001092:	b2d8      	uxtb	r0, r3
 8001094:	e002      	b.n	800109c <__aeabi_i2f+0x34>
 8001096:	2400      	movs	r4, #0
 8001098:	2000      	movs	r0, #0
 800109a:	2500      	movs	r5, #0
 800109c:	05c0      	lsls	r0, r0, #23
 800109e:	4328      	orrs	r0, r5
 80010a0:	07e4      	lsls	r4, r4, #31
 80010a2:	4320      	orrs	r0, r4
 80010a4:	bd70      	pop	{r4, r5, r6, pc}
 80010a6:	2b99      	cmp	r3, #153	; 0x99
 80010a8:	dd0c      	ble.n	80010c4 <__aeabi_i2f+0x5c>
 80010aa:	2205      	movs	r2, #5
 80010ac:	1a12      	subs	r2, r2, r0
 80010ae:	0028      	movs	r0, r5
 80010b0:	40d0      	lsrs	r0, r2
 80010b2:	0002      	movs	r2, r0
 80010b4:	0008      	movs	r0, r1
 80010b6:	301b      	adds	r0, #27
 80010b8:	4085      	lsls	r5, r0
 80010ba:	0028      	movs	r0, r5
 80010bc:	1e45      	subs	r5, r0, #1
 80010be:	41a8      	sbcs	r0, r5
 80010c0:	4302      	orrs	r2, r0
 80010c2:	0015      	movs	r5, r2
 80010c4:	2905      	cmp	r1, #5
 80010c6:	dc16      	bgt.n	80010f6 <__aeabi_i2f+0x8e>
 80010c8:	002a      	movs	r2, r5
 80010ca:	480f      	ldr	r0, [pc, #60]	; (8001108 <__aeabi_i2f+0xa0>)
 80010cc:	4002      	ands	r2, r0
 80010ce:	076e      	lsls	r6, r5, #29
 80010d0:	d009      	beq.n	80010e6 <__aeabi_i2f+0x7e>
 80010d2:	260f      	movs	r6, #15
 80010d4:	4035      	ands	r5, r6
 80010d6:	2d04      	cmp	r5, #4
 80010d8:	d005      	beq.n	80010e6 <__aeabi_i2f+0x7e>
 80010da:	3204      	adds	r2, #4
 80010dc:	0155      	lsls	r5, r2, #5
 80010de:	d502      	bpl.n	80010e6 <__aeabi_i2f+0x7e>
 80010e0:	239f      	movs	r3, #159	; 0x9f
 80010e2:	4002      	ands	r2, r0
 80010e4:	1a5b      	subs	r3, r3, r1
 80010e6:	0192      	lsls	r2, r2, #6
 80010e8:	0a55      	lsrs	r5, r2, #9
 80010ea:	b2d8      	uxtb	r0, r3
 80010ec:	e7d6      	b.n	800109c <__aeabi_i2f+0x34>
 80010ee:	026d      	lsls	r5, r5, #9
 80010f0:	2096      	movs	r0, #150	; 0x96
 80010f2:	0a6d      	lsrs	r5, r5, #9
 80010f4:	e7d2      	b.n	800109c <__aeabi_i2f+0x34>
 80010f6:	1f4a      	subs	r2, r1, #5
 80010f8:	4095      	lsls	r5, r2
 80010fa:	002a      	movs	r2, r5
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <__aeabi_i2f+0xa0>)
 80010fe:	4002      	ands	r2, r0
 8001100:	076e      	lsls	r6, r5, #29
 8001102:	d0f0      	beq.n	80010e6 <__aeabi_i2f+0x7e>
 8001104:	e7e5      	b.n	80010d2 <__aeabi_i2f+0x6a>
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	fbffffff 	.word	0xfbffffff

0800110c <__aeabi_ui2f>:
 800110c:	b570      	push	{r4, r5, r6, lr}
 800110e:	1e04      	subs	r4, r0, #0
 8001110:	d00e      	beq.n	8001130 <__aeabi_ui2f+0x24>
 8001112:	f001 ff0d 	bl	8002f30 <__clzsi2>
 8001116:	239e      	movs	r3, #158	; 0x9e
 8001118:	0001      	movs	r1, r0
 800111a:	1a1b      	subs	r3, r3, r0
 800111c:	2b96      	cmp	r3, #150	; 0x96
 800111e:	dc0c      	bgt.n	800113a <__aeabi_ui2f+0x2e>
 8001120:	2808      	cmp	r0, #8
 8001122:	d02c      	beq.n	800117e <__aeabi_ui2f+0x72>
 8001124:	3908      	subs	r1, #8
 8001126:	408c      	lsls	r4, r1
 8001128:	0264      	lsls	r4, r4, #9
 800112a:	0a64      	lsrs	r4, r4, #9
 800112c:	b2d8      	uxtb	r0, r3
 800112e:	e001      	b.n	8001134 <__aeabi_ui2f+0x28>
 8001130:	2000      	movs	r0, #0
 8001132:	2400      	movs	r4, #0
 8001134:	05c0      	lsls	r0, r0, #23
 8001136:	4320      	orrs	r0, r4
 8001138:	bd70      	pop	{r4, r5, r6, pc}
 800113a:	2b99      	cmp	r3, #153	; 0x99
 800113c:	dd0a      	ble.n	8001154 <__aeabi_ui2f+0x48>
 800113e:	0002      	movs	r2, r0
 8001140:	0020      	movs	r0, r4
 8001142:	321b      	adds	r2, #27
 8001144:	4090      	lsls	r0, r2
 8001146:	0002      	movs	r2, r0
 8001148:	1e50      	subs	r0, r2, #1
 800114a:	4182      	sbcs	r2, r0
 800114c:	2005      	movs	r0, #5
 800114e:	1a40      	subs	r0, r0, r1
 8001150:	40c4      	lsrs	r4, r0
 8001152:	4314      	orrs	r4, r2
 8001154:	2905      	cmp	r1, #5
 8001156:	dc16      	bgt.n	8001186 <__aeabi_ui2f+0x7a>
 8001158:	0022      	movs	r2, r4
 800115a:	480f      	ldr	r0, [pc, #60]	; (8001198 <__aeabi_ui2f+0x8c>)
 800115c:	4002      	ands	r2, r0
 800115e:	0765      	lsls	r5, r4, #29
 8001160:	d009      	beq.n	8001176 <__aeabi_ui2f+0x6a>
 8001162:	250f      	movs	r5, #15
 8001164:	402c      	ands	r4, r5
 8001166:	2c04      	cmp	r4, #4
 8001168:	d005      	beq.n	8001176 <__aeabi_ui2f+0x6a>
 800116a:	3204      	adds	r2, #4
 800116c:	0154      	lsls	r4, r2, #5
 800116e:	d502      	bpl.n	8001176 <__aeabi_ui2f+0x6a>
 8001170:	239f      	movs	r3, #159	; 0x9f
 8001172:	4002      	ands	r2, r0
 8001174:	1a5b      	subs	r3, r3, r1
 8001176:	0192      	lsls	r2, r2, #6
 8001178:	0a54      	lsrs	r4, r2, #9
 800117a:	b2d8      	uxtb	r0, r3
 800117c:	e7da      	b.n	8001134 <__aeabi_ui2f+0x28>
 800117e:	0264      	lsls	r4, r4, #9
 8001180:	2096      	movs	r0, #150	; 0x96
 8001182:	0a64      	lsrs	r4, r4, #9
 8001184:	e7d6      	b.n	8001134 <__aeabi_ui2f+0x28>
 8001186:	1f4a      	subs	r2, r1, #5
 8001188:	4094      	lsls	r4, r2
 800118a:	0022      	movs	r2, r4
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <__aeabi_ui2f+0x8c>)
 800118e:	4002      	ands	r2, r0
 8001190:	0765      	lsls	r5, r4, #29
 8001192:	d0f0      	beq.n	8001176 <__aeabi_ui2f+0x6a>
 8001194:	e7e5      	b.n	8001162 <__aeabi_ui2f+0x56>
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	fbffffff 	.word	0xfbffffff

0800119c <__aeabi_dadd>:
 800119c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119e:	464f      	mov	r7, r9
 80011a0:	4646      	mov	r6, r8
 80011a2:	46d6      	mov	lr, sl
 80011a4:	0004      	movs	r4, r0
 80011a6:	b5c0      	push	{r6, r7, lr}
 80011a8:	001f      	movs	r7, r3
 80011aa:	030b      	lsls	r3, r1, #12
 80011ac:	0010      	movs	r0, r2
 80011ae:	004e      	lsls	r6, r1, #1
 80011b0:	0a5b      	lsrs	r3, r3, #9
 80011b2:	0fcd      	lsrs	r5, r1, #31
 80011b4:	0f61      	lsrs	r1, r4, #29
 80011b6:	007a      	lsls	r2, r7, #1
 80011b8:	4319      	orrs	r1, r3
 80011ba:	00e3      	lsls	r3, r4, #3
 80011bc:	033c      	lsls	r4, r7, #12
 80011be:	0fff      	lsrs	r7, r7, #31
 80011c0:	46bc      	mov	ip, r7
 80011c2:	0a64      	lsrs	r4, r4, #9
 80011c4:	0f47      	lsrs	r7, r0, #29
 80011c6:	4327      	orrs	r7, r4
 80011c8:	0d76      	lsrs	r6, r6, #21
 80011ca:	0d52      	lsrs	r2, r2, #21
 80011cc:	00c0      	lsls	r0, r0, #3
 80011ce:	46b9      	mov	r9, r7
 80011d0:	4680      	mov	r8, r0
 80011d2:	1ab7      	subs	r7, r6, r2
 80011d4:	4565      	cmp	r5, ip
 80011d6:	d100      	bne.n	80011da <__aeabi_dadd+0x3e>
 80011d8:	e09b      	b.n	8001312 <__aeabi_dadd+0x176>
 80011da:	2f00      	cmp	r7, #0
 80011dc:	dc00      	bgt.n	80011e0 <__aeabi_dadd+0x44>
 80011de:	e084      	b.n	80012ea <__aeabi_dadd+0x14e>
 80011e0:	2a00      	cmp	r2, #0
 80011e2:	d100      	bne.n	80011e6 <__aeabi_dadd+0x4a>
 80011e4:	e0be      	b.n	8001364 <__aeabi_dadd+0x1c8>
 80011e6:	4ac8      	ldr	r2, [pc, #800]	; (8001508 <__aeabi_dadd+0x36c>)
 80011e8:	4296      	cmp	r6, r2
 80011ea:	d100      	bne.n	80011ee <__aeabi_dadd+0x52>
 80011ec:	e124      	b.n	8001438 <__aeabi_dadd+0x29c>
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	464c      	mov	r4, r9
 80011f2:	0412      	lsls	r2, r2, #16
 80011f4:	4314      	orrs	r4, r2
 80011f6:	46a1      	mov	r9, r4
 80011f8:	2f38      	cmp	r7, #56	; 0x38
 80011fa:	dd00      	ble.n	80011fe <__aeabi_dadd+0x62>
 80011fc:	e167      	b.n	80014ce <__aeabi_dadd+0x332>
 80011fe:	2f1f      	cmp	r7, #31
 8001200:	dd00      	ble.n	8001204 <__aeabi_dadd+0x68>
 8001202:	e1d6      	b.n	80015b2 <__aeabi_dadd+0x416>
 8001204:	2220      	movs	r2, #32
 8001206:	464c      	mov	r4, r9
 8001208:	1bd2      	subs	r2, r2, r7
 800120a:	4094      	lsls	r4, r2
 800120c:	46a2      	mov	sl, r4
 800120e:	4644      	mov	r4, r8
 8001210:	40fc      	lsrs	r4, r7
 8001212:	0020      	movs	r0, r4
 8001214:	4654      	mov	r4, sl
 8001216:	4304      	orrs	r4, r0
 8001218:	4640      	mov	r0, r8
 800121a:	4090      	lsls	r0, r2
 800121c:	1e42      	subs	r2, r0, #1
 800121e:	4190      	sbcs	r0, r2
 8001220:	464a      	mov	r2, r9
 8001222:	40fa      	lsrs	r2, r7
 8001224:	4304      	orrs	r4, r0
 8001226:	1a89      	subs	r1, r1, r2
 8001228:	1b1c      	subs	r4, r3, r4
 800122a:	42a3      	cmp	r3, r4
 800122c:	4192      	sbcs	r2, r2
 800122e:	4252      	negs	r2, r2
 8001230:	1a8b      	subs	r3, r1, r2
 8001232:	469a      	mov	sl, r3
 8001234:	4653      	mov	r3, sl
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	d400      	bmi.n	800123c <__aeabi_dadd+0xa0>
 800123a:	e0d4      	b.n	80013e6 <__aeabi_dadd+0x24a>
 800123c:	4653      	mov	r3, sl
 800123e:	025a      	lsls	r2, r3, #9
 8001240:	0a53      	lsrs	r3, r2, #9
 8001242:	469a      	mov	sl, r3
 8001244:	4653      	mov	r3, sl
 8001246:	2b00      	cmp	r3, #0
 8001248:	d100      	bne.n	800124c <__aeabi_dadd+0xb0>
 800124a:	e104      	b.n	8001456 <__aeabi_dadd+0x2ba>
 800124c:	4650      	mov	r0, sl
 800124e:	f001 fe6f 	bl	8002f30 <__clzsi2>
 8001252:	0003      	movs	r3, r0
 8001254:	3b08      	subs	r3, #8
 8001256:	2220      	movs	r2, #32
 8001258:	0020      	movs	r0, r4
 800125a:	1ad2      	subs	r2, r2, r3
 800125c:	4651      	mov	r1, sl
 800125e:	40d0      	lsrs	r0, r2
 8001260:	4099      	lsls	r1, r3
 8001262:	0002      	movs	r2, r0
 8001264:	409c      	lsls	r4, r3
 8001266:	430a      	orrs	r2, r1
 8001268:	42b3      	cmp	r3, r6
 800126a:	da00      	bge.n	800126e <__aeabi_dadd+0xd2>
 800126c:	e102      	b.n	8001474 <__aeabi_dadd+0x2d8>
 800126e:	1b9b      	subs	r3, r3, r6
 8001270:	1c59      	adds	r1, r3, #1
 8001272:	291f      	cmp	r1, #31
 8001274:	dd00      	ble.n	8001278 <__aeabi_dadd+0xdc>
 8001276:	e0a7      	b.n	80013c8 <__aeabi_dadd+0x22c>
 8001278:	2320      	movs	r3, #32
 800127a:	0010      	movs	r0, r2
 800127c:	0026      	movs	r6, r4
 800127e:	1a5b      	subs	r3, r3, r1
 8001280:	409c      	lsls	r4, r3
 8001282:	4098      	lsls	r0, r3
 8001284:	40ce      	lsrs	r6, r1
 8001286:	40ca      	lsrs	r2, r1
 8001288:	1e63      	subs	r3, r4, #1
 800128a:	419c      	sbcs	r4, r3
 800128c:	4330      	orrs	r0, r6
 800128e:	4692      	mov	sl, r2
 8001290:	2600      	movs	r6, #0
 8001292:	4304      	orrs	r4, r0
 8001294:	0763      	lsls	r3, r4, #29
 8001296:	d009      	beq.n	80012ac <__aeabi_dadd+0x110>
 8001298:	230f      	movs	r3, #15
 800129a:	4023      	ands	r3, r4
 800129c:	2b04      	cmp	r3, #4
 800129e:	d005      	beq.n	80012ac <__aeabi_dadd+0x110>
 80012a0:	1d23      	adds	r3, r4, #4
 80012a2:	42a3      	cmp	r3, r4
 80012a4:	41a4      	sbcs	r4, r4
 80012a6:	4264      	negs	r4, r4
 80012a8:	44a2      	add	sl, r4
 80012aa:	001c      	movs	r4, r3
 80012ac:	4653      	mov	r3, sl
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	d400      	bmi.n	80012b4 <__aeabi_dadd+0x118>
 80012b2:	e09b      	b.n	80013ec <__aeabi_dadd+0x250>
 80012b4:	4b94      	ldr	r3, [pc, #592]	; (8001508 <__aeabi_dadd+0x36c>)
 80012b6:	3601      	adds	r6, #1
 80012b8:	429e      	cmp	r6, r3
 80012ba:	d100      	bne.n	80012be <__aeabi_dadd+0x122>
 80012bc:	e0b8      	b.n	8001430 <__aeabi_dadd+0x294>
 80012be:	4653      	mov	r3, sl
 80012c0:	4992      	ldr	r1, [pc, #584]	; (800150c <__aeabi_dadd+0x370>)
 80012c2:	08e4      	lsrs	r4, r4, #3
 80012c4:	400b      	ands	r3, r1
 80012c6:	0019      	movs	r1, r3
 80012c8:	075b      	lsls	r3, r3, #29
 80012ca:	4323      	orrs	r3, r4
 80012cc:	0572      	lsls	r2, r6, #21
 80012ce:	024c      	lsls	r4, r1, #9
 80012d0:	0b24      	lsrs	r4, r4, #12
 80012d2:	0d52      	lsrs	r2, r2, #21
 80012d4:	0512      	lsls	r2, r2, #20
 80012d6:	07ed      	lsls	r5, r5, #31
 80012d8:	4322      	orrs	r2, r4
 80012da:	432a      	orrs	r2, r5
 80012dc:	0018      	movs	r0, r3
 80012de:	0011      	movs	r1, r2
 80012e0:	bce0      	pop	{r5, r6, r7}
 80012e2:	46ba      	mov	sl, r7
 80012e4:	46b1      	mov	r9, r6
 80012e6:	46a8      	mov	r8, r5
 80012e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ea:	2f00      	cmp	r7, #0
 80012ec:	d048      	beq.n	8001380 <__aeabi_dadd+0x1e4>
 80012ee:	1b97      	subs	r7, r2, r6
 80012f0:	2e00      	cmp	r6, #0
 80012f2:	d000      	beq.n	80012f6 <__aeabi_dadd+0x15a>
 80012f4:	e10e      	b.n	8001514 <__aeabi_dadd+0x378>
 80012f6:	000c      	movs	r4, r1
 80012f8:	431c      	orrs	r4, r3
 80012fa:	d100      	bne.n	80012fe <__aeabi_dadd+0x162>
 80012fc:	e1b7      	b.n	800166e <__aeabi_dadd+0x4d2>
 80012fe:	1e7c      	subs	r4, r7, #1
 8001300:	2f01      	cmp	r7, #1
 8001302:	d100      	bne.n	8001306 <__aeabi_dadd+0x16a>
 8001304:	e226      	b.n	8001754 <__aeabi_dadd+0x5b8>
 8001306:	4d80      	ldr	r5, [pc, #512]	; (8001508 <__aeabi_dadd+0x36c>)
 8001308:	42af      	cmp	r7, r5
 800130a:	d100      	bne.n	800130e <__aeabi_dadd+0x172>
 800130c:	e1d5      	b.n	80016ba <__aeabi_dadd+0x51e>
 800130e:	0027      	movs	r7, r4
 8001310:	e107      	b.n	8001522 <__aeabi_dadd+0x386>
 8001312:	2f00      	cmp	r7, #0
 8001314:	dc00      	bgt.n	8001318 <__aeabi_dadd+0x17c>
 8001316:	e0b2      	b.n	800147e <__aeabi_dadd+0x2e2>
 8001318:	2a00      	cmp	r2, #0
 800131a:	d047      	beq.n	80013ac <__aeabi_dadd+0x210>
 800131c:	4a7a      	ldr	r2, [pc, #488]	; (8001508 <__aeabi_dadd+0x36c>)
 800131e:	4296      	cmp	r6, r2
 8001320:	d100      	bne.n	8001324 <__aeabi_dadd+0x188>
 8001322:	e089      	b.n	8001438 <__aeabi_dadd+0x29c>
 8001324:	2280      	movs	r2, #128	; 0x80
 8001326:	464c      	mov	r4, r9
 8001328:	0412      	lsls	r2, r2, #16
 800132a:	4314      	orrs	r4, r2
 800132c:	46a1      	mov	r9, r4
 800132e:	2f38      	cmp	r7, #56	; 0x38
 8001330:	dc6b      	bgt.n	800140a <__aeabi_dadd+0x26e>
 8001332:	2f1f      	cmp	r7, #31
 8001334:	dc00      	bgt.n	8001338 <__aeabi_dadd+0x19c>
 8001336:	e16e      	b.n	8001616 <__aeabi_dadd+0x47a>
 8001338:	003a      	movs	r2, r7
 800133a:	4648      	mov	r0, r9
 800133c:	3a20      	subs	r2, #32
 800133e:	40d0      	lsrs	r0, r2
 8001340:	4684      	mov	ip, r0
 8001342:	2f20      	cmp	r7, #32
 8001344:	d007      	beq.n	8001356 <__aeabi_dadd+0x1ba>
 8001346:	2240      	movs	r2, #64	; 0x40
 8001348:	4648      	mov	r0, r9
 800134a:	1bd2      	subs	r2, r2, r7
 800134c:	4090      	lsls	r0, r2
 800134e:	0002      	movs	r2, r0
 8001350:	4640      	mov	r0, r8
 8001352:	4310      	orrs	r0, r2
 8001354:	4680      	mov	r8, r0
 8001356:	4640      	mov	r0, r8
 8001358:	1e42      	subs	r2, r0, #1
 800135a:	4190      	sbcs	r0, r2
 800135c:	4662      	mov	r2, ip
 800135e:	0004      	movs	r4, r0
 8001360:	4314      	orrs	r4, r2
 8001362:	e057      	b.n	8001414 <__aeabi_dadd+0x278>
 8001364:	464a      	mov	r2, r9
 8001366:	4302      	orrs	r2, r0
 8001368:	d100      	bne.n	800136c <__aeabi_dadd+0x1d0>
 800136a:	e103      	b.n	8001574 <__aeabi_dadd+0x3d8>
 800136c:	1e7a      	subs	r2, r7, #1
 800136e:	2f01      	cmp	r7, #1
 8001370:	d100      	bne.n	8001374 <__aeabi_dadd+0x1d8>
 8001372:	e193      	b.n	800169c <__aeabi_dadd+0x500>
 8001374:	4c64      	ldr	r4, [pc, #400]	; (8001508 <__aeabi_dadd+0x36c>)
 8001376:	42a7      	cmp	r7, r4
 8001378:	d100      	bne.n	800137c <__aeabi_dadd+0x1e0>
 800137a:	e18a      	b.n	8001692 <__aeabi_dadd+0x4f6>
 800137c:	0017      	movs	r7, r2
 800137e:	e73b      	b.n	80011f8 <__aeabi_dadd+0x5c>
 8001380:	4c63      	ldr	r4, [pc, #396]	; (8001510 <__aeabi_dadd+0x374>)
 8001382:	1c72      	adds	r2, r6, #1
 8001384:	4222      	tst	r2, r4
 8001386:	d000      	beq.n	800138a <__aeabi_dadd+0x1ee>
 8001388:	e0e0      	b.n	800154c <__aeabi_dadd+0x3b0>
 800138a:	000a      	movs	r2, r1
 800138c:	431a      	orrs	r2, r3
 800138e:	2e00      	cmp	r6, #0
 8001390:	d000      	beq.n	8001394 <__aeabi_dadd+0x1f8>
 8001392:	e174      	b.n	800167e <__aeabi_dadd+0x4e2>
 8001394:	2a00      	cmp	r2, #0
 8001396:	d100      	bne.n	800139a <__aeabi_dadd+0x1fe>
 8001398:	e1d0      	b.n	800173c <__aeabi_dadd+0x5a0>
 800139a:	464a      	mov	r2, r9
 800139c:	4302      	orrs	r2, r0
 800139e:	d000      	beq.n	80013a2 <__aeabi_dadd+0x206>
 80013a0:	e1e3      	b.n	800176a <__aeabi_dadd+0x5ce>
 80013a2:	074a      	lsls	r2, r1, #29
 80013a4:	08db      	lsrs	r3, r3, #3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	08c9      	lsrs	r1, r1, #3
 80013aa:	e029      	b.n	8001400 <__aeabi_dadd+0x264>
 80013ac:	464a      	mov	r2, r9
 80013ae:	4302      	orrs	r2, r0
 80013b0:	d100      	bne.n	80013b4 <__aeabi_dadd+0x218>
 80013b2:	e17d      	b.n	80016b0 <__aeabi_dadd+0x514>
 80013b4:	1e7a      	subs	r2, r7, #1
 80013b6:	2f01      	cmp	r7, #1
 80013b8:	d100      	bne.n	80013bc <__aeabi_dadd+0x220>
 80013ba:	e0e0      	b.n	800157e <__aeabi_dadd+0x3e2>
 80013bc:	4c52      	ldr	r4, [pc, #328]	; (8001508 <__aeabi_dadd+0x36c>)
 80013be:	42a7      	cmp	r7, r4
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dadd+0x228>
 80013c2:	e166      	b.n	8001692 <__aeabi_dadd+0x4f6>
 80013c4:	0017      	movs	r7, r2
 80013c6:	e7b2      	b.n	800132e <__aeabi_dadd+0x192>
 80013c8:	0010      	movs	r0, r2
 80013ca:	3b1f      	subs	r3, #31
 80013cc:	40d8      	lsrs	r0, r3
 80013ce:	2920      	cmp	r1, #32
 80013d0:	d003      	beq.n	80013da <__aeabi_dadd+0x23e>
 80013d2:	2340      	movs	r3, #64	; 0x40
 80013d4:	1a5b      	subs	r3, r3, r1
 80013d6:	409a      	lsls	r2, r3
 80013d8:	4314      	orrs	r4, r2
 80013da:	1e63      	subs	r3, r4, #1
 80013dc:	419c      	sbcs	r4, r3
 80013de:	2300      	movs	r3, #0
 80013e0:	2600      	movs	r6, #0
 80013e2:	469a      	mov	sl, r3
 80013e4:	4304      	orrs	r4, r0
 80013e6:	0763      	lsls	r3, r4, #29
 80013e8:	d000      	beq.n	80013ec <__aeabi_dadd+0x250>
 80013ea:	e755      	b.n	8001298 <__aeabi_dadd+0xfc>
 80013ec:	4652      	mov	r2, sl
 80013ee:	08e3      	lsrs	r3, r4, #3
 80013f0:	0752      	lsls	r2, r2, #29
 80013f2:	4313      	orrs	r3, r2
 80013f4:	4652      	mov	r2, sl
 80013f6:	0037      	movs	r7, r6
 80013f8:	08d1      	lsrs	r1, r2, #3
 80013fa:	4a43      	ldr	r2, [pc, #268]	; (8001508 <__aeabi_dadd+0x36c>)
 80013fc:	4297      	cmp	r7, r2
 80013fe:	d01f      	beq.n	8001440 <__aeabi_dadd+0x2a4>
 8001400:	0309      	lsls	r1, r1, #12
 8001402:	057a      	lsls	r2, r7, #21
 8001404:	0b0c      	lsrs	r4, r1, #12
 8001406:	0d52      	lsrs	r2, r2, #21
 8001408:	e764      	b.n	80012d4 <__aeabi_dadd+0x138>
 800140a:	4642      	mov	r2, r8
 800140c:	464c      	mov	r4, r9
 800140e:	4314      	orrs	r4, r2
 8001410:	1e62      	subs	r2, r4, #1
 8001412:	4194      	sbcs	r4, r2
 8001414:	18e4      	adds	r4, r4, r3
 8001416:	429c      	cmp	r4, r3
 8001418:	4192      	sbcs	r2, r2
 800141a:	4252      	negs	r2, r2
 800141c:	4692      	mov	sl, r2
 800141e:	448a      	add	sl, r1
 8001420:	4653      	mov	r3, sl
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	d5df      	bpl.n	80013e6 <__aeabi_dadd+0x24a>
 8001426:	4b38      	ldr	r3, [pc, #224]	; (8001508 <__aeabi_dadd+0x36c>)
 8001428:	3601      	adds	r6, #1
 800142a:	429e      	cmp	r6, r3
 800142c:	d000      	beq.n	8001430 <__aeabi_dadd+0x294>
 800142e:	e0b3      	b.n	8001598 <__aeabi_dadd+0x3fc>
 8001430:	0032      	movs	r2, r6
 8001432:	2400      	movs	r4, #0
 8001434:	2300      	movs	r3, #0
 8001436:	e74d      	b.n	80012d4 <__aeabi_dadd+0x138>
 8001438:	074a      	lsls	r2, r1, #29
 800143a:	08db      	lsrs	r3, r3, #3
 800143c:	4313      	orrs	r3, r2
 800143e:	08c9      	lsrs	r1, r1, #3
 8001440:	001a      	movs	r2, r3
 8001442:	430a      	orrs	r2, r1
 8001444:	d100      	bne.n	8001448 <__aeabi_dadd+0x2ac>
 8001446:	e200      	b.n	800184a <__aeabi_dadd+0x6ae>
 8001448:	2480      	movs	r4, #128	; 0x80
 800144a:	0324      	lsls	r4, r4, #12
 800144c:	430c      	orrs	r4, r1
 800144e:	0324      	lsls	r4, r4, #12
 8001450:	4a2d      	ldr	r2, [pc, #180]	; (8001508 <__aeabi_dadd+0x36c>)
 8001452:	0b24      	lsrs	r4, r4, #12
 8001454:	e73e      	b.n	80012d4 <__aeabi_dadd+0x138>
 8001456:	0020      	movs	r0, r4
 8001458:	f001 fd6a 	bl	8002f30 <__clzsi2>
 800145c:	0003      	movs	r3, r0
 800145e:	3318      	adds	r3, #24
 8001460:	2b1f      	cmp	r3, #31
 8001462:	dc00      	bgt.n	8001466 <__aeabi_dadd+0x2ca>
 8001464:	e6f7      	b.n	8001256 <__aeabi_dadd+0xba>
 8001466:	0022      	movs	r2, r4
 8001468:	3808      	subs	r0, #8
 800146a:	4082      	lsls	r2, r0
 800146c:	2400      	movs	r4, #0
 800146e:	42b3      	cmp	r3, r6
 8001470:	db00      	blt.n	8001474 <__aeabi_dadd+0x2d8>
 8001472:	e6fc      	b.n	800126e <__aeabi_dadd+0xd2>
 8001474:	1af6      	subs	r6, r6, r3
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <__aeabi_dadd+0x370>)
 8001478:	401a      	ands	r2, r3
 800147a:	4692      	mov	sl, r2
 800147c:	e70a      	b.n	8001294 <__aeabi_dadd+0xf8>
 800147e:	2f00      	cmp	r7, #0
 8001480:	d02b      	beq.n	80014da <__aeabi_dadd+0x33e>
 8001482:	1b97      	subs	r7, r2, r6
 8001484:	2e00      	cmp	r6, #0
 8001486:	d100      	bne.n	800148a <__aeabi_dadd+0x2ee>
 8001488:	e0b8      	b.n	80015fc <__aeabi_dadd+0x460>
 800148a:	4c1f      	ldr	r4, [pc, #124]	; (8001508 <__aeabi_dadd+0x36c>)
 800148c:	42a2      	cmp	r2, r4
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x2f6>
 8001490:	e11c      	b.n	80016cc <__aeabi_dadd+0x530>
 8001492:	2480      	movs	r4, #128	; 0x80
 8001494:	0424      	lsls	r4, r4, #16
 8001496:	4321      	orrs	r1, r4
 8001498:	2f38      	cmp	r7, #56	; 0x38
 800149a:	dd00      	ble.n	800149e <__aeabi_dadd+0x302>
 800149c:	e11e      	b.n	80016dc <__aeabi_dadd+0x540>
 800149e:	2f1f      	cmp	r7, #31
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dadd+0x308>
 80014a2:	e19e      	b.n	80017e2 <__aeabi_dadd+0x646>
 80014a4:	2620      	movs	r6, #32
 80014a6:	000c      	movs	r4, r1
 80014a8:	1bf6      	subs	r6, r6, r7
 80014aa:	0018      	movs	r0, r3
 80014ac:	40b3      	lsls	r3, r6
 80014ae:	40b4      	lsls	r4, r6
 80014b0:	40f8      	lsrs	r0, r7
 80014b2:	1e5e      	subs	r6, r3, #1
 80014b4:	41b3      	sbcs	r3, r6
 80014b6:	40f9      	lsrs	r1, r7
 80014b8:	4304      	orrs	r4, r0
 80014ba:	431c      	orrs	r4, r3
 80014bc:	4489      	add	r9, r1
 80014be:	4444      	add	r4, r8
 80014c0:	4544      	cmp	r4, r8
 80014c2:	419b      	sbcs	r3, r3
 80014c4:	425b      	negs	r3, r3
 80014c6:	444b      	add	r3, r9
 80014c8:	469a      	mov	sl, r3
 80014ca:	0016      	movs	r6, r2
 80014cc:	e7a8      	b.n	8001420 <__aeabi_dadd+0x284>
 80014ce:	4642      	mov	r2, r8
 80014d0:	464c      	mov	r4, r9
 80014d2:	4314      	orrs	r4, r2
 80014d4:	1e62      	subs	r2, r4, #1
 80014d6:	4194      	sbcs	r4, r2
 80014d8:	e6a6      	b.n	8001228 <__aeabi_dadd+0x8c>
 80014da:	4c0d      	ldr	r4, [pc, #52]	; (8001510 <__aeabi_dadd+0x374>)
 80014dc:	1c72      	adds	r2, r6, #1
 80014de:	4222      	tst	r2, r4
 80014e0:	d000      	beq.n	80014e4 <__aeabi_dadd+0x348>
 80014e2:	e0a8      	b.n	8001636 <__aeabi_dadd+0x49a>
 80014e4:	000a      	movs	r2, r1
 80014e6:	431a      	orrs	r2, r3
 80014e8:	2e00      	cmp	r6, #0
 80014ea:	d000      	beq.n	80014ee <__aeabi_dadd+0x352>
 80014ec:	e10a      	b.n	8001704 <__aeabi_dadd+0x568>
 80014ee:	2a00      	cmp	r2, #0
 80014f0:	d100      	bne.n	80014f4 <__aeabi_dadd+0x358>
 80014f2:	e15e      	b.n	80017b2 <__aeabi_dadd+0x616>
 80014f4:	464a      	mov	r2, r9
 80014f6:	4302      	orrs	r2, r0
 80014f8:	d000      	beq.n	80014fc <__aeabi_dadd+0x360>
 80014fa:	e161      	b.n	80017c0 <__aeabi_dadd+0x624>
 80014fc:	074a      	lsls	r2, r1, #29
 80014fe:	08db      	lsrs	r3, r3, #3
 8001500:	4313      	orrs	r3, r2
 8001502:	08c9      	lsrs	r1, r1, #3
 8001504:	e77c      	b.n	8001400 <__aeabi_dadd+0x264>
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	000007ff 	.word	0x000007ff
 800150c:	ff7fffff 	.word	0xff7fffff
 8001510:	000007fe 	.word	0x000007fe
 8001514:	4ccf      	ldr	r4, [pc, #828]	; (8001854 <__aeabi_dadd+0x6b8>)
 8001516:	42a2      	cmp	r2, r4
 8001518:	d100      	bne.n	800151c <__aeabi_dadd+0x380>
 800151a:	e0ce      	b.n	80016ba <__aeabi_dadd+0x51e>
 800151c:	2480      	movs	r4, #128	; 0x80
 800151e:	0424      	lsls	r4, r4, #16
 8001520:	4321      	orrs	r1, r4
 8001522:	2f38      	cmp	r7, #56	; 0x38
 8001524:	dc5b      	bgt.n	80015de <__aeabi_dadd+0x442>
 8001526:	2f1f      	cmp	r7, #31
 8001528:	dd00      	ble.n	800152c <__aeabi_dadd+0x390>
 800152a:	e0dc      	b.n	80016e6 <__aeabi_dadd+0x54a>
 800152c:	2520      	movs	r5, #32
 800152e:	000c      	movs	r4, r1
 8001530:	1bed      	subs	r5, r5, r7
 8001532:	001e      	movs	r6, r3
 8001534:	40ab      	lsls	r3, r5
 8001536:	40ac      	lsls	r4, r5
 8001538:	40fe      	lsrs	r6, r7
 800153a:	1e5d      	subs	r5, r3, #1
 800153c:	41ab      	sbcs	r3, r5
 800153e:	4334      	orrs	r4, r6
 8001540:	40f9      	lsrs	r1, r7
 8001542:	431c      	orrs	r4, r3
 8001544:	464b      	mov	r3, r9
 8001546:	1a5b      	subs	r3, r3, r1
 8001548:	4699      	mov	r9, r3
 800154a:	e04c      	b.n	80015e6 <__aeabi_dadd+0x44a>
 800154c:	464a      	mov	r2, r9
 800154e:	1a1c      	subs	r4, r3, r0
 8001550:	1a88      	subs	r0, r1, r2
 8001552:	42a3      	cmp	r3, r4
 8001554:	4192      	sbcs	r2, r2
 8001556:	4252      	negs	r2, r2
 8001558:	4692      	mov	sl, r2
 800155a:	0002      	movs	r2, r0
 800155c:	4650      	mov	r0, sl
 800155e:	1a12      	subs	r2, r2, r0
 8001560:	4692      	mov	sl, r2
 8001562:	0212      	lsls	r2, r2, #8
 8001564:	d478      	bmi.n	8001658 <__aeabi_dadd+0x4bc>
 8001566:	4653      	mov	r3, sl
 8001568:	4323      	orrs	r3, r4
 800156a:	d000      	beq.n	800156e <__aeabi_dadd+0x3d2>
 800156c:	e66a      	b.n	8001244 <__aeabi_dadd+0xa8>
 800156e:	2100      	movs	r1, #0
 8001570:	2500      	movs	r5, #0
 8001572:	e745      	b.n	8001400 <__aeabi_dadd+0x264>
 8001574:	074a      	lsls	r2, r1, #29
 8001576:	08db      	lsrs	r3, r3, #3
 8001578:	4313      	orrs	r3, r2
 800157a:	08c9      	lsrs	r1, r1, #3
 800157c:	e73d      	b.n	80013fa <__aeabi_dadd+0x25e>
 800157e:	181c      	adds	r4, r3, r0
 8001580:	429c      	cmp	r4, r3
 8001582:	419b      	sbcs	r3, r3
 8001584:	4449      	add	r1, r9
 8001586:	468a      	mov	sl, r1
 8001588:	425b      	negs	r3, r3
 800158a:	449a      	add	sl, r3
 800158c:	4653      	mov	r3, sl
 800158e:	2601      	movs	r6, #1
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	d400      	bmi.n	8001596 <__aeabi_dadd+0x3fa>
 8001594:	e727      	b.n	80013e6 <__aeabi_dadd+0x24a>
 8001596:	2602      	movs	r6, #2
 8001598:	4652      	mov	r2, sl
 800159a:	4baf      	ldr	r3, [pc, #700]	; (8001858 <__aeabi_dadd+0x6bc>)
 800159c:	2101      	movs	r1, #1
 800159e:	401a      	ands	r2, r3
 80015a0:	0013      	movs	r3, r2
 80015a2:	4021      	ands	r1, r4
 80015a4:	0862      	lsrs	r2, r4, #1
 80015a6:	430a      	orrs	r2, r1
 80015a8:	07dc      	lsls	r4, r3, #31
 80015aa:	085b      	lsrs	r3, r3, #1
 80015ac:	469a      	mov	sl, r3
 80015ae:	4314      	orrs	r4, r2
 80015b0:	e670      	b.n	8001294 <__aeabi_dadd+0xf8>
 80015b2:	003a      	movs	r2, r7
 80015b4:	464c      	mov	r4, r9
 80015b6:	3a20      	subs	r2, #32
 80015b8:	40d4      	lsrs	r4, r2
 80015ba:	46a4      	mov	ip, r4
 80015bc:	2f20      	cmp	r7, #32
 80015be:	d007      	beq.n	80015d0 <__aeabi_dadd+0x434>
 80015c0:	2240      	movs	r2, #64	; 0x40
 80015c2:	4648      	mov	r0, r9
 80015c4:	1bd2      	subs	r2, r2, r7
 80015c6:	4090      	lsls	r0, r2
 80015c8:	0002      	movs	r2, r0
 80015ca:	4640      	mov	r0, r8
 80015cc:	4310      	orrs	r0, r2
 80015ce:	4680      	mov	r8, r0
 80015d0:	4640      	mov	r0, r8
 80015d2:	1e42      	subs	r2, r0, #1
 80015d4:	4190      	sbcs	r0, r2
 80015d6:	4662      	mov	r2, ip
 80015d8:	0004      	movs	r4, r0
 80015da:	4314      	orrs	r4, r2
 80015dc:	e624      	b.n	8001228 <__aeabi_dadd+0x8c>
 80015de:	4319      	orrs	r1, r3
 80015e0:	000c      	movs	r4, r1
 80015e2:	1e63      	subs	r3, r4, #1
 80015e4:	419c      	sbcs	r4, r3
 80015e6:	4643      	mov	r3, r8
 80015e8:	1b1c      	subs	r4, r3, r4
 80015ea:	45a0      	cmp	r8, r4
 80015ec:	419b      	sbcs	r3, r3
 80015ee:	4649      	mov	r1, r9
 80015f0:	425b      	negs	r3, r3
 80015f2:	1acb      	subs	r3, r1, r3
 80015f4:	469a      	mov	sl, r3
 80015f6:	4665      	mov	r5, ip
 80015f8:	0016      	movs	r6, r2
 80015fa:	e61b      	b.n	8001234 <__aeabi_dadd+0x98>
 80015fc:	000c      	movs	r4, r1
 80015fe:	431c      	orrs	r4, r3
 8001600:	d100      	bne.n	8001604 <__aeabi_dadd+0x468>
 8001602:	e0c7      	b.n	8001794 <__aeabi_dadd+0x5f8>
 8001604:	1e7c      	subs	r4, r7, #1
 8001606:	2f01      	cmp	r7, #1
 8001608:	d100      	bne.n	800160c <__aeabi_dadd+0x470>
 800160a:	e0f9      	b.n	8001800 <__aeabi_dadd+0x664>
 800160c:	4e91      	ldr	r6, [pc, #580]	; (8001854 <__aeabi_dadd+0x6b8>)
 800160e:	42b7      	cmp	r7, r6
 8001610:	d05c      	beq.n	80016cc <__aeabi_dadd+0x530>
 8001612:	0027      	movs	r7, r4
 8001614:	e740      	b.n	8001498 <__aeabi_dadd+0x2fc>
 8001616:	2220      	movs	r2, #32
 8001618:	464c      	mov	r4, r9
 800161a:	4640      	mov	r0, r8
 800161c:	1bd2      	subs	r2, r2, r7
 800161e:	4094      	lsls	r4, r2
 8001620:	40f8      	lsrs	r0, r7
 8001622:	4304      	orrs	r4, r0
 8001624:	4640      	mov	r0, r8
 8001626:	4090      	lsls	r0, r2
 8001628:	1e42      	subs	r2, r0, #1
 800162a:	4190      	sbcs	r0, r2
 800162c:	464a      	mov	r2, r9
 800162e:	40fa      	lsrs	r2, r7
 8001630:	4304      	orrs	r4, r0
 8001632:	1889      	adds	r1, r1, r2
 8001634:	e6ee      	b.n	8001414 <__aeabi_dadd+0x278>
 8001636:	4c87      	ldr	r4, [pc, #540]	; (8001854 <__aeabi_dadd+0x6b8>)
 8001638:	42a2      	cmp	r2, r4
 800163a:	d100      	bne.n	800163e <__aeabi_dadd+0x4a2>
 800163c:	e6f9      	b.n	8001432 <__aeabi_dadd+0x296>
 800163e:	1818      	adds	r0, r3, r0
 8001640:	4298      	cmp	r0, r3
 8001642:	419b      	sbcs	r3, r3
 8001644:	4449      	add	r1, r9
 8001646:	425b      	negs	r3, r3
 8001648:	18cb      	adds	r3, r1, r3
 800164a:	07dc      	lsls	r4, r3, #31
 800164c:	0840      	lsrs	r0, r0, #1
 800164e:	085b      	lsrs	r3, r3, #1
 8001650:	469a      	mov	sl, r3
 8001652:	0016      	movs	r6, r2
 8001654:	4304      	orrs	r4, r0
 8001656:	e6c6      	b.n	80013e6 <__aeabi_dadd+0x24a>
 8001658:	4642      	mov	r2, r8
 800165a:	1ad4      	subs	r4, r2, r3
 800165c:	45a0      	cmp	r8, r4
 800165e:	4180      	sbcs	r0, r0
 8001660:	464b      	mov	r3, r9
 8001662:	4240      	negs	r0, r0
 8001664:	1a59      	subs	r1, r3, r1
 8001666:	1a0b      	subs	r3, r1, r0
 8001668:	469a      	mov	sl, r3
 800166a:	4665      	mov	r5, ip
 800166c:	e5ea      	b.n	8001244 <__aeabi_dadd+0xa8>
 800166e:	464b      	mov	r3, r9
 8001670:	464a      	mov	r2, r9
 8001672:	08c0      	lsrs	r0, r0, #3
 8001674:	075b      	lsls	r3, r3, #29
 8001676:	4665      	mov	r5, ip
 8001678:	4303      	orrs	r3, r0
 800167a:	08d1      	lsrs	r1, r2, #3
 800167c:	e6bd      	b.n	80013fa <__aeabi_dadd+0x25e>
 800167e:	2a00      	cmp	r2, #0
 8001680:	d000      	beq.n	8001684 <__aeabi_dadd+0x4e8>
 8001682:	e08e      	b.n	80017a2 <__aeabi_dadd+0x606>
 8001684:	464b      	mov	r3, r9
 8001686:	4303      	orrs	r3, r0
 8001688:	d117      	bne.n	80016ba <__aeabi_dadd+0x51e>
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	2500      	movs	r5, #0
 800168e:	0309      	lsls	r1, r1, #12
 8001690:	e6da      	b.n	8001448 <__aeabi_dadd+0x2ac>
 8001692:	074a      	lsls	r2, r1, #29
 8001694:	08db      	lsrs	r3, r3, #3
 8001696:	4313      	orrs	r3, r2
 8001698:	08c9      	lsrs	r1, r1, #3
 800169a:	e6d1      	b.n	8001440 <__aeabi_dadd+0x2a4>
 800169c:	1a1c      	subs	r4, r3, r0
 800169e:	464a      	mov	r2, r9
 80016a0:	42a3      	cmp	r3, r4
 80016a2:	419b      	sbcs	r3, r3
 80016a4:	1a89      	subs	r1, r1, r2
 80016a6:	425b      	negs	r3, r3
 80016a8:	1acb      	subs	r3, r1, r3
 80016aa:	469a      	mov	sl, r3
 80016ac:	2601      	movs	r6, #1
 80016ae:	e5c1      	b.n	8001234 <__aeabi_dadd+0x98>
 80016b0:	074a      	lsls	r2, r1, #29
 80016b2:	08db      	lsrs	r3, r3, #3
 80016b4:	4313      	orrs	r3, r2
 80016b6:	08c9      	lsrs	r1, r1, #3
 80016b8:	e69f      	b.n	80013fa <__aeabi_dadd+0x25e>
 80016ba:	4643      	mov	r3, r8
 80016bc:	08d8      	lsrs	r0, r3, #3
 80016be:	464b      	mov	r3, r9
 80016c0:	464a      	mov	r2, r9
 80016c2:	075b      	lsls	r3, r3, #29
 80016c4:	4665      	mov	r5, ip
 80016c6:	4303      	orrs	r3, r0
 80016c8:	08d1      	lsrs	r1, r2, #3
 80016ca:	e6b9      	b.n	8001440 <__aeabi_dadd+0x2a4>
 80016cc:	4643      	mov	r3, r8
 80016ce:	08d8      	lsrs	r0, r3, #3
 80016d0:	464b      	mov	r3, r9
 80016d2:	464a      	mov	r2, r9
 80016d4:	075b      	lsls	r3, r3, #29
 80016d6:	4303      	orrs	r3, r0
 80016d8:	08d1      	lsrs	r1, r2, #3
 80016da:	e6b1      	b.n	8001440 <__aeabi_dadd+0x2a4>
 80016dc:	4319      	orrs	r1, r3
 80016de:	000c      	movs	r4, r1
 80016e0:	1e63      	subs	r3, r4, #1
 80016e2:	419c      	sbcs	r4, r3
 80016e4:	e6eb      	b.n	80014be <__aeabi_dadd+0x322>
 80016e6:	003c      	movs	r4, r7
 80016e8:	000d      	movs	r5, r1
 80016ea:	3c20      	subs	r4, #32
 80016ec:	40e5      	lsrs	r5, r4
 80016ee:	2f20      	cmp	r7, #32
 80016f0:	d003      	beq.n	80016fa <__aeabi_dadd+0x55e>
 80016f2:	2440      	movs	r4, #64	; 0x40
 80016f4:	1be4      	subs	r4, r4, r7
 80016f6:	40a1      	lsls	r1, r4
 80016f8:	430b      	orrs	r3, r1
 80016fa:	001c      	movs	r4, r3
 80016fc:	1e63      	subs	r3, r4, #1
 80016fe:	419c      	sbcs	r4, r3
 8001700:	432c      	orrs	r4, r5
 8001702:	e770      	b.n	80015e6 <__aeabi_dadd+0x44a>
 8001704:	2a00      	cmp	r2, #0
 8001706:	d0e1      	beq.n	80016cc <__aeabi_dadd+0x530>
 8001708:	464a      	mov	r2, r9
 800170a:	4302      	orrs	r2, r0
 800170c:	d0c1      	beq.n	8001692 <__aeabi_dadd+0x4f6>
 800170e:	074a      	lsls	r2, r1, #29
 8001710:	08db      	lsrs	r3, r3, #3
 8001712:	4313      	orrs	r3, r2
 8001714:	2280      	movs	r2, #128	; 0x80
 8001716:	08c9      	lsrs	r1, r1, #3
 8001718:	0312      	lsls	r2, r2, #12
 800171a:	4211      	tst	r1, r2
 800171c:	d008      	beq.n	8001730 <__aeabi_dadd+0x594>
 800171e:	4648      	mov	r0, r9
 8001720:	08c4      	lsrs	r4, r0, #3
 8001722:	4214      	tst	r4, r2
 8001724:	d104      	bne.n	8001730 <__aeabi_dadd+0x594>
 8001726:	4643      	mov	r3, r8
 8001728:	0021      	movs	r1, r4
 800172a:	08db      	lsrs	r3, r3, #3
 800172c:	0742      	lsls	r2, r0, #29
 800172e:	4313      	orrs	r3, r2
 8001730:	0f5a      	lsrs	r2, r3, #29
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	0752      	lsls	r2, r2, #29
 8001736:	08db      	lsrs	r3, r3, #3
 8001738:	4313      	orrs	r3, r2
 800173a:	e681      	b.n	8001440 <__aeabi_dadd+0x2a4>
 800173c:	464b      	mov	r3, r9
 800173e:	4303      	orrs	r3, r0
 8001740:	d100      	bne.n	8001744 <__aeabi_dadd+0x5a8>
 8001742:	e714      	b.n	800156e <__aeabi_dadd+0x3d2>
 8001744:	464b      	mov	r3, r9
 8001746:	464a      	mov	r2, r9
 8001748:	08c0      	lsrs	r0, r0, #3
 800174a:	075b      	lsls	r3, r3, #29
 800174c:	4665      	mov	r5, ip
 800174e:	4303      	orrs	r3, r0
 8001750:	08d1      	lsrs	r1, r2, #3
 8001752:	e655      	b.n	8001400 <__aeabi_dadd+0x264>
 8001754:	1ac4      	subs	r4, r0, r3
 8001756:	45a0      	cmp	r8, r4
 8001758:	4180      	sbcs	r0, r0
 800175a:	464b      	mov	r3, r9
 800175c:	4240      	negs	r0, r0
 800175e:	1a59      	subs	r1, r3, r1
 8001760:	1a0b      	subs	r3, r1, r0
 8001762:	469a      	mov	sl, r3
 8001764:	4665      	mov	r5, ip
 8001766:	2601      	movs	r6, #1
 8001768:	e564      	b.n	8001234 <__aeabi_dadd+0x98>
 800176a:	1a1c      	subs	r4, r3, r0
 800176c:	464a      	mov	r2, r9
 800176e:	42a3      	cmp	r3, r4
 8001770:	4180      	sbcs	r0, r0
 8001772:	1a8a      	subs	r2, r1, r2
 8001774:	4240      	negs	r0, r0
 8001776:	1a12      	subs	r2, r2, r0
 8001778:	4692      	mov	sl, r2
 800177a:	0212      	lsls	r2, r2, #8
 800177c:	d549      	bpl.n	8001812 <__aeabi_dadd+0x676>
 800177e:	4642      	mov	r2, r8
 8001780:	1ad4      	subs	r4, r2, r3
 8001782:	45a0      	cmp	r8, r4
 8001784:	4180      	sbcs	r0, r0
 8001786:	464b      	mov	r3, r9
 8001788:	4240      	negs	r0, r0
 800178a:	1a59      	subs	r1, r3, r1
 800178c:	1a0b      	subs	r3, r1, r0
 800178e:	469a      	mov	sl, r3
 8001790:	4665      	mov	r5, ip
 8001792:	e57f      	b.n	8001294 <__aeabi_dadd+0xf8>
 8001794:	464b      	mov	r3, r9
 8001796:	464a      	mov	r2, r9
 8001798:	08c0      	lsrs	r0, r0, #3
 800179a:	075b      	lsls	r3, r3, #29
 800179c:	4303      	orrs	r3, r0
 800179e:	08d1      	lsrs	r1, r2, #3
 80017a0:	e62b      	b.n	80013fa <__aeabi_dadd+0x25e>
 80017a2:	464a      	mov	r2, r9
 80017a4:	08db      	lsrs	r3, r3, #3
 80017a6:	4302      	orrs	r2, r0
 80017a8:	d138      	bne.n	800181c <__aeabi_dadd+0x680>
 80017aa:	074a      	lsls	r2, r1, #29
 80017ac:	4313      	orrs	r3, r2
 80017ae:	08c9      	lsrs	r1, r1, #3
 80017b0:	e646      	b.n	8001440 <__aeabi_dadd+0x2a4>
 80017b2:	464b      	mov	r3, r9
 80017b4:	464a      	mov	r2, r9
 80017b6:	08c0      	lsrs	r0, r0, #3
 80017b8:	075b      	lsls	r3, r3, #29
 80017ba:	4303      	orrs	r3, r0
 80017bc:	08d1      	lsrs	r1, r2, #3
 80017be:	e61f      	b.n	8001400 <__aeabi_dadd+0x264>
 80017c0:	181c      	adds	r4, r3, r0
 80017c2:	429c      	cmp	r4, r3
 80017c4:	419b      	sbcs	r3, r3
 80017c6:	4449      	add	r1, r9
 80017c8:	468a      	mov	sl, r1
 80017ca:	425b      	negs	r3, r3
 80017cc:	449a      	add	sl, r3
 80017ce:	4653      	mov	r3, sl
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	d400      	bmi.n	80017d6 <__aeabi_dadd+0x63a>
 80017d4:	e607      	b.n	80013e6 <__aeabi_dadd+0x24a>
 80017d6:	4652      	mov	r2, sl
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <__aeabi_dadd+0x6bc>)
 80017da:	2601      	movs	r6, #1
 80017dc:	401a      	ands	r2, r3
 80017de:	4692      	mov	sl, r2
 80017e0:	e601      	b.n	80013e6 <__aeabi_dadd+0x24a>
 80017e2:	003c      	movs	r4, r7
 80017e4:	000e      	movs	r6, r1
 80017e6:	3c20      	subs	r4, #32
 80017e8:	40e6      	lsrs	r6, r4
 80017ea:	2f20      	cmp	r7, #32
 80017ec:	d003      	beq.n	80017f6 <__aeabi_dadd+0x65a>
 80017ee:	2440      	movs	r4, #64	; 0x40
 80017f0:	1be4      	subs	r4, r4, r7
 80017f2:	40a1      	lsls	r1, r4
 80017f4:	430b      	orrs	r3, r1
 80017f6:	001c      	movs	r4, r3
 80017f8:	1e63      	subs	r3, r4, #1
 80017fa:	419c      	sbcs	r4, r3
 80017fc:	4334      	orrs	r4, r6
 80017fe:	e65e      	b.n	80014be <__aeabi_dadd+0x322>
 8001800:	4443      	add	r3, r8
 8001802:	4283      	cmp	r3, r0
 8001804:	4180      	sbcs	r0, r0
 8001806:	4449      	add	r1, r9
 8001808:	468a      	mov	sl, r1
 800180a:	4240      	negs	r0, r0
 800180c:	001c      	movs	r4, r3
 800180e:	4482      	add	sl, r0
 8001810:	e6bc      	b.n	800158c <__aeabi_dadd+0x3f0>
 8001812:	4653      	mov	r3, sl
 8001814:	4323      	orrs	r3, r4
 8001816:	d100      	bne.n	800181a <__aeabi_dadd+0x67e>
 8001818:	e6a9      	b.n	800156e <__aeabi_dadd+0x3d2>
 800181a:	e5e4      	b.n	80013e6 <__aeabi_dadd+0x24a>
 800181c:	074a      	lsls	r2, r1, #29
 800181e:	4313      	orrs	r3, r2
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	08c9      	lsrs	r1, r1, #3
 8001824:	0312      	lsls	r2, r2, #12
 8001826:	4211      	tst	r1, r2
 8001828:	d009      	beq.n	800183e <__aeabi_dadd+0x6a2>
 800182a:	4648      	mov	r0, r9
 800182c:	08c4      	lsrs	r4, r0, #3
 800182e:	4214      	tst	r4, r2
 8001830:	d105      	bne.n	800183e <__aeabi_dadd+0x6a2>
 8001832:	4643      	mov	r3, r8
 8001834:	4665      	mov	r5, ip
 8001836:	0021      	movs	r1, r4
 8001838:	08db      	lsrs	r3, r3, #3
 800183a:	0742      	lsls	r2, r0, #29
 800183c:	4313      	orrs	r3, r2
 800183e:	0f5a      	lsrs	r2, r3, #29
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	08db      	lsrs	r3, r3, #3
 8001844:	0752      	lsls	r2, r2, #29
 8001846:	4313      	orrs	r3, r2
 8001848:	e5fa      	b.n	8001440 <__aeabi_dadd+0x2a4>
 800184a:	2300      	movs	r3, #0
 800184c:	4a01      	ldr	r2, [pc, #4]	; (8001854 <__aeabi_dadd+0x6b8>)
 800184e:	001c      	movs	r4, r3
 8001850:	e540      	b.n	80012d4 <__aeabi_dadd+0x138>
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	000007ff 	.word	0x000007ff
 8001858:	ff7fffff 	.word	0xff7fffff

0800185c <__aeabi_ddiv>:
 800185c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185e:	4657      	mov	r7, sl
 8001860:	464e      	mov	r6, r9
 8001862:	4645      	mov	r5, r8
 8001864:	46de      	mov	lr, fp
 8001866:	b5e0      	push	{r5, r6, r7, lr}
 8001868:	030c      	lsls	r4, r1, #12
 800186a:	001f      	movs	r7, r3
 800186c:	004b      	lsls	r3, r1, #1
 800186e:	4681      	mov	r9, r0
 8001870:	4692      	mov	sl, r2
 8001872:	0005      	movs	r5, r0
 8001874:	b085      	sub	sp, #20
 8001876:	0b24      	lsrs	r4, r4, #12
 8001878:	0d5b      	lsrs	r3, r3, #21
 800187a:	0fce      	lsrs	r6, r1, #31
 800187c:	2b00      	cmp	r3, #0
 800187e:	d100      	bne.n	8001882 <__aeabi_ddiv+0x26>
 8001880:	e152      	b.n	8001b28 <__aeabi_ddiv+0x2cc>
 8001882:	4ad2      	ldr	r2, [pc, #840]	; (8001bcc <__aeabi_ddiv+0x370>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d100      	bne.n	800188a <__aeabi_ddiv+0x2e>
 8001888:	e16e      	b.n	8001b68 <__aeabi_ddiv+0x30c>
 800188a:	0f42      	lsrs	r2, r0, #29
 800188c:	00e4      	lsls	r4, r4, #3
 800188e:	4314      	orrs	r4, r2
 8001890:	2280      	movs	r2, #128	; 0x80
 8001892:	0412      	lsls	r2, r2, #16
 8001894:	4322      	orrs	r2, r4
 8001896:	4690      	mov	r8, r2
 8001898:	4acd      	ldr	r2, [pc, #820]	; (8001bd0 <__aeabi_ddiv+0x374>)
 800189a:	00c5      	lsls	r5, r0, #3
 800189c:	4693      	mov	fp, r2
 800189e:	449b      	add	fp, r3
 80018a0:	2300      	movs	r3, #0
 80018a2:	4699      	mov	r9, r3
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	033c      	lsls	r4, r7, #12
 80018a8:	007b      	lsls	r3, r7, #1
 80018aa:	4650      	mov	r0, sl
 80018ac:	0b24      	lsrs	r4, r4, #12
 80018ae:	0d5b      	lsrs	r3, r3, #21
 80018b0:	0fff      	lsrs	r7, r7, #31
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d100      	bne.n	80018b8 <__aeabi_ddiv+0x5c>
 80018b6:	e11a      	b.n	8001aee <__aeabi_ddiv+0x292>
 80018b8:	4ac4      	ldr	r2, [pc, #784]	; (8001bcc <__aeabi_ddiv+0x370>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d100      	bne.n	80018c0 <__aeabi_ddiv+0x64>
 80018be:	e15e      	b.n	8001b7e <__aeabi_ddiv+0x322>
 80018c0:	0f42      	lsrs	r2, r0, #29
 80018c2:	00e4      	lsls	r4, r4, #3
 80018c4:	4322      	orrs	r2, r4
 80018c6:	2480      	movs	r4, #128	; 0x80
 80018c8:	0424      	lsls	r4, r4, #16
 80018ca:	4314      	orrs	r4, r2
 80018cc:	4ac0      	ldr	r2, [pc, #768]	; (8001bd0 <__aeabi_ddiv+0x374>)
 80018ce:	00c1      	lsls	r1, r0, #3
 80018d0:	4694      	mov	ip, r2
 80018d2:	465a      	mov	r2, fp
 80018d4:	4463      	add	r3, ip
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	469b      	mov	fp, r3
 80018da:	2000      	movs	r0, #0
 80018dc:	0033      	movs	r3, r6
 80018de:	407b      	eors	r3, r7
 80018e0:	469a      	mov	sl, r3
 80018e2:	464b      	mov	r3, r9
 80018e4:	2b0f      	cmp	r3, #15
 80018e6:	d827      	bhi.n	8001938 <__aeabi_ddiv+0xdc>
 80018e8:	4aba      	ldr	r2, [pc, #744]	; (8001bd4 <__aeabi_ddiv+0x378>)
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	58d3      	ldr	r3, [r2, r3]
 80018ee:	469f      	mov	pc, r3
 80018f0:	46b2      	mov	sl, r6
 80018f2:	9b00      	ldr	r3, [sp, #0]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d016      	beq.n	8001926 <__aeabi_ddiv+0xca>
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d100      	bne.n	80018fe <__aeabi_ddiv+0xa2>
 80018fc:	e287      	b.n	8001e0e <__aeabi_ddiv+0x5b2>
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d000      	beq.n	8001904 <__aeabi_ddiv+0xa8>
 8001902:	e0d5      	b.n	8001ab0 <__aeabi_ddiv+0x254>
 8001904:	2300      	movs	r3, #0
 8001906:	2200      	movs	r2, #0
 8001908:	2500      	movs	r5, #0
 800190a:	051b      	lsls	r3, r3, #20
 800190c:	4313      	orrs	r3, r2
 800190e:	4652      	mov	r2, sl
 8001910:	07d2      	lsls	r2, r2, #31
 8001912:	4313      	orrs	r3, r2
 8001914:	0028      	movs	r0, r5
 8001916:	0019      	movs	r1, r3
 8001918:	b005      	add	sp, #20
 800191a:	bcf0      	pop	{r4, r5, r6, r7}
 800191c:	46bb      	mov	fp, r7
 800191e:	46b2      	mov	sl, r6
 8001920:	46a9      	mov	r9, r5
 8001922:	46a0      	mov	r8, r4
 8001924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001926:	2200      	movs	r2, #0
 8001928:	2500      	movs	r5, #0
 800192a:	4ba8      	ldr	r3, [pc, #672]	; (8001bcc <__aeabi_ddiv+0x370>)
 800192c:	e7ed      	b.n	800190a <__aeabi_ddiv+0xae>
 800192e:	46ba      	mov	sl, r7
 8001930:	46a0      	mov	r8, r4
 8001932:	000d      	movs	r5, r1
 8001934:	9000      	str	r0, [sp, #0]
 8001936:	e7dc      	b.n	80018f2 <__aeabi_ddiv+0x96>
 8001938:	4544      	cmp	r4, r8
 800193a:	d200      	bcs.n	800193e <__aeabi_ddiv+0xe2>
 800193c:	e1c4      	b.n	8001cc8 <__aeabi_ddiv+0x46c>
 800193e:	d100      	bne.n	8001942 <__aeabi_ddiv+0xe6>
 8001940:	e1bf      	b.n	8001cc2 <__aeabi_ddiv+0x466>
 8001942:	2301      	movs	r3, #1
 8001944:	425b      	negs	r3, r3
 8001946:	469c      	mov	ip, r3
 8001948:	002e      	movs	r6, r5
 800194a:	4640      	mov	r0, r8
 800194c:	2500      	movs	r5, #0
 800194e:	44e3      	add	fp, ip
 8001950:	0223      	lsls	r3, r4, #8
 8001952:	0e0c      	lsrs	r4, r1, #24
 8001954:	431c      	orrs	r4, r3
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	4699      	mov	r9, r3
 800195a:	0423      	lsls	r3, r4, #16
 800195c:	020a      	lsls	r2, r1, #8
 800195e:	0c1f      	lsrs	r7, r3, #16
 8001960:	4649      	mov	r1, r9
 8001962:	9200      	str	r2, [sp, #0]
 8001964:	9701      	str	r7, [sp, #4]
 8001966:	f7fe fc71 	bl	800024c <__aeabi_uidivmod>
 800196a:	0002      	movs	r2, r0
 800196c:	437a      	muls	r2, r7
 800196e:	040b      	lsls	r3, r1, #16
 8001970:	0c31      	lsrs	r1, r6, #16
 8001972:	4680      	mov	r8, r0
 8001974:	4319      	orrs	r1, r3
 8001976:	428a      	cmp	r2, r1
 8001978:	d907      	bls.n	800198a <__aeabi_ddiv+0x12e>
 800197a:	2301      	movs	r3, #1
 800197c:	425b      	negs	r3, r3
 800197e:	469c      	mov	ip, r3
 8001980:	1909      	adds	r1, r1, r4
 8001982:	44e0      	add	r8, ip
 8001984:	428c      	cmp	r4, r1
 8001986:	d800      	bhi.n	800198a <__aeabi_ddiv+0x12e>
 8001988:	e201      	b.n	8001d8e <__aeabi_ddiv+0x532>
 800198a:	1a88      	subs	r0, r1, r2
 800198c:	4649      	mov	r1, r9
 800198e:	f7fe fc5d 	bl	800024c <__aeabi_uidivmod>
 8001992:	9a01      	ldr	r2, [sp, #4]
 8001994:	0436      	lsls	r6, r6, #16
 8001996:	4342      	muls	r2, r0
 8001998:	0409      	lsls	r1, r1, #16
 800199a:	0c36      	lsrs	r6, r6, #16
 800199c:	0003      	movs	r3, r0
 800199e:	430e      	orrs	r6, r1
 80019a0:	42b2      	cmp	r2, r6
 80019a2:	d904      	bls.n	80019ae <__aeabi_ddiv+0x152>
 80019a4:	1936      	adds	r6, r6, r4
 80019a6:	3b01      	subs	r3, #1
 80019a8:	42b4      	cmp	r4, r6
 80019aa:	d800      	bhi.n	80019ae <__aeabi_ddiv+0x152>
 80019ac:	e1e9      	b.n	8001d82 <__aeabi_ddiv+0x526>
 80019ae:	1ab0      	subs	r0, r6, r2
 80019b0:	4642      	mov	r2, r8
 80019b2:	9e00      	ldr	r6, [sp, #0]
 80019b4:	0412      	lsls	r2, r2, #16
 80019b6:	431a      	orrs	r2, r3
 80019b8:	0c33      	lsrs	r3, r6, #16
 80019ba:	001f      	movs	r7, r3
 80019bc:	0c11      	lsrs	r1, r2, #16
 80019be:	4690      	mov	r8, r2
 80019c0:	9302      	str	r3, [sp, #8]
 80019c2:	0413      	lsls	r3, r2, #16
 80019c4:	0432      	lsls	r2, r6, #16
 80019c6:	0c16      	lsrs	r6, r2, #16
 80019c8:	0032      	movs	r2, r6
 80019ca:	0c1b      	lsrs	r3, r3, #16
 80019cc:	435a      	muls	r2, r3
 80019ce:	9603      	str	r6, [sp, #12]
 80019d0:	437b      	muls	r3, r7
 80019d2:	434e      	muls	r6, r1
 80019d4:	4379      	muls	r1, r7
 80019d6:	0c17      	lsrs	r7, r2, #16
 80019d8:	46bc      	mov	ip, r7
 80019da:	199b      	adds	r3, r3, r6
 80019dc:	4463      	add	r3, ip
 80019de:	429e      	cmp	r6, r3
 80019e0:	d903      	bls.n	80019ea <__aeabi_ddiv+0x18e>
 80019e2:	2680      	movs	r6, #128	; 0x80
 80019e4:	0276      	lsls	r6, r6, #9
 80019e6:	46b4      	mov	ip, r6
 80019e8:	4461      	add	r1, ip
 80019ea:	0c1e      	lsrs	r6, r3, #16
 80019ec:	1871      	adds	r1, r6, r1
 80019ee:	0416      	lsls	r6, r2, #16
 80019f0:	041b      	lsls	r3, r3, #16
 80019f2:	0c36      	lsrs	r6, r6, #16
 80019f4:	199e      	adds	r6, r3, r6
 80019f6:	4288      	cmp	r0, r1
 80019f8:	d302      	bcc.n	8001a00 <__aeabi_ddiv+0x1a4>
 80019fa:	d112      	bne.n	8001a22 <__aeabi_ddiv+0x1c6>
 80019fc:	42b5      	cmp	r5, r6
 80019fe:	d210      	bcs.n	8001a22 <__aeabi_ddiv+0x1c6>
 8001a00:	4643      	mov	r3, r8
 8001a02:	1e5a      	subs	r2, r3, #1
 8001a04:	9b00      	ldr	r3, [sp, #0]
 8001a06:	469c      	mov	ip, r3
 8001a08:	4465      	add	r5, ip
 8001a0a:	001f      	movs	r7, r3
 8001a0c:	429d      	cmp	r5, r3
 8001a0e:	419b      	sbcs	r3, r3
 8001a10:	425b      	negs	r3, r3
 8001a12:	191b      	adds	r3, r3, r4
 8001a14:	18c0      	adds	r0, r0, r3
 8001a16:	4284      	cmp	r4, r0
 8001a18:	d200      	bcs.n	8001a1c <__aeabi_ddiv+0x1c0>
 8001a1a:	e19e      	b.n	8001d5a <__aeabi_ddiv+0x4fe>
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_ddiv+0x1c4>
 8001a1e:	e199      	b.n	8001d54 <__aeabi_ddiv+0x4f8>
 8001a20:	4690      	mov	r8, r2
 8001a22:	1bae      	subs	r6, r5, r6
 8001a24:	42b5      	cmp	r5, r6
 8001a26:	41ad      	sbcs	r5, r5
 8001a28:	1a40      	subs	r0, r0, r1
 8001a2a:	426d      	negs	r5, r5
 8001a2c:	1b40      	subs	r0, r0, r5
 8001a2e:	4284      	cmp	r4, r0
 8001a30:	d100      	bne.n	8001a34 <__aeabi_ddiv+0x1d8>
 8001a32:	e1d2      	b.n	8001dda <__aeabi_ddiv+0x57e>
 8001a34:	4649      	mov	r1, r9
 8001a36:	f7fe fc09 	bl	800024c <__aeabi_uidivmod>
 8001a3a:	9a01      	ldr	r2, [sp, #4]
 8001a3c:	040b      	lsls	r3, r1, #16
 8001a3e:	4342      	muls	r2, r0
 8001a40:	0c31      	lsrs	r1, r6, #16
 8001a42:	0005      	movs	r5, r0
 8001a44:	4319      	orrs	r1, r3
 8001a46:	428a      	cmp	r2, r1
 8001a48:	d900      	bls.n	8001a4c <__aeabi_ddiv+0x1f0>
 8001a4a:	e16c      	b.n	8001d26 <__aeabi_ddiv+0x4ca>
 8001a4c:	1a88      	subs	r0, r1, r2
 8001a4e:	4649      	mov	r1, r9
 8001a50:	f7fe fbfc 	bl	800024c <__aeabi_uidivmod>
 8001a54:	9a01      	ldr	r2, [sp, #4]
 8001a56:	0436      	lsls	r6, r6, #16
 8001a58:	4342      	muls	r2, r0
 8001a5a:	0409      	lsls	r1, r1, #16
 8001a5c:	0c36      	lsrs	r6, r6, #16
 8001a5e:	0003      	movs	r3, r0
 8001a60:	430e      	orrs	r6, r1
 8001a62:	42b2      	cmp	r2, r6
 8001a64:	d900      	bls.n	8001a68 <__aeabi_ddiv+0x20c>
 8001a66:	e153      	b.n	8001d10 <__aeabi_ddiv+0x4b4>
 8001a68:	9803      	ldr	r0, [sp, #12]
 8001a6a:	1ab6      	subs	r6, r6, r2
 8001a6c:	0002      	movs	r2, r0
 8001a6e:	042d      	lsls	r5, r5, #16
 8001a70:	431d      	orrs	r5, r3
 8001a72:	9f02      	ldr	r7, [sp, #8]
 8001a74:	042b      	lsls	r3, r5, #16
 8001a76:	0c1b      	lsrs	r3, r3, #16
 8001a78:	435a      	muls	r2, r3
 8001a7a:	437b      	muls	r3, r7
 8001a7c:	469c      	mov	ip, r3
 8001a7e:	0c29      	lsrs	r1, r5, #16
 8001a80:	4348      	muls	r0, r1
 8001a82:	0c13      	lsrs	r3, r2, #16
 8001a84:	4484      	add	ip, r0
 8001a86:	4463      	add	r3, ip
 8001a88:	4379      	muls	r1, r7
 8001a8a:	4298      	cmp	r0, r3
 8001a8c:	d903      	bls.n	8001a96 <__aeabi_ddiv+0x23a>
 8001a8e:	2080      	movs	r0, #128	; 0x80
 8001a90:	0240      	lsls	r0, r0, #9
 8001a92:	4684      	mov	ip, r0
 8001a94:	4461      	add	r1, ip
 8001a96:	0c18      	lsrs	r0, r3, #16
 8001a98:	0412      	lsls	r2, r2, #16
 8001a9a:	041b      	lsls	r3, r3, #16
 8001a9c:	0c12      	lsrs	r2, r2, #16
 8001a9e:	1840      	adds	r0, r0, r1
 8001aa0:	189b      	adds	r3, r3, r2
 8001aa2:	4286      	cmp	r6, r0
 8001aa4:	d200      	bcs.n	8001aa8 <__aeabi_ddiv+0x24c>
 8001aa6:	e100      	b.n	8001caa <__aeabi_ddiv+0x44e>
 8001aa8:	d100      	bne.n	8001aac <__aeabi_ddiv+0x250>
 8001aaa:	e0fb      	b.n	8001ca4 <__aeabi_ddiv+0x448>
 8001aac:	2301      	movs	r3, #1
 8001aae:	431d      	orrs	r5, r3
 8001ab0:	4b49      	ldr	r3, [pc, #292]	; (8001bd8 <__aeabi_ddiv+0x37c>)
 8001ab2:	445b      	add	r3, fp
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	dc00      	bgt.n	8001aba <__aeabi_ddiv+0x25e>
 8001ab8:	e0aa      	b.n	8001c10 <__aeabi_ddiv+0x3b4>
 8001aba:	076a      	lsls	r2, r5, #29
 8001abc:	d000      	beq.n	8001ac0 <__aeabi_ddiv+0x264>
 8001abe:	e13d      	b.n	8001d3c <__aeabi_ddiv+0x4e0>
 8001ac0:	08e9      	lsrs	r1, r5, #3
 8001ac2:	4642      	mov	r2, r8
 8001ac4:	01d2      	lsls	r2, r2, #7
 8001ac6:	d506      	bpl.n	8001ad6 <__aeabi_ddiv+0x27a>
 8001ac8:	4642      	mov	r2, r8
 8001aca:	4b44      	ldr	r3, [pc, #272]	; (8001bdc <__aeabi_ddiv+0x380>)
 8001acc:	401a      	ands	r2, r3
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	4690      	mov	r8, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	445b      	add	r3, fp
 8001ad6:	4a42      	ldr	r2, [pc, #264]	; (8001be0 <__aeabi_ddiv+0x384>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	dd00      	ble.n	8001ade <__aeabi_ddiv+0x282>
 8001adc:	e723      	b.n	8001926 <__aeabi_ddiv+0xca>
 8001ade:	4642      	mov	r2, r8
 8001ae0:	055b      	lsls	r3, r3, #21
 8001ae2:	0755      	lsls	r5, r2, #29
 8001ae4:	0252      	lsls	r2, r2, #9
 8001ae6:	430d      	orrs	r5, r1
 8001ae8:	0b12      	lsrs	r2, r2, #12
 8001aea:	0d5b      	lsrs	r3, r3, #21
 8001aec:	e70d      	b.n	800190a <__aeabi_ddiv+0xae>
 8001aee:	4651      	mov	r1, sl
 8001af0:	4321      	orrs	r1, r4
 8001af2:	d100      	bne.n	8001af6 <__aeabi_ddiv+0x29a>
 8001af4:	e07c      	b.n	8001bf0 <__aeabi_ddiv+0x394>
 8001af6:	2c00      	cmp	r4, #0
 8001af8:	d100      	bne.n	8001afc <__aeabi_ddiv+0x2a0>
 8001afa:	e0fb      	b.n	8001cf4 <__aeabi_ddiv+0x498>
 8001afc:	0020      	movs	r0, r4
 8001afe:	f001 fa17 	bl	8002f30 <__clzsi2>
 8001b02:	0002      	movs	r2, r0
 8001b04:	3a0b      	subs	r2, #11
 8001b06:	231d      	movs	r3, #29
 8001b08:	1a9b      	subs	r3, r3, r2
 8001b0a:	4652      	mov	r2, sl
 8001b0c:	0001      	movs	r1, r0
 8001b0e:	40da      	lsrs	r2, r3
 8001b10:	4653      	mov	r3, sl
 8001b12:	3908      	subs	r1, #8
 8001b14:	408b      	lsls	r3, r1
 8001b16:	408c      	lsls	r4, r1
 8001b18:	0019      	movs	r1, r3
 8001b1a:	4314      	orrs	r4, r2
 8001b1c:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <__aeabi_ddiv+0x388>)
 8001b1e:	4458      	add	r0, fp
 8001b20:	469b      	mov	fp, r3
 8001b22:	4483      	add	fp, r0
 8001b24:	2000      	movs	r0, #0
 8001b26:	e6d9      	b.n	80018dc <__aeabi_ddiv+0x80>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	4323      	orrs	r3, r4
 8001b2c:	4698      	mov	r8, r3
 8001b2e:	d044      	beq.n	8001bba <__aeabi_ddiv+0x35e>
 8001b30:	2c00      	cmp	r4, #0
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x2da>
 8001b34:	e0cf      	b.n	8001cd6 <__aeabi_ddiv+0x47a>
 8001b36:	0020      	movs	r0, r4
 8001b38:	f001 f9fa 	bl	8002f30 <__clzsi2>
 8001b3c:	0001      	movs	r1, r0
 8001b3e:	0002      	movs	r2, r0
 8001b40:	390b      	subs	r1, #11
 8001b42:	231d      	movs	r3, #29
 8001b44:	1a5b      	subs	r3, r3, r1
 8001b46:	4649      	mov	r1, r9
 8001b48:	0010      	movs	r0, r2
 8001b4a:	40d9      	lsrs	r1, r3
 8001b4c:	3808      	subs	r0, #8
 8001b4e:	4084      	lsls	r4, r0
 8001b50:	000b      	movs	r3, r1
 8001b52:	464d      	mov	r5, r9
 8001b54:	4323      	orrs	r3, r4
 8001b56:	4698      	mov	r8, r3
 8001b58:	4085      	lsls	r5, r0
 8001b5a:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_ddiv+0x38c>)
 8001b5c:	1a9b      	subs	r3, r3, r2
 8001b5e:	469b      	mov	fp, r3
 8001b60:	2300      	movs	r3, #0
 8001b62:	4699      	mov	r9, r3
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	e69e      	b.n	80018a6 <__aeabi_ddiv+0x4a>
 8001b68:	0002      	movs	r2, r0
 8001b6a:	4322      	orrs	r2, r4
 8001b6c:	4690      	mov	r8, r2
 8001b6e:	d11d      	bne.n	8001bac <__aeabi_ddiv+0x350>
 8001b70:	2208      	movs	r2, #8
 8001b72:	469b      	mov	fp, r3
 8001b74:	2302      	movs	r3, #2
 8001b76:	2500      	movs	r5, #0
 8001b78:	4691      	mov	r9, r2
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	e693      	b.n	80018a6 <__aeabi_ddiv+0x4a>
 8001b7e:	4651      	mov	r1, sl
 8001b80:	4321      	orrs	r1, r4
 8001b82:	d109      	bne.n	8001b98 <__aeabi_ddiv+0x33c>
 8001b84:	2302      	movs	r3, #2
 8001b86:	464a      	mov	r2, r9
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <__aeabi_ddiv+0x390>)
 8001b8c:	4691      	mov	r9, r2
 8001b8e:	469c      	mov	ip, r3
 8001b90:	2400      	movs	r4, #0
 8001b92:	2002      	movs	r0, #2
 8001b94:	44e3      	add	fp, ip
 8001b96:	e6a1      	b.n	80018dc <__aeabi_ddiv+0x80>
 8001b98:	2303      	movs	r3, #3
 8001b9a:	464a      	mov	r2, r9
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <__aeabi_ddiv+0x390>)
 8001ba0:	4691      	mov	r9, r2
 8001ba2:	469c      	mov	ip, r3
 8001ba4:	4651      	mov	r1, sl
 8001ba6:	2003      	movs	r0, #3
 8001ba8:	44e3      	add	fp, ip
 8001baa:	e697      	b.n	80018dc <__aeabi_ddiv+0x80>
 8001bac:	220c      	movs	r2, #12
 8001bae:	469b      	mov	fp, r3
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	46a0      	mov	r8, r4
 8001bb4:	4691      	mov	r9, r2
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	e675      	b.n	80018a6 <__aeabi_ddiv+0x4a>
 8001bba:	2304      	movs	r3, #4
 8001bbc:	4699      	mov	r9, r3
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	469b      	mov	fp, r3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	2500      	movs	r5, #0
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	e66d      	b.n	80018a6 <__aeabi_ddiv+0x4a>
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	000007ff 	.word	0x000007ff
 8001bd0:	fffffc01 	.word	0xfffffc01
 8001bd4:	0800a138 	.word	0x0800a138
 8001bd8:	000003ff 	.word	0x000003ff
 8001bdc:	feffffff 	.word	0xfeffffff
 8001be0:	000007fe 	.word	0x000007fe
 8001be4:	000003f3 	.word	0x000003f3
 8001be8:	fffffc0d 	.word	0xfffffc0d
 8001bec:	fffff801 	.word	0xfffff801
 8001bf0:	464a      	mov	r2, r9
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	4691      	mov	r9, r2
 8001bf8:	2400      	movs	r4, #0
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	e66e      	b.n	80018dc <__aeabi_ddiv+0x80>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2280      	movs	r2, #128	; 0x80
 8001c02:	469a      	mov	sl, r3
 8001c04:	2500      	movs	r5, #0
 8001c06:	4b88      	ldr	r3, [pc, #544]	; (8001e28 <__aeabi_ddiv+0x5cc>)
 8001c08:	0312      	lsls	r2, r2, #12
 8001c0a:	e67e      	b.n	800190a <__aeabi_ddiv+0xae>
 8001c0c:	2501      	movs	r5, #1
 8001c0e:	426d      	negs	r5, r5
 8001c10:	2201      	movs	r2, #1
 8001c12:	1ad2      	subs	r2, r2, r3
 8001c14:	2a38      	cmp	r2, #56	; 0x38
 8001c16:	dd00      	ble.n	8001c1a <__aeabi_ddiv+0x3be>
 8001c18:	e674      	b.n	8001904 <__aeabi_ddiv+0xa8>
 8001c1a:	2a1f      	cmp	r2, #31
 8001c1c:	dc00      	bgt.n	8001c20 <__aeabi_ddiv+0x3c4>
 8001c1e:	e0bd      	b.n	8001d9c <__aeabi_ddiv+0x540>
 8001c20:	211f      	movs	r1, #31
 8001c22:	4249      	negs	r1, r1
 8001c24:	1acb      	subs	r3, r1, r3
 8001c26:	4641      	mov	r1, r8
 8001c28:	40d9      	lsrs	r1, r3
 8001c2a:	000b      	movs	r3, r1
 8001c2c:	2a20      	cmp	r2, #32
 8001c2e:	d004      	beq.n	8001c3a <__aeabi_ddiv+0x3de>
 8001c30:	4641      	mov	r1, r8
 8001c32:	4a7e      	ldr	r2, [pc, #504]	; (8001e2c <__aeabi_ddiv+0x5d0>)
 8001c34:	445a      	add	r2, fp
 8001c36:	4091      	lsls	r1, r2
 8001c38:	430d      	orrs	r5, r1
 8001c3a:	0029      	movs	r1, r5
 8001c3c:	1e4a      	subs	r2, r1, #1
 8001c3e:	4191      	sbcs	r1, r2
 8001c40:	4319      	orrs	r1, r3
 8001c42:	2307      	movs	r3, #7
 8001c44:	001d      	movs	r5, r3
 8001c46:	2200      	movs	r2, #0
 8001c48:	400d      	ands	r5, r1
 8001c4a:	420b      	tst	r3, r1
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_ddiv+0x3f4>
 8001c4e:	e0d0      	b.n	8001df2 <__aeabi_ddiv+0x596>
 8001c50:	220f      	movs	r2, #15
 8001c52:	2300      	movs	r3, #0
 8001c54:	400a      	ands	r2, r1
 8001c56:	2a04      	cmp	r2, #4
 8001c58:	d100      	bne.n	8001c5c <__aeabi_ddiv+0x400>
 8001c5a:	e0c7      	b.n	8001dec <__aeabi_ddiv+0x590>
 8001c5c:	1d0a      	adds	r2, r1, #4
 8001c5e:	428a      	cmp	r2, r1
 8001c60:	4189      	sbcs	r1, r1
 8001c62:	4249      	negs	r1, r1
 8001c64:	185b      	adds	r3, r3, r1
 8001c66:	0011      	movs	r1, r2
 8001c68:	021a      	lsls	r2, r3, #8
 8001c6a:	d400      	bmi.n	8001c6e <__aeabi_ddiv+0x412>
 8001c6c:	e0be      	b.n	8001dec <__aeabi_ddiv+0x590>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	2200      	movs	r2, #0
 8001c72:	2500      	movs	r5, #0
 8001c74:	e649      	b.n	800190a <__aeabi_ddiv+0xae>
 8001c76:	2280      	movs	r2, #128	; 0x80
 8001c78:	4643      	mov	r3, r8
 8001c7a:	0312      	lsls	r2, r2, #12
 8001c7c:	4213      	tst	r3, r2
 8001c7e:	d008      	beq.n	8001c92 <__aeabi_ddiv+0x436>
 8001c80:	4214      	tst	r4, r2
 8001c82:	d106      	bne.n	8001c92 <__aeabi_ddiv+0x436>
 8001c84:	4322      	orrs	r2, r4
 8001c86:	0312      	lsls	r2, r2, #12
 8001c88:	46ba      	mov	sl, r7
 8001c8a:	000d      	movs	r5, r1
 8001c8c:	4b66      	ldr	r3, [pc, #408]	; (8001e28 <__aeabi_ddiv+0x5cc>)
 8001c8e:	0b12      	lsrs	r2, r2, #12
 8001c90:	e63b      	b.n	800190a <__aeabi_ddiv+0xae>
 8001c92:	2280      	movs	r2, #128	; 0x80
 8001c94:	4643      	mov	r3, r8
 8001c96:	0312      	lsls	r2, r2, #12
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	0312      	lsls	r2, r2, #12
 8001c9c:	46b2      	mov	sl, r6
 8001c9e:	4b62      	ldr	r3, [pc, #392]	; (8001e28 <__aeabi_ddiv+0x5cc>)
 8001ca0:	0b12      	lsrs	r2, r2, #12
 8001ca2:	e632      	b.n	800190a <__aeabi_ddiv+0xae>
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d100      	bne.n	8001caa <__aeabi_ddiv+0x44e>
 8001ca8:	e702      	b.n	8001ab0 <__aeabi_ddiv+0x254>
 8001caa:	19a6      	adds	r6, r4, r6
 8001cac:	1e6a      	subs	r2, r5, #1
 8001cae:	42a6      	cmp	r6, r4
 8001cb0:	d200      	bcs.n	8001cb4 <__aeabi_ddiv+0x458>
 8001cb2:	e089      	b.n	8001dc8 <__aeabi_ddiv+0x56c>
 8001cb4:	4286      	cmp	r6, r0
 8001cb6:	d200      	bcs.n	8001cba <__aeabi_ddiv+0x45e>
 8001cb8:	e09f      	b.n	8001dfa <__aeabi_ddiv+0x59e>
 8001cba:	d100      	bne.n	8001cbe <__aeabi_ddiv+0x462>
 8001cbc:	e0af      	b.n	8001e1e <__aeabi_ddiv+0x5c2>
 8001cbe:	0015      	movs	r5, r2
 8001cc0:	e6f4      	b.n	8001aac <__aeabi_ddiv+0x250>
 8001cc2:	42a9      	cmp	r1, r5
 8001cc4:	d900      	bls.n	8001cc8 <__aeabi_ddiv+0x46c>
 8001cc6:	e63c      	b.n	8001942 <__aeabi_ddiv+0xe6>
 8001cc8:	4643      	mov	r3, r8
 8001cca:	07de      	lsls	r6, r3, #31
 8001ccc:	0858      	lsrs	r0, r3, #1
 8001cce:	086b      	lsrs	r3, r5, #1
 8001cd0:	431e      	orrs	r6, r3
 8001cd2:	07ed      	lsls	r5, r5, #31
 8001cd4:	e63c      	b.n	8001950 <__aeabi_ddiv+0xf4>
 8001cd6:	f001 f92b 	bl	8002f30 <__clzsi2>
 8001cda:	0001      	movs	r1, r0
 8001cdc:	0002      	movs	r2, r0
 8001cde:	3115      	adds	r1, #21
 8001ce0:	3220      	adds	r2, #32
 8001ce2:	291c      	cmp	r1, #28
 8001ce4:	dc00      	bgt.n	8001ce8 <__aeabi_ddiv+0x48c>
 8001ce6:	e72c      	b.n	8001b42 <__aeabi_ddiv+0x2e6>
 8001ce8:	464b      	mov	r3, r9
 8001cea:	3808      	subs	r0, #8
 8001cec:	4083      	lsls	r3, r0
 8001cee:	2500      	movs	r5, #0
 8001cf0:	4698      	mov	r8, r3
 8001cf2:	e732      	b.n	8001b5a <__aeabi_ddiv+0x2fe>
 8001cf4:	f001 f91c 	bl	8002f30 <__clzsi2>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	001a      	movs	r2, r3
 8001cfc:	3215      	adds	r2, #21
 8001cfe:	3020      	adds	r0, #32
 8001d00:	2a1c      	cmp	r2, #28
 8001d02:	dc00      	bgt.n	8001d06 <__aeabi_ddiv+0x4aa>
 8001d04:	e6ff      	b.n	8001b06 <__aeabi_ddiv+0x2aa>
 8001d06:	4654      	mov	r4, sl
 8001d08:	3b08      	subs	r3, #8
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	409c      	lsls	r4, r3
 8001d0e:	e705      	b.n	8001b1c <__aeabi_ddiv+0x2c0>
 8001d10:	1936      	adds	r6, r6, r4
 8001d12:	3b01      	subs	r3, #1
 8001d14:	42b4      	cmp	r4, r6
 8001d16:	d900      	bls.n	8001d1a <__aeabi_ddiv+0x4be>
 8001d18:	e6a6      	b.n	8001a68 <__aeabi_ddiv+0x20c>
 8001d1a:	42b2      	cmp	r2, r6
 8001d1c:	d800      	bhi.n	8001d20 <__aeabi_ddiv+0x4c4>
 8001d1e:	e6a3      	b.n	8001a68 <__aeabi_ddiv+0x20c>
 8001d20:	1e83      	subs	r3, r0, #2
 8001d22:	1936      	adds	r6, r6, r4
 8001d24:	e6a0      	b.n	8001a68 <__aeabi_ddiv+0x20c>
 8001d26:	1909      	adds	r1, r1, r4
 8001d28:	3d01      	subs	r5, #1
 8001d2a:	428c      	cmp	r4, r1
 8001d2c:	d900      	bls.n	8001d30 <__aeabi_ddiv+0x4d4>
 8001d2e:	e68d      	b.n	8001a4c <__aeabi_ddiv+0x1f0>
 8001d30:	428a      	cmp	r2, r1
 8001d32:	d800      	bhi.n	8001d36 <__aeabi_ddiv+0x4da>
 8001d34:	e68a      	b.n	8001a4c <__aeabi_ddiv+0x1f0>
 8001d36:	1e85      	subs	r5, r0, #2
 8001d38:	1909      	adds	r1, r1, r4
 8001d3a:	e687      	b.n	8001a4c <__aeabi_ddiv+0x1f0>
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	402a      	ands	r2, r5
 8001d40:	2a04      	cmp	r2, #4
 8001d42:	d100      	bne.n	8001d46 <__aeabi_ddiv+0x4ea>
 8001d44:	e6bc      	b.n	8001ac0 <__aeabi_ddiv+0x264>
 8001d46:	1d29      	adds	r1, r5, #4
 8001d48:	42a9      	cmp	r1, r5
 8001d4a:	41ad      	sbcs	r5, r5
 8001d4c:	426d      	negs	r5, r5
 8001d4e:	08c9      	lsrs	r1, r1, #3
 8001d50:	44a8      	add	r8, r5
 8001d52:	e6b6      	b.n	8001ac2 <__aeabi_ddiv+0x266>
 8001d54:	42af      	cmp	r7, r5
 8001d56:	d900      	bls.n	8001d5a <__aeabi_ddiv+0x4fe>
 8001d58:	e662      	b.n	8001a20 <__aeabi_ddiv+0x1c4>
 8001d5a:	4281      	cmp	r1, r0
 8001d5c:	d804      	bhi.n	8001d68 <__aeabi_ddiv+0x50c>
 8001d5e:	d000      	beq.n	8001d62 <__aeabi_ddiv+0x506>
 8001d60:	e65e      	b.n	8001a20 <__aeabi_ddiv+0x1c4>
 8001d62:	42ae      	cmp	r6, r5
 8001d64:	d800      	bhi.n	8001d68 <__aeabi_ddiv+0x50c>
 8001d66:	e65b      	b.n	8001a20 <__aeabi_ddiv+0x1c4>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	425b      	negs	r3, r3
 8001d6c:	469c      	mov	ip, r3
 8001d6e:	9b00      	ldr	r3, [sp, #0]
 8001d70:	44e0      	add	r8, ip
 8001d72:	469c      	mov	ip, r3
 8001d74:	4465      	add	r5, ip
 8001d76:	429d      	cmp	r5, r3
 8001d78:	419b      	sbcs	r3, r3
 8001d7a:	425b      	negs	r3, r3
 8001d7c:	191b      	adds	r3, r3, r4
 8001d7e:	18c0      	adds	r0, r0, r3
 8001d80:	e64f      	b.n	8001a22 <__aeabi_ddiv+0x1c6>
 8001d82:	42b2      	cmp	r2, r6
 8001d84:	d800      	bhi.n	8001d88 <__aeabi_ddiv+0x52c>
 8001d86:	e612      	b.n	80019ae <__aeabi_ddiv+0x152>
 8001d88:	1e83      	subs	r3, r0, #2
 8001d8a:	1936      	adds	r6, r6, r4
 8001d8c:	e60f      	b.n	80019ae <__aeabi_ddiv+0x152>
 8001d8e:	428a      	cmp	r2, r1
 8001d90:	d800      	bhi.n	8001d94 <__aeabi_ddiv+0x538>
 8001d92:	e5fa      	b.n	800198a <__aeabi_ddiv+0x12e>
 8001d94:	1e83      	subs	r3, r0, #2
 8001d96:	4698      	mov	r8, r3
 8001d98:	1909      	adds	r1, r1, r4
 8001d9a:	e5f6      	b.n	800198a <__aeabi_ddiv+0x12e>
 8001d9c:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <__aeabi_ddiv+0x5d4>)
 8001d9e:	0028      	movs	r0, r5
 8001da0:	445b      	add	r3, fp
 8001da2:	4641      	mov	r1, r8
 8001da4:	409d      	lsls	r5, r3
 8001da6:	4099      	lsls	r1, r3
 8001da8:	40d0      	lsrs	r0, r2
 8001daa:	1e6b      	subs	r3, r5, #1
 8001dac:	419d      	sbcs	r5, r3
 8001dae:	4643      	mov	r3, r8
 8001db0:	4301      	orrs	r1, r0
 8001db2:	4329      	orrs	r1, r5
 8001db4:	40d3      	lsrs	r3, r2
 8001db6:	074a      	lsls	r2, r1, #29
 8001db8:	d100      	bne.n	8001dbc <__aeabi_ddiv+0x560>
 8001dba:	e755      	b.n	8001c68 <__aeabi_ddiv+0x40c>
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	400a      	ands	r2, r1
 8001dc0:	2a04      	cmp	r2, #4
 8001dc2:	d000      	beq.n	8001dc6 <__aeabi_ddiv+0x56a>
 8001dc4:	e74a      	b.n	8001c5c <__aeabi_ddiv+0x400>
 8001dc6:	e74f      	b.n	8001c68 <__aeabi_ddiv+0x40c>
 8001dc8:	0015      	movs	r5, r2
 8001dca:	4286      	cmp	r6, r0
 8001dcc:	d000      	beq.n	8001dd0 <__aeabi_ddiv+0x574>
 8001dce:	e66d      	b.n	8001aac <__aeabi_ddiv+0x250>
 8001dd0:	9a00      	ldr	r2, [sp, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d000      	beq.n	8001dd8 <__aeabi_ddiv+0x57c>
 8001dd6:	e669      	b.n	8001aac <__aeabi_ddiv+0x250>
 8001dd8:	e66a      	b.n	8001ab0 <__aeabi_ddiv+0x254>
 8001dda:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <__aeabi_ddiv+0x5d8>)
 8001ddc:	445b      	add	r3, fp
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	dc00      	bgt.n	8001de4 <__aeabi_ddiv+0x588>
 8001de2:	e713      	b.n	8001c0c <__aeabi_ddiv+0x3b0>
 8001de4:	2501      	movs	r5, #1
 8001de6:	2100      	movs	r1, #0
 8001de8:	44a8      	add	r8, r5
 8001dea:	e66a      	b.n	8001ac2 <__aeabi_ddiv+0x266>
 8001dec:	075d      	lsls	r5, r3, #29
 8001dee:	025b      	lsls	r3, r3, #9
 8001df0:	0b1a      	lsrs	r2, r3, #12
 8001df2:	08c9      	lsrs	r1, r1, #3
 8001df4:	2300      	movs	r3, #0
 8001df6:	430d      	orrs	r5, r1
 8001df8:	e587      	b.n	800190a <__aeabi_ddiv+0xae>
 8001dfa:	9900      	ldr	r1, [sp, #0]
 8001dfc:	3d02      	subs	r5, #2
 8001dfe:	004a      	lsls	r2, r1, #1
 8001e00:	428a      	cmp	r2, r1
 8001e02:	41bf      	sbcs	r7, r7
 8001e04:	427f      	negs	r7, r7
 8001e06:	193f      	adds	r7, r7, r4
 8001e08:	19f6      	adds	r6, r6, r7
 8001e0a:	9200      	str	r2, [sp, #0]
 8001e0c:	e7dd      	b.n	8001dca <__aeabi_ddiv+0x56e>
 8001e0e:	2280      	movs	r2, #128	; 0x80
 8001e10:	4643      	mov	r3, r8
 8001e12:	0312      	lsls	r2, r2, #12
 8001e14:	431a      	orrs	r2, r3
 8001e16:	0312      	lsls	r2, r2, #12
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <__aeabi_ddiv+0x5cc>)
 8001e1a:	0b12      	lsrs	r2, r2, #12
 8001e1c:	e575      	b.n	800190a <__aeabi_ddiv+0xae>
 8001e1e:	9900      	ldr	r1, [sp, #0]
 8001e20:	4299      	cmp	r1, r3
 8001e22:	d3ea      	bcc.n	8001dfa <__aeabi_ddiv+0x59e>
 8001e24:	0015      	movs	r5, r2
 8001e26:	e7d3      	b.n	8001dd0 <__aeabi_ddiv+0x574>
 8001e28:	000007ff 	.word	0x000007ff
 8001e2c:	0000043e 	.word	0x0000043e
 8001e30:	0000041e 	.word	0x0000041e
 8001e34:	000003ff 	.word	0x000003ff

08001e38 <__eqdf2>:
 8001e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e3a:	464e      	mov	r6, r9
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	46de      	mov	lr, fp
 8001e40:	4657      	mov	r7, sl
 8001e42:	4690      	mov	r8, r2
 8001e44:	b5e0      	push	{r5, r6, r7, lr}
 8001e46:	0017      	movs	r7, r2
 8001e48:	031a      	lsls	r2, r3, #12
 8001e4a:	0b12      	lsrs	r2, r2, #12
 8001e4c:	0005      	movs	r5, r0
 8001e4e:	4684      	mov	ip, r0
 8001e50:	4819      	ldr	r0, [pc, #100]	; (8001eb8 <__eqdf2+0x80>)
 8001e52:	030e      	lsls	r6, r1, #12
 8001e54:	004c      	lsls	r4, r1, #1
 8001e56:	4691      	mov	r9, r2
 8001e58:	005a      	lsls	r2, r3, #1
 8001e5a:	0fdb      	lsrs	r3, r3, #31
 8001e5c:	469b      	mov	fp, r3
 8001e5e:	0b36      	lsrs	r6, r6, #12
 8001e60:	0d64      	lsrs	r4, r4, #21
 8001e62:	0fc9      	lsrs	r1, r1, #31
 8001e64:	0d52      	lsrs	r2, r2, #21
 8001e66:	4284      	cmp	r4, r0
 8001e68:	d019      	beq.n	8001e9e <__eqdf2+0x66>
 8001e6a:	4282      	cmp	r2, r0
 8001e6c:	d010      	beq.n	8001e90 <__eqdf2+0x58>
 8001e6e:	2001      	movs	r0, #1
 8001e70:	4294      	cmp	r4, r2
 8001e72:	d10e      	bne.n	8001e92 <__eqdf2+0x5a>
 8001e74:	454e      	cmp	r6, r9
 8001e76:	d10c      	bne.n	8001e92 <__eqdf2+0x5a>
 8001e78:	2001      	movs	r0, #1
 8001e7a:	45c4      	cmp	ip, r8
 8001e7c:	d109      	bne.n	8001e92 <__eqdf2+0x5a>
 8001e7e:	4559      	cmp	r1, fp
 8001e80:	d017      	beq.n	8001eb2 <__eqdf2+0x7a>
 8001e82:	2c00      	cmp	r4, #0
 8001e84:	d105      	bne.n	8001e92 <__eqdf2+0x5a>
 8001e86:	0030      	movs	r0, r6
 8001e88:	4328      	orrs	r0, r5
 8001e8a:	1e43      	subs	r3, r0, #1
 8001e8c:	4198      	sbcs	r0, r3
 8001e8e:	e000      	b.n	8001e92 <__eqdf2+0x5a>
 8001e90:	2001      	movs	r0, #1
 8001e92:	bcf0      	pop	{r4, r5, r6, r7}
 8001e94:	46bb      	mov	fp, r7
 8001e96:	46b2      	mov	sl, r6
 8001e98:	46a9      	mov	r9, r5
 8001e9a:	46a0      	mov	r8, r4
 8001e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e9e:	0033      	movs	r3, r6
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	432b      	orrs	r3, r5
 8001ea4:	d1f5      	bne.n	8001e92 <__eqdf2+0x5a>
 8001ea6:	42a2      	cmp	r2, r4
 8001ea8:	d1f3      	bne.n	8001e92 <__eqdf2+0x5a>
 8001eaa:	464b      	mov	r3, r9
 8001eac:	433b      	orrs	r3, r7
 8001eae:	d1f0      	bne.n	8001e92 <__eqdf2+0x5a>
 8001eb0:	e7e2      	b.n	8001e78 <__eqdf2+0x40>
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	e7ed      	b.n	8001e92 <__eqdf2+0x5a>
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	000007ff 	.word	0x000007ff

08001ebc <__gedf2>:
 8001ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ebe:	4647      	mov	r7, r8
 8001ec0:	46ce      	mov	lr, r9
 8001ec2:	0004      	movs	r4, r0
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	0016      	movs	r6, r2
 8001ec8:	031b      	lsls	r3, r3, #12
 8001eca:	0b1b      	lsrs	r3, r3, #12
 8001ecc:	4d2d      	ldr	r5, [pc, #180]	; (8001f84 <__gedf2+0xc8>)
 8001ece:	004a      	lsls	r2, r1, #1
 8001ed0:	4699      	mov	r9, r3
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	0043      	lsls	r3, r0, #1
 8001ed6:	030f      	lsls	r7, r1, #12
 8001ed8:	46a4      	mov	ip, r4
 8001eda:	46b0      	mov	r8, r6
 8001edc:	0b3f      	lsrs	r7, r7, #12
 8001ede:	0d52      	lsrs	r2, r2, #21
 8001ee0:	0fc9      	lsrs	r1, r1, #31
 8001ee2:	0d5b      	lsrs	r3, r3, #21
 8001ee4:	0fc0      	lsrs	r0, r0, #31
 8001ee6:	42aa      	cmp	r2, r5
 8001ee8:	d021      	beq.n	8001f2e <__gedf2+0x72>
 8001eea:	42ab      	cmp	r3, r5
 8001eec:	d013      	beq.n	8001f16 <__gedf2+0x5a>
 8001eee:	2a00      	cmp	r2, #0
 8001ef0:	d122      	bne.n	8001f38 <__gedf2+0x7c>
 8001ef2:	433c      	orrs	r4, r7
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d102      	bne.n	8001efe <__gedf2+0x42>
 8001ef8:	464d      	mov	r5, r9
 8001efa:	432e      	orrs	r6, r5
 8001efc:	d022      	beq.n	8001f44 <__gedf2+0x88>
 8001efe:	2c00      	cmp	r4, #0
 8001f00:	d010      	beq.n	8001f24 <__gedf2+0x68>
 8001f02:	4281      	cmp	r1, r0
 8001f04:	d022      	beq.n	8001f4c <__gedf2+0x90>
 8001f06:	2002      	movs	r0, #2
 8001f08:	3901      	subs	r1, #1
 8001f0a:	4008      	ands	r0, r1
 8001f0c:	3801      	subs	r0, #1
 8001f0e:	bcc0      	pop	{r6, r7}
 8001f10:	46b9      	mov	r9, r7
 8001f12:	46b0      	mov	r8, r6
 8001f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f16:	464d      	mov	r5, r9
 8001f18:	432e      	orrs	r6, r5
 8001f1a:	d129      	bne.n	8001f70 <__gedf2+0xb4>
 8001f1c:	2a00      	cmp	r2, #0
 8001f1e:	d1f0      	bne.n	8001f02 <__gedf2+0x46>
 8001f20:	433c      	orrs	r4, r7
 8001f22:	d1ee      	bne.n	8001f02 <__gedf2+0x46>
 8001f24:	2800      	cmp	r0, #0
 8001f26:	d1f2      	bne.n	8001f0e <__gedf2+0x52>
 8001f28:	2001      	movs	r0, #1
 8001f2a:	4240      	negs	r0, r0
 8001f2c:	e7ef      	b.n	8001f0e <__gedf2+0x52>
 8001f2e:	003d      	movs	r5, r7
 8001f30:	4325      	orrs	r5, r4
 8001f32:	d11d      	bne.n	8001f70 <__gedf2+0xb4>
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d0ee      	beq.n	8001f16 <__gedf2+0x5a>
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1e2      	bne.n	8001f02 <__gedf2+0x46>
 8001f3c:	464c      	mov	r4, r9
 8001f3e:	4326      	orrs	r6, r4
 8001f40:	d1df      	bne.n	8001f02 <__gedf2+0x46>
 8001f42:	e7e0      	b.n	8001f06 <__gedf2+0x4a>
 8001f44:	2000      	movs	r0, #0
 8001f46:	2c00      	cmp	r4, #0
 8001f48:	d0e1      	beq.n	8001f0e <__gedf2+0x52>
 8001f4a:	e7dc      	b.n	8001f06 <__gedf2+0x4a>
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	dc0a      	bgt.n	8001f66 <__gedf2+0xaa>
 8001f50:	dbe8      	blt.n	8001f24 <__gedf2+0x68>
 8001f52:	454f      	cmp	r7, r9
 8001f54:	d8d7      	bhi.n	8001f06 <__gedf2+0x4a>
 8001f56:	d00e      	beq.n	8001f76 <__gedf2+0xba>
 8001f58:	2000      	movs	r0, #0
 8001f5a:	454f      	cmp	r7, r9
 8001f5c:	d2d7      	bcs.n	8001f0e <__gedf2+0x52>
 8001f5e:	2900      	cmp	r1, #0
 8001f60:	d0e2      	beq.n	8001f28 <__gedf2+0x6c>
 8001f62:	0008      	movs	r0, r1
 8001f64:	e7d3      	b.n	8001f0e <__gedf2+0x52>
 8001f66:	4243      	negs	r3, r0
 8001f68:	4158      	adcs	r0, r3
 8001f6a:	0040      	lsls	r0, r0, #1
 8001f6c:	3801      	subs	r0, #1
 8001f6e:	e7ce      	b.n	8001f0e <__gedf2+0x52>
 8001f70:	2002      	movs	r0, #2
 8001f72:	4240      	negs	r0, r0
 8001f74:	e7cb      	b.n	8001f0e <__gedf2+0x52>
 8001f76:	45c4      	cmp	ip, r8
 8001f78:	d8c5      	bhi.n	8001f06 <__gedf2+0x4a>
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	45c4      	cmp	ip, r8
 8001f7e:	d2c6      	bcs.n	8001f0e <__gedf2+0x52>
 8001f80:	e7ed      	b.n	8001f5e <__gedf2+0xa2>
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	000007ff 	.word	0x000007ff

08001f88 <__ledf2>:
 8001f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8a:	4647      	mov	r7, r8
 8001f8c:	46ce      	mov	lr, r9
 8001f8e:	0004      	movs	r4, r0
 8001f90:	0018      	movs	r0, r3
 8001f92:	0016      	movs	r6, r2
 8001f94:	031b      	lsls	r3, r3, #12
 8001f96:	0b1b      	lsrs	r3, r3, #12
 8001f98:	4d2c      	ldr	r5, [pc, #176]	; (800204c <__ledf2+0xc4>)
 8001f9a:	004a      	lsls	r2, r1, #1
 8001f9c:	4699      	mov	r9, r3
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	0043      	lsls	r3, r0, #1
 8001fa2:	030f      	lsls	r7, r1, #12
 8001fa4:	46a4      	mov	ip, r4
 8001fa6:	46b0      	mov	r8, r6
 8001fa8:	0b3f      	lsrs	r7, r7, #12
 8001faa:	0d52      	lsrs	r2, r2, #21
 8001fac:	0fc9      	lsrs	r1, r1, #31
 8001fae:	0d5b      	lsrs	r3, r3, #21
 8001fb0:	0fc0      	lsrs	r0, r0, #31
 8001fb2:	42aa      	cmp	r2, r5
 8001fb4:	d00d      	beq.n	8001fd2 <__ledf2+0x4a>
 8001fb6:	42ab      	cmp	r3, r5
 8001fb8:	d010      	beq.n	8001fdc <__ledf2+0x54>
 8001fba:	2a00      	cmp	r2, #0
 8001fbc:	d127      	bne.n	800200e <__ledf2+0x86>
 8001fbe:	433c      	orrs	r4, r7
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d111      	bne.n	8001fe8 <__ledf2+0x60>
 8001fc4:	464d      	mov	r5, r9
 8001fc6:	432e      	orrs	r6, r5
 8001fc8:	d10e      	bne.n	8001fe8 <__ledf2+0x60>
 8001fca:	2000      	movs	r0, #0
 8001fcc:	2c00      	cmp	r4, #0
 8001fce:	d015      	beq.n	8001ffc <__ledf2+0x74>
 8001fd0:	e00e      	b.n	8001ff0 <__ledf2+0x68>
 8001fd2:	003d      	movs	r5, r7
 8001fd4:	4325      	orrs	r5, r4
 8001fd6:	d110      	bne.n	8001ffa <__ledf2+0x72>
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d118      	bne.n	800200e <__ledf2+0x86>
 8001fdc:	464d      	mov	r5, r9
 8001fde:	432e      	orrs	r6, r5
 8001fe0:	d10b      	bne.n	8001ffa <__ledf2+0x72>
 8001fe2:	2a00      	cmp	r2, #0
 8001fe4:	d102      	bne.n	8001fec <__ledf2+0x64>
 8001fe6:	433c      	orrs	r4, r7
 8001fe8:	2c00      	cmp	r4, #0
 8001fea:	d00b      	beq.n	8002004 <__ledf2+0x7c>
 8001fec:	4281      	cmp	r1, r0
 8001fee:	d014      	beq.n	800201a <__ledf2+0x92>
 8001ff0:	2002      	movs	r0, #2
 8001ff2:	3901      	subs	r1, #1
 8001ff4:	4008      	ands	r0, r1
 8001ff6:	3801      	subs	r0, #1
 8001ff8:	e000      	b.n	8001ffc <__ledf2+0x74>
 8001ffa:	2002      	movs	r0, #2
 8001ffc:	bcc0      	pop	{r6, r7}
 8001ffe:	46b9      	mov	r9, r7
 8002000:	46b0      	mov	r8, r6
 8002002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002004:	2800      	cmp	r0, #0
 8002006:	d1f9      	bne.n	8001ffc <__ledf2+0x74>
 8002008:	2001      	movs	r0, #1
 800200a:	4240      	negs	r0, r0
 800200c:	e7f6      	b.n	8001ffc <__ledf2+0x74>
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1ec      	bne.n	8001fec <__ledf2+0x64>
 8002012:	464c      	mov	r4, r9
 8002014:	4326      	orrs	r6, r4
 8002016:	d1e9      	bne.n	8001fec <__ledf2+0x64>
 8002018:	e7ea      	b.n	8001ff0 <__ledf2+0x68>
 800201a:	429a      	cmp	r2, r3
 800201c:	dd04      	ble.n	8002028 <__ledf2+0xa0>
 800201e:	4243      	negs	r3, r0
 8002020:	4158      	adcs	r0, r3
 8002022:	0040      	lsls	r0, r0, #1
 8002024:	3801      	subs	r0, #1
 8002026:	e7e9      	b.n	8001ffc <__ledf2+0x74>
 8002028:	429a      	cmp	r2, r3
 800202a:	dbeb      	blt.n	8002004 <__ledf2+0x7c>
 800202c:	454f      	cmp	r7, r9
 800202e:	d8df      	bhi.n	8001ff0 <__ledf2+0x68>
 8002030:	d006      	beq.n	8002040 <__ledf2+0xb8>
 8002032:	2000      	movs	r0, #0
 8002034:	454f      	cmp	r7, r9
 8002036:	d2e1      	bcs.n	8001ffc <__ledf2+0x74>
 8002038:	2900      	cmp	r1, #0
 800203a:	d0e5      	beq.n	8002008 <__ledf2+0x80>
 800203c:	0008      	movs	r0, r1
 800203e:	e7dd      	b.n	8001ffc <__ledf2+0x74>
 8002040:	45c4      	cmp	ip, r8
 8002042:	d8d5      	bhi.n	8001ff0 <__ledf2+0x68>
 8002044:	2000      	movs	r0, #0
 8002046:	45c4      	cmp	ip, r8
 8002048:	d2d8      	bcs.n	8001ffc <__ledf2+0x74>
 800204a:	e7f5      	b.n	8002038 <__ledf2+0xb0>
 800204c:	000007ff 	.word	0x000007ff

08002050 <__aeabi_dmul>:
 8002050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002052:	4645      	mov	r5, r8
 8002054:	46de      	mov	lr, fp
 8002056:	4657      	mov	r7, sl
 8002058:	464e      	mov	r6, r9
 800205a:	b5e0      	push	{r5, r6, r7, lr}
 800205c:	001f      	movs	r7, r3
 800205e:	030b      	lsls	r3, r1, #12
 8002060:	0b1b      	lsrs	r3, r3, #12
 8002062:	469b      	mov	fp, r3
 8002064:	004d      	lsls	r5, r1, #1
 8002066:	0fcb      	lsrs	r3, r1, #31
 8002068:	0004      	movs	r4, r0
 800206a:	4691      	mov	r9, r2
 800206c:	4698      	mov	r8, r3
 800206e:	b087      	sub	sp, #28
 8002070:	0d6d      	lsrs	r5, r5, #21
 8002072:	d100      	bne.n	8002076 <__aeabi_dmul+0x26>
 8002074:	e1cd      	b.n	8002412 <__aeabi_dmul+0x3c2>
 8002076:	4bce      	ldr	r3, [pc, #824]	; (80023b0 <__aeabi_dmul+0x360>)
 8002078:	429d      	cmp	r5, r3
 800207a:	d100      	bne.n	800207e <__aeabi_dmul+0x2e>
 800207c:	e1e9      	b.n	8002452 <__aeabi_dmul+0x402>
 800207e:	465a      	mov	r2, fp
 8002080:	0f43      	lsrs	r3, r0, #29
 8002082:	00d2      	lsls	r2, r2, #3
 8002084:	4313      	orrs	r3, r2
 8002086:	2280      	movs	r2, #128	; 0x80
 8002088:	0412      	lsls	r2, r2, #16
 800208a:	431a      	orrs	r2, r3
 800208c:	00c3      	lsls	r3, r0, #3
 800208e:	469a      	mov	sl, r3
 8002090:	4bc8      	ldr	r3, [pc, #800]	; (80023b4 <__aeabi_dmul+0x364>)
 8002092:	4693      	mov	fp, r2
 8002094:	469c      	mov	ip, r3
 8002096:	2300      	movs	r3, #0
 8002098:	2600      	movs	r6, #0
 800209a:	4465      	add	r5, ip
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	033c      	lsls	r4, r7, #12
 80020a0:	007b      	lsls	r3, r7, #1
 80020a2:	4648      	mov	r0, r9
 80020a4:	0b24      	lsrs	r4, r4, #12
 80020a6:	0d5b      	lsrs	r3, r3, #21
 80020a8:	0fff      	lsrs	r7, r7, #31
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d100      	bne.n	80020b0 <__aeabi_dmul+0x60>
 80020ae:	e189      	b.n	80023c4 <__aeabi_dmul+0x374>
 80020b0:	4abf      	ldr	r2, [pc, #764]	; (80023b0 <__aeabi_dmul+0x360>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d019      	beq.n	80020ea <__aeabi_dmul+0x9a>
 80020b6:	0f42      	lsrs	r2, r0, #29
 80020b8:	00e4      	lsls	r4, r4, #3
 80020ba:	4322      	orrs	r2, r4
 80020bc:	2480      	movs	r4, #128	; 0x80
 80020be:	0424      	lsls	r4, r4, #16
 80020c0:	4314      	orrs	r4, r2
 80020c2:	4abc      	ldr	r2, [pc, #752]	; (80023b4 <__aeabi_dmul+0x364>)
 80020c4:	2100      	movs	r1, #0
 80020c6:	4694      	mov	ip, r2
 80020c8:	4642      	mov	r2, r8
 80020ca:	4463      	add	r3, ip
 80020cc:	195b      	adds	r3, r3, r5
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	9b01      	ldr	r3, [sp, #4]
 80020d2:	407a      	eors	r2, r7
 80020d4:	3301      	adds	r3, #1
 80020d6:	00c0      	lsls	r0, r0, #3
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	9302      	str	r3, [sp, #8]
 80020dc:	2e0a      	cmp	r6, #10
 80020de:	dd1c      	ble.n	800211a <__aeabi_dmul+0xca>
 80020e0:	003a      	movs	r2, r7
 80020e2:	2e0b      	cmp	r6, #11
 80020e4:	d05e      	beq.n	80021a4 <__aeabi_dmul+0x154>
 80020e6:	4647      	mov	r7, r8
 80020e8:	e056      	b.n	8002198 <__aeabi_dmul+0x148>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4bb0      	ldr	r3, [pc, #704]	; (80023b0 <__aeabi_dmul+0x360>)
 80020ee:	4321      	orrs	r1, r4
 80020f0:	18eb      	adds	r3, r5, r3
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	2900      	cmp	r1, #0
 80020f6:	d12a      	bne.n	800214e <__aeabi_dmul+0xfe>
 80020f8:	2080      	movs	r0, #128	; 0x80
 80020fa:	2202      	movs	r2, #2
 80020fc:	0100      	lsls	r0, r0, #4
 80020fe:	002b      	movs	r3, r5
 8002100:	4684      	mov	ip, r0
 8002102:	4316      	orrs	r6, r2
 8002104:	4642      	mov	r2, r8
 8002106:	4463      	add	r3, ip
 8002108:	407a      	eors	r2, r7
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	9302      	str	r3, [sp, #8]
 800210e:	2e0a      	cmp	r6, #10
 8002110:	dd00      	ble.n	8002114 <__aeabi_dmul+0xc4>
 8002112:	e231      	b.n	8002578 <__aeabi_dmul+0x528>
 8002114:	2000      	movs	r0, #0
 8002116:	2400      	movs	r4, #0
 8002118:	2102      	movs	r1, #2
 800211a:	2e02      	cmp	r6, #2
 800211c:	dc26      	bgt.n	800216c <__aeabi_dmul+0x11c>
 800211e:	3e01      	subs	r6, #1
 8002120:	2e01      	cmp	r6, #1
 8002122:	d852      	bhi.n	80021ca <__aeabi_dmul+0x17a>
 8002124:	2902      	cmp	r1, #2
 8002126:	d04c      	beq.n	80021c2 <__aeabi_dmul+0x172>
 8002128:	2901      	cmp	r1, #1
 800212a:	d000      	beq.n	800212e <__aeabi_dmul+0xde>
 800212c:	e118      	b.n	8002360 <__aeabi_dmul+0x310>
 800212e:	2300      	movs	r3, #0
 8002130:	2400      	movs	r4, #0
 8002132:	2500      	movs	r5, #0
 8002134:	051b      	lsls	r3, r3, #20
 8002136:	4323      	orrs	r3, r4
 8002138:	07d2      	lsls	r2, r2, #31
 800213a:	4313      	orrs	r3, r2
 800213c:	0028      	movs	r0, r5
 800213e:	0019      	movs	r1, r3
 8002140:	b007      	add	sp, #28
 8002142:	bcf0      	pop	{r4, r5, r6, r7}
 8002144:	46bb      	mov	fp, r7
 8002146:	46b2      	mov	sl, r6
 8002148:	46a9      	mov	r9, r5
 800214a:	46a0      	mov	r8, r4
 800214c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800214e:	2180      	movs	r1, #128	; 0x80
 8002150:	2203      	movs	r2, #3
 8002152:	0109      	lsls	r1, r1, #4
 8002154:	002b      	movs	r3, r5
 8002156:	468c      	mov	ip, r1
 8002158:	4316      	orrs	r6, r2
 800215a:	4642      	mov	r2, r8
 800215c:	4463      	add	r3, ip
 800215e:	407a      	eors	r2, r7
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	9302      	str	r3, [sp, #8]
 8002164:	2e0a      	cmp	r6, #10
 8002166:	dd00      	ble.n	800216a <__aeabi_dmul+0x11a>
 8002168:	e228      	b.n	80025bc <__aeabi_dmul+0x56c>
 800216a:	2103      	movs	r1, #3
 800216c:	2501      	movs	r5, #1
 800216e:	40b5      	lsls	r5, r6
 8002170:	46ac      	mov	ip, r5
 8002172:	26a6      	movs	r6, #166	; 0xa6
 8002174:	4663      	mov	r3, ip
 8002176:	00f6      	lsls	r6, r6, #3
 8002178:	4035      	ands	r5, r6
 800217a:	4233      	tst	r3, r6
 800217c:	d10b      	bne.n	8002196 <__aeabi_dmul+0x146>
 800217e:	2690      	movs	r6, #144	; 0x90
 8002180:	00b6      	lsls	r6, r6, #2
 8002182:	4233      	tst	r3, r6
 8002184:	d118      	bne.n	80021b8 <__aeabi_dmul+0x168>
 8002186:	3eb9      	subs	r6, #185	; 0xb9
 8002188:	3eff      	subs	r6, #255	; 0xff
 800218a:	421e      	tst	r6, r3
 800218c:	d01d      	beq.n	80021ca <__aeabi_dmul+0x17a>
 800218e:	46a3      	mov	fp, r4
 8002190:	4682      	mov	sl, r0
 8002192:	9100      	str	r1, [sp, #0]
 8002194:	e000      	b.n	8002198 <__aeabi_dmul+0x148>
 8002196:	0017      	movs	r7, r2
 8002198:	9900      	ldr	r1, [sp, #0]
 800219a:	003a      	movs	r2, r7
 800219c:	2902      	cmp	r1, #2
 800219e:	d010      	beq.n	80021c2 <__aeabi_dmul+0x172>
 80021a0:	465c      	mov	r4, fp
 80021a2:	4650      	mov	r0, sl
 80021a4:	2903      	cmp	r1, #3
 80021a6:	d1bf      	bne.n	8002128 <__aeabi_dmul+0xd8>
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	031b      	lsls	r3, r3, #12
 80021ac:	431c      	orrs	r4, r3
 80021ae:	0324      	lsls	r4, r4, #12
 80021b0:	0005      	movs	r5, r0
 80021b2:	4b7f      	ldr	r3, [pc, #508]	; (80023b0 <__aeabi_dmul+0x360>)
 80021b4:	0b24      	lsrs	r4, r4, #12
 80021b6:	e7bd      	b.n	8002134 <__aeabi_dmul+0xe4>
 80021b8:	2480      	movs	r4, #128	; 0x80
 80021ba:	2200      	movs	r2, #0
 80021bc:	4b7c      	ldr	r3, [pc, #496]	; (80023b0 <__aeabi_dmul+0x360>)
 80021be:	0324      	lsls	r4, r4, #12
 80021c0:	e7b8      	b.n	8002134 <__aeabi_dmul+0xe4>
 80021c2:	2400      	movs	r4, #0
 80021c4:	2500      	movs	r5, #0
 80021c6:	4b7a      	ldr	r3, [pc, #488]	; (80023b0 <__aeabi_dmul+0x360>)
 80021c8:	e7b4      	b.n	8002134 <__aeabi_dmul+0xe4>
 80021ca:	4653      	mov	r3, sl
 80021cc:	041e      	lsls	r6, r3, #16
 80021ce:	0c36      	lsrs	r6, r6, #16
 80021d0:	0c1f      	lsrs	r7, r3, #16
 80021d2:	0033      	movs	r3, r6
 80021d4:	0c01      	lsrs	r1, r0, #16
 80021d6:	0400      	lsls	r0, r0, #16
 80021d8:	0c00      	lsrs	r0, r0, #16
 80021da:	4343      	muls	r3, r0
 80021dc:	4698      	mov	r8, r3
 80021de:	0003      	movs	r3, r0
 80021e0:	437b      	muls	r3, r7
 80021e2:	4699      	mov	r9, r3
 80021e4:	0033      	movs	r3, r6
 80021e6:	434b      	muls	r3, r1
 80021e8:	469c      	mov	ip, r3
 80021ea:	4643      	mov	r3, r8
 80021ec:	000d      	movs	r5, r1
 80021ee:	0c1b      	lsrs	r3, r3, #16
 80021f0:	469a      	mov	sl, r3
 80021f2:	437d      	muls	r5, r7
 80021f4:	44cc      	add	ip, r9
 80021f6:	44d4      	add	ip, sl
 80021f8:	9500      	str	r5, [sp, #0]
 80021fa:	45e1      	cmp	r9, ip
 80021fc:	d904      	bls.n	8002208 <__aeabi_dmul+0x1b8>
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	025b      	lsls	r3, r3, #9
 8002202:	4699      	mov	r9, r3
 8002204:	444d      	add	r5, r9
 8002206:	9500      	str	r5, [sp, #0]
 8002208:	4663      	mov	r3, ip
 800220a:	0c1b      	lsrs	r3, r3, #16
 800220c:	001d      	movs	r5, r3
 800220e:	4663      	mov	r3, ip
 8002210:	041b      	lsls	r3, r3, #16
 8002212:	469c      	mov	ip, r3
 8002214:	4643      	mov	r3, r8
 8002216:	041b      	lsls	r3, r3, #16
 8002218:	0c1b      	lsrs	r3, r3, #16
 800221a:	4698      	mov	r8, r3
 800221c:	4663      	mov	r3, ip
 800221e:	4443      	add	r3, r8
 8002220:	9303      	str	r3, [sp, #12]
 8002222:	0c23      	lsrs	r3, r4, #16
 8002224:	4698      	mov	r8, r3
 8002226:	0033      	movs	r3, r6
 8002228:	0424      	lsls	r4, r4, #16
 800222a:	0c24      	lsrs	r4, r4, #16
 800222c:	4363      	muls	r3, r4
 800222e:	469c      	mov	ip, r3
 8002230:	0023      	movs	r3, r4
 8002232:	437b      	muls	r3, r7
 8002234:	4699      	mov	r9, r3
 8002236:	4643      	mov	r3, r8
 8002238:	435e      	muls	r6, r3
 800223a:	435f      	muls	r7, r3
 800223c:	444e      	add	r6, r9
 800223e:	4663      	mov	r3, ip
 8002240:	46b2      	mov	sl, r6
 8002242:	0c1e      	lsrs	r6, r3, #16
 8002244:	4456      	add	r6, sl
 8002246:	45b1      	cmp	r9, r6
 8002248:	d903      	bls.n	8002252 <__aeabi_dmul+0x202>
 800224a:	2380      	movs	r3, #128	; 0x80
 800224c:	025b      	lsls	r3, r3, #9
 800224e:	4699      	mov	r9, r3
 8002250:	444f      	add	r7, r9
 8002252:	0c33      	lsrs	r3, r6, #16
 8002254:	4699      	mov	r9, r3
 8002256:	003b      	movs	r3, r7
 8002258:	444b      	add	r3, r9
 800225a:	9305      	str	r3, [sp, #20]
 800225c:	4663      	mov	r3, ip
 800225e:	46ac      	mov	ip, r5
 8002260:	041f      	lsls	r7, r3, #16
 8002262:	0c3f      	lsrs	r7, r7, #16
 8002264:	0436      	lsls	r6, r6, #16
 8002266:	19f6      	adds	r6, r6, r7
 8002268:	44b4      	add	ip, r6
 800226a:	4663      	mov	r3, ip
 800226c:	9304      	str	r3, [sp, #16]
 800226e:	465b      	mov	r3, fp
 8002270:	0c1b      	lsrs	r3, r3, #16
 8002272:	469c      	mov	ip, r3
 8002274:	465b      	mov	r3, fp
 8002276:	041f      	lsls	r7, r3, #16
 8002278:	0c3f      	lsrs	r7, r7, #16
 800227a:	003b      	movs	r3, r7
 800227c:	4343      	muls	r3, r0
 800227e:	4699      	mov	r9, r3
 8002280:	4663      	mov	r3, ip
 8002282:	4343      	muls	r3, r0
 8002284:	469a      	mov	sl, r3
 8002286:	464b      	mov	r3, r9
 8002288:	4660      	mov	r0, ip
 800228a:	0c1b      	lsrs	r3, r3, #16
 800228c:	469b      	mov	fp, r3
 800228e:	4348      	muls	r0, r1
 8002290:	4379      	muls	r1, r7
 8002292:	4451      	add	r1, sl
 8002294:	4459      	add	r1, fp
 8002296:	458a      	cmp	sl, r1
 8002298:	d903      	bls.n	80022a2 <__aeabi_dmul+0x252>
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	025b      	lsls	r3, r3, #9
 800229e:	469a      	mov	sl, r3
 80022a0:	4450      	add	r0, sl
 80022a2:	0c0b      	lsrs	r3, r1, #16
 80022a4:	469a      	mov	sl, r3
 80022a6:	464b      	mov	r3, r9
 80022a8:	041b      	lsls	r3, r3, #16
 80022aa:	0c1b      	lsrs	r3, r3, #16
 80022ac:	4699      	mov	r9, r3
 80022ae:	003b      	movs	r3, r7
 80022b0:	4363      	muls	r3, r4
 80022b2:	0409      	lsls	r1, r1, #16
 80022b4:	4645      	mov	r5, r8
 80022b6:	4449      	add	r1, r9
 80022b8:	4699      	mov	r9, r3
 80022ba:	4663      	mov	r3, ip
 80022bc:	435c      	muls	r4, r3
 80022be:	436b      	muls	r3, r5
 80022c0:	469c      	mov	ip, r3
 80022c2:	464b      	mov	r3, r9
 80022c4:	0c1b      	lsrs	r3, r3, #16
 80022c6:	4698      	mov	r8, r3
 80022c8:	436f      	muls	r7, r5
 80022ca:	193f      	adds	r7, r7, r4
 80022cc:	4447      	add	r7, r8
 80022ce:	4450      	add	r0, sl
 80022d0:	42bc      	cmp	r4, r7
 80022d2:	d903      	bls.n	80022dc <__aeabi_dmul+0x28c>
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	025b      	lsls	r3, r3, #9
 80022d8:	4698      	mov	r8, r3
 80022da:	44c4      	add	ip, r8
 80022dc:	9b04      	ldr	r3, [sp, #16]
 80022de:	9d00      	ldr	r5, [sp, #0]
 80022e0:	4698      	mov	r8, r3
 80022e2:	4445      	add	r5, r8
 80022e4:	42b5      	cmp	r5, r6
 80022e6:	41b6      	sbcs	r6, r6
 80022e8:	4273      	negs	r3, r6
 80022ea:	4698      	mov	r8, r3
 80022ec:	464b      	mov	r3, r9
 80022ee:	041e      	lsls	r6, r3, #16
 80022f0:	9b05      	ldr	r3, [sp, #20]
 80022f2:	043c      	lsls	r4, r7, #16
 80022f4:	4699      	mov	r9, r3
 80022f6:	0c36      	lsrs	r6, r6, #16
 80022f8:	19a4      	adds	r4, r4, r6
 80022fa:	444c      	add	r4, r9
 80022fc:	46a1      	mov	r9, r4
 80022fe:	4683      	mov	fp, r0
 8002300:	186e      	adds	r6, r5, r1
 8002302:	44c1      	add	r9, r8
 8002304:	428e      	cmp	r6, r1
 8002306:	4189      	sbcs	r1, r1
 8002308:	44cb      	add	fp, r9
 800230a:	465d      	mov	r5, fp
 800230c:	4249      	negs	r1, r1
 800230e:	186d      	adds	r5, r5, r1
 8002310:	429c      	cmp	r4, r3
 8002312:	41a4      	sbcs	r4, r4
 8002314:	45c1      	cmp	r9, r8
 8002316:	419b      	sbcs	r3, r3
 8002318:	4583      	cmp	fp, r0
 800231a:	4180      	sbcs	r0, r0
 800231c:	428d      	cmp	r5, r1
 800231e:	4189      	sbcs	r1, r1
 8002320:	425b      	negs	r3, r3
 8002322:	4264      	negs	r4, r4
 8002324:	431c      	orrs	r4, r3
 8002326:	4240      	negs	r0, r0
 8002328:	9b03      	ldr	r3, [sp, #12]
 800232a:	4249      	negs	r1, r1
 800232c:	4301      	orrs	r1, r0
 800232e:	0270      	lsls	r0, r6, #9
 8002330:	0c3f      	lsrs	r7, r7, #16
 8002332:	4318      	orrs	r0, r3
 8002334:	19e4      	adds	r4, r4, r7
 8002336:	1e47      	subs	r7, r0, #1
 8002338:	41b8      	sbcs	r0, r7
 800233a:	1864      	adds	r4, r4, r1
 800233c:	4464      	add	r4, ip
 800233e:	0df6      	lsrs	r6, r6, #23
 8002340:	0261      	lsls	r1, r4, #9
 8002342:	4330      	orrs	r0, r6
 8002344:	0dec      	lsrs	r4, r5, #23
 8002346:	026e      	lsls	r6, r5, #9
 8002348:	430c      	orrs	r4, r1
 800234a:	4330      	orrs	r0, r6
 800234c:	01c9      	lsls	r1, r1, #7
 800234e:	d400      	bmi.n	8002352 <__aeabi_dmul+0x302>
 8002350:	e0f1      	b.n	8002536 <__aeabi_dmul+0x4e6>
 8002352:	2101      	movs	r1, #1
 8002354:	0843      	lsrs	r3, r0, #1
 8002356:	4001      	ands	r1, r0
 8002358:	430b      	orrs	r3, r1
 800235a:	07e0      	lsls	r0, r4, #31
 800235c:	4318      	orrs	r0, r3
 800235e:	0864      	lsrs	r4, r4, #1
 8002360:	4915      	ldr	r1, [pc, #84]	; (80023b8 <__aeabi_dmul+0x368>)
 8002362:	9b02      	ldr	r3, [sp, #8]
 8002364:	468c      	mov	ip, r1
 8002366:	4463      	add	r3, ip
 8002368:	2b00      	cmp	r3, #0
 800236a:	dc00      	bgt.n	800236e <__aeabi_dmul+0x31e>
 800236c:	e097      	b.n	800249e <__aeabi_dmul+0x44e>
 800236e:	0741      	lsls	r1, r0, #29
 8002370:	d009      	beq.n	8002386 <__aeabi_dmul+0x336>
 8002372:	210f      	movs	r1, #15
 8002374:	4001      	ands	r1, r0
 8002376:	2904      	cmp	r1, #4
 8002378:	d005      	beq.n	8002386 <__aeabi_dmul+0x336>
 800237a:	1d01      	adds	r1, r0, #4
 800237c:	4281      	cmp	r1, r0
 800237e:	4180      	sbcs	r0, r0
 8002380:	4240      	negs	r0, r0
 8002382:	1824      	adds	r4, r4, r0
 8002384:	0008      	movs	r0, r1
 8002386:	01e1      	lsls	r1, r4, #7
 8002388:	d506      	bpl.n	8002398 <__aeabi_dmul+0x348>
 800238a:	2180      	movs	r1, #128	; 0x80
 800238c:	00c9      	lsls	r1, r1, #3
 800238e:	468c      	mov	ip, r1
 8002390:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <__aeabi_dmul+0x36c>)
 8002392:	401c      	ands	r4, r3
 8002394:	9b02      	ldr	r3, [sp, #8]
 8002396:	4463      	add	r3, ip
 8002398:	4909      	ldr	r1, [pc, #36]	; (80023c0 <__aeabi_dmul+0x370>)
 800239a:	428b      	cmp	r3, r1
 800239c:	dd00      	ble.n	80023a0 <__aeabi_dmul+0x350>
 800239e:	e710      	b.n	80021c2 <__aeabi_dmul+0x172>
 80023a0:	0761      	lsls	r1, r4, #29
 80023a2:	08c5      	lsrs	r5, r0, #3
 80023a4:	0264      	lsls	r4, r4, #9
 80023a6:	055b      	lsls	r3, r3, #21
 80023a8:	430d      	orrs	r5, r1
 80023aa:	0b24      	lsrs	r4, r4, #12
 80023ac:	0d5b      	lsrs	r3, r3, #21
 80023ae:	e6c1      	b.n	8002134 <__aeabi_dmul+0xe4>
 80023b0:	000007ff 	.word	0x000007ff
 80023b4:	fffffc01 	.word	0xfffffc01
 80023b8:	000003ff 	.word	0x000003ff
 80023bc:	feffffff 	.word	0xfeffffff
 80023c0:	000007fe 	.word	0x000007fe
 80023c4:	464b      	mov	r3, r9
 80023c6:	4323      	orrs	r3, r4
 80023c8:	d059      	beq.n	800247e <__aeabi_dmul+0x42e>
 80023ca:	2c00      	cmp	r4, #0
 80023cc:	d100      	bne.n	80023d0 <__aeabi_dmul+0x380>
 80023ce:	e0a3      	b.n	8002518 <__aeabi_dmul+0x4c8>
 80023d0:	0020      	movs	r0, r4
 80023d2:	f000 fdad 	bl	8002f30 <__clzsi2>
 80023d6:	0001      	movs	r1, r0
 80023d8:	0003      	movs	r3, r0
 80023da:	390b      	subs	r1, #11
 80023dc:	221d      	movs	r2, #29
 80023de:	1a52      	subs	r2, r2, r1
 80023e0:	4649      	mov	r1, r9
 80023e2:	0018      	movs	r0, r3
 80023e4:	40d1      	lsrs	r1, r2
 80023e6:	464a      	mov	r2, r9
 80023e8:	3808      	subs	r0, #8
 80023ea:	4082      	lsls	r2, r0
 80023ec:	4084      	lsls	r4, r0
 80023ee:	0010      	movs	r0, r2
 80023f0:	430c      	orrs	r4, r1
 80023f2:	4a74      	ldr	r2, [pc, #464]	; (80025c4 <__aeabi_dmul+0x574>)
 80023f4:	1aeb      	subs	r3, r5, r3
 80023f6:	4694      	mov	ip, r2
 80023f8:	4642      	mov	r2, r8
 80023fa:	4463      	add	r3, ip
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	9b01      	ldr	r3, [sp, #4]
 8002400:	407a      	eors	r2, r7
 8002402:	3301      	adds	r3, #1
 8002404:	2100      	movs	r1, #0
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	9302      	str	r3, [sp, #8]
 800240a:	2e0a      	cmp	r6, #10
 800240c:	dd00      	ble.n	8002410 <__aeabi_dmul+0x3c0>
 800240e:	e667      	b.n	80020e0 <__aeabi_dmul+0x90>
 8002410:	e683      	b.n	800211a <__aeabi_dmul+0xca>
 8002412:	465b      	mov	r3, fp
 8002414:	4303      	orrs	r3, r0
 8002416:	469a      	mov	sl, r3
 8002418:	d02a      	beq.n	8002470 <__aeabi_dmul+0x420>
 800241a:	465b      	mov	r3, fp
 800241c:	2b00      	cmp	r3, #0
 800241e:	d06d      	beq.n	80024fc <__aeabi_dmul+0x4ac>
 8002420:	4658      	mov	r0, fp
 8002422:	f000 fd85 	bl	8002f30 <__clzsi2>
 8002426:	0001      	movs	r1, r0
 8002428:	0003      	movs	r3, r0
 800242a:	390b      	subs	r1, #11
 800242c:	221d      	movs	r2, #29
 800242e:	1a52      	subs	r2, r2, r1
 8002430:	0021      	movs	r1, r4
 8002432:	0018      	movs	r0, r3
 8002434:	465d      	mov	r5, fp
 8002436:	40d1      	lsrs	r1, r2
 8002438:	3808      	subs	r0, #8
 800243a:	4085      	lsls	r5, r0
 800243c:	000a      	movs	r2, r1
 800243e:	4084      	lsls	r4, r0
 8002440:	432a      	orrs	r2, r5
 8002442:	4693      	mov	fp, r2
 8002444:	46a2      	mov	sl, r4
 8002446:	4d5f      	ldr	r5, [pc, #380]	; (80025c4 <__aeabi_dmul+0x574>)
 8002448:	2600      	movs	r6, #0
 800244a:	1aed      	subs	r5, r5, r3
 800244c:	2300      	movs	r3, #0
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	e625      	b.n	800209e <__aeabi_dmul+0x4e>
 8002452:	465b      	mov	r3, fp
 8002454:	4303      	orrs	r3, r0
 8002456:	469a      	mov	sl, r3
 8002458:	d105      	bne.n	8002466 <__aeabi_dmul+0x416>
 800245a:	2300      	movs	r3, #0
 800245c:	469b      	mov	fp, r3
 800245e:	3302      	adds	r3, #2
 8002460:	2608      	movs	r6, #8
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	e61b      	b.n	800209e <__aeabi_dmul+0x4e>
 8002466:	2303      	movs	r3, #3
 8002468:	4682      	mov	sl, r0
 800246a:	260c      	movs	r6, #12
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	e616      	b.n	800209e <__aeabi_dmul+0x4e>
 8002470:	2300      	movs	r3, #0
 8002472:	469b      	mov	fp, r3
 8002474:	3301      	adds	r3, #1
 8002476:	2604      	movs	r6, #4
 8002478:	2500      	movs	r5, #0
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	e60f      	b.n	800209e <__aeabi_dmul+0x4e>
 800247e:	4642      	mov	r2, r8
 8002480:	3301      	adds	r3, #1
 8002482:	9501      	str	r5, [sp, #4]
 8002484:	431e      	orrs	r6, r3
 8002486:	9b01      	ldr	r3, [sp, #4]
 8002488:	407a      	eors	r2, r7
 800248a:	3301      	adds	r3, #1
 800248c:	2400      	movs	r4, #0
 800248e:	2000      	movs	r0, #0
 8002490:	2101      	movs	r1, #1
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	9302      	str	r3, [sp, #8]
 8002496:	2e0a      	cmp	r6, #10
 8002498:	dd00      	ble.n	800249c <__aeabi_dmul+0x44c>
 800249a:	e621      	b.n	80020e0 <__aeabi_dmul+0x90>
 800249c:	e63d      	b.n	800211a <__aeabi_dmul+0xca>
 800249e:	2101      	movs	r1, #1
 80024a0:	1ac9      	subs	r1, r1, r3
 80024a2:	2938      	cmp	r1, #56	; 0x38
 80024a4:	dd00      	ble.n	80024a8 <__aeabi_dmul+0x458>
 80024a6:	e642      	b.n	800212e <__aeabi_dmul+0xde>
 80024a8:	291f      	cmp	r1, #31
 80024aa:	dd47      	ble.n	800253c <__aeabi_dmul+0x4ec>
 80024ac:	261f      	movs	r6, #31
 80024ae:	0025      	movs	r5, r4
 80024b0:	4276      	negs	r6, r6
 80024b2:	1af3      	subs	r3, r6, r3
 80024b4:	40dd      	lsrs	r5, r3
 80024b6:	002b      	movs	r3, r5
 80024b8:	2920      	cmp	r1, #32
 80024ba:	d005      	beq.n	80024c8 <__aeabi_dmul+0x478>
 80024bc:	4942      	ldr	r1, [pc, #264]	; (80025c8 <__aeabi_dmul+0x578>)
 80024be:	9d02      	ldr	r5, [sp, #8]
 80024c0:	468c      	mov	ip, r1
 80024c2:	4465      	add	r5, ip
 80024c4:	40ac      	lsls	r4, r5
 80024c6:	4320      	orrs	r0, r4
 80024c8:	1e41      	subs	r1, r0, #1
 80024ca:	4188      	sbcs	r0, r1
 80024cc:	4318      	orrs	r0, r3
 80024ce:	2307      	movs	r3, #7
 80024d0:	001d      	movs	r5, r3
 80024d2:	2400      	movs	r4, #0
 80024d4:	4005      	ands	r5, r0
 80024d6:	4203      	tst	r3, r0
 80024d8:	d04a      	beq.n	8002570 <__aeabi_dmul+0x520>
 80024da:	230f      	movs	r3, #15
 80024dc:	2400      	movs	r4, #0
 80024de:	4003      	ands	r3, r0
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d042      	beq.n	800256a <__aeabi_dmul+0x51a>
 80024e4:	1d03      	adds	r3, r0, #4
 80024e6:	4283      	cmp	r3, r0
 80024e8:	4180      	sbcs	r0, r0
 80024ea:	4240      	negs	r0, r0
 80024ec:	1824      	adds	r4, r4, r0
 80024ee:	0018      	movs	r0, r3
 80024f0:	0223      	lsls	r3, r4, #8
 80024f2:	d53a      	bpl.n	800256a <__aeabi_dmul+0x51a>
 80024f4:	2301      	movs	r3, #1
 80024f6:	2400      	movs	r4, #0
 80024f8:	2500      	movs	r5, #0
 80024fa:	e61b      	b.n	8002134 <__aeabi_dmul+0xe4>
 80024fc:	f000 fd18 	bl	8002f30 <__clzsi2>
 8002500:	0001      	movs	r1, r0
 8002502:	0003      	movs	r3, r0
 8002504:	3115      	adds	r1, #21
 8002506:	3320      	adds	r3, #32
 8002508:	291c      	cmp	r1, #28
 800250a:	dd8f      	ble.n	800242c <__aeabi_dmul+0x3dc>
 800250c:	3808      	subs	r0, #8
 800250e:	2200      	movs	r2, #0
 8002510:	4084      	lsls	r4, r0
 8002512:	4692      	mov	sl, r2
 8002514:	46a3      	mov	fp, r4
 8002516:	e796      	b.n	8002446 <__aeabi_dmul+0x3f6>
 8002518:	f000 fd0a 	bl	8002f30 <__clzsi2>
 800251c:	0001      	movs	r1, r0
 800251e:	0003      	movs	r3, r0
 8002520:	3115      	adds	r1, #21
 8002522:	3320      	adds	r3, #32
 8002524:	291c      	cmp	r1, #28
 8002526:	dc00      	bgt.n	800252a <__aeabi_dmul+0x4da>
 8002528:	e758      	b.n	80023dc <__aeabi_dmul+0x38c>
 800252a:	0002      	movs	r2, r0
 800252c:	464c      	mov	r4, r9
 800252e:	3a08      	subs	r2, #8
 8002530:	2000      	movs	r0, #0
 8002532:	4094      	lsls	r4, r2
 8002534:	e75d      	b.n	80023f2 <__aeabi_dmul+0x3a2>
 8002536:	9b01      	ldr	r3, [sp, #4]
 8002538:	9302      	str	r3, [sp, #8]
 800253a:	e711      	b.n	8002360 <__aeabi_dmul+0x310>
 800253c:	4b23      	ldr	r3, [pc, #140]	; (80025cc <__aeabi_dmul+0x57c>)
 800253e:	0026      	movs	r6, r4
 8002540:	469c      	mov	ip, r3
 8002542:	0003      	movs	r3, r0
 8002544:	9d02      	ldr	r5, [sp, #8]
 8002546:	40cb      	lsrs	r3, r1
 8002548:	4465      	add	r5, ip
 800254a:	40ae      	lsls	r6, r5
 800254c:	431e      	orrs	r6, r3
 800254e:	0003      	movs	r3, r0
 8002550:	40ab      	lsls	r3, r5
 8002552:	1e58      	subs	r0, r3, #1
 8002554:	4183      	sbcs	r3, r0
 8002556:	0030      	movs	r0, r6
 8002558:	4318      	orrs	r0, r3
 800255a:	40cc      	lsrs	r4, r1
 800255c:	0743      	lsls	r3, r0, #29
 800255e:	d0c7      	beq.n	80024f0 <__aeabi_dmul+0x4a0>
 8002560:	230f      	movs	r3, #15
 8002562:	4003      	ands	r3, r0
 8002564:	2b04      	cmp	r3, #4
 8002566:	d1bd      	bne.n	80024e4 <__aeabi_dmul+0x494>
 8002568:	e7c2      	b.n	80024f0 <__aeabi_dmul+0x4a0>
 800256a:	0765      	lsls	r5, r4, #29
 800256c:	0264      	lsls	r4, r4, #9
 800256e:	0b24      	lsrs	r4, r4, #12
 8002570:	08c0      	lsrs	r0, r0, #3
 8002572:	2300      	movs	r3, #0
 8002574:	4305      	orrs	r5, r0
 8002576:	e5dd      	b.n	8002134 <__aeabi_dmul+0xe4>
 8002578:	2500      	movs	r5, #0
 800257a:	2302      	movs	r3, #2
 800257c:	2e0f      	cmp	r6, #15
 800257e:	d10c      	bne.n	800259a <__aeabi_dmul+0x54a>
 8002580:	2480      	movs	r4, #128	; 0x80
 8002582:	465b      	mov	r3, fp
 8002584:	0324      	lsls	r4, r4, #12
 8002586:	4223      	tst	r3, r4
 8002588:	d00e      	beq.n	80025a8 <__aeabi_dmul+0x558>
 800258a:	4221      	tst	r1, r4
 800258c:	d10c      	bne.n	80025a8 <__aeabi_dmul+0x558>
 800258e:	430c      	orrs	r4, r1
 8002590:	0324      	lsls	r4, r4, #12
 8002592:	003a      	movs	r2, r7
 8002594:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <__aeabi_dmul+0x580>)
 8002596:	0b24      	lsrs	r4, r4, #12
 8002598:	e5cc      	b.n	8002134 <__aeabi_dmul+0xe4>
 800259a:	2e0b      	cmp	r6, #11
 800259c:	d000      	beq.n	80025a0 <__aeabi_dmul+0x550>
 800259e:	e5a2      	b.n	80020e6 <__aeabi_dmul+0x96>
 80025a0:	468b      	mov	fp, r1
 80025a2:	46aa      	mov	sl, r5
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	e5f7      	b.n	8002198 <__aeabi_dmul+0x148>
 80025a8:	2480      	movs	r4, #128	; 0x80
 80025aa:	465b      	mov	r3, fp
 80025ac:	0324      	lsls	r4, r4, #12
 80025ae:	431c      	orrs	r4, r3
 80025b0:	0324      	lsls	r4, r4, #12
 80025b2:	4642      	mov	r2, r8
 80025b4:	4655      	mov	r5, sl
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <__aeabi_dmul+0x580>)
 80025b8:	0b24      	lsrs	r4, r4, #12
 80025ba:	e5bb      	b.n	8002134 <__aeabi_dmul+0xe4>
 80025bc:	464d      	mov	r5, r9
 80025be:	0021      	movs	r1, r4
 80025c0:	2303      	movs	r3, #3
 80025c2:	e7db      	b.n	800257c <__aeabi_dmul+0x52c>
 80025c4:	fffffc0d 	.word	0xfffffc0d
 80025c8:	0000043e 	.word	0x0000043e
 80025cc:	0000041e 	.word	0x0000041e
 80025d0:	000007ff 	.word	0x000007ff

080025d4 <__aeabi_dsub>:
 80025d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025d6:	4657      	mov	r7, sl
 80025d8:	464e      	mov	r6, r9
 80025da:	4645      	mov	r5, r8
 80025dc:	46de      	mov	lr, fp
 80025de:	b5e0      	push	{r5, r6, r7, lr}
 80025e0:	000d      	movs	r5, r1
 80025e2:	0004      	movs	r4, r0
 80025e4:	0019      	movs	r1, r3
 80025e6:	0010      	movs	r0, r2
 80025e8:	032b      	lsls	r3, r5, #12
 80025ea:	0a5b      	lsrs	r3, r3, #9
 80025ec:	0f62      	lsrs	r2, r4, #29
 80025ee:	431a      	orrs	r2, r3
 80025f0:	00e3      	lsls	r3, r4, #3
 80025f2:	030c      	lsls	r4, r1, #12
 80025f4:	0a64      	lsrs	r4, r4, #9
 80025f6:	0f47      	lsrs	r7, r0, #29
 80025f8:	4327      	orrs	r7, r4
 80025fa:	4cd0      	ldr	r4, [pc, #832]	; (800293c <__aeabi_dsub+0x368>)
 80025fc:	006e      	lsls	r6, r5, #1
 80025fe:	4691      	mov	r9, r2
 8002600:	b083      	sub	sp, #12
 8002602:	004a      	lsls	r2, r1, #1
 8002604:	00c0      	lsls	r0, r0, #3
 8002606:	4698      	mov	r8, r3
 8002608:	46a2      	mov	sl, r4
 800260a:	0d76      	lsrs	r6, r6, #21
 800260c:	0fed      	lsrs	r5, r5, #31
 800260e:	0d52      	lsrs	r2, r2, #21
 8002610:	0fc9      	lsrs	r1, r1, #31
 8002612:	9001      	str	r0, [sp, #4]
 8002614:	42a2      	cmp	r2, r4
 8002616:	d100      	bne.n	800261a <__aeabi_dsub+0x46>
 8002618:	e0b9      	b.n	800278e <__aeabi_dsub+0x1ba>
 800261a:	2401      	movs	r4, #1
 800261c:	4061      	eors	r1, r4
 800261e:	468b      	mov	fp, r1
 8002620:	428d      	cmp	r5, r1
 8002622:	d100      	bne.n	8002626 <__aeabi_dsub+0x52>
 8002624:	e08d      	b.n	8002742 <__aeabi_dsub+0x16e>
 8002626:	1ab4      	subs	r4, r6, r2
 8002628:	46a4      	mov	ip, r4
 800262a:	2c00      	cmp	r4, #0
 800262c:	dc00      	bgt.n	8002630 <__aeabi_dsub+0x5c>
 800262e:	e0b7      	b.n	80027a0 <__aeabi_dsub+0x1cc>
 8002630:	2a00      	cmp	r2, #0
 8002632:	d100      	bne.n	8002636 <__aeabi_dsub+0x62>
 8002634:	e0cb      	b.n	80027ce <__aeabi_dsub+0x1fa>
 8002636:	4ac1      	ldr	r2, [pc, #772]	; (800293c <__aeabi_dsub+0x368>)
 8002638:	4296      	cmp	r6, r2
 800263a:	d100      	bne.n	800263e <__aeabi_dsub+0x6a>
 800263c:	e186      	b.n	800294c <__aeabi_dsub+0x378>
 800263e:	2280      	movs	r2, #128	; 0x80
 8002640:	0412      	lsls	r2, r2, #16
 8002642:	4317      	orrs	r7, r2
 8002644:	4662      	mov	r2, ip
 8002646:	2a38      	cmp	r2, #56	; 0x38
 8002648:	dd00      	ble.n	800264c <__aeabi_dsub+0x78>
 800264a:	e1a4      	b.n	8002996 <__aeabi_dsub+0x3c2>
 800264c:	2a1f      	cmp	r2, #31
 800264e:	dd00      	ble.n	8002652 <__aeabi_dsub+0x7e>
 8002650:	e21d      	b.n	8002a8e <__aeabi_dsub+0x4ba>
 8002652:	4661      	mov	r1, ip
 8002654:	2220      	movs	r2, #32
 8002656:	003c      	movs	r4, r7
 8002658:	1a52      	subs	r2, r2, r1
 800265a:	0001      	movs	r1, r0
 800265c:	4090      	lsls	r0, r2
 800265e:	4094      	lsls	r4, r2
 8002660:	1e42      	subs	r2, r0, #1
 8002662:	4190      	sbcs	r0, r2
 8002664:	4662      	mov	r2, ip
 8002666:	46a0      	mov	r8, r4
 8002668:	4664      	mov	r4, ip
 800266a:	40d7      	lsrs	r7, r2
 800266c:	464a      	mov	r2, r9
 800266e:	40e1      	lsrs	r1, r4
 8002670:	4644      	mov	r4, r8
 8002672:	1bd2      	subs	r2, r2, r7
 8002674:	4691      	mov	r9, r2
 8002676:	430c      	orrs	r4, r1
 8002678:	4304      	orrs	r4, r0
 800267a:	1b1c      	subs	r4, r3, r4
 800267c:	42a3      	cmp	r3, r4
 800267e:	4192      	sbcs	r2, r2
 8002680:	464b      	mov	r3, r9
 8002682:	4252      	negs	r2, r2
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	469a      	mov	sl, r3
 8002688:	4653      	mov	r3, sl
 800268a:	021b      	lsls	r3, r3, #8
 800268c:	d400      	bmi.n	8002690 <__aeabi_dsub+0xbc>
 800268e:	e12b      	b.n	80028e8 <__aeabi_dsub+0x314>
 8002690:	4653      	mov	r3, sl
 8002692:	025a      	lsls	r2, r3, #9
 8002694:	0a53      	lsrs	r3, r2, #9
 8002696:	469a      	mov	sl, r3
 8002698:	4653      	mov	r3, sl
 800269a:	2b00      	cmp	r3, #0
 800269c:	d100      	bne.n	80026a0 <__aeabi_dsub+0xcc>
 800269e:	e166      	b.n	800296e <__aeabi_dsub+0x39a>
 80026a0:	4650      	mov	r0, sl
 80026a2:	f000 fc45 	bl	8002f30 <__clzsi2>
 80026a6:	0003      	movs	r3, r0
 80026a8:	3b08      	subs	r3, #8
 80026aa:	2220      	movs	r2, #32
 80026ac:	0020      	movs	r0, r4
 80026ae:	1ad2      	subs	r2, r2, r3
 80026b0:	4651      	mov	r1, sl
 80026b2:	40d0      	lsrs	r0, r2
 80026b4:	4099      	lsls	r1, r3
 80026b6:	0002      	movs	r2, r0
 80026b8:	409c      	lsls	r4, r3
 80026ba:	430a      	orrs	r2, r1
 80026bc:	429e      	cmp	r6, r3
 80026be:	dd00      	ble.n	80026c2 <__aeabi_dsub+0xee>
 80026c0:	e164      	b.n	800298c <__aeabi_dsub+0x3b8>
 80026c2:	1b9b      	subs	r3, r3, r6
 80026c4:	1c59      	adds	r1, r3, #1
 80026c6:	291f      	cmp	r1, #31
 80026c8:	dd00      	ble.n	80026cc <__aeabi_dsub+0xf8>
 80026ca:	e0fe      	b.n	80028ca <__aeabi_dsub+0x2f6>
 80026cc:	2320      	movs	r3, #32
 80026ce:	0010      	movs	r0, r2
 80026d0:	0026      	movs	r6, r4
 80026d2:	1a5b      	subs	r3, r3, r1
 80026d4:	409c      	lsls	r4, r3
 80026d6:	4098      	lsls	r0, r3
 80026d8:	40ce      	lsrs	r6, r1
 80026da:	40ca      	lsrs	r2, r1
 80026dc:	1e63      	subs	r3, r4, #1
 80026de:	419c      	sbcs	r4, r3
 80026e0:	4330      	orrs	r0, r6
 80026e2:	4692      	mov	sl, r2
 80026e4:	2600      	movs	r6, #0
 80026e6:	4304      	orrs	r4, r0
 80026e8:	0763      	lsls	r3, r4, #29
 80026ea:	d009      	beq.n	8002700 <__aeabi_dsub+0x12c>
 80026ec:	230f      	movs	r3, #15
 80026ee:	4023      	ands	r3, r4
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d005      	beq.n	8002700 <__aeabi_dsub+0x12c>
 80026f4:	1d23      	adds	r3, r4, #4
 80026f6:	42a3      	cmp	r3, r4
 80026f8:	41a4      	sbcs	r4, r4
 80026fa:	4264      	negs	r4, r4
 80026fc:	44a2      	add	sl, r4
 80026fe:	001c      	movs	r4, r3
 8002700:	4653      	mov	r3, sl
 8002702:	021b      	lsls	r3, r3, #8
 8002704:	d400      	bmi.n	8002708 <__aeabi_dsub+0x134>
 8002706:	e0f2      	b.n	80028ee <__aeabi_dsub+0x31a>
 8002708:	4b8c      	ldr	r3, [pc, #560]	; (800293c <__aeabi_dsub+0x368>)
 800270a:	3601      	adds	r6, #1
 800270c:	429e      	cmp	r6, r3
 800270e:	d100      	bne.n	8002712 <__aeabi_dsub+0x13e>
 8002710:	e10f      	b.n	8002932 <__aeabi_dsub+0x35e>
 8002712:	4653      	mov	r3, sl
 8002714:	498a      	ldr	r1, [pc, #552]	; (8002940 <__aeabi_dsub+0x36c>)
 8002716:	08e4      	lsrs	r4, r4, #3
 8002718:	400b      	ands	r3, r1
 800271a:	0019      	movs	r1, r3
 800271c:	075b      	lsls	r3, r3, #29
 800271e:	4323      	orrs	r3, r4
 8002720:	0572      	lsls	r2, r6, #21
 8002722:	024c      	lsls	r4, r1, #9
 8002724:	0b24      	lsrs	r4, r4, #12
 8002726:	0d52      	lsrs	r2, r2, #21
 8002728:	0512      	lsls	r2, r2, #20
 800272a:	4322      	orrs	r2, r4
 800272c:	07ed      	lsls	r5, r5, #31
 800272e:	432a      	orrs	r2, r5
 8002730:	0018      	movs	r0, r3
 8002732:	0011      	movs	r1, r2
 8002734:	b003      	add	sp, #12
 8002736:	bcf0      	pop	{r4, r5, r6, r7}
 8002738:	46bb      	mov	fp, r7
 800273a:	46b2      	mov	sl, r6
 800273c:	46a9      	mov	r9, r5
 800273e:	46a0      	mov	r8, r4
 8002740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002742:	1ab4      	subs	r4, r6, r2
 8002744:	46a4      	mov	ip, r4
 8002746:	2c00      	cmp	r4, #0
 8002748:	dd59      	ble.n	80027fe <__aeabi_dsub+0x22a>
 800274a:	2a00      	cmp	r2, #0
 800274c:	d100      	bne.n	8002750 <__aeabi_dsub+0x17c>
 800274e:	e0b0      	b.n	80028b2 <__aeabi_dsub+0x2de>
 8002750:	4556      	cmp	r6, sl
 8002752:	d100      	bne.n	8002756 <__aeabi_dsub+0x182>
 8002754:	e0fa      	b.n	800294c <__aeabi_dsub+0x378>
 8002756:	2280      	movs	r2, #128	; 0x80
 8002758:	0412      	lsls	r2, r2, #16
 800275a:	4317      	orrs	r7, r2
 800275c:	4662      	mov	r2, ip
 800275e:	2a38      	cmp	r2, #56	; 0x38
 8002760:	dd00      	ble.n	8002764 <__aeabi_dsub+0x190>
 8002762:	e0d4      	b.n	800290e <__aeabi_dsub+0x33a>
 8002764:	2a1f      	cmp	r2, #31
 8002766:	dc00      	bgt.n	800276a <__aeabi_dsub+0x196>
 8002768:	e1c0      	b.n	8002aec <__aeabi_dsub+0x518>
 800276a:	0039      	movs	r1, r7
 800276c:	3a20      	subs	r2, #32
 800276e:	40d1      	lsrs	r1, r2
 8002770:	4662      	mov	r2, ip
 8002772:	2a20      	cmp	r2, #32
 8002774:	d006      	beq.n	8002784 <__aeabi_dsub+0x1b0>
 8002776:	4664      	mov	r4, ip
 8002778:	2240      	movs	r2, #64	; 0x40
 800277a:	1b12      	subs	r2, r2, r4
 800277c:	003c      	movs	r4, r7
 800277e:	4094      	lsls	r4, r2
 8002780:	4304      	orrs	r4, r0
 8002782:	9401      	str	r4, [sp, #4]
 8002784:	9c01      	ldr	r4, [sp, #4]
 8002786:	1e62      	subs	r2, r4, #1
 8002788:	4194      	sbcs	r4, r2
 800278a:	430c      	orrs	r4, r1
 800278c:	e0c3      	b.n	8002916 <__aeabi_dsub+0x342>
 800278e:	003c      	movs	r4, r7
 8002790:	4304      	orrs	r4, r0
 8002792:	d02b      	beq.n	80027ec <__aeabi_dsub+0x218>
 8002794:	468b      	mov	fp, r1
 8002796:	428d      	cmp	r5, r1
 8002798:	d02e      	beq.n	80027f8 <__aeabi_dsub+0x224>
 800279a:	4c6a      	ldr	r4, [pc, #424]	; (8002944 <__aeabi_dsub+0x370>)
 800279c:	46a4      	mov	ip, r4
 800279e:	44b4      	add	ip, r6
 80027a0:	4664      	mov	r4, ip
 80027a2:	2c00      	cmp	r4, #0
 80027a4:	d05f      	beq.n	8002866 <__aeabi_dsub+0x292>
 80027a6:	1b94      	subs	r4, r2, r6
 80027a8:	46a4      	mov	ip, r4
 80027aa:	2e00      	cmp	r6, #0
 80027ac:	d000      	beq.n	80027b0 <__aeabi_dsub+0x1dc>
 80027ae:	e120      	b.n	80029f2 <__aeabi_dsub+0x41e>
 80027b0:	464c      	mov	r4, r9
 80027b2:	431c      	orrs	r4, r3
 80027b4:	d100      	bne.n	80027b8 <__aeabi_dsub+0x1e4>
 80027b6:	e1c7      	b.n	8002b48 <__aeabi_dsub+0x574>
 80027b8:	4661      	mov	r1, ip
 80027ba:	1e4c      	subs	r4, r1, #1
 80027bc:	2901      	cmp	r1, #1
 80027be:	d100      	bne.n	80027c2 <__aeabi_dsub+0x1ee>
 80027c0:	e223      	b.n	8002c0a <__aeabi_dsub+0x636>
 80027c2:	4d5e      	ldr	r5, [pc, #376]	; (800293c <__aeabi_dsub+0x368>)
 80027c4:	45ac      	cmp	ip, r5
 80027c6:	d100      	bne.n	80027ca <__aeabi_dsub+0x1f6>
 80027c8:	e1d8      	b.n	8002b7c <__aeabi_dsub+0x5a8>
 80027ca:	46a4      	mov	ip, r4
 80027cc:	e11a      	b.n	8002a04 <__aeabi_dsub+0x430>
 80027ce:	003a      	movs	r2, r7
 80027d0:	4302      	orrs	r2, r0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dsub+0x202>
 80027d4:	e0e4      	b.n	80029a0 <__aeabi_dsub+0x3cc>
 80027d6:	0022      	movs	r2, r4
 80027d8:	3a01      	subs	r2, #1
 80027da:	2c01      	cmp	r4, #1
 80027dc:	d100      	bne.n	80027e0 <__aeabi_dsub+0x20c>
 80027de:	e1c3      	b.n	8002b68 <__aeabi_dsub+0x594>
 80027e0:	4956      	ldr	r1, [pc, #344]	; (800293c <__aeabi_dsub+0x368>)
 80027e2:	428c      	cmp	r4, r1
 80027e4:	d100      	bne.n	80027e8 <__aeabi_dsub+0x214>
 80027e6:	e0b1      	b.n	800294c <__aeabi_dsub+0x378>
 80027e8:	4694      	mov	ip, r2
 80027ea:	e72b      	b.n	8002644 <__aeabi_dsub+0x70>
 80027ec:	2401      	movs	r4, #1
 80027ee:	4061      	eors	r1, r4
 80027f0:	468b      	mov	fp, r1
 80027f2:	428d      	cmp	r5, r1
 80027f4:	d000      	beq.n	80027f8 <__aeabi_dsub+0x224>
 80027f6:	e716      	b.n	8002626 <__aeabi_dsub+0x52>
 80027f8:	4952      	ldr	r1, [pc, #328]	; (8002944 <__aeabi_dsub+0x370>)
 80027fa:	468c      	mov	ip, r1
 80027fc:	44b4      	add	ip, r6
 80027fe:	4664      	mov	r4, ip
 8002800:	2c00      	cmp	r4, #0
 8002802:	d100      	bne.n	8002806 <__aeabi_dsub+0x232>
 8002804:	e0d3      	b.n	80029ae <__aeabi_dsub+0x3da>
 8002806:	1b91      	subs	r1, r2, r6
 8002808:	468c      	mov	ip, r1
 800280a:	2e00      	cmp	r6, #0
 800280c:	d100      	bne.n	8002810 <__aeabi_dsub+0x23c>
 800280e:	e15e      	b.n	8002ace <__aeabi_dsub+0x4fa>
 8002810:	494a      	ldr	r1, [pc, #296]	; (800293c <__aeabi_dsub+0x368>)
 8002812:	428a      	cmp	r2, r1
 8002814:	d100      	bne.n	8002818 <__aeabi_dsub+0x244>
 8002816:	e1be      	b.n	8002b96 <__aeabi_dsub+0x5c2>
 8002818:	2180      	movs	r1, #128	; 0x80
 800281a:	464c      	mov	r4, r9
 800281c:	0409      	lsls	r1, r1, #16
 800281e:	430c      	orrs	r4, r1
 8002820:	46a1      	mov	r9, r4
 8002822:	4661      	mov	r1, ip
 8002824:	2938      	cmp	r1, #56	; 0x38
 8002826:	dd00      	ble.n	800282a <__aeabi_dsub+0x256>
 8002828:	e1ba      	b.n	8002ba0 <__aeabi_dsub+0x5cc>
 800282a:	291f      	cmp	r1, #31
 800282c:	dd00      	ble.n	8002830 <__aeabi_dsub+0x25c>
 800282e:	e227      	b.n	8002c80 <__aeabi_dsub+0x6ac>
 8002830:	2420      	movs	r4, #32
 8002832:	1a64      	subs	r4, r4, r1
 8002834:	4649      	mov	r1, r9
 8002836:	40a1      	lsls	r1, r4
 8002838:	001e      	movs	r6, r3
 800283a:	4688      	mov	r8, r1
 800283c:	4661      	mov	r1, ip
 800283e:	40a3      	lsls	r3, r4
 8002840:	40ce      	lsrs	r6, r1
 8002842:	4641      	mov	r1, r8
 8002844:	1e5c      	subs	r4, r3, #1
 8002846:	41a3      	sbcs	r3, r4
 8002848:	4331      	orrs	r1, r6
 800284a:	4319      	orrs	r1, r3
 800284c:	000c      	movs	r4, r1
 800284e:	4663      	mov	r3, ip
 8002850:	4649      	mov	r1, r9
 8002852:	40d9      	lsrs	r1, r3
 8002854:	187f      	adds	r7, r7, r1
 8002856:	1824      	adds	r4, r4, r0
 8002858:	4284      	cmp	r4, r0
 800285a:	419b      	sbcs	r3, r3
 800285c:	425b      	negs	r3, r3
 800285e:	469a      	mov	sl, r3
 8002860:	0016      	movs	r6, r2
 8002862:	44ba      	add	sl, r7
 8002864:	e05d      	b.n	8002922 <__aeabi_dsub+0x34e>
 8002866:	4c38      	ldr	r4, [pc, #224]	; (8002948 <__aeabi_dsub+0x374>)
 8002868:	1c72      	adds	r2, r6, #1
 800286a:	4222      	tst	r2, r4
 800286c:	d000      	beq.n	8002870 <__aeabi_dsub+0x29c>
 800286e:	e0df      	b.n	8002a30 <__aeabi_dsub+0x45c>
 8002870:	464a      	mov	r2, r9
 8002872:	431a      	orrs	r2, r3
 8002874:	2e00      	cmp	r6, #0
 8002876:	d000      	beq.n	800287a <__aeabi_dsub+0x2a6>
 8002878:	e15c      	b.n	8002b34 <__aeabi_dsub+0x560>
 800287a:	2a00      	cmp	r2, #0
 800287c:	d100      	bne.n	8002880 <__aeabi_dsub+0x2ac>
 800287e:	e1cf      	b.n	8002c20 <__aeabi_dsub+0x64c>
 8002880:	003a      	movs	r2, r7
 8002882:	4302      	orrs	r2, r0
 8002884:	d100      	bne.n	8002888 <__aeabi_dsub+0x2b4>
 8002886:	e17f      	b.n	8002b88 <__aeabi_dsub+0x5b4>
 8002888:	1a1c      	subs	r4, r3, r0
 800288a:	464a      	mov	r2, r9
 800288c:	42a3      	cmp	r3, r4
 800288e:	4189      	sbcs	r1, r1
 8002890:	1bd2      	subs	r2, r2, r7
 8002892:	4249      	negs	r1, r1
 8002894:	1a52      	subs	r2, r2, r1
 8002896:	4692      	mov	sl, r2
 8002898:	0212      	lsls	r2, r2, #8
 800289a:	d400      	bmi.n	800289e <__aeabi_dsub+0x2ca>
 800289c:	e20a      	b.n	8002cb4 <__aeabi_dsub+0x6e0>
 800289e:	1ac4      	subs	r4, r0, r3
 80028a0:	42a0      	cmp	r0, r4
 80028a2:	4180      	sbcs	r0, r0
 80028a4:	464b      	mov	r3, r9
 80028a6:	4240      	negs	r0, r0
 80028a8:	1aff      	subs	r7, r7, r3
 80028aa:	1a3b      	subs	r3, r7, r0
 80028ac:	469a      	mov	sl, r3
 80028ae:	465d      	mov	r5, fp
 80028b0:	e71a      	b.n	80026e8 <__aeabi_dsub+0x114>
 80028b2:	003a      	movs	r2, r7
 80028b4:	4302      	orrs	r2, r0
 80028b6:	d073      	beq.n	80029a0 <__aeabi_dsub+0x3cc>
 80028b8:	0022      	movs	r2, r4
 80028ba:	3a01      	subs	r2, #1
 80028bc:	2c01      	cmp	r4, #1
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x2ee>
 80028c0:	e0cb      	b.n	8002a5a <__aeabi_dsub+0x486>
 80028c2:	4554      	cmp	r4, sl
 80028c4:	d042      	beq.n	800294c <__aeabi_dsub+0x378>
 80028c6:	4694      	mov	ip, r2
 80028c8:	e748      	b.n	800275c <__aeabi_dsub+0x188>
 80028ca:	0010      	movs	r0, r2
 80028cc:	3b1f      	subs	r3, #31
 80028ce:	40d8      	lsrs	r0, r3
 80028d0:	2920      	cmp	r1, #32
 80028d2:	d003      	beq.n	80028dc <__aeabi_dsub+0x308>
 80028d4:	2340      	movs	r3, #64	; 0x40
 80028d6:	1a5b      	subs	r3, r3, r1
 80028d8:	409a      	lsls	r2, r3
 80028da:	4314      	orrs	r4, r2
 80028dc:	1e63      	subs	r3, r4, #1
 80028de:	419c      	sbcs	r4, r3
 80028e0:	2300      	movs	r3, #0
 80028e2:	2600      	movs	r6, #0
 80028e4:	469a      	mov	sl, r3
 80028e6:	4304      	orrs	r4, r0
 80028e8:	0763      	lsls	r3, r4, #29
 80028ea:	d000      	beq.n	80028ee <__aeabi_dsub+0x31a>
 80028ec:	e6fe      	b.n	80026ec <__aeabi_dsub+0x118>
 80028ee:	4652      	mov	r2, sl
 80028f0:	08e3      	lsrs	r3, r4, #3
 80028f2:	0752      	lsls	r2, r2, #29
 80028f4:	4313      	orrs	r3, r2
 80028f6:	4652      	mov	r2, sl
 80028f8:	46b4      	mov	ip, r6
 80028fa:	08d2      	lsrs	r2, r2, #3
 80028fc:	490f      	ldr	r1, [pc, #60]	; (800293c <__aeabi_dsub+0x368>)
 80028fe:	458c      	cmp	ip, r1
 8002900:	d02a      	beq.n	8002958 <__aeabi_dsub+0x384>
 8002902:	0312      	lsls	r2, r2, #12
 8002904:	0b14      	lsrs	r4, r2, #12
 8002906:	4662      	mov	r2, ip
 8002908:	0552      	lsls	r2, r2, #21
 800290a:	0d52      	lsrs	r2, r2, #21
 800290c:	e70c      	b.n	8002728 <__aeabi_dsub+0x154>
 800290e:	003c      	movs	r4, r7
 8002910:	4304      	orrs	r4, r0
 8002912:	1e62      	subs	r2, r4, #1
 8002914:	4194      	sbcs	r4, r2
 8002916:	18e4      	adds	r4, r4, r3
 8002918:	429c      	cmp	r4, r3
 800291a:	4192      	sbcs	r2, r2
 800291c:	4252      	negs	r2, r2
 800291e:	444a      	add	r2, r9
 8002920:	4692      	mov	sl, r2
 8002922:	4653      	mov	r3, sl
 8002924:	021b      	lsls	r3, r3, #8
 8002926:	d5df      	bpl.n	80028e8 <__aeabi_dsub+0x314>
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <__aeabi_dsub+0x368>)
 800292a:	3601      	adds	r6, #1
 800292c:	429e      	cmp	r6, r3
 800292e:	d000      	beq.n	8002932 <__aeabi_dsub+0x35e>
 8002930:	e0a0      	b.n	8002a74 <__aeabi_dsub+0x4a0>
 8002932:	0032      	movs	r2, r6
 8002934:	2400      	movs	r4, #0
 8002936:	2300      	movs	r3, #0
 8002938:	e6f6      	b.n	8002728 <__aeabi_dsub+0x154>
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	000007ff 	.word	0x000007ff
 8002940:	ff7fffff 	.word	0xff7fffff
 8002944:	fffff801 	.word	0xfffff801
 8002948:	000007fe 	.word	0x000007fe
 800294c:	08db      	lsrs	r3, r3, #3
 800294e:	464a      	mov	r2, r9
 8002950:	0752      	lsls	r2, r2, #29
 8002952:	4313      	orrs	r3, r2
 8002954:	464a      	mov	r2, r9
 8002956:	08d2      	lsrs	r2, r2, #3
 8002958:	0019      	movs	r1, r3
 800295a:	4311      	orrs	r1, r2
 800295c:	d100      	bne.n	8002960 <__aeabi_dsub+0x38c>
 800295e:	e1b5      	b.n	8002ccc <__aeabi_dsub+0x6f8>
 8002960:	2480      	movs	r4, #128	; 0x80
 8002962:	0324      	lsls	r4, r4, #12
 8002964:	4314      	orrs	r4, r2
 8002966:	0324      	lsls	r4, r4, #12
 8002968:	4ad5      	ldr	r2, [pc, #852]	; (8002cc0 <__aeabi_dsub+0x6ec>)
 800296a:	0b24      	lsrs	r4, r4, #12
 800296c:	e6dc      	b.n	8002728 <__aeabi_dsub+0x154>
 800296e:	0020      	movs	r0, r4
 8002970:	f000 fade 	bl	8002f30 <__clzsi2>
 8002974:	0003      	movs	r3, r0
 8002976:	3318      	adds	r3, #24
 8002978:	2b1f      	cmp	r3, #31
 800297a:	dc00      	bgt.n	800297e <__aeabi_dsub+0x3aa>
 800297c:	e695      	b.n	80026aa <__aeabi_dsub+0xd6>
 800297e:	0022      	movs	r2, r4
 8002980:	3808      	subs	r0, #8
 8002982:	4082      	lsls	r2, r0
 8002984:	2400      	movs	r4, #0
 8002986:	429e      	cmp	r6, r3
 8002988:	dc00      	bgt.n	800298c <__aeabi_dsub+0x3b8>
 800298a:	e69a      	b.n	80026c2 <__aeabi_dsub+0xee>
 800298c:	1af6      	subs	r6, r6, r3
 800298e:	4bcd      	ldr	r3, [pc, #820]	; (8002cc4 <__aeabi_dsub+0x6f0>)
 8002990:	401a      	ands	r2, r3
 8002992:	4692      	mov	sl, r2
 8002994:	e6a8      	b.n	80026e8 <__aeabi_dsub+0x114>
 8002996:	003c      	movs	r4, r7
 8002998:	4304      	orrs	r4, r0
 800299a:	1e62      	subs	r2, r4, #1
 800299c:	4194      	sbcs	r4, r2
 800299e:	e66c      	b.n	800267a <__aeabi_dsub+0xa6>
 80029a0:	464a      	mov	r2, r9
 80029a2:	08db      	lsrs	r3, r3, #3
 80029a4:	0752      	lsls	r2, r2, #29
 80029a6:	4313      	orrs	r3, r2
 80029a8:	464a      	mov	r2, r9
 80029aa:	08d2      	lsrs	r2, r2, #3
 80029ac:	e7a6      	b.n	80028fc <__aeabi_dsub+0x328>
 80029ae:	4cc6      	ldr	r4, [pc, #792]	; (8002cc8 <__aeabi_dsub+0x6f4>)
 80029b0:	1c72      	adds	r2, r6, #1
 80029b2:	4222      	tst	r2, r4
 80029b4:	d000      	beq.n	80029b8 <__aeabi_dsub+0x3e4>
 80029b6:	e0ac      	b.n	8002b12 <__aeabi_dsub+0x53e>
 80029b8:	464a      	mov	r2, r9
 80029ba:	431a      	orrs	r2, r3
 80029bc:	2e00      	cmp	r6, #0
 80029be:	d000      	beq.n	80029c2 <__aeabi_dsub+0x3ee>
 80029c0:	e105      	b.n	8002bce <__aeabi_dsub+0x5fa>
 80029c2:	2a00      	cmp	r2, #0
 80029c4:	d100      	bne.n	80029c8 <__aeabi_dsub+0x3f4>
 80029c6:	e156      	b.n	8002c76 <__aeabi_dsub+0x6a2>
 80029c8:	003a      	movs	r2, r7
 80029ca:	4302      	orrs	r2, r0
 80029cc:	d100      	bne.n	80029d0 <__aeabi_dsub+0x3fc>
 80029ce:	e0db      	b.n	8002b88 <__aeabi_dsub+0x5b4>
 80029d0:	181c      	adds	r4, r3, r0
 80029d2:	429c      	cmp	r4, r3
 80029d4:	419b      	sbcs	r3, r3
 80029d6:	444f      	add	r7, r9
 80029d8:	46ba      	mov	sl, r7
 80029da:	425b      	negs	r3, r3
 80029dc:	449a      	add	sl, r3
 80029de:	4653      	mov	r3, sl
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	d400      	bmi.n	80029e6 <__aeabi_dsub+0x412>
 80029e4:	e780      	b.n	80028e8 <__aeabi_dsub+0x314>
 80029e6:	4652      	mov	r2, sl
 80029e8:	4bb6      	ldr	r3, [pc, #728]	; (8002cc4 <__aeabi_dsub+0x6f0>)
 80029ea:	2601      	movs	r6, #1
 80029ec:	401a      	ands	r2, r3
 80029ee:	4692      	mov	sl, r2
 80029f0:	e77a      	b.n	80028e8 <__aeabi_dsub+0x314>
 80029f2:	4cb3      	ldr	r4, [pc, #716]	; (8002cc0 <__aeabi_dsub+0x6ec>)
 80029f4:	42a2      	cmp	r2, r4
 80029f6:	d100      	bne.n	80029fa <__aeabi_dsub+0x426>
 80029f8:	e0c0      	b.n	8002b7c <__aeabi_dsub+0x5a8>
 80029fa:	2480      	movs	r4, #128	; 0x80
 80029fc:	464d      	mov	r5, r9
 80029fe:	0424      	lsls	r4, r4, #16
 8002a00:	4325      	orrs	r5, r4
 8002a02:	46a9      	mov	r9, r5
 8002a04:	4664      	mov	r4, ip
 8002a06:	2c38      	cmp	r4, #56	; 0x38
 8002a08:	dc53      	bgt.n	8002ab2 <__aeabi_dsub+0x4de>
 8002a0a:	4661      	mov	r1, ip
 8002a0c:	2c1f      	cmp	r4, #31
 8002a0e:	dd00      	ble.n	8002a12 <__aeabi_dsub+0x43e>
 8002a10:	e0cd      	b.n	8002bae <__aeabi_dsub+0x5da>
 8002a12:	2520      	movs	r5, #32
 8002a14:	001e      	movs	r6, r3
 8002a16:	1b2d      	subs	r5, r5, r4
 8002a18:	464c      	mov	r4, r9
 8002a1a:	40ab      	lsls	r3, r5
 8002a1c:	40ac      	lsls	r4, r5
 8002a1e:	40ce      	lsrs	r6, r1
 8002a20:	1e5d      	subs	r5, r3, #1
 8002a22:	41ab      	sbcs	r3, r5
 8002a24:	4334      	orrs	r4, r6
 8002a26:	4323      	orrs	r3, r4
 8002a28:	464c      	mov	r4, r9
 8002a2a:	40cc      	lsrs	r4, r1
 8002a2c:	1b3f      	subs	r7, r7, r4
 8002a2e:	e045      	b.n	8002abc <__aeabi_dsub+0x4e8>
 8002a30:	464a      	mov	r2, r9
 8002a32:	1a1c      	subs	r4, r3, r0
 8002a34:	1bd1      	subs	r1, r2, r7
 8002a36:	42a3      	cmp	r3, r4
 8002a38:	4192      	sbcs	r2, r2
 8002a3a:	4252      	negs	r2, r2
 8002a3c:	4692      	mov	sl, r2
 8002a3e:	000a      	movs	r2, r1
 8002a40:	4651      	mov	r1, sl
 8002a42:	1a52      	subs	r2, r2, r1
 8002a44:	4692      	mov	sl, r2
 8002a46:	0212      	lsls	r2, r2, #8
 8002a48:	d500      	bpl.n	8002a4c <__aeabi_dsub+0x478>
 8002a4a:	e083      	b.n	8002b54 <__aeabi_dsub+0x580>
 8002a4c:	4653      	mov	r3, sl
 8002a4e:	4323      	orrs	r3, r4
 8002a50:	d000      	beq.n	8002a54 <__aeabi_dsub+0x480>
 8002a52:	e621      	b.n	8002698 <__aeabi_dsub+0xc4>
 8002a54:	2200      	movs	r2, #0
 8002a56:	2500      	movs	r5, #0
 8002a58:	e753      	b.n	8002902 <__aeabi_dsub+0x32e>
 8002a5a:	181c      	adds	r4, r3, r0
 8002a5c:	429c      	cmp	r4, r3
 8002a5e:	419b      	sbcs	r3, r3
 8002a60:	444f      	add	r7, r9
 8002a62:	46ba      	mov	sl, r7
 8002a64:	425b      	negs	r3, r3
 8002a66:	449a      	add	sl, r3
 8002a68:	4653      	mov	r3, sl
 8002a6a:	2601      	movs	r6, #1
 8002a6c:	021b      	lsls	r3, r3, #8
 8002a6e:	d400      	bmi.n	8002a72 <__aeabi_dsub+0x49e>
 8002a70:	e73a      	b.n	80028e8 <__aeabi_dsub+0x314>
 8002a72:	2602      	movs	r6, #2
 8002a74:	4652      	mov	r2, sl
 8002a76:	4b93      	ldr	r3, [pc, #588]	; (8002cc4 <__aeabi_dsub+0x6f0>)
 8002a78:	2101      	movs	r1, #1
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	0013      	movs	r3, r2
 8002a7e:	4021      	ands	r1, r4
 8002a80:	0862      	lsrs	r2, r4, #1
 8002a82:	430a      	orrs	r2, r1
 8002a84:	07dc      	lsls	r4, r3, #31
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	469a      	mov	sl, r3
 8002a8a:	4314      	orrs	r4, r2
 8002a8c:	e62c      	b.n	80026e8 <__aeabi_dsub+0x114>
 8002a8e:	0039      	movs	r1, r7
 8002a90:	3a20      	subs	r2, #32
 8002a92:	40d1      	lsrs	r1, r2
 8002a94:	4662      	mov	r2, ip
 8002a96:	2a20      	cmp	r2, #32
 8002a98:	d006      	beq.n	8002aa8 <__aeabi_dsub+0x4d4>
 8002a9a:	4664      	mov	r4, ip
 8002a9c:	2240      	movs	r2, #64	; 0x40
 8002a9e:	1b12      	subs	r2, r2, r4
 8002aa0:	003c      	movs	r4, r7
 8002aa2:	4094      	lsls	r4, r2
 8002aa4:	4304      	orrs	r4, r0
 8002aa6:	9401      	str	r4, [sp, #4]
 8002aa8:	9c01      	ldr	r4, [sp, #4]
 8002aaa:	1e62      	subs	r2, r4, #1
 8002aac:	4194      	sbcs	r4, r2
 8002aae:	430c      	orrs	r4, r1
 8002ab0:	e5e3      	b.n	800267a <__aeabi_dsub+0xa6>
 8002ab2:	4649      	mov	r1, r9
 8002ab4:	4319      	orrs	r1, r3
 8002ab6:	000b      	movs	r3, r1
 8002ab8:	1e5c      	subs	r4, r3, #1
 8002aba:	41a3      	sbcs	r3, r4
 8002abc:	1ac4      	subs	r4, r0, r3
 8002abe:	42a0      	cmp	r0, r4
 8002ac0:	419b      	sbcs	r3, r3
 8002ac2:	425b      	negs	r3, r3
 8002ac4:	1afb      	subs	r3, r7, r3
 8002ac6:	469a      	mov	sl, r3
 8002ac8:	465d      	mov	r5, fp
 8002aca:	0016      	movs	r6, r2
 8002acc:	e5dc      	b.n	8002688 <__aeabi_dsub+0xb4>
 8002ace:	4649      	mov	r1, r9
 8002ad0:	4319      	orrs	r1, r3
 8002ad2:	d100      	bne.n	8002ad6 <__aeabi_dsub+0x502>
 8002ad4:	e0ae      	b.n	8002c34 <__aeabi_dsub+0x660>
 8002ad6:	4661      	mov	r1, ip
 8002ad8:	4664      	mov	r4, ip
 8002ada:	3901      	subs	r1, #1
 8002adc:	2c01      	cmp	r4, #1
 8002ade:	d100      	bne.n	8002ae2 <__aeabi_dsub+0x50e>
 8002ae0:	e0e0      	b.n	8002ca4 <__aeabi_dsub+0x6d0>
 8002ae2:	4c77      	ldr	r4, [pc, #476]	; (8002cc0 <__aeabi_dsub+0x6ec>)
 8002ae4:	45a4      	cmp	ip, r4
 8002ae6:	d056      	beq.n	8002b96 <__aeabi_dsub+0x5c2>
 8002ae8:	468c      	mov	ip, r1
 8002aea:	e69a      	b.n	8002822 <__aeabi_dsub+0x24e>
 8002aec:	4661      	mov	r1, ip
 8002aee:	2220      	movs	r2, #32
 8002af0:	003c      	movs	r4, r7
 8002af2:	1a52      	subs	r2, r2, r1
 8002af4:	4094      	lsls	r4, r2
 8002af6:	0001      	movs	r1, r0
 8002af8:	4090      	lsls	r0, r2
 8002afa:	46a0      	mov	r8, r4
 8002afc:	4664      	mov	r4, ip
 8002afe:	1e42      	subs	r2, r0, #1
 8002b00:	4190      	sbcs	r0, r2
 8002b02:	4662      	mov	r2, ip
 8002b04:	40e1      	lsrs	r1, r4
 8002b06:	4644      	mov	r4, r8
 8002b08:	40d7      	lsrs	r7, r2
 8002b0a:	430c      	orrs	r4, r1
 8002b0c:	4304      	orrs	r4, r0
 8002b0e:	44b9      	add	r9, r7
 8002b10:	e701      	b.n	8002916 <__aeabi_dsub+0x342>
 8002b12:	496b      	ldr	r1, [pc, #428]	; (8002cc0 <__aeabi_dsub+0x6ec>)
 8002b14:	428a      	cmp	r2, r1
 8002b16:	d100      	bne.n	8002b1a <__aeabi_dsub+0x546>
 8002b18:	e70c      	b.n	8002934 <__aeabi_dsub+0x360>
 8002b1a:	1818      	adds	r0, r3, r0
 8002b1c:	4298      	cmp	r0, r3
 8002b1e:	419b      	sbcs	r3, r3
 8002b20:	444f      	add	r7, r9
 8002b22:	425b      	negs	r3, r3
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	07dc      	lsls	r4, r3, #31
 8002b28:	0840      	lsrs	r0, r0, #1
 8002b2a:	085b      	lsrs	r3, r3, #1
 8002b2c:	469a      	mov	sl, r3
 8002b2e:	0016      	movs	r6, r2
 8002b30:	4304      	orrs	r4, r0
 8002b32:	e6d9      	b.n	80028e8 <__aeabi_dsub+0x314>
 8002b34:	2a00      	cmp	r2, #0
 8002b36:	d000      	beq.n	8002b3a <__aeabi_dsub+0x566>
 8002b38:	e081      	b.n	8002c3e <__aeabi_dsub+0x66a>
 8002b3a:	003b      	movs	r3, r7
 8002b3c:	4303      	orrs	r3, r0
 8002b3e:	d11d      	bne.n	8002b7c <__aeabi_dsub+0x5a8>
 8002b40:	2280      	movs	r2, #128	; 0x80
 8002b42:	2500      	movs	r5, #0
 8002b44:	0312      	lsls	r2, r2, #12
 8002b46:	e70b      	b.n	8002960 <__aeabi_dsub+0x38c>
 8002b48:	08c0      	lsrs	r0, r0, #3
 8002b4a:	077b      	lsls	r3, r7, #29
 8002b4c:	465d      	mov	r5, fp
 8002b4e:	4303      	orrs	r3, r0
 8002b50:	08fa      	lsrs	r2, r7, #3
 8002b52:	e6d3      	b.n	80028fc <__aeabi_dsub+0x328>
 8002b54:	1ac4      	subs	r4, r0, r3
 8002b56:	42a0      	cmp	r0, r4
 8002b58:	4180      	sbcs	r0, r0
 8002b5a:	464b      	mov	r3, r9
 8002b5c:	4240      	negs	r0, r0
 8002b5e:	1aff      	subs	r7, r7, r3
 8002b60:	1a3b      	subs	r3, r7, r0
 8002b62:	469a      	mov	sl, r3
 8002b64:	465d      	mov	r5, fp
 8002b66:	e597      	b.n	8002698 <__aeabi_dsub+0xc4>
 8002b68:	1a1c      	subs	r4, r3, r0
 8002b6a:	464a      	mov	r2, r9
 8002b6c:	42a3      	cmp	r3, r4
 8002b6e:	419b      	sbcs	r3, r3
 8002b70:	1bd7      	subs	r7, r2, r7
 8002b72:	425b      	negs	r3, r3
 8002b74:	1afb      	subs	r3, r7, r3
 8002b76:	469a      	mov	sl, r3
 8002b78:	2601      	movs	r6, #1
 8002b7a:	e585      	b.n	8002688 <__aeabi_dsub+0xb4>
 8002b7c:	08c0      	lsrs	r0, r0, #3
 8002b7e:	077b      	lsls	r3, r7, #29
 8002b80:	465d      	mov	r5, fp
 8002b82:	4303      	orrs	r3, r0
 8002b84:	08fa      	lsrs	r2, r7, #3
 8002b86:	e6e7      	b.n	8002958 <__aeabi_dsub+0x384>
 8002b88:	464a      	mov	r2, r9
 8002b8a:	08db      	lsrs	r3, r3, #3
 8002b8c:	0752      	lsls	r2, r2, #29
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	464a      	mov	r2, r9
 8002b92:	08d2      	lsrs	r2, r2, #3
 8002b94:	e6b5      	b.n	8002902 <__aeabi_dsub+0x32e>
 8002b96:	08c0      	lsrs	r0, r0, #3
 8002b98:	077b      	lsls	r3, r7, #29
 8002b9a:	4303      	orrs	r3, r0
 8002b9c:	08fa      	lsrs	r2, r7, #3
 8002b9e:	e6db      	b.n	8002958 <__aeabi_dsub+0x384>
 8002ba0:	4649      	mov	r1, r9
 8002ba2:	4319      	orrs	r1, r3
 8002ba4:	000b      	movs	r3, r1
 8002ba6:	1e59      	subs	r1, r3, #1
 8002ba8:	418b      	sbcs	r3, r1
 8002baa:	001c      	movs	r4, r3
 8002bac:	e653      	b.n	8002856 <__aeabi_dsub+0x282>
 8002bae:	464d      	mov	r5, r9
 8002bb0:	3c20      	subs	r4, #32
 8002bb2:	40e5      	lsrs	r5, r4
 8002bb4:	2920      	cmp	r1, #32
 8002bb6:	d005      	beq.n	8002bc4 <__aeabi_dsub+0x5f0>
 8002bb8:	2440      	movs	r4, #64	; 0x40
 8002bba:	1a64      	subs	r4, r4, r1
 8002bbc:	4649      	mov	r1, r9
 8002bbe:	40a1      	lsls	r1, r4
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	4698      	mov	r8, r3
 8002bc4:	4643      	mov	r3, r8
 8002bc6:	1e5c      	subs	r4, r3, #1
 8002bc8:	41a3      	sbcs	r3, r4
 8002bca:	432b      	orrs	r3, r5
 8002bcc:	e776      	b.n	8002abc <__aeabi_dsub+0x4e8>
 8002bce:	2a00      	cmp	r2, #0
 8002bd0:	d0e1      	beq.n	8002b96 <__aeabi_dsub+0x5c2>
 8002bd2:	003a      	movs	r2, r7
 8002bd4:	08db      	lsrs	r3, r3, #3
 8002bd6:	4302      	orrs	r2, r0
 8002bd8:	d100      	bne.n	8002bdc <__aeabi_dsub+0x608>
 8002bda:	e6b8      	b.n	800294e <__aeabi_dsub+0x37a>
 8002bdc:	464a      	mov	r2, r9
 8002bde:	0752      	lsls	r2, r2, #29
 8002be0:	2480      	movs	r4, #128	; 0x80
 8002be2:	4313      	orrs	r3, r2
 8002be4:	464a      	mov	r2, r9
 8002be6:	0324      	lsls	r4, r4, #12
 8002be8:	08d2      	lsrs	r2, r2, #3
 8002bea:	4222      	tst	r2, r4
 8002bec:	d007      	beq.n	8002bfe <__aeabi_dsub+0x62a>
 8002bee:	08fe      	lsrs	r6, r7, #3
 8002bf0:	4226      	tst	r6, r4
 8002bf2:	d104      	bne.n	8002bfe <__aeabi_dsub+0x62a>
 8002bf4:	465d      	mov	r5, fp
 8002bf6:	0032      	movs	r2, r6
 8002bf8:	08c3      	lsrs	r3, r0, #3
 8002bfa:	077f      	lsls	r7, r7, #29
 8002bfc:	433b      	orrs	r3, r7
 8002bfe:	0f59      	lsrs	r1, r3, #29
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	0749      	lsls	r1, r1, #29
 8002c04:	08db      	lsrs	r3, r3, #3
 8002c06:	430b      	orrs	r3, r1
 8002c08:	e6a6      	b.n	8002958 <__aeabi_dsub+0x384>
 8002c0a:	1ac4      	subs	r4, r0, r3
 8002c0c:	42a0      	cmp	r0, r4
 8002c0e:	4180      	sbcs	r0, r0
 8002c10:	464b      	mov	r3, r9
 8002c12:	4240      	negs	r0, r0
 8002c14:	1aff      	subs	r7, r7, r3
 8002c16:	1a3b      	subs	r3, r7, r0
 8002c18:	469a      	mov	sl, r3
 8002c1a:	465d      	mov	r5, fp
 8002c1c:	2601      	movs	r6, #1
 8002c1e:	e533      	b.n	8002688 <__aeabi_dsub+0xb4>
 8002c20:	003b      	movs	r3, r7
 8002c22:	4303      	orrs	r3, r0
 8002c24:	d100      	bne.n	8002c28 <__aeabi_dsub+0x654>
 8002c26:	e715      	b.n	8002a54 <__aeabi_dsub+0x480>
 8002c28:	08c0      	lsrs	r0, r0, #3
 8002c2a:	077b      	lsls	r3, r7, #29
 8002c2c:	465d      	mov	r5, fp
 8002c2e:	4303      	orrs	r3, r0
 8002c30:	08fa      	lsrs	r2, r7, #3
 8002c32:	e666      	b.n	8002902 <__aeabi_dsub+0x32e>
 8002c34:	08c0      	lsrs	r0, r0, #3
 8002c36:	077b      	lsls	r3, r7, #29
 8002c38:	4303      	orrs	r3, r0
 8002c3a:	08fa      	lsrs	r2, r7, #3
 8002c3c:	e65e      	b.n	80028fc <__aeabi_dsub+0x328>
 8002c3e:	003a      	movs	r2, r7
 8002c40:	08db      	lsrs	r3, r3, #3
 8002c42:	4302      	orrs	r2, r0
 8002c44:	d100      	bne.n	8002c48 <__aeabi_dsub+0x674>
 8002c46:	e682      	b.n	800294e <__aeabi_dsub+0x37a>
 8002c48:	464a      	mov	r2, r9
 8002c4a:	0752      	lsls	r2, r2, #29
 8002c4c:	2480      	movs	r4, #128	; 0x80
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	464a      	mov	r2, r9
 8002c52:	0324      	lsls	r4, r4, #12
 8002c54:	08d2      	lsrs	r2, r2, #3
 8002c56:	4222      	tst	r2, r4
 8002c58:	d007      	beq.n	8002c6a <__aeabi_dsub+0x696>
 8002c5a:	08fe      	lsrs	r6, r7, #3
 8002c5c:	4226      	tst	r6, r4
 8002c5e:	d104      	bne.n	8002c6a <__aeabi_dsub+0x696>
 8002c60:	465d      	mov	r5, fp
 8002c62:	0032      	movs	r2, r6
 8002c64:	08c3      	lsrs	r3, r0, #3
 8002c66:	077f      	lsls	r7, r7, #29
 8002c68:	433b      	orrs	r3, r7
 8002c6a:	0f59      	lsrs	r1, r3, #29
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	08db      	lsrs	r3, r3, #3
 8002c70:	0749      	lsls	r1, r1, #29
 8002c72:	430b      	orrs	r3, r1
 8002c74:	e670      	b.n	8002958 <__aeabi_dsub+0x384>
 8002c76:	08c0      	lsrs	r0, r0, #3
 8002c78:	077b      	lsls	r3, r7, #29
 8002c7a:	4303      	orrs	r3, r0
 8002c7c:	08fa      	lsrs	r2, r7, #3
 8002c7e:	e640      	b.n	8002902 <__aeabi_dsub+0x32e>
 8002c80:	464c      	mov	r4, r9
 8002c82:	3920      	subs	r1, #32
 8002c84:	40cc      	lsrs	r4, r1
 8002c86:	4661      	mov	r1, ip
 8002c88:	2920      	cmp	r1, #32
 8002c8a:	d006      	beq.n	8002c9a <__aeabi_dsub+0x6c6>
 8002c8c:	4666      	mov	r6, ip
 8002c8e:	2140      	movs	r1, #64	; 0x40
 8002c90:	1b89      	subs	r1, r1, r6
 8002c92:	464e      	mov	r6, r9
 8002c94:	408e      	lsls	r6, r1
 8002c96:	4333      	orrs	r3, r6
 8002c98:	4698      	mov	r8, r3
 8002c9a:	4643      	mov	r3, r8
 8002c9c:	1e59      	subs	r1, r3, #1
 8002c9e:	418b      	sbcs	r3, r1
 8002ca0:	431c      	orrs	r4, r3
 8002ca2:	e5d8      	b.n	8002856 <__aeabi_dsub+0x282>
 8002ca4:	181c      	adds	r4, r3, r0
 8002ca6:	4284      	cmp	r4, r0
 8002ca8:	4180      	sbcs	r0, r0
 8002caa:	444f      	add	r7, r9
 8002cac:	46ba      	mov	sl, r7
 8002cae:	4240      	negs	r0, r0
 8002cb0:	4482      	add	sl, r0
 8002cb2:	e6d9      	b.n	8002a68 <__aeabi_dsub+0x494>
 8002cb4:	4653      	mov	r3, sl
 8002cb6:	4323      	orrs	r3, r4
 8002cb8:	d100      	bne.n	8002cbc <__aeabi_dsub+0x6e8>
 8002cba:	e6cb      	b.n	8002a54 <__aeabi_dsub+0x480>
 8002cbc:	e614      	b.n	80028e8 <__aeabi_dsub+0x314>
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	000007ff 	.word	0x000007ff
 8002cc4:	ff7fffff 	.word	0xff7fffff
 8002cc8:	000007fe 	.word	0x000007fe
 8002ccc:	2300      	movs	r3, #0
 8002cce:	4a01      	ldr	r2, [pc, #4]	; (8002cd4 <__aeabi_dsub+0x700>)
 8002cd0:	001c      	movs	r4, r3
 8002cd2:	e529      	b.n	8002728 <__aeabi_dsub+0x154>
 8002cd4:	000007ff 	.word	0x000007ff

08002cd8 <__aeabi_dcmpun>:
 8002cd8:	b570      	push	{r4, r5, r6, lr}
 8002cda:	0005      	movs	r5, r0
 8002cdc:	480c      	ldr	r0, [pc, #48]	; (8002d10 <__aeabi_dcmpun+0x38>)
 8002cde:	031c      	lsls	r4, r3, #12
 8002ce0:	0016      	movs	r6, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	030a      	lsls	r2, r1, #12
 8002ce6:	0049      	lsls	r1, r1, #1
 8002ce8:	0b12      	lsrs	r2, r2, #12
 8002cea:	0d49      	lsrs	r1, r1, #21
 8002cec:	0b24      	lsrs	r4, r4, #12
 8002cee:	0d5b      	lsrs	r3, r3, #21
 8002cf0:	4281      	cmp	r1, r0
 8002cf2:	d008      	beq.n	8002d06 <__aeabi_dcmpun+0x2e>
 8002cf4:	4a06      	ldr	r2, [pc, #24]	; (8002d10 <__aeabi_dcmpun+0x38>)
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d103      	bne.n	8002d04 <__aeabi_dcmpun+0x2c>
 8002cfc:	0020      	movs	r0, r4
 8002cfe:	4330      	orrs	r0, r6
 8002d00:	1e43      	subs	r3, r0, #1
 8002d02:	4198      	sbcs	r0, r3
 8002d04:	bd70      	pop	{r4, r5, r6, pc}
 8002d06:	2001      	movs	r0, #1
 8002d08:	432a      	orrs	r2, r5
 8002d0a:	d1fb      	bne.n	8002d04 <__aeabi_dcmpun+0x2c>
 8002d0c:	e7f2      	b.n	8002cf4 <__aeabi_dcmpun+0x1c>
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	000007ff 	.word	0x000007ff

08002d14 <__aeabi_d2iz>:
 8002d14:	000a      	movs	r2, r1
 8002d16:	b530      	push	{r4, r5, lr}
 8002d18:	4c13      	ldr	r4, [pc, #76]	; (8002d68 <__aeabi_d2iz+0x54>)
 8002d1a:	0053      	lsls	r3, r2, #1
 8002d1c:	0309      	lsls	r1, r1, #12
 8002d1e:	0005      	movs	r5, r0
 8002d20:	0b09      	lsrs	r1, r1, #12
 8002d22:	2000      	movs	r0, #0
 8002d24:	0d5b      	lsrs	r3, r3, #21
 8002d26:	0fd2      	lsrs	r2, r2, #31
 8002d28:	42a3      	cmp	r3, r4
 8002d2a:	dd04      	ble.n	8002d36 <__aeabi_d2iz+0x22>
 8002d2c:	480f      	ldr	r0, [pc, #60]	; (8002d6c <__aeabi_d2iz+0x58>)
 8002d2e:	4283      	cmp	r3, r0
 8002d30:	dd02      	ble.n	8002d38 <__aeabi_d2iz+0x24>
 8002d32:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <__aeabi_d2iz+0x5c>)
 8002d34:	18d0      	adds	r0, r2, r3
 8002d36:	bd30      	pop	{r4, r5, pc}
 8002d38:	2080      	movs	r0, #128	; 0x80
 8002d3a:	0340      	lsls	r0, r0, #13
 8002d3c:	4301      	orrs	r1, r0
 8002d3e:	480d      	ldr	r0, [pc, #52]	; (8002d74 <__aeabi_d2iz+0x60>)
 8002d40:	1ac0      	subs	r0, r0, r3
 8002d42:	281f      	cmp	r0, #31
 8002d44:	dd08      	ble.n	8002d58 <__aeabi_d2iz+0x44>
 8002d46:	480c      	ldr	r0, [pc, #48]	; (8002d78 <__aeabi_d2iz+0x64>)
 8002d48:	1ac3      	subs	r3, r0, r3
 8002d4a:	40d9      	lsrs	r1, r3
 8002d4c:	000b      	movs	r3, r1
 8002d4e:	4258      	negs	r0, r3
 8002d50:	2a00      	cmp	r2, #0
 8002d52:	d1f0      	bne.n	8002d36 <__aeabi_d2iz+0x22>
 8002d54:	0018      	movs	r0, r3
 8002d56:	e7ee      	b.n	8002d36 <__aeabi_d2iz+0x22>
 8002d58:	4c08      	ldr	r4, [pc, #32]	; (8002d7c <__aeabi_d2iz+0x68>)
 8002d5a:	40c5      	lsrs	r5, r0
 8002d5c:	46a4      	mov	ip, r4
 8002d5e:	4463      	add	r3, ip
 8002d60:	4099      	lsls	r1, r3
 8002d62:	000b      	movs	r3, r1
 8002d64:	432b      	orrs	r3, r5
 8002d66:	e7f2      	b.n	8002d4e <__aeabi_d2iz+0x3a>
 8002d68:	000003fe 	.word	0x000003fe
 8002d6c:	0000041d 	.word	0x0000041d
 8002d70:	7fffffff 	.word	0x7fffffff
 8002d74:	00000433 	.word	0x00000433
 8002d78:	00000413 	.word	0x00000413
 8002d7c:	fffffbed 	.word	0xfffffbed

08002d80 <__aeabi_i2d>:
 8002d80:	b570      	push	{r4, r5, r6, lr}
 8002d82:	2800      	cmp	r0, #0
 8002d84:	d016      	beq.n	8002db4 <__aeabi_i2d+0x34>
 8002d86:	17c3      	asrs	r3, r0, #31
 8002d88:	18c5      	adds	r5, r0, r3
 8002d8a:	405d      	eors	r5, r3
 8002d8c:	0fc4      	lsrs	r4, r0, #31
 8002d8e:	0028      	movs	r0, r5
 8002d90:	f000 f8ce 	bl	8002f30 <__clzsi2>
 8002d94:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <__aeabi_i2d+0x5c>)
 8002d96:	1a1b      	subs	r3, r3, r0
 8002d98:	280a      	cmp	r0, #10
 8002d9a:	dc16      	bgt.n	8002dca <__aeabi_i2d+0x4a>
 8002d9c:	0002      	movs	r2, r0
 8002d9e:	002e      	movs	r6, r5
 8002da0:	3215      	adds	r2, #21
 8002da2:	4096      	lsls	r6, r2
 8002da4:	220b      	movs	r2, #11
 8002da6:	1a12      	subs	r2, r2, r0
 8002da8:	40d5      	lsrs	r5, r2
 8002daa:	055b      	lsls	r3, r3, #21
 8002dac:	032d      	lsls	r5, r5, #12
 8002dae:	0b2d      	lsrs	r5, r5, #12
 8002db0:	0d5b      	lsrs	r3, r3, #21
 8002db2:	e003      	b.n	8002dbc <__aeabi_i2d+0x3c>
 8002db4:	2400      	movs	r4, #0
 8002db6:	2300      	movs	r3, #0
 8002db8:	2500      	movs	r5, #0
 8002dba:	2600      	movs	r6, #0
 8002dbc:	051b      	lsls	r3, r3, #20
 8002dbe:	432b      	orrs	r3, r5
 8002dc0:	07e4      	lsls	r4, r4, #31
 8002dc2:	4323      	orrs	r3, r4
 8002dc4:	0030      	movs	r0, r6
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	bd70      	pop	{r4, r5, r6, pc}
 8002dca:	380b      	subs	r0, #11
 8002dcc:	4085      	lsls	r5, r0
 8002dce:	055b      	lsls	r3, r3, #21
 8002dd0:	032d      	lsls	r5, r5, #12
 8002dd2:	2600      	movs	r6, #0
 8002dd4:	0b2d      	lsrs	r5, r5, #12
 8002dd6:	0d5b      	lsrs	r3, r3, #21
 8002dd8:	e7f0      	b.n	8002dbc <__aeabi_i2d+0x3c>
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	0000041e 	.word	0x0000041e

08002de0 <__aeabi_ui2d>:
 8002de0:	b510      	push	{r4, lr}
 8002de2:	1e04      	subs	r4, r0, #0
 8002de4:	d010      	beq.n	8002e08 <__aeabi_ui2d+0x28>
 8002de6:	f000 f8a3 	bl	8002f30 <__clzsi2>
 8002dea:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <__aeabi_ui2d+0x48>)
 8002dec:	1a1b      	subs	r3, r3, r0
 8002dee:	280a      	cmp	r0, #10
 8002df0:	dc11      	bgt.n	8002e16 <__aeabi_ui2d+0x36>
 8002df2:	220b      	movs	r2, #11
 8002df4:	0021      	movs	r1, r4
 8002df6:	1a12      	subs	r2, r2, r0
 8002df8:	40d1      	lsrs	r1, r2
 8002dfa:	3015      	adds	r0, #21
 8002dfc:	030a      	lsls	r2, r1, #12
 8002dfe:	055b      	lsls	r3, r3, #21
 8002e00:	4084      	lsls	r4, r0
 8002e02:	0b12      	lsrs	r2, r2, #12
 8002e04:	0d5b      	lsrs	r3, r3, #21
 8002e06:	e001      	b.n	8002e0c <__aeabi_ui2d+0x2c>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	051b      	lsls	r3, r3, #20
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	0020      	movs	r0, r4
 8002e12:	0019      	movs	r1, r3
 8002e14:	bd10      	pop	{r4, pc}
 8002e16:	0022      	movs	r2, r4
 8002e18:	380b      	subs	r0, #11
 8002e1a:	4082      	lsls	r2, r0
 8002e1c:	055b      	lsls	r3, r3, #21
 8002e1e:	0312      	lsls	r2, r2, #12
 8002e20:	2400      	movs	r4, #0
 8002e22:	0b12      	lsrs	r2, r2, #12
 8002e24:	0d5b      	lsrs	r3, r3, #21
 8002e26:	e7f1      	b.n	8002e0c <__aeabi_ui2d+0x2c>
 8002e28:	0000041e 	.word	0x0000041e

08002e2c <__aeabi_f2d>:
 8002e2c:	b570      	push	{r4, r5, r6, lr}
 8002e2e:	0242      	lsls	r2, r0, #9
 8002e30:	0043      	lsls	r3, r0, #1
 8002e32:	0fc4      	lsrs	r4, r0, #31
 8002e34:	20fe      	movs	r0, #254	; 0xfe
 8002e36:	0e1b      	lsrs	r3, r3, #24
 8002e38:	1c59      	adds	r1, r3, #1
 8002e3a:	0a55      	lsrs	r5, r2, #9
 8002e3c:	4208      	tst	r0, r1
 8002e3e:	d00c      	beq.n	8002e5a <__aeabi_f2d+0x2e>
 8002e40:	21e0      	movs	r1, #224	; 0xe0
 8002e42:	0089      	lsls	r1, r1, #2
 8002e44:	468c      	mov	ip, r1
 8002e46:	076d      	lsls	r5, r5, #29
 8002e48:	0b12      	lsrs	r2, r2, #12
 8002e4a:	4463      	add	r3, ip
 8002e4c:	051b      	lsls	r3, r3, #20
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	07e4      	lsls	r4, r4, #31
 8002e52:	4323      	orrs	r3, r4
 8002e54:	0028      	movs	r0, r5
 8002e56:	0019      	movs	r1, r3
 8002e58:	bd70      	pop	{r4, r5, r6, pc}
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d114      	bne.n	8002e88 <__aeabi_f2d+0x5c>
 8002e5e:	2d00      	cmp	r5, #0
 8002e60:	d01b      	beq.n	8002e9a <__aeabi_f2d+0x6e>
 8002e62:	0028      	movs	r0, r5
 8002e64:	f000 f864 	bl	8002f30 <__clzsi2>
 8002e68:	280a      	cmp	r0, #10
 8002e6a:	dc1c      	bgt.n	8002ea6 <__aeabi_f2d+0x7a>
 8002e6c:	230b      	movs	r3, #11
 8002e6e:	002a      	movs	r2, r5
 8002e70:	1a1b      	subs	r3, r3, r0
 8002e72:	40da      	lsrs	r2, r3
 8002e74:	0003      	movs	r3, r0
 8002e76:	3315      	adds	r3, #21
 8002e78:	409d      	lsls	r5, r3
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <__aeabi_f2d+0x88>)
 8002e7c:	0312      	lsls	r2, r2, #12
 8002e7e:	1a1b      	subs	r3, r3, r0
 8002e80:	055b      	lsls	r3, r3, #21
 8002e82:	0b12      	lsrs	r2, r2, #12
 8002e84:	0d5b      	lsrs	r3, r3, #21
 8002e86:	e7e1      	b.n	8002e4c <__aeabi_f2d+0x20>
 8002e88:	2d00      	cmp	r5, #0
 8002e8a:	d009      	beq.n	8002ea0 <__aeabi_f2d+0x74>
 8002e8c:	0b13      	lsrs	r3, r2, #12
 8002e8e:	2280      	movs	r2, #128	; 0x80
 8002e90:	0312      	lsls	r2, r2, #12
 8002e92:	431a      	orrs	r2, r3
 8002e94:	076d      	lsls	r5, r5, #29
 8002e96:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <__aeabi_f2d+0x8c>)
 8002e98:	e7d8      	b.n	8002e4c <__aeabi_f2d+0x20>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	e7d5      	b.n	8002e4c <__aeabi_f2d+0x20>
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <__aeabi_f2d+0x8c>)
 8002ea4:	e7d2      	b.n	8002e4c <__aeabi_f2d+0x20>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	002a      	movs	r2, r5
 8002eaa:	3b0b      	subs	r3, #11
 8002eac:	409a      	lsls	r2, r3
 8002eae:	2500      	movs	r5, #0
 8002eb0:	e7e3      	b.n	8002e7a <__aeabi_f2d+0x4e>
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	00000389 	.word	0x00000389
 8002eb8:	000007ff 	.word	0x000007ff

08002ebc <__aeabi_cfrcmple>:
 8002ebc:	4684      	mov	ip, r0
 8002ebe:	0008      	movs	r0, r1
 8002ec0:	4661      	mov	r1, ip
 8002ec2:	e7ff      	b.n	8002ec4 <__aeabi_cfcmpeq>

08002ec4 <__aeabi_cfcmpeq>:
 8002ec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002ec6:	f000 f8bd 	bl	8003044 <__lesf2>
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	d401      	bmi.n	8002ed2 <__aeabi_cfcmpeq+0xe>
 8002ece:	2100      	movs	r1, #0
 8002ed0:	42c8      	cmn	r0, r1
 8002ed2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002ed4 <__aeabi_fcmpeq>:
 8002ed4:	b510      	push	{r4, lr}
 8002ed6:	f000 f849 	bl	8002f6c <__eqsf2>
 8002eda:	4240      	negs	r0, r0
 8002edc:	3001      	adds	r0, #1
 8002ede:	bd10      	pop	{r4, pc}

08002ee0 <__aeabi_fcmplt>:
 8002ee0:	b510      	push	{r4, lr}
 8002ee2:	f000 f8af 	bl	8003044 <__lesf2>
 8002ee6:	2800      	cmp	r0, #0
 8002ee8:	db01      	blt.n	8002eee <__aeabi_fcmplt+0xe>
 8002eea:	2000      	movs	r0, #0
 8002eec:	bd10      	pop	{r4, pc}
 8002eee:	2001      	movs	r0, #1
 8002ef0:	bd10      	pop	{r4, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)

08002ef4 <__aeabi_fcmple>:
 8002ef4:	b510      	push	{r4, lr}
 8002ef6:	f000 f8a5 	bl	8003044 <__lesf2>
 8002efa:	2800      	cmp	r0, #0
 8002efc:	dd01      	ble.n	8002f02 <__aeabi_fcmple+0xe>
 8002efe:	2000      	movs	r0, #0
 8002f00:	bd10      	pop	{r4, pc}
 8002f02:	2001      	movs	r0, #1
 8002f04:	bd10      	pop	{r4, pc}
 8002f06:	46c0      	nop			; (mov r8, r8)

08002f08 <__aeabi_fcmpgt>:
 8002f08:	b510      	push	{r4, lr}
 8002f0a:	f000 f855 	bl	8002fb8 <__gesf2>
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	dc01      	bgt.n	8002f16 <__aeabi_fcmpgt+0xe>
 8002f12:	2000      	movs	r0, #0
 8002f14:	bd10      	pop	{r4, pc}
 8002f16:	2001      	movs	r0, #1
 8002f18:	bd10      	pop	{r4, pc}
 8002f1a:	46c0      	nop			; (mov r8, r8)

08002f1c <__aeabi_fcmpge>:
 8002f1c:	b510      	push	{r4, lr}
 8002f1e:	f000 f84b 	bl	8002fb8 <__gesf2>
 8002f22:	2800      	cmp	r0, #0
 8002f24:	da01      	bge.n	8002f2a <__aeabi_fcmpge+0xe>
 8002f26:	2000      	movs	r0, #0
 8002f28:	bd10      	pop	{r4, pc}
 8002f2a:	2001      	movs	r0, #1
 8002f2c:	bd10      	pop	{r4, pc}
 8002f2e:	46c0      	nop			; (mov r8, r8)

08002f30 <__clzsi2>:
 8002f30:	211c      	movs	r1, #28
 8002f32:	2301      	movs	r3, #1
 8002f34:	041b      	lsls	r3, r3, #16
 8002f36:	4298      	cmp	r0, r3
 8002f38:	d301      	bcc.n	8002f3e <__clzsi2+0xe>
 8002f3a:	0c00      	lsrs	r0, r0, #16
 8002f3c:	3910      	subs	r1, #16
 8002f3e:	0a1b      	lsrs	r3, r3, #8
 8002f40:	4298      	cmp	r0, r3
 8002f42:	d301      	bcc.n	8002f48 <__clzsi2+0x18>
 8002f44:	0a00      	lsrs	r0, r0, #8
 8002f46:	3908      	subs	r1, #8
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	4298      	cmp	r0, r3
 8002f4c:	d301      	bcc.n	8002f52 <__clzsi2+0x22>
 8002f4e:	0900      	lsrs	r0, r0, #4
 8002f50:	3904      	subs	r1, #4
 8002f52:	a202      	add	r2, pc, #8	; (adr r2, 8002f5c <__clzsi2+0x2c>)
 8002f54:	5c10      	ldrb	r0, [r2, r0]
 8002f56:	1840      	adds	r0, r0, r1
 8002f58:	4770      	bx	lr
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	02020304 	.word	0x02020304
 8002f60:	01010101 	.word	0x01010101
	...

08002f6c <__eqsf2>:
 8002f6c:	b570      	push	{r4, r5, r6, lr}
 8002f6e:	0042      	lsls	r2, r0, #1
 8002f70:	0245      	lsls	r5, r0, #9
 8002f72:	024e      	lsls	r6, r1, #9
 8002f74:	004c      	lsls	r4, r1, #1
 8002f76:	0fc3      	lsrs	r3, r0, #31
 8002f78:	0a6d      	lsrs	r5, r5, #9
 8002f7a:	2001      	movs	r0, #1
 8002f7c:	0e12      	lsrs	r2, r2, #24
 8002f7e:	0a76      	lsrs	r6, r6, #9
 8002f80:	0e24      	lsrs	r4, r4, #24
 8002f82:	0fc9      	lsrs	r1, r1, #31
 8002f84:	2aff      	cmp	r2, #255	; 0xff
 8002f86:	d006      	beq.n	8002f96 <__eqsf2+0x2a>
 8002f88:	2cff      	cmp	r4, #255	; 0xff
 8002f8a:	d003      	beq.n	8002f94 <__eqsf2+0x28>
 8002f8c:	42a2      	cmp	r2, r4
 8002f8e:	d101      	bne.n	8002f94 <__eqsf2+0x28>
 8002f90:	42b5      	cmp	r5, r6
 8002f92:	d006      	beq.n	8002fa2 <__eqsf2+0x36>
 8002f94:	bd70      	pop	{r4, r5, r6, pc}
 8002f96:	2d00      	cmp	r5, #0
 8002f98:	d1fc      	bne.n	8002f94 <__eqsf2+0x28>
 8002f9a:	2cff      	cmp	r4, #255	; 0xff
 8002f9c:	d1fa      	bne.n	8002f94 <__eqsf2+0x28>
 8002f9e:	2e00      	cmp	r6, #0
 8002fa0:	d1f8      	bne.n	8002f94 <__eqsf2+0x28>
 8002fa2:	428b      	cmp	r3, r1
 8002fa4:	d006      	beq.n	8002fb4 <__eqsf2+0x48>
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	2a00      	cmp	r2, #0
 8002faa:	d1f3      	bne.n	8002f94 <__eqsf2+0x28>
 8002fac:	0028      	movs	r0, r5
 8002fae:	1e43      	subs	r3, r0, #1
 8002fb0:	4198      	sbcs	r0, r3
 8002fb2:	e7ef      	b.n	8002f94 <__eqsf2+0x28>
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	e7ed      	b.n	8002f94 <__eqsf2+0x28>

08002fb8 <__gesf2>:
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	0042      	lsls	r2, r0, #1
 8002fbc:	0245      	lsls	r5, r0, #9
 8002fbe:	024e      	lsls	r6, r1, #9
 8002fc0:	004c      	lsls	r4, r1, #1
 8002fc2:	0fc3      	lsrs	r3, r0, #31
 8002fc4:	0a6d      	lsrs	r5, r5, #9
 8002fc6:	0e12      	lsrs	r2, r2, #24
 8002fc8:	0a76      	lsrs	r6, r6, #9
 8002fca:	0e24      	lsrs	r4, r4, #24
 8002fcc:	0fc8      	lsrs	r0, r1, #31
 8002fce:	2aff      	cmp	r2, #255	; 0xff
 8002fd0:	d01b      	beq.n	800300a <__gesf2+0x52>
 8002fd2:	2cff      	cmp	r4, #255	; 0xff
 8002fd4:	d00e      	beq.n	8002ff4 <__gesf2+0x3c>
 8002fd6:	2a00      	cmp	r2, #0
 8002fd8:	d11b      	bne.n	8003012 <__gesf2+0x5a>
 8002fda:	2c00      	cmp	r4, #0
 8002fdc:	d101      	bne.n	8002fe2 <__gesf2+0x2a>
 8002fde:	2e00      	cmp	r6, #0
 8002fe0:	d01c      	beq.n	800301c <__gesf2+0x64>
 8002fe2:	2d00      	cmp	r5, #0
 8002fe4:	d00c      	beq.n	8003000 <__gesf2+0x48>
 8002fe6:	4283      	cmp	r3, r0
 8002fe8:	d01c      	beq.n	8003024 <__gesf2+0x6c>
 8002fea:	2102      	movs	r1, #2
 8002fec:	1e58      	subs	r0, r3, #1
 8002fee:	4008      	ands	r0, r1
 8002ff0:	3801      	subs	r0, #1
 8002ff2:	bd70      	pop	{r4, r5, r6, pc}
 8002ff4:	2e00      	cmp	r6, #0
 8002ff6:	d122      	bne.n	800303e <__gesf2+0x86>
 8002ff8:	2a00      	cmp	r2, #0
 8002ffa:	d1f4      	bne.n	8002fe6 <__gesf2+0x2e>
 8002ffc:	2d00      	cmp	r5, #0
 8002ffe:	d1f2      	bne.n	8002fe6 <__gesf2+0x2e>
 8003000:	2800      	cmp	r0, #0
 8003002:	d1f6      	bne.n	8002ff2 <__gesf2+0x3a>
 8003004:	2001      	movs	r0, #1
 8003006:	4240      	negs	r0, r0
 8003008:	e7f3      	b.n	8002ff2 <__gesf2+0x3a>
 800300a:	2d00      	cmp	r5, #0
 800300c:	d117      	bne.n	800303e <__gesf2+0x86>
 800300e:	2cff      	cmp	r4, #255	; 0xff
 8003010:	d0f0      	beq.n	8002ff4 <__gesf2+0x3c>
 8003012:	2c00      	cmp	r4, #0
 8003014:	d1e7      	bne.n	8002fe6 <__gesf2+0x2e>
 8003016:	2e00      	cmp	r6, #0
 8003018:	d1e5      	bne.n	8002fe6 <__gesf2+0x2e>
 800301a:	e7e6      	b.n	8002fea <__gesf2+0x32>
 800301c:	2000      	movs	r0, #0
 800301e:	2d00      	cmp	r5, #0
 8003020:	d0e7      	beq.n	8002ff2 <__gesf2+0x3a>
 8003022:	e7e2      	b.n	8002fea <__gesf2+0x32>
 8003024:	42a2      	cmp	r2, r4
 8003026:	dc05      	bgt.n	8003034 <__gesf2+0x7c>
 8003028:	dbea      	blt.n	8003000 <__gesf2+0x48>
 800302a:	42b5      	cmp	r5, r6
 800302c:	d802      	bhi.n	8003034 <__gesf2+0x7c>
 800302e:	d3e7      	bcc.n	8003000 <__gesf2+0x48>
 8003030:	2000      	movs	r0, #0
 8003032:	e7de      	b.n	8002ff2 <__gesf2+0x3a>
 8003034:	4243      	negs	r3, r0
 8003036:	4158      	adcs	r0, r3
 8003038:	0040      	lsls	r0, r0, #1
 800303a:	3801      	subs	r0, #1
 800303c:	e7d9      	b.n	8002ff2 <__gesf2+0x3a>
 800303e:	2002      	movs	r0, #2
 8003040:	4240      	negs	r0, r0
 8003042:	e7d6      	b.n	8002ff2 <__gesf2+0x3a>

08003044 <__lesf2>:
 8003044:	b570      	push	{r4, r5, r6, lr}
 8003046:	0042      	lsls	r2, r0, #1
 8003048:	0245      	lsls	r5, r0, #9
 800304a:	024e      	lsls	r6, r1, #9
 800304c:	004c      	lsls	r4, r1, #1
 800304e:	0fc3      	lsrs	r3, r0, #31
 8003050:	0a6d      	lsrs	r5, r5, #9
 8003052:	0e12      	lsrs	r2, r2, #24
 8003054:	0a76      	lsrs	r6, r6, #9
 8003056:	0e24      	lsrs	r4, r4, #24
 8003058:	0fc8      	lsrs	r0, r1, #31
 800305a:	2aff      	cmp	r2, #255	; 0xff
 800305c:	d00b      	beq.n	8003076 <__lesf2+0x32>
 800305e:	2cff      	cmp	r4, #255	; 0xff
 8003060:	d00d      	beq.n	800307e <__lesf2+0x3a>
 8003062:	2a00      	cmp	r2, #0
 8003064:	d11f      	bne.n	80030a6 <__lesf2+0x62>
 8003066:	2c00      	cmp	r4, #0
 8003068:	d116      	bne.n	8003098 <__lesf2+0x54>
 800306a:	2e00      	cmp	r6, #0
 800306c:	d114      	bne.n	8003098 <__lesf2+0x54>
 800306e:	2000      	movs	r0, #0
 8003070:	2d00      	cmp	r5, #0
 8003072:	d010      	beq.n	8003096 <__lesf2+0x52>
 8003074:	e009      	b.n	800308a <__lesf2+0x46>
 8003076:	2d00      	cmp	r5, #0
 8003078:	d10c      	bne.n	8003094 <__lesf2+0x50>
 800307a:	2cff      	cmp	r4, #255	; 0xff
 800307c:	d113      	bne.n	80030a6 <__lesf2+0x62>
 800307e:	2e00      	cmp	r6, #0
 8003080:	d108      	bne.n	8003094 <__lesf2+0x50>
 8003082:	2a00      	cmp	r2, #0
 8003084:	d008      	beq.n	8003098 <__lesf2+0x54>
 8003086:	4283      	cmp	r3, r0
 8003088:	d012      	beq.n	80030b0 <__lesf2+0x6c>
 800308a:	2102      	movs	r1, #2
 800308c:	1e58      	subs	r0, r3, #1
 800308e:	4008      	ands	r0, r1
 8003090:	3801      	subs	r0, #1
 8003092:	e000      	b.n	8003096 <__lesf2+0x52>
 8003094:	2002      	movs	r0, #2
 8003096:	bd70      	pop	{r4, r5, r6, pc}
 8003098:	2d00      	cmp	r5, #0
 800309a:	d1f4      	bne.n	8003086 <__lesf2+0x42>
 800309c:	2800      	cmp	r0, #0
 800309e:	d1fa      	bne.n	8003096 <__lesf2+0x52>
 80030a0:	2001      	movs	r0, #1
 80030a2:	4240      	negs	r0, r0
 80030a4:	e7f7      	b.n	8003096 <__lesf2+0x52>
 80030a6:	2c00      	cmp	r4, #0
 80030a8:	d1ed      	bne.n	8003086 <__lesf2+0x42>
 80030aa:	2e00      	cmp	r6, #0
 80030ac:	d1eb      	bne.n	8003086 <__lesf2+0x42>
 80030ae:	e7ec      	b.n	800308a <__lesf2+0x46>
 80030b0:	42a2      	cmp	r2, r4
 80030b2:	dc05      	bgt.n	80030c0 <__lesf2+0x7c>
 80030b4:	dbf2      	blt.n	800309c <__lesf2+0x58>
 80030b6:	42b5      	cmp	r5, r6
 80030b8:	d802      	bhi.n	80030c0 <__lesf2+0x7c>
 80030ba:	d3ef      	bcc.n	800309c <__lesf2+0x58>
 80030bc:	2000      	movs	r0, #0
 80030be:	e7ea      	b.n	8003096 <__lesf2+0x52>
 80030c0:	4243      	negs	r3, r0
 80030c2:	4158      	adcs	r0, r3
 80030c4:	0040      	lsls	r0, r0, #1
 80030c6:	3801      	subs	r0, #1
 80030c8:	e7e5      	b.n	8003096 <__lesf2+0x52>
 80030ca:	46c0      	nop			; (mov r8, r8)

080030cc <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// callback function that gets called when a full sampling period has passed
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030cc:	b590      	push	{r4, r7, lr}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
	// timer 6 is the timer used for sampling the sensor readings
	if(htim->Instance == TIM6)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a43      	ldr	r2, [pc, #268]	; (80031e8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d000      	beq.n	80030e0 <HAL_TIM_PeriodElapsedCallback+0x14>
 80030de:	e07f      	b.n	80031e0 <HAL_TIM_PeriodElapsedCallback+0x114>
	{

		// the counter stores the number of rising-edge and falling-edge transitions
		// performed by Channel 1 and Channel 2 during a full rotation of the motor shaft
		count = __HAL_TIM_GET_COUNTER(&htim3);
 80030e0:	4b42      	ldr	r3, [pc, #264]	; (80031ec <HAL_TIM_PeriodElapsedCallback+0x120>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	4b41      	ldr	r3, [pc, #260]	; (80031f0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80030ea:	801a      	strh	r2, [r3, #0]

		// variable that stores the difference between current count and previous count
        int32_t diff = count - count_prev;
 80030ec:	4b40      	ldr	r3, [pc, #256]	; (80031f0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	001a      	movs	r2, r3
 80030f2:	4b40      	ldr	r3, [pc, #256]	; (80031f4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	60fb      	str	r3, [r7, #12]

        // if the difference is negative it means that the timer 3 counter performed an overflow
		if( diff < 0 ) diff += 0x0000FFFF;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	da04      	bge.n	800310a <HAL_TIM_PeriodElapsedCallback+0x3e>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4a3d      	ldr	r2, [pc, #244]	; (80031f8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003104:	4694      	mov	ip, r2
 8003106:	4463      	add	r3, ip
 8003108:	60fb      	str	r3, [r7, #12]

	    // calculate current speed ( measured in RPM )
	    speed = counts_to_rpm * diff;
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7fd ffac 	bl	8001068 <__aeabi_i2f>
 8003110:	1c03      	adds	r3, r0, #0
 8003112:	493a      	ldr	r1, [pc, #232]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003114:	1c18      	adds	r0, r3, #0
 8003116:	f7fd fc99 	bl	8000a4c <__aeabi_fmul>
 800311a:	1c03      	adds	r3, r0, #0
 800311c:	1c1a      	adds	r2, r3, #0
 800311e:	4b38      	ldr	r3, [pc, #224]	; (8003200 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003120:	601a      	str	r2, [r3, #0]
        ////////////////////////////////////////////////////////////////////////////////////////
	    /* comment this part out if all you want to do is to test the process, this part is used
	    for implementing the PI control algorithm */

	    // calculate the current error between the set and actual speed
	    error_curr = set_speed - speed;
 8003122:	4b38      	ldr	r3, [pc, #224]	; (8003204 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	4b36      	ldr	r3, [pc, #216]	; (8003200 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	1c19      	adds	r1, r3, #0
 800312c:	1c10      	adds	r0, r2, #0
 800312e:	f7fd fddb 	bl	8000ce8 <__aeabi_fsub>
 8003132:	1c03      	adds	r3, r0, #0
 8003134:	1c1a      	adds	r2, r3, #0
 8003136:	4b34      	ldr	r3, [pc, #208]	; (8003208 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003138:	601a      	str	r2, [r3, #0]

	    // calculate the value of the command ( in RPM )
	    command_curr = command_prev + current_gain * error_curr + previous_gain * error_prev;
 800313a:	4b33      	ldr	r3, [pc, #204]	; (8003208 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4933      	ldr	r1, [pc, #204]	; (800320c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003140:	1c18      	adds	r0, r3, #0
 8003142:	f7fd fc83 	bl	8000a4c <__aeabi_fmul>
 8003146:	1c03      	adds	r3, r0, #0
 8003148:	1c1a      	adds	r2, r3, #0
 800314a:	4b31      	ldr	r3, [pc, #196]	; (8003210 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	1c19      	adds	r1, r3, #0
 8003150:	1c10      	adds	r0, r2, #0
 8003152:	f7fd f9c1 	bl	80004d8 <__aeabi_fadd>
 8003156:	1c03      	adds	r3, r0, #0
 8003158:	1c1c      	adds	r4, r3, #0
 800315a:	4b2e      	ldr	r3, [pc, #184]	; (8003214 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	492e      	ldr	r1, [pc, #184]	; (8003218 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003160:	1c18      	adds	r0, r3, #0
 8003162:	f7fd fc73 	bl	8000a4c <__aeabi_fmul>
 8003166:	1c03      	adds	r3, r0, #0
 8003168:	1c19      	adds	r1, r3, #0
 800316a:	1c20      	adds	r0, r4, #0
 800316c:	f7fd f9b4 	bl	80004d8 <__aeabi_fadd>
 8003170:	1c03      	adds	r3, r0, #0
 8003172:	1c1a      	adds	r2, r3, #0
 8003174:	4b29      	ldr	r3, [pc, #164]	; (800321c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003176:	601a      	str	r2, [r3, #0]

	    // convert the command to duty cycle value and write it in the register that stores said value
	    * PWM_Duty_Value_Register =  (uint16_t)(30 * ((command_curr - offset) / slope));
 8003178:	4b28      	ldr	r3, [pc, #160]	; (800321c <HAL_TIM_PeriodElapsedCallback+0x150>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4928      	ldr	r1, [pc, #160]	; (8003220 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800317e:	1c18      	adds	r0, r3, #0
 8003180:	f7fd f9aa 	bl	80004d8 <__aeabi_fadd>
 8003184:	1c03      	adds	r3, r0, #0
 8003186:	4927      	ldr	r1, [pc, #156]	; (8003224 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003188:	1c18      	adds	r0, r3, #0
 800318a:	f7fd fb45 	bl	8000818 <__aeabi_fdiv>
 800318e:	1c03      	adds	r3, r0, #0
 8003190:	4925      	ldr	r1, [pc, #148]	; (8003228 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003192:	1c18      	adds	r0, r3, #0
 8003194:	f7fd fc5a 	bl	8000a4c <__aeabi_fmul>
 8003198:	1c03      	adds	r3, r0, #0
 800319a:	4c24      	ldr	r4, [pc, #144]	; (800322c <HAL_TIM_PeriodElapsedCallback+0x160>)
 800319c:	1c18      	adds	r0, r3, #0
 800319e:	f7fd f983 	bl	80004a8 <__aeabi_f2uiz>
 80031a2:	0003      	movs	r3, r0
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	8023      	strh	r3, [r4, #0]

	    // update the value of error_prev
	    error_prev = error_curr;
 80031a8:	4b17      	ldr	r3, [pc, #92]	; (8003208 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80031ae:	601a      	str	r2, [r3, #0]

	    // update the value of command_prev
	    command_prev = command_curr;
 80031b0:	4b1a      	ldr	r3, [pc, #104]	; (800321c <HAL_TIM_PeriodElapsedCallback+0x150>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b16      	ldr	r3, [pc, #88]	; (8003210 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80031b6:	601a      	str	r2, [r3, #0]

        /* the part mentioned above ends here */
	    ////////////////////////////////////////////////////////////////////////////////////////

	    // populating the vector with speed readings ( for a total of 40 * 200 = 8000 milliseconds )
	    if(speed_index < 200) speed_vector[speed_index++] = speed;
 80031b8:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2bc7      	cmp	r3, #199	; 0xc7
 80031be:	d80b      	bhi.n	80031d8 <HAL_TIM_PeriodElapsedCallback+0x10c>
 80031c0:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	b2d1      	uxtb	r1, r2
 80031c8:	4a19      	ldr	r2, [pc, #100]	; (8003230 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80031ca:	7011      	strb	r1, [r2, #0]
 80031cc:	001a      	movs	r2, r3
 80031ce:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80031d0:	6819      	ldr	r1, [r3, #0]
 80031d2:	4b18      	ldr	r3, [pc, #96]	; (8003234 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80031d4:	0092      	lsls	r2, r2, #2
 80031d6:	50d1      	str	r1, [r2, r3]

	    // update count_prev variable with the value of count
	    count_prev = count;
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80031da:	881a      	ldrh	r2, [r3, #0]
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80031de:	801a      	strh	r2, [r3, #0]
	}
}
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b005      	add	sp, #20
 80031e6:	bd90      	pop	{r4, r7, pc}
 80031e8:	40001000 	.word	0x40001000
 80031ec:	200001f4 	.word	0x200001f4
 80031f0:	20000354 	.word	0x20000354
 80031f4:	20000356 	.word	0x20000356
 80031f8:	0000ffff 	.word	0x0000ffff
 80031fc:	3f124925 	.word	0x3f124925
 8003200:	20000358 	.word	0x20000358
 8003204:	20000688 	.word	0x20000688
 8003208:	20000690 	.word	0x20000690
 800320c:	3f3db22d 	.word	0x3f3db22d
 8003210:	20000698 	.word	0x20000698
 8003214:	2000068c 	.word	0x2000068c
 8003218:	bf23404f 	.word	0xbf23404f
 800321c:	20000694 	.word	0x20000694
 8003220:	421ca474 	.word	0x421ca474
 8003224:	3fa597f6 	.word	0x3fa597f6
 8003228:	41f00000 	.word	0x41f00000
 800322c:	40014434 	.word	0x40014434
 8003230:	20000000 	.word	0x20000000
 8003234:	2000035c 	.word	0x2000035c

08003238 <HAL_UART_RxCpltCallback>:

// callback function that gets called when a full message ( one byte ) has been received through UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
	// UART 2 is being used to communicate with the terminal
	if(huart->Instance == USART2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a30      	ldr	r2, [pc, #192]	; (8003308 <HAL_UART_RxCpltCallback+0xd0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d15a      	bne.n	8003300 <HAL_UART_RxCpltCallback+0xc8>
	{
	    // if the last character in the buffer is newLine, it means the terminal sent a full message
		// representing a duty cycle of the PWM
	    if(*(uart_buffer + uart_index - 1) == '\n')
 800324a:	4b30      	ldr	r3, [pc, #192]	; (800330c <HAL_UART_RxCpltCallback+0xd4>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	1e5a      	subs	r2, r3, #1
 8003250:	4b2f      	ldr	r3, [pc, #188]	; (8003310 <HAL_UART_RxCpltCallback+0xd8>)
 8003252:	18d3      	adds	r3, r2, r3
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b0a      	cmp	r3, #10
 8003258:	d140      	bne.n	80032dc <HAL_UART_RxCpltCallback+0xa4>
	    {
		    // convert data received from terminal into a PWM duty cycle
		    uint16_t msg_to_duty = 10 * ((uint16_t)uart_buffer[0]) + ((uint16_t)uart_buffer[1]) - 528;
 800325a:	4b2d      	ldr	r3, [pc, #180]	; (8003310 <HAL_UART_RxCpltCallback+0xd8>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	b29b      	uxth	r3, r3
 8003260:	1c1a      	adds	r2, r3, #0
 8003262:	0092      	lsls	r2, r2, #2
 8003264:	18d3      	adds	r3, r2, r3
 8003266:	18db      	adds	r3, r3, r3
 8003268:	b29a      	uxth	r2, r3
 800326a:	4b29      	ldr	r3, [pc, #164]	; (8003310 <HAL_UART_RxCpltCallback+0xd8>)
 800326c:	785b      	ldrb	r3, [r3, #1]
 800326e:	b29b      	uxth	r3, r3
 8003270:	18d3      	adds	r3, r2, r3
 8003272:	b29a      	uxth	r2, r3
 8003274:	200e      	movs	r0, #14
 8003276:	183b      	adds	r3, r7, r0
 8003278:	4926      	ldr	r1, [pc, #152]	; (8003314 <HAL_UART_RxCpltCallback+0xdc>)
 800327a:	468c      	mov	ip, r1
 800327c:	4462      	add	r2, ip
 800327e:	801a      	strh	r2, [r3, #0]
		    // period of 3000 ). Otherwise, we set the value of said register to 0 so that we don't
		    // risk unwanted behavior from the motor.

		    // based on the same observations, we modify the value of the set_speed parameter using the
		    // first degree analytical relation obtained by linearization
		    if(msg_to_duty >= 38 && msg_to_duty <= 74)
 8003280:	183b      	adds	r3, r7, r0
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	2b25      	cmp	r3, #37	; 0x25
 8003286:	d920      	bls.n	80032ca <HAL_UART_RxCpltCallback+0x92>
 8003288:	183b      	adds	r3, r7, r0
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	2b4a      	cmp	r3, #74	; 0x4a
 800328e:	d81c      	bhi.n	80032ca <HAL_UART_RxCpltCallback+0x92>
		    {
		       * PWM_Duty_Value_Register = msg_to_duty * 30;
 8003290:	4a21      	ldr	r2, [pc, #132]	; (8003318 <HAL_UART_RxCpltCallback+0xe0>)
 8003292:	183b      	adds	r3, r7, r0
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	1c19      	adds	r1, r3, #0
 8003298:	0109      	lsls	r1, r1, #4
 800329a:	1acb      	subs	r3, r1, r3
 800329c:	18db      	adds	r3, r3, r3
 800329e:	b29b      	uxth	r3, r3
 80032a0:	8013      	strh	r3, [r2, #0]
		       set_speed = ((float)( msg_to_duty )) * slope + offset;
 80032a2:	183b      	adds	r3, r7, r0
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7fd ff30 	bl	800110c <__aeabi_ui2f>
 80032ac:	1c03      	adds	r3, r0, #0
 80032ae:	491b      	ldr	r1, [pc, #108]	; (800331c <HAL_UART_RxCpltCallback+0xe4>)
 80032b0:	1c18      	adds	r0, r3, #0
 80032b2:	f7fd fbcb 	bl	8000a4c <__aeabi_fmul>
 80032b6:	1c03      	adds	r3, r0, #0
 80032b8:	4919      	ldr	r1, [pc, #100]	; (8003320 <HAL_UART_RxCpltCallback+0xe8>)
 80032ba:	1c18      	adds	r0, r3, #0
 80032bc:	f7fd fd14 	bl	8000ce8 <__aeabi_fsub>
 80032c0:	1c03      	adds	r3, r0, #0
 80032c2:	1c1a      	adds	r2, r3, #0
 80032c4:	4b17      	ldr	r3, [pc, #92]	; (8003324 <HAL_UART_RxCpltCallback+0xec>)
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e005      	b.n	80032d6 <HAL_UART_RxCpltCallback+0x9e>
		    }
		    else
		    {
		       * PWM_Duty_Value_Register = 0;
 80032ca:	4b13      	ldr	r3, [pc, #76]	; (8003318 <HAL_UART_RxCpltCallback+0xe0>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	801a      	strh	r2, [r3, #0]
		       set_speed = 0;
 80032d0:	4b14      	ldr	r3, [pc, #80]	; (8003324 <HAL_UART_RxCpltCallback+0xec>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
		    }
		    // reset the data buffer
		    uart_index = 0;
 80032d6:	4b0d      	ldr	r3, [pc, #52]	; (800330c <HAL_UART_RxCpltCallback+0xd4>)
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
	    }
	    // restart receiving data from the terminal
	    if(UART_Start_Receive_IT(&huart2, uart_buffer + ( uart_index ++ ), 1) != HAL_OK )
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_UART_RxCpltCallback+0xd4>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	b2d1      	uxtb	r1, r2
 80032e4:	4a09      	ldr	r2, [pc, #36]	; (800330c <HAL_UART_RxCpltCallback+0xd4>)
 80032e6:	7011      	strb	r1, [r2, #0]
 80032e8:	001a      	movs	r2, r3
 80032ea:	4b09      	ldr	r3, [pc, #36]	; (8003310 <HAL_UART_RxCpltCallback+0xd8>)
 80032ec:	18d1      	adds	r1, r2, r3
 80032ee:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <HAL_UART_RxCpltCallback+0xf0>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	0018      	movs	r0, r3
 80032f4:	f003 fc80 	bl	8006bf8 <UART_Start_Receive_IT>
 80032f8:	1e03      	subs	r3, r0, #0
 80032fa:	d001      	beq.n	8003300 <HAL_UART_RxCpltCallback+0xc8>
	    {
		    Error_Handler();
 80032fc:	f000 faee 	bl	80038dc <Error_Handler>
	    }
	}
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b004      	add	sp, #16
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40004400 	.word	0x40004400
 800330c:	20000686 	.word	0x20000686
 8003310:	2000067c 	.word	0x2000067c
 8003314:	fffffdf0 	.word	0xfffffdf0
 8003318:	40014434 	.word	0x40014434
 800331c:	3fa597f6 	.word	0x3fa597f6
 8003320:	421ca474 	.word	0x421ca474
 8003324:	20000688 	.word	0x20000688
 8003328:	200002cc 	.word	0x200002cc

0800332c <HAL_GPIO_EXTI_Callback>:

// callback function that gets called when the user button ( blue ) is pressed
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	0002      	movs	r2, r0
 8003334:	1dbb      	adds	r3, r7, #6
 8003336:	801a      	strh	r2, [r3, #0]
	// the button associated with the user button is pin 13 from port C
	if(GPIO_Pin == GPIO_PIN_13)
 8003338:	1dbb      	adds	r3, r7, #6
 800333a:	881a      	ldrh	r2, [r3, #0]
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	019b      	lsls	r3, r3, #6
 8003340:	429a      	cmp	r2, r3
 8003342:	d163      	bne.n	800340c <HAL_GPIO_EXTI_Callback+0xe0>
	{
		// static variable to determine the state of the user button
		static uint8_t button_state;
		// switch statement to implement a sequence of steps used to determine the response of
		// the motor for a step reference
		switch(button_state)
 8003344:	4b33      	ldr	r3, [pc, #204]	; (8003414 <HAL_GPIO_EXTI_Callback+0xe8>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d021      	beq.n	8003390 <HAL_GPIO_EXTI_Callback+0x64>
 800334c:	dc51      	bgt.n	80033f2 <HAL_GPIO_EXTI_Callback+0xc6>
 800334e:	2b02      	cmp	r3, #2
 8003350:	d017      	beq.n	8003382 <HAL_GPIO_EXTI_Callback+0x56>
 8003352:	dc4e      	bgt.n	80033f2 <HAL_GPIO_EXTI_Callback+0xc6>
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <HAL_GPIO_EXTI_Callback+0x32>
 8003358:	2b01      	cmp	r3, #1
 800335a:	d007      	beq.n	800336c <HAL_GPIO_EXTI_Callback+0x40>
 800335c:	e049      	b.n	80033f2 <HAL_GPIO_EXTI_Callback+0xc6>
		{

		// set the PWM signal at 0% duty cycle so that the rotary shaft of the motor doesn't spin
		case 0:
		* PWM_Duty_Value_Register = 0;
 800335e:	4b2e      	ldr	r3, [pc, #184]	; (8003418 <HAL_GPIO_EXTI_Callback+0xec>)
 8003360:	2200      	movs	r2, #0
 8003362:	801a      	strh	r2, [r3, #0]
		// modifying set_speed is relevant only for closed loop testing, otherwise it doesn't
		// have any effect on the simulation
		// in case of closed loop, we modify the set speed so that it matches the value written in
		// the PWM duty cycle register
		set_speed = 0;
 8003364:	4b2d      	ldr	r3, [pc, #180]	; (800341c <HAL_GPIO_EXTI_Callback+0xf0>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
		break;
 800336a:	e042      	b.n	80033f2 <HAL_GPIO_EXTI_Callback+0xc6>

		// apply the step reference by setting the PWM signal at 60% duty cycle and set
		// speed_index at 0 so the response starts getting captured in the speed vector
		case 1:
	    speed_index = 0;
 800336c:	4b2c      	ldr	r3, [pc, #176]	; (8003420 <HAL_GPIO_EXTI_Callback+0xf4>)
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]
		* PWM_Duty_Value_Register = 60 * 30;
 8003372:	4b29      	ldr	r3, [pc, #164]	; (8003418 <HAL_GPIO_EXTI_Callback+0xec>)
 8003374:	22e1      	movs	r2, #225	; 0xe1
 8003376:	00d2      	lsls	r2, r2, #3
 8003378:	801a      	strh	r2, [r3, #0]
		// same observation as the one present in the first case
		set_speed =  ((float)( 60 )) * slope + offset;
 800337a:	4b28      	ldr	r3, [pc, #160]	; (800341c <HAL_GPIO_EXTI_Callback+0xf0>)
 800337c:	4a29      	ldr	r2, [pc, #164]	; (8003424 <HAL_GPIO_EXTI_Callback+0xf8>)
 800337e:	601a      	str	r2, [r3, #0]
		break;
 8003380:	e037      	b.n	80033f2 <HAL_GPIO_EXTI_Callback+0xc6>

		// reset the PWM signal at 0% duty cycle so that the rotor of the motor stops spinning
		case 2:
	    * PWM_Duty_Value_Register = 0;
 8003382:	4b25      	ldr	r3, [pc, #148]	; (8003418 <HAL_GPIO_EXTI_Callback+0xec>)
 8003384:	2200      	movs	r2, #0
 8003386:	801a      	strh	r2, [r3, #0]
	    // same observation as the one present in the first case
	    set_speed =  0;
 8003388:	4b24      	ldr	r3, [pc, #144]	; (800341c <HAL_GPIO_EXTI_Callback+0xf0>)
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
	    break;
 800338e:	e030      	b.n	80033f2 <HAL_GPIO_EXTI_Callback+0xc6>

		// send the vector containing the response of the motor to the terminal through UART
		case 3:
	    for(uint8_t i = 0; i < 200; i++)
 8003390:	230f      	movs	r3, #15
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
 8003398:	e025      	b.n	80033e6 <HAL_GPIO_EXTI_Callback+0xba>
        {
	       sprintf(uart_buffer,"%.4f \0",*(speed_vector + i));
 800339a:	230f      	movs	r3, #15
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	009a      	lsls	r2, r3, #2
 80033a2:	4b21      	ldr	r3, [pc, #132]	; (8003428 <HAL_GPIO_EXTI_Callback+0xfc>)
 80033a4:	18d3      	adds	r3, r2, r3
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	1c18      	adds	r0, r3, #0
 80033aa:	f7ff fd3f 	bl	8002e2c <__aeabi_f2d>
 80033ae:	0002      	movs	r2, r0
 80033b0:	000b      	movs	r3, r1
 80033b2:	491e      	ldr	r1, [pc, #120]	; (800342c <HAL_GPIO_EXTI_Callback+0x100>)
 80033b4:	481e      	ldr	r0, [pc, #120]	; (8003430 <HAL_GPIO_EXTI_Callback+0x104>)
 80033b6:	f004 fc77 	bl	8007ca8 <siprintf>
	       if(HAL_UART_Transmit(&huart2,uart_buffer,strlen(uart_buffer),HAL_MAX_DELAY) != HAL_OK)
 80033ba:	4b1d      	ldr	r3, [pc, #116]	; (8003430 <HAL_GPIO_EXTI_Callback+0x104>)
 80033bc:	0018      	movs	r0, r3
 80033be:	f7fc fea3 	bl	8000108 <strlen>
 80033c2:	0003      	movs	r3, r0
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	2301      	movs	r3, #1
 80033c8:	425b      	negs	r3, r3
 80033ca:	4919      	ldr	r1, [pc, #100]	; (8003430 <HAL_GPIO_EXTI_Callback+0x104>)
 80033cc:	4819      	ldr	r0, [pc, #100]	; (8003434 <HAL_GPIO_EXTI_Callback+0x108>)
 80033ce:	f002 fd71 	bl	8005eb4 <HAL_UART_Transmit>
 80033d2:	1e03      	subs	r3, r0, #0
 80033d4:	d001      	beq.n	80033da <HAL_GPIO_EXTI_Callback+0xae>
	       {
	    	  Error_Handler();
 80033d6:	f000 fa81 	bl	80038dc <Error_Handler>
	    for(uint8_t i = 0; i < 200; i++)
 80033da:	210f      	movs	r1, #15
 80033dc:	187b      	adds	r3, r7, r1
 80033de:	781a      	ldrb	r2, [r3, #0]
 80033e0:	187b      	adds	r3, r7, r1
 80033e2:	3201      	adds	r2, #1
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	230f      	movs	r3, #15
 80033e8:	18fb      	adds	r3, r7, r3
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2bc7      	cmp	r3, #199	; 0xc7
 80033ee:	d9d4      	bls.n	800339a <HAL_GPIO_EXTI_Callback+0x6e>
	       }
        }
		break;
 80033f0:	46c0      	nop			; (mov r8, r8)
		}

		// if the button_state variable reaches value 4 then it has to be reset at value 0 so that
		// the process can be performed again
		button_state++;
 80033f2:	4b08      	ldr	r3, [pc, #32]	; (8003414 <HAL_GPIO_EXTI_Callback+0xe8>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	3301      	adds	r3, #1
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <HAL_GPIO_EXTI_Callback+0xe8>)
 80033fc:	701a      	strb	r2, [r3, #0]
		if(button_state == 4) button_state = 0;
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_GPIO_EXTI_Callback+0xe8>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b04      	cmp	r3, #4
 8003404:	d102      	bne.n	800340c <HAL_GPIO_EXTI_Callback+0xe0>
 8003406:	4b03      	ldr	r3, [pc, #12]	; (8003414 <HAL_GPIO_EXTI_Callback+0xe8>)
 8003408:	2200      	movs	r2, #0
 800340a:	701a      	strb	r2, [r3, #0]
	}
}
 800340c:	46c0      	nop			; (mov r8, r8)
 800340e:	46bd      	mov	sp, r7
 8003410:	b004      	add	sp, #16
 8003412:	bd80      	pop	{r7, pc}
 8003414:	2000069c 	.word	0x2000069c
 8003418:	40014434 	.word	0x40014434
 800341c:	20000688 	.word	0x20000688
 8003420:	20000000 	.word	0x20000000
 8003424:	4219d87a 	.word	0x4219d87a
 8003428:	2000035c 	.word	0x2000035c
 800342c:	0800a0b0 	.word	0x0800a0b0
 8003430:	2000067c 	.word	0x2000067c
 8003434:	200002cc 	.word	0x200002cc

08003438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800343c:	f000 fcce 	bl	8003ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003440:	f000 f844 	bl	80034cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003444:	f000 f9ca 	bl	80037dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003448:	f000 f998 	bl	800377c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800344c:	f000 f88a 	bl	8003564 <MX_TIM3_Init>
  MX_TIM6_Init();
 8003450:	f000 f8ec 	bl	800362c <MX_TIM6_Init>
  MX_TIM16_Init();
 8003454:	f000 f90c 	bl	8003670 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // start receiving data the terminal, one byte at a time
  if(UART_Start_Receive_IT(&huart2, uart_buffer + ( uart_index ++ ), 1) != HAL_OK )
 8003458:	4b16      	ldr	r3, [pc, #88]	; (80034b4 <main+0x7c>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	b2d1      	uxtb	r1, r2
 8003460:	4a14      	ldr	r2, [pc, #80]	; (80034b4 <main+0x7c>)
 8003462:	7011      	strb	r1, [r2, #0]
 8003464:	001a      	movs	r2, r3
 8003466:	4b14      	ldr	r3, [pc, #80]	; (80034b8 <main+0x80>)
 8003468:	18d1      	adds	r1, r2, r3
 800346a:	4b14      	ldr	r3, [pc, #80]	; (80034bc <main+0x84>)
 800346c:	2201      	movs	r2, #1
 800346e:	0018      	movs	r0, r3
 8003470:	f003 fbc2 	bl	8006bf8 <UART_Start_Receive_IT>
 8003474:	1e03      	subs	r3, r0, #0
 8003476:	d001      	beq.n	800347c <main+0x44>
  {
	  Error_Handler();
 8003478:	f000 fa30 	bl	80038dc <Error_Handler>
  }

  // starting Timer 16 in PWM mode
  if(HAL_TIM_PWM_Start(&htim16,TIM_CHANNEL_1) != HAL_OK)
 800347c:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <main+0x88>)
 800347e:	2100      	movs	r1, #0
 8003480:	0018      	movs	r0, r3
 8003482:	f001 fd6d 	bl	8004f60 <HAL_TIM_PWM_Start>
 8003486:	1e03      	subs	r3, r0, #0
 8003488:	d001      	beq.n	800348e <main+0x56>
  {
	  Error_Handler();
 800348a:	f000 fa27 	bl	80038dc <Error_Handler>
  }

  // starting Timer 3 in encoder mode
  if(HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL) != HAL_OK)
 800348e:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <main+0x8c>)
 8003490:	213c      	movs	r1, #60	; 0x3c
 8003492:	0018      	movs	r0, r3
 8003494:	f001 febe 	bl	8005214 <HAL_TIM_Encoder_Start>
 8003498:	1e03      	subs	r3, r0, #0
 800349a:	d001      	beq.n	80034a0 <main+0x68>
  {
	  Error_Handler();
 800349c:	f000 fa1e 	bl	80038dc <Error_Handler>
  }

  // starting Timer 6 in normal mode

  if(HAL_TIM_Base_Start_IT(&htim6) != HAL_OK)
 80034a0:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <main+0x90>)
 80034a2:	0018      	movs	r0, r3
 80034a4:	f001 fcb8 	bl	8004e18 <HAL_TIM_Base_Start_IT>
 80034a8:	1e03      	subs	r3, r0, #0
 80034aa:	d001      	beq.n	80034b0 <main+0x78>
   {
 	  Error_Handler();
 80034ac:	f000 fa16 	bl	80038dc <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80034b0:	e7fe      	b.n	80034b0 <main+0x78>
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	20000686 	.word	0x20000686
 80034b8:	2000067c 	.word	0x2000067c
 80034bc:	200002cc 	.word	0x200002cc
 80034c0:	20000284 	.word	0x20000284
 80034c4:	200001f4 	.word	0x200001f4
 80034c8:	2000023c 	.word	0x2000023c

080034cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034cc:	b590      	push	{r4, r7, lr}
 80034ce:	b091      	sub	sp, #68	; 0x44
 80034d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034d2:	2410      	movs	r4, #16
 80034d4:	193b      	adds	r3, r7, r4
 80034d6:	0018      	movs	r0, r3
 80034d8:	2330      	movs	r3, #48	; 0x30
 80034da:	001a      	movs	r2, r3
 80034dc:	2100      	movs	r1, #0
 80034de:	f004 fc4f 	bl	8007d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034e2:	003b      	movs	r3, r7
 80034e4:	0018      	movs	r0, r3
 80034e6:	2310      	movs	r3, #16
 80034e8:	001a      	movs	r2, r3
 80034ea:	2100      	movs	r1, #0
 80034ec:	f004 fc48 	bl	8007d80 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034f0:	0021      	movs	r1, r4
 80034f2:	187b      	adds	r3, r7, r1
 80034f4:	2202      	movs	r2, #2
 80034f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034f8:	187b      	adds	r3, r7, r1
 80034fa:	2201      	movs	r2, #1
 80034fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034fe:	187b      	adds	r3, r7, r1
 8003500:	2210      	movs	r2, #16
 8003502:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003504:	187b      	adds	r3, r7, r1
 8003506:	2202      	movs	r2, #2
 8003508:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800350a:	187b      	adds	r3, r7, r1
 800350c:	2280      	movs	r2, #128	; 0x80
 800350e:	0212      	lsls	r2, r2, #8
 8003510:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003512:	187b      	adds	r3, r7, r1
 8003514:	2280      	movs	r2, #128	; 0x80
 8003516:	0352      	lsls	r2, r2, #13
 8003518:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800351a:	187b      	adds	r3, r7, r1
 800351c:	2200      	movs	r2, #0
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003520:	187b      	adds	r3, r7, r1
 8003522:	0018      	movs	r0, r3
 8003524:	f000 ffc4 	bl	80044b0 <HAL_RCC_OscConfig>
 8003528:	1e03      	subs	r3, r0, #0
 800352a:	d001      	beq.n	8003530 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800352c:	f000 f9d6 	bl	80038dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003530:	003b      	movs	r3, r7
 8003532:	2207      	movs	r2, #7
 8003534:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003536:	003b      	movs	r3, r7
 8003538:	2202      	movs	r2, #2
 800353a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800353c:	003b      	movs	r3, r7
 800353e:	2200      	movs	r2, #0
 8003540:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003542:	003b      	movs	r3, r7
 8003544:	2200      	movs	r2, #0
 8003546:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003548:	003b      	movs	r3, r7
 800354a:	2101      	movs	r1, #1
 800354c:	0018      	movs	r0, r3
 800354e:	f001 facd 	bl	8004aec <HAL_RCC_ClockConfig>
 8003552:	1e03      	subs	r3, r0, #0
 8003554:	d001      	beq.n	800355a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003556:	f000 f9c1 	bl	80038dc <Error_Handler>
  }
}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b011      	add	sp, #68	; 0x44
 8003560:	bd90      	pop	{r4, r7, pc}
	...

08003564 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003564:	b590      	push	{r4, r7, lr}
 8003566:	b08d      	sub	sp, #52	; 0x34
 8003568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800356a:	240c      	movs	r4, #12
 800356c:	193b      	adds	r3, r7, r4
 800356e:	0018      	movs	r0, r3
 8003570:	2324      	movs	r3, #36	; 0x24
 8003572:	001a      	movs	r2, r3
 8003574:	2100      	movs	r1, #0
 8003576:	f004 fc03 	bl	8007d80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800357a:	1d3b      	adds	r3, r7, #4
 800357c:	0018      	movs	r0, r3
 800357e:	2308      	movs	r3, #8
 8003580:	001a      	movs	r2, r3
 8003582:	2100      	movs	r1, #0
 8003584:	f004 fbfc 	bl	8007d80 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003588:	4b25      	ldr	r3, [pc, #148]	; (8003620 <MX_TIM3_Init+0xbc>)
 800358a:	4a26      	ldr	r2, [pc, #152]	; (8003624 <MX_TIM3_Init+0xc0>)
 800358c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800358e:	4b24      	ldr	r3, [pc, #144]	; (8003620 <MX_TIM3_Init+0xbc>)
 8003590:	2200      	movs	r2, #0
 8003592:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003594:	4b22      	ldr	r3, [pc, #136]	; (8003620 <MX_TIM3_Init+0xbc>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800359a:	4b21      	ldr	r3, [pc, #132]	; (8003620 <MX_TIM3_Init+0xbc>)
 800359c:	4a22      	ldr	r2, [pc, #136]	; (8003628 <MX_TIM3_Init+0xc4>)
 800359e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035a0:	4b1f      	ldr	r3, [pc, #124]	; (8003620 <MX_TIM3_Init+0xbc>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035a6:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <MX_TIM3_Init+0xbc>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80035ac:	0021      	movs	r1, r4
 80035ae:	187b      	adds	r3, r7, r1
 80035b0:	2201      	movs	r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80035b4:	187b      	adds	r3, r7, r1
 80035b6:	2200      	movs	r2, #0
 80035b8:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80035ba:	187b      	adds	r3, r7, r1
 80035bc:	2201      	movs	r2, #1
 80035be:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80035c0:	187b      	adds	r3, r7, r1
 80035c2:	2200      	movs	r2, #0
 80035c4:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80035c6:	187b      	adds	r3, r7, r1
 80035c8:	2200      	movs	r2, #0
 80035ca:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80035cc:	187b      	adds	r3, r7, r1
 80035ce:	2200      	movs	r2, #0
 80035d0:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80035d2:	187b      	adds	r3, r7, r1
 80035d4:	2201      	movs	r2, #1
 80035d6:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80035d8:	187b      	adds	r3, r7, r1
 80035da:	2200      	movs	r2, #0
 80035dc:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80035de:	187b      	adds	r3, r7, r1
 80035e0:	2200      	movs	r2, #0
 80035e2:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80035e4:	187a      	adds	r2, r7, r1
 80035e6:	4b0e      	ldr	r3, [pc, #56]	; (8003620 <MX_TIM3_Init+0xbc>)
 80035e8:	0011      	movs	r1, r2
 80035ea:	0018      	movs	r0, r3
 80035ec:	f001 fd6a 	bl	80050c4 <HAL_TIM_Encoder_Init>
 80035f0:	1e03      	subs	r3, r0, #0
 80035f2:	d001      	beq.n	80035f8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80035f4:	f000 f972 	bl	80038dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035f8:	1d3b      	adds	r3, r7, #4
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035fe:	1d3b      	adds	r3, r7, #4
 8003600:	2200      	movs	r2, #0
 8003602:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003604:	1d3a      	adds	r2, r7, #4
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <MX_TIM3_Init+0xbc>)
 8003608:	0011      	movs	r1, r2
 800360a:	0018      	movs	r0, r3
 800360c:	f002 fb38 	bl	8005c80 <HAL_TIMEx_MasterConfigSynchronization>
 8003610:	1e03      	subs	r3, r0, #0
 8003612:	d001      	beq.n	8003618 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003614:	f000 f962 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003618:	46c0      	nop			; (mov r8, r8)
 800361a:	46bd      	mov	sp, r7
 800361c:	b00d      	add	sp, #52	; 0x34
 800361e:	bd90      	pop	{r4, r7, pc}
 8003620:	200001f4 	.word	0x200001f4
 8003624:	40000400 	.word	0x40000400
 8003628:	0000ffff 	.word	0x0000ffff

0800362c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003630:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <MX_TIM6_Init+0x38>)
 8003632:	4a0d      	ldr	r2, [pc, #52]	; (8003668 <MX_TIM6_Init+0x3c>)
 8003634:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = sampling_period - 1;
 8003636:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <MX_TIM6_Init+0x38>)
 8003638:	2231      	movs	r2, #49	; 0x31
 800363a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800363c:	4b09      	ldr	r3, [pc, #36]	; (8003664 <MX_TIM6_Init+0x38>)
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 48000;
 8003642:	4b08      	ldr	r3, [pc, #32]	; (8003664 <MX_TIM6_Init+0x38>)
 8003644:	4a09      	ldr	r2, [pc, #36]	; (800366c <MX_TIM6_Init+0x40>)
 8003646:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003648:	4b06      	ldr	r3, [pc, #24]	; (8003664 <MX_TIM6_Init+0x38>)
 800364a:	2200      	movs	r2, #0
 800364c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800364e:	4b05      	ldr	r3, [pc, #20]	; (8003664 <MX_TIM6_Init+0x38>)
 8003650:	0018      	movs	r0, r3
 8003652:	f001 fb91 	bl	8004d78 <HAL_TIM_Base_Init>
 8003656:	1e03      	subs	r3, r0, #0
 8003658:	d001      	beq.n	800365e <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 800365a:	f000 f93f 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	2000023c 	.word	0x2000023c
 8003668:	40001000 	.word	0x40001000
 800366c:	0000bb80 	.word	0x0000bb80

08003670 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b090      	sub	sp, #64	; 0x40
 8003674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003676:	2324      	movs	r3, #36	; 0x24
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	0018      	movs	r0, r3
 800367c:	231c      	movs	r3, #28
 800367e:	001a      	movs	r2, r3
 8003680:	2100      	movs	r1, #0
 8003682:	f004 fb7d 	bl	8007d80 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003686:	1d3b      	adds	r3, r7, #4
 8003688:	0018      	movs	r0, r3
 800368a:	2320      	movs	r3, #32
 800368c:	001a      	movs	r2, r3
 800368e:	2100      	movs	r1, #0
 8003690:	f004 fb76 	bl	8007d80 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003694:	4b36      	ldr	r3, [pc, #216]	; (8003770 <MX_TIM16_Init+0x100>)
 8003696:	4a37      	ldr	r2, [pc, #220]	; (8003774 <MX_TIM16_Init+0x104>)
 8003698:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800369a:	4b35      	ldr	r3, [pc, #212]	; (8003770 <MX_TIM16_Init+0x100>)
 800369c:	2200      	movs	r2, #0
 800369e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a0:	4b33      	ldr	r3, [pc, #204]	; (8003770 <MX_TIM16_Init+0x100>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3000;
 80036a6:	4b32      	ldr	r3, [pc, #200]	; (8003770 <MX_TIM16_Init+0x100>)
 80036a8:	4a33      	ldr	r2, [pc, #204]	; (8003778 <MX_TIM16_Init+0x108>)
 80036aa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ac:	4b30      	ldr	r3, [pc, #192]	; (8003770 <MX_TIM16_Init+0x100>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80036b2:	4b2f      	ldr	r3, [pc, #188]	; (8003770 <MX_TIM16_Init+0x100>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036b8:	4b2d      	ldr	r3, [pc, #180]	; (8003770 <MX_TIM16_Init+0x100>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80036be:	4b2c      	ldr	r3, [pc, #176]	; (8003770 <MX_TIM16_Init+0x100>)
 80036c0:	0018      	movs	r0, r3
 80036c2:	f001 fb59 	bl	8004d78 <HAL_TIM_Base_Init>
 80036c6:	1e03      	subs	r3, r0, #0
 80036c8:	d001      	beq.n	80036ce <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80036ca:	f000 f907 	bl	80038dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80036ce:	4b28      	ldr	r3, [pc, #160]	; (8003770 <MX_TIM16_Init+0x100>)
 80036d0:	0018      	movs	r0, r3
 80036d2:	f001 fbed 	bl	8004eb0 <HAL_TIM_PWM_Init>
 80036d6:	1e03      	subs	r3, r0, #0
 80036d8:	d001      	beq.n	80036de <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80036da:	f000 f8ff 	bl	80038dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036de:	2124      	movs	r1, #36	; 0x24
 80036e0:	187b      	adds	r3, r7, r1
 80036e2:	2260      	movs	r2, #96	; 0x60
 80036e4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80036e6:	187b      	adds	r3, r7, r1
 80036e8:	2200      	movs	r2, #0
 80036ea:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036ec:	187b      	adds	r3, r7, r1
 80036ee:	2200      	movs	r2, #0
 80036f0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80036f2:	187b      	adds	r3, r7, r1
 80036f4:	2200      	movs	r2, #0
 80036f6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036f8:	187b      	adds	r3, r7, r1
 80036fa:	2200      	movs	r2, #0
 80036fc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80036fe:	187b      	adds	r3, r7, r1
 8003700:	2200      	movs	r2, #0
 8003702:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003704:	187b      	adds	r3, r7, r1
 8003706:	2200      	movs	r2, #0
 8003708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800370a:	1879      	adds	r1, r7, r1
 800370c:	4b18      	ldr	r3, [pc, #96]	; (8003770 <MX_TIM16_Init+0x100>)
 800370e:	2200      	movs	r2, #0
 8003710:	0018      	movs	r0, r3
 8003712:	f001 ff39 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 8003716:	1e03      	subs	r3, r0, #0
 8003718:	d001      	beq.n	800371e <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 800371a:	f000 f8df 	bl	80038dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800371e:	1d3b      	adds	r3, r7, #4
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003724:	1d3b      	adds	r3, r7, #4
 8003726:	2200      	movs	r2, #0
 8003728:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800372a:	1d3b      	adds	r3, r7, #4
 800372c:	2200      	movs	r2, #0
 800372e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003730:	1d3b      	adds	r3, r7, #4
 8003732:	2200      	movs	r2, #0
 8003734:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003736:	1d3b      	adds	r3, r7, #4
 8003738:	2200      	movs	r2, #0
 800373a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800373c:	1d3b      	adds	r3, r7, #4
 800373e:	2280      	movs	r2, #128	; 0x80
 8003740:	0192      	lsls	r2, r2, #6
 8003742:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003744:	1d3b      	adds	r3, r7, #4
 8003746:	2200      	movs	r2, #0
 8003748:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800374a:	1d3a      	adds	r2, r7, #4
 800374c:	4b08      	ldr	r3, [pc, #32]	; (8003770 <MX_TIM16_Init+0x100>)
 800374e:	0011      	movs	r1, r2
 8003750:	0018      	movs	r0, r3
 8003752:	f002 faed 	bl	8005d30 <HAL_TIMEx_ConfigBreakDeadTime>
 8003756:	1e03      	subs	r3, r0, #0
 8003758:	d001      	beq.n	800375e <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 800375a:	f000 f8bf 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800375e:	4b04      	ldr	r3, [pc, #16]	; (8003770 <MX_TIM16_Init+0x100>)
 8003760:	0018      	movs	r0, r3
 8003762:	f000 f973 	bl	8003a4c <HAL_TIM_MspPostInit>

}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	46bd      	mov	sp, r7
 800376a:	b010      	add	sp, #64	; 0x40
 800376c:	bd80      	pop	{r7, pc}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	20000284 	.word	0x20000284
 8003774:	40014400 	.word	0x40014400
 8003778:	00000bb8 	.word	0x00000bb8

0800377c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003780:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <MX_USART2_UART_Init+0x58>)
 8003782:	4a15      	ldr	r2, [pc, #84]	; (80037d8 <MX_USART2_UART_Init+0x5c>)
 8003784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003786:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <MX_USART2_UART_Init+0x58>)
 8003788:	2296      	movs	r2, #150	; 0x96
 800378a:	0212      	lsls	r2, r2, #8
 800378c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800378e:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <MX_USART2_UART_Init+0x58>)
 8003790:	2200      	movs	r2, #0
 8003792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003794:	4b0f      	ldr	r3, [pc, #60]	; (80037d4 <MX_USART2_UART_Init+0x58>)
 8003796:	2200      	movs	r2, #0
 8003798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800379a:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <MX_USART2_UART_Init+0x58>)
 800379c:	2200      	movs	r2, #0
 800379e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <MX_USART2_UART_Init+0x58>)
 80037a2:	220c      	movs	r2, #12
 80037a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037a6:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <MX_USART2_UART_Init+0x58>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037ac:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <MX_USART2_UART_Init+0x58>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037b2:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <MX_USART2_UART_Init+0x58>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <MX_USART2_UART_Init+0x58>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037be:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <MX_USART2_UART_Init+0x58>)
 80037c0:	0018      	movs	r0, r3
 80037c2:	f002 fb23 	bl	8005e0c <HAL_UART_Init>
 80037c6:	1e03      	subs	r3, r0, #0
 80037c8:	d001      	beq.n	80037ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80037ca:	f000 f887 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	200002cc 	.word	0x200002cc
 80037d8:	40004400 	.word	0x40004400

080037dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037dc:	b590      	push	{r4, r7, lr}
 80037de:	b08b      	sub	sp, #44	; 0x2c
 80037e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e2:	2414      	movs	r4, #20
 80037e4:	193b      	adds	r3, r7, r4
 80037e6:	0018      	movs	r0, r3
 80037e8:	2314      	movs	r3, #20
 80037ea:	001a      	movs	r2, r3
 80037ec:	2100      	movs	r1, #0
 80037ee:	f004 fac7 	bl	8007d80 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037f2:	4b38      	ldr	r3, [pc, #224]	; (80038d4 <MX_GPIO_Init+0xf8>)
 80037f4:	695a      	ldr	r2, [r3, #20]
 80037f6:	4b37      	ldr	r3, [pc, #220]	; (80038d4 <MX_GPIO_Init+0xf8>)
 80037f8:	2180      	movs	r1, #128	; 0x80
 80037fa:	0309      	lsls	r1, r1, #12
 80037fc:	430a      	orrs	r2, r1
 80037fe:	615a      	str	r2, [r3, #20]
 8003800:	4b34      	ldr	r3, [pc, #208]	; (80038d4 <MX_GPIO_Init+0xf8>)
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	2380      	movs	r3, #128	; 0x80
 8003806:	031b      	lsls	r3, r3, #12
 8003808:	4013      	ands	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800380e:	4b31      	ldr	r3, [pc, #196]	; (80038d4 <MX_GPIO_Init+0xf8>)
 8003810:	695a      	ldr	r2, [r3, #20]
 8003812:	4b30      	ldr	r3, [pc, #192]	; (80038d4 <MX_GPIO_Init+0xf8>)
 8003814:	2180      	movs	r1, #128	; 0x80
 8003816:	03c9      	lsls	r1, r1, #15
 8003818:	430a      	orrs	r2, r1
 800381a:	615a      	str	r2, [r3, #20]
 800381c:	4b2d      	ldr	r3, [pc, #180]	; (80038d4 <MX_GPIO_Init+0xf8>)
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	2380      	movs	r3, #128	; 0x80
 8003822:	03db      	lsls	r3, r3, #15
 8003824:	4013      	ands	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800382a:	4b2a      	ldr	r3, [pc, #168]	; (80038d4 <MX_GPIO_Init+0xf8>)
 800382c:	695a      	ldr	r2, [r3, #20]
 800382e:	4b29      	ldr	r3, [pc, #164]	; (80038d4 <MX_GPIO_Init+0xf8>)
 8003830:	2180      	movs	r1, #128	; 0x80
 8003832:	0289      	lsls	r1, r1, #10
 8003834:	430a      	orrs	r2, r1
 8003836:	615a      	str	r2, [r3, #20]
 8003838:	4b26      	ldr	r3, [pc, #152]	; (80038d4 <MX_GPIO_Init+0xf8>)
 800383a:	695a      	ldr	r2, [r3, #20]
 800383c:	2380      	movs	r3, #128	; 0x80
 800383e:	029b      	lsls	r3, r3, #10
 8003840:	4013      	ands	r3, r2
 8003842:	60bb      	str	r3, [r7, #8]
 8003844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003846:	4b23      	ldr	r3, [pc, #140]	; (80038d4 <MX_GPIO_Init+0xf8>)
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <MX_GPIO_Init+0xf8>)
 800384c:	2180      	movs	r1, #128	; 0x80
 800384e:	02c9      	lsls	r1, r1, #11
 8003850:	430a      	orrs	r2, r1
 8003852:	615a      	str	r2, [r3, #20]
 8003854:	4b1f      	ldr	r3, [pc, #124]	; (80038d4 <MX_GPIO_Init+0xf8>)
 8003856:	695a      	ldr	r2, [r3, #20]
 8003858:	2380      	movs	r3, #128	; 0x80
 800385a:	02db      	lsls	r3, r3, #11
 800385c:	4013      	ands	r3, r2
 800385e:	607b      	str	r3, [r7, #4]
 8003860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003862:	2390      	movs	r3, #144	; 0x90
 8003864:	05db      	lsls	r3, r3, #23
 8003866:	2200      	movs	r2, #0
 8003868:	2120      	movs	r1, #32
 800386a:	0018      	movs	r0, r3
 800386c:	f000 fde6 	bl	800443c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003870:	193b      	adds	r3, r7, r4
 8003872:	2280      	movs	r2, #128	; 0x80
 8003874:	0192      	lsls	r2, r2, #6
 8003876:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003878:	193b      	adds	r3, r7, r4
 800387a:	2284      	movs	r2, #132	; 0x84
 800387c:	0392      	lsls	r2, r2, #14
 800387e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003880:	193b      	adds	r3, r7, r4
 8003882:	2200      	movs	r2, #0
 8003884:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003886:	193b      	adds	r3, r7, r4
 8003888:	4a13      	ldr	r2, [pc, #76]	; (80038d8 <MX_GPIO_Init+0xfc>)
 800388a:	0019      	movs	r1, r3
 800388c:	0010      	movs	r0, r2
 800388e:	f000 fc65 	bl	800415c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003892:	0021      	movs	r1, r4
 8003894:	187b      	adds	r3, r7, r1
 8003896:	2220      	movs	r2, #32
 8003898:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800389a:	187b      	adds	r3, r7, r1
 800389c:	2201      	movs	r2, #1
 800389e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a0:	187b      	adds	r3, r7, r1
 80038a2:	2200      	movs	r2, #0
 80038a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a6:	187b      	adds	r3, r7, r1
 80038a8:	2200      	movs	r2, #0
 80038aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80038ac:	187a      	adds	r2, r7, r1
 80038ae:	2390      	movs	r3, #144	; 0x90
 80038b0:	05db      	lsls	r3, r3, #23
 80038b2:	0011      	movs	r1, r2
 80038b4:	0018      	movs	r0, r3
 80038b6:	f000 fc51 	bl	800415c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80038ba:	2200      	movs	r2, #0
 80038bc:	2101      	movs	r1, #1
 80038be:	2007      	movs	r0, #7
 80038c0:	f000 fb9c 	bl	8003ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80038c4:	2007      	movs	r0, #7
 80038c6:	f000 fbae 	bl	8004026 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b00b      	add	sp, #44	; 0x2c
 80038d0:	bd90      	pop	{r4, r7, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	40021000 	.word	0x40021000
 80038d8:	48000800 	.word	0x48000800

080038dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038e0:	b672      	cpsid	i
}
 80038e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038e4:	e7fe      	b.n	80038e4 <Error_Handler+0x8>
	...

080038e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ee:	4b0f      	ldr	r3, [pc, #60]	; (800392c <HAL_MspInit+0x44>)
 80038f0:	699a      	ldr	r2, [r3, #24]
 80038f2:	4b0e      	ldr	r3, [pc, #56]	; (800392c <HAL_MspInit+0x44>)
 80038f4:	2101      	movs	r1, #1
 80038f6:	430a      	orrs	r2, r1
 80038f8:	619a      	str	r2, [r3, #24]
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <HAL_MspInit+0x44>)
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	2201      	movs	r2, #1
 8003900:	4013      	ands	r3, r2
 8003902:	607b      	str	r3, [r7, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003906:	4b09      	ldr	r3, [pc, #36]	; (800392c <HAL_MspInit+0x44>)
 8003908:	69da      	ldr	r2, [r3, #28]
 800390a:	4b08      	ldr	r3, [pc, #32]	; (800392c <HAL_MspInit+0x44>)
 800390c:	2180      	movs	r1, #128	; 0x80
 800390e:	0549      	lsls	r1, r1, #21
 8003910:	430a      	orrs	r2, r1
 8003912:	61da      	str	r2, [r3, #28]
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <HAL_MspInit+0x44>)
 8003916:	69da      	ldr	r2, [r3, #28]
 8003918:	2380      	movs	r3, #128	; 0x80
 800391a:	055b      	lsls	r3, r3, #21
 800391c:	4013      	ands	r3, r2
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	46bd      	mov	sp, r7
 8003926:	b002      	add	sp, #8
 8003928:	bd80      	pop	{r7, pc}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	40021000 	.word	0x40021000

08003930 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b08b      	sub	sp, #44	; 0x2c
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003938:	2414      	movs	r4, #20
 800393a:	193b      	adds	r3, r7, r4
 800393c:	0018      	movs	r0, r3
 800393e:	2314      	movs	r3, #20
 8003940:	001a      	movs	r2, r3
 8003942:	2100      	movs	r1, #0
 8003944:	f004 fa1c 	bl	8007d80 <memset>
  if(htim_encoder->Instance==TIM3)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1f      	ldr	r2, [pc, #124]	; (80039cc <HAL_TIM_Encoder_MspInit+0x9c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d138      	bne.n	80039c4 <HAL_TIM_Encoder_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003952:	4b1f      	ldr	r3, [pc, #124]	; (80039d0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8003954:	69da      	ldr	r2, [r3, #28]
 8003956:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8003958:	2102      	movs	r1, #2
 800395a:	430a      	orrs	r2, r1
 800395c:	61da      	str	r2, [r3, #28]
 800395e:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	2202      	movs	r2, #2
 8003964:	4013      	ands	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800396a:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <HAL_TIM_Encoder_MspInit+0xa0>)
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8003970:	2180      	movs	r1, #128	; 0x80
 8003972:	0289      	lsls	r1, r1, #10
 8003974:	430a      	orrs	r2, r1
 8003976:	615a      	str	r2, [r3, #20]
 8003978:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <HAL_TIM_Encoder_MspInit+0xa0>)
 800397a:	695a      	ldr	r2, [r3, #20]
 800397c:	2380      	movs	r3, #128	; 0x80
 800397e:	029b      	lsls	r3, r3, #10
 8003980:	4013      	ands	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003986:	0021      	movs	r1, r4
 8003988:	187b      	adds	r3, r7, r1
 800398a:	22c0      	movs	r2, #192	; 0xc0
 800398c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398e:	187b      	adds	r3, r7, r1
 8003990:	2202      	movs	r2, #2
 8003992:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003994:	187b      	adds	r3, r7, r1
 8003996:	2200      	movs	r2, #0
 8003998:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399a:	187b      	adds	r3, r7, r1
 800399c:	2200      	movs	r2, #0
 800399e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80039a0:	187b      	adds	r3, r7, r1
 80039a2:	2201      	movs	r2, #1
 80039a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a6:	187a      	adds	r2, r7, r1
 80039a8:	2390      	movs	r3, #144	; 0x90
 80039aa:	05db      	lsls	r3, r3, #23
 80039ac:	0011      	movs	r1, r2
 80039ae:	0018      	movs	r0, r3
 80039b0:	f000 fbd4 	bl	800415c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80039b4:	2200      	movs	r2, #0
 80039b6:	2101      	movs	r1, #1
 80039b8:	2010      	movs	r0, #16
 80039ba:	f000 fb1f 	bl	8003ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80039be:	2010      	movs	r0, #16
 80039c0:	f000 fb31 	bl	8004026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80039c4:	46c0      	nop			; (mov r8, r8)
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b00b      	add	sp, #44	; 0x2c
 80039ca:	bd90      	pop	{r4, r7, pc}
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40021000 	.word	0x40021000

080039d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a17      	ldr	r2, [pc, #92]	; (8003a40 <HAL_TIM_Base_MspInit+0x6c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d114      	bne.n	8003a10 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <HAL_TIM_Base_MspInit+0x70>)
 80039e8:	69da      	ldr	r2, [r3, #28]
 80039ea:	4b16      	ldr	r3, [pc, #88]	; (8003a44 <HAL_TIM_Base_MspInit+0x70>)
 80039ec:	2110      	movs	r1, #16
 80039ee:	430a      	orrs	r2, r1
 80039f0:	61da      	str	r2, [r3, #28]
 80039f2:	4b14      	ldr	r3, [pc, #80]	; (8003a44 <HAL_TIM_Base_MspInit+0x70>)
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	2210      	movs	r2, #16
 80039f8:	4013      	ands	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 80039fe:	2200      	movs	r2, #0
 8003a00:	2101      	movs	r1, #1
 8003a02:	2011      	movs	r0, #17
 8003a04:	f000 fafa 	bl	8003ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003a08:	2011      	movs	r0, #17
 8003a0a:	f000 fb0c 	bl	8004026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003a0e:	e012      	b.n	8003a36 <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM16)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a0c      	ldr	r2, [pc, #48]	; (8003a48 <HAL_TIM_Base_MspInit+0x74>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d10d      	bne.n	8003a36 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <HAL_TIM_Base_MspInit+0x70>)
 8003a1c:	699a      	ldr	r2, [r3, #24]
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_TIM_Base_MspInit+0x70>)
 8003a20:	2180      	movs	r1, #128	; 0x80
 8003a22:	0289      	lsls	r1, r1, #10
 8003a24:	430a      	orrs	r2, r1
 8003a26:	619a      	str	r2, [r3, #24]
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <HAL_TIM_Base_MspInit+0x70>)
 8003a2a:	699a      	ldr	r2, [r3, #24]
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	029b      	lsls	r3, r3, #10
 8003a30:	4013      	ands	r3, r2
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	68bb      	ldr	r3, [r7, #8]
}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b004      	add	sp, #16
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	40001000 	.word	0x40001000
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40014400 	.word	0x40014400

08003a4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a4c:	b590      	push	{r4, r7, lr}
 8003a4e:	b089      	sub	sp, #36	; 0x24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a54:	240c      	movs	r4, #12
 8003a56:	193b      	adds	r3, r7, r4
 8003a58:	0018      	movs	r0, r3
 8003a5a:	2314      	movs	r3, #20
 8003a5c:	001a      	movs	r2, r3
 8003a5e:	2100      	movs	r1, #0
 8003a60:	f004 f98e 	bl	8007d80 <memset>
  if(htim->Instance==TIM16)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a15      	ldr	r2, [pc, #84]	; (8003ac0 <HAL_TIM_MspPostInit+0x74>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d124      	bne.n	8003ab8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a6e:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <HAL_TIM_MspPostInit+0x78>)
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <HAL_TIM_MspPostInit+0x78>)
 8003a74:	2180      	movs	r1, #128	; 0x80
 8003a76:	02c9      	lsls	r1, r1, #11
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	615a      	str	r2, [r3, #20]
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <HAL_TIM_MspPostInit+0x78>)
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	02db      	lsls	r3, r3, #11
 8003a84:	4013      	ands	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a8a:	193b      	adds	r3, r7, r4
 8003a8c:	2280      	movs	r2, #128	; 0x80
 8003a8e:	0052      	lsls	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a92:	0021      	movs	r1, r4
 8003a94:	187b      	adds	r3, r7, r1
 8003a96:	2202      	movs	r2, #2
 8003a98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9a:	187b      	adds	r3, r7, r1
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa0:	187b      	adds	r3, r7, r1
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8003aa6:	187b      	adds	r3, r7, r1
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aac:	187b      	adds	r3, r7, r1
 8003aae:	4a06      	ldr	r2, [pc, #24]	; (8003ac8 <HAL_TIM_MspPostInit+0x7c>)
 8003ab0:	0019      	movs	r1, r3
 8003ab2:	0010      	movs	r0, r2
 8003ab4:	f000 fb52 	bl	800415c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003ab8:	46c0      	nop			; (mov r8, r8)
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b009      	add	sp, #36	; 0x24
 8003abe:	bd90      	pop	{r4, r7, pc}
 8003ac0:	40014400 	.word	0x40014400
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	48000400 	.word	0x48000400

08003acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003acc:	b590      	push	{r4, r7, lr}
 8003ace:	b08b      	sub	sp, #44	; 0x2c
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad4:	2414      	movs	r4, #20
 8003ad6:	193b      	adds	r3, r7, r4
 8003ad8:	0018      	movs	r0, r3
 8003ada:	2314      	movs	r3, #20
 8003adc:	001a      	movs	r2, r3
 8003ade:	2100      	movs	r1, #0
 8003ae0:	f004 f94e 	bl	8007d80 <memset>
  if(huart->Instance==USART2)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a20      	ldr	r2, [pc, #128]	; (8003b6c <HAL_UART_MspInit+0xa0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d13a      	bne.n	8003b64 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003aee:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <HAL_UART_MspInit+0xa4>)
 8003af0:	69da      	ldr	r2, [r3, #28]
 8003af2:	4b1f      	ldr	r3, [pc, #124]	; (8003b70 <HAL_UART_MspInit+0xa4>)
 8003af4:	2180      	movs	r1, #128	; 0x80
 8003af6:	0289      	lsls	r1, r1, #10
 8003af8:	430a      	orrs	r2, r1
 8003afa:	61da      	str	r2, [r3, #28]
 8003afc:	4b1c      	ldr	r3, [pc, #112]	; (8003b70 <HAL_UART_MspInit+0xa4>)
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	2380      	movs	r3, #128	; 0x80
 8003b02:	029b      	lsls	r3, r3, #10
 8003b04:	4013      	ands	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b0a:	4b19      	ldr	r3, [pc, #100]	; (8003b70 <HAL_UART_MspInit+0xa4>)
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	4b18      	ldr	r3, [pc, #96]	; (8003b70 <HAL_UART_MspInit+0xa4>)
 8003b10:	2180      	movs	r1, #128	; 0x80
 8003b12:	0289      	lsls	r1, r1, #10
 8003b14:	430a      	orrs	r2, r1
 8003b16:	615a      	str	r2, [r3, #20]
 8003b18:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <HAL_UART_MspInit+0xa4>)
 8003b1a:	695a      	ldr	r2, [r3, #20]
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	029b      	lsls	r3, r3, #10
 8003b20:	4013      	ands	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003b26:	0021      	movs	r1, r4
 8003b28:	187b      	adds	r3, r7, r1
 8003b2a:	220c      	movs	r2, #12
 8003b2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2e:	187b      	adds	r3, r7, r1
 8003b30:	2202      	movs	r2, #2
 8003b32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	187b      	adds	r3, r7, r1
 8003b36:	2200      	movs	r2, #0
 8003b38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b3a:	187b      	adds	r3, r7, r1
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003b40:	187b      	adds	r3, r7, r1
 8003b42:	2201      	movs	r2, #1
 8003b44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b46:	187a      	adds	r2, r7, r1
 8003b48:	2390      	movs	r3, #144	; 0x90
 8003b4a:	05db      	lsls	r3, r3, #23
 8003b4c:	0011      	movs	r1, r2
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f000 fb04 	bl	800415c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b54:	2200      	movs	r2, #0
 8003b56:	2100      	movs	r1, #0
 8003b58:	201c      	movs	r0, #28
 8003b5a:	f000 fa4f 	bl	8003ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b5e:	201c      	movs	r0, #28
 8003b60:	f000 fa61 	bl	8004026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003b64:	46c0      	nop			; (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b00b      	add	sp, #44	; 0x2c
 8003b6a:	bd90      	pop	{r4, r7, pc}
 8003b6c:	40004400 	.word	0x40004400
 8003b70:	40021000 	.word	0x40021000

08003b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b78:	e7fe      	b.n	8003b78 <NMI_Handler+0x4>

08003b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b7e:	e7fe      	b.n	8003b7e <HardFault_Handler+0x4>

08003b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003b84:	46c0      	nop			; (mov r8, r8)
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b98:	f000 f968 	bl	8003e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b9c:	46c0      	nop			; (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	019b      	lsls	r3, r3, #6
 8003baa:	0018      	movs	r0, r3
 8003bac:	f000 fc64 	bl	8004478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003bb0:	46c0      	nop			; (mov r8, r8)
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003bbc:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <TIM3_IRQHandler+0x14>)
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f001 fbcc 	bl	800535c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	200001f4 	.word	0x200001f4

08003bd0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003bd4:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <TIM6_IRQHandler+0x14>)
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f001 fbc0 	bl	800535c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003bdc:	46c0      	nop			; (mov r8, r8)
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	2000023c 	.word	0x2000023c

08003be8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <USART2_IRQHandler+0x14>)
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f002 fa00 	bl	8005ff4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	200002cc 	.word	0x200002cc

08003c00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  return 1;
 8003c04:	2301      	movs	r3, #1
}
 8003c06:	0018      	movs	r0, r3
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <_kill>:

int _kill(int pid, int sig)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c16:	f004 f90d 	bl	8007e34 <__errno>
 8003c1a:	0003      	movs	r3, r0
 8003c1c:	2216      	movs	r2, #22
 8003c1e:	601a      	str	r2, [r3, #0]
  return -1;
 8003c20:	2301      	movs	r3, #1
 8003c22:	425b      	negs	r3, r3
}
 8003c24:	0018      	movs	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	b002      	add	sp, #8
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <_exit>:

void _exit (int status)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c34:	2301      	movs	r3, #1
 8003c36:	425a      	negs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	0011      	movs	r1, r2
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f7ff ffe5 	bl	8003c0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c42:	e7fe      	b.n	8003c42 <_exit+0x16>

08003c44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	e00a      	b.n	8003c6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c56:	e000      	b.n	8003c5a <_read+0x16>
 8003c58:	bf00      	nop
 8003c5a:	0001      	movs	r1, r0
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	60ba      	str	r2, [r7, #8]
 8003c62:	b2ca      	uxtb	r2, r1
 8003c64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	dbf0      	blt.n	8003c56 <_read+0x12>
  }

  return len;
 8003c74:	687b      	ldr	r3, [r7, #4]
}
 8003c76:	0018      	movs	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	b006      	add	sp, #24
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b086      	sub	sp, #24
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	e009      	b.n	8003ca4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	60ba      	str	r2, [r7, #8]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	0018      	movs	r0, r3
 8003c9a:	e000      	b.n	8003c9e <_write+0x20>
 8003c9c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	dbf1      	blt.n	8003c90 <_write+0x12>
  }
  return len;
 8003cac:	687b      	ldr	r3, [r7, #4]
}
 8003cae:	0018      	movs	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b006      	add	sp, #24
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <_close>:

int _close(int file)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	425b      	negs	r3, r3
}
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b002      	add	sp, #8
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2280      	movs	r2, #128	; 0x80
 8003cd8:	0192      	lsls	r2, r2, #6
 8003cda:	605a      	str	r2, [r3, #4]
  return 0;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	0018      	movs	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b002      	add	sp, #8
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <_isatty>:

int _isatty(int file)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cee:	2301      	movs	r3, #1
}
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b002      	add	sp, #8
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	0018      	movs	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b004      	add	sp, #16
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d18:	4a14      	ldr	r2, [pc, #80]	; (8003d6c <_sbrk+0x5c>)
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <_sbrk+0x60>)
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d24:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <_sbrk+0x64>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d102      	bne.n	8003d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d2c:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <_sbrk+0x64>)
 8003d2e:	4a12      	ldr	r2, [pc, #72]	; (8003d78 <_sbrk+0x68>)
 8003d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d32:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <_sbrk+0x64>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	18d3      	adds	r3, r2, r3
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d207      	bcs.n	8003d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d40:	f004 f878 	bl	8007e34 <__errno>
 8003d44:	0003      	movs	r3, r0
 8003d46:	220c      	movs	r2, #12
 8003d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	425b      	negs	r3, r3
 8003d4e:	e009      	b.n	8003d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d50:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <_sbrk+0x64>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <_sbrk+0x64>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	18d2      	adds	r2, r2, r3
 8003d5e:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <_sbrk+0x64>)
 8003d60:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003d62:	68fb      	ldr	r3, [r7, #12]
}
 8003d64:	0018      	movs	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b006      	add	sp, #24
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20004000 	.word	0x20004000
 8003d70:	00000400 	.word	0x00000400
 8003d74:	200006a0 	.word	0x200006a0
 8003d78:	200007f8 	.word	0x200007f8

08003d7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003d80:	46c0      	nop			; (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003d88:	480d      	ldr	r0, [pc, #52]	; (8003dc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d8a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d8c:	f7ff fff6 	bl	8003d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d90:	480c      	ldr	r0, [pc, #48]	; (8003dc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d92:	490d      	ldr	r1, [pc, #52]	; (8003dc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d94:	4a0d      	ldr	r2, [pc, #52]	; (8003dcc <LoopForever+0xe>)
  movs r3, #0
 8003d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d98:	e002      	b.n	8003da0 <LoopCopyDataInit>

08003d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d9e:	3304      	adds	r3, #4

08003da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003da4:	d3f9      	bcc.n	8003d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003da6:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003da8:	4c0a      	ldr	r4, [pc, #40]	; (8003dd4 <LoopForever+0x16>)
  movs r3, #0
 8003daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dac:	e001      	b.n	8003db2 <LoopFillZerobss>

08003dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003db0:	3204      	adds	r2, #4

08003db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003db4:	d3fb      	bcc.n	8003dae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003db6:	f004 f843 	bl	8007e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003dba:	f7ff fb3d 	bl	8003438 <main>

08003dbe <LoopForever>:

LoopForever:
    b LoopForever
 8003dbe:	e7fe      	b.n	8003dbe <LoopForever>
  ldr   r0, =_estack
 8003dc0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003dc8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003dcc:	0800a52c 	.word	0x0800a52c
  ldr r2, =_sbss
 8003dd0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003dd4:	200007f4 	.word	0x200007f4

08003dd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003dd8:	e7fe      	b.n	8003dd8 <ADC1_IRQHandler>
	...

08003ddc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003de0:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <HAL_Init+0x24>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_Init+0x24>)
 8003de6:	2110      	movs	r1, #16
 8003de8:	430a      	orrs	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003dec:	2000      	movs	r0, #0
 8003dee:	f000 f809 	bl	8003e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003df2:	f7ff fd79 	bl	80038e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	0018      	movs	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	40022000 	.word	0x40022000

08003e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e04:	b590      	push	{r4, r7, lr}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e0c:	4b14      	ldr	r3, [pc, #80]	; (8003e60 <HAL_InitTick+0x5c>)
 8003e0e:	681c      	ldr	r4, [r3, #0]
 8003e10:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <HAL_InitTick+0x60>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	0019      	movs	r1, r3
 8003e16:	23fa      	movs	r3, #250	; 0xfa
 8003e18:	0098      	lsls	r0, r3, #2
 8003e1a:	f7fc f991 	bl	8000140 <__udivsi3>
 8003e1e:	0003      	movs	r3, r0
 8003e20:	0019      	movs	r1, r3
 8003e22:	0020      	movs	r0, r4
 8003e24:	f7fc f98c 	bl	8000140 <__udivsi3>
 8003e28:	0003      	movs	r3, r0
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f000 f90b 	bl	8004046 <HAL_SYSTICK_Config>
 8003e30:	1e03      	subs	r3, r0, #0
 8003e32:	d001      	beq.n	8003e38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e00f      	b.n	8003e58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d80b      	bhi.n	8003e56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	2301      	movs	r3, #1
 8003e42:	425b      	negs	r3, r3
 8003e44:	2200      	movs	r2, #0
 8003e46:	0018      	movs	r0, r3
 8003e48:	f000 f8d8 	bl	8003ffc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e4c:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <HAL_InitTick+0x64>)
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e000      	b.n	8003e58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
}
 8003e58:	0018      	movs	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b003      	add	sp, #12
 8003e5e:	bd90      	pop	{r4, r7, pc}
 8003e60:	20000004 	.word	0x20000004
 8003e64:	2000000c 	.word	0x2000000c
 8003e68:	20000008 	.word	0x20000008

08003e6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <HAL_IncTick+0x1c>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	001a      	movs	r2, r3
 8003e76:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <HAL_IncTick+0x20>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	18d2      	adds	r2, r2, r3
 8003e7c:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <HAL_IncTick+0x20>)
 8003e7e:	601a      	str	r2, [r3, #0]
}
 8003e80:	46c0      	nop			; (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	2000000c 	.word	0x2000000c
 8003e8c:	200006a4 	.word	0x200006a4

08003e90 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  return uwTick;
 8003e94:	4b02      	ldr	r3, [pc, #8]	; (8003ea0 <HAL_GetTick+0x10>)
 8003e96:	681b      	ldr	r3, [r3, #0]
}
 8003e98:	0018      	movs	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	200006a4 	.word	0x200006a4

08003ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	0002      	movs	r2, r0
 8003eac:	1dfb      	adds	r3, r7, #7
 8003eae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003eb0:	1dfb      	adds	r3, r7, #7
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8003eb6:	d809      	bhi.n	8003ecc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eb8:	1dfb      	adds	r3, r7, #7
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	001a      	movs	r2, r3
 8003ebe:	231f      	movs	r3, #31
 8003ec0:	401a      	ands	r2, r3
 8003ec2:	4b04      	ldr	r3, [pc, #16]	; (8003ed4 <__NVIC_EnableIRQ+0x30>)
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	4091      	lsls	r1, r2
 8003ec8:	000a      	movs	r2, r1
 8003eca:	601a      	str	r2, [r3, #0]
  }
}
 8003ecc:	46c0      	nop			; (mov r8, r8)
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b002      	add	sp, #8
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	e000e100 	.word	0xe000e100

08003ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ed8:	b590      	push	{r4, r7, lr}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	0002      	movs	r2, r0
 8003ee0:	6039      	str	r1, [r7, #0]
 8003ee2:	1dfb      	adds	r3, r7, #7
 8003ee4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b7f      	cmp	r3, #127	; 0x7f
 8003eec:	d828      	bhi.n	8003f40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003eee:	4a2f      	ldr	r2, [pc, #188]	; (8003fac <__NVIC_SetPriority+0xd4>)
 8003ef0:	1dfb      	adds	r3, r7, #7
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	b25b      	sxtb	r3, r3
 8003ef6:	089b      	lsrs	r3, r3, #2
 8003ef8:	33c0      	adds	r3, #192	; 0xc0
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	589b      	ldr	r3, [r3, r2]
 8003efe:	1dfa      	adds	r2, r7, #7
 8003f00:	7812      	ldrb	r2, [r2, #0]
 8003f02:	0011      	movs	r1, r2
 8003f04:	2203      	movs	r2, #3
 8003f06:	400a      	ands	r2, r1
 8003f08:	00d2      	lsls	r2, r2, #3
 8003f0a:	21ff      	movs	r1, #255	; 0xff
 8003f0c:	4091      	lsls	r1, r2
 8003f0e:	000a      	movs	r2, r1
 8003f10:	43d2      	mvns	r2, r2
 8003f12:	401a      	ands	r2, r3
 8003f14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	019b      	lsls	r3, r3, #6
 8003f1a:	22ff      	movs	r2, #255	; 0xff
 8003f1c:	401a      	ands	r2, r3
 8003f1e:	1dfb      	adds	r3, r7, #7
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	0018      	movs	r0, r3
 8003f24:	2303      	movs	r3, #3
 8003f26:	4003      	ands	r3, r0
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f2c:	481f      	ldr	r0, [pc, #124]	; (8003fac <__NVIC_SetPriority+0xd4>)
 8003f2e:	1dfb      	adds	r3, r7, #7
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	b25b      	sxtb	r3, r3
 8003f34:	089b      	lsrs	r3, r3, #2
 8003f36:	430a      	orrs	r2, r1
 8003f38:	33c0      	adds	r3, #192	; 0xc0
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003f3e:	e031      	b.n	8003fa4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f40:	4a1b      	ldr	r2, [pc, #108]	; (8003fb0 <__NVIC_SetPriority+0xd8>)
 8003f42:	1dfb      	adds	r3, r7, #7
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	0019      	movs	r1, r3
 8003f48:	230f      	movs	r3, #15
 8003f4a:	400b      	ands	r3, r1
 8003f4c:	3b08      	subs	r3, #8
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	3306      	adds	r3, #6
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	18d3      	adds	r3, r2, r3
 8003f56:	3304      	adds	r3, #4
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	1dfa      	adds	r2, r7, #7
 8003f5c:	7812      	ldrb	r2, [r2, #0]
 8003f5e:	0011      	movs	r1, r2
 8003f60:	2203      	movs	r2, #3
 8003f62:	400a      	ands	r2, r1
 8003f64:	00d2      	lsls	r2, r2, #3
 8003f66:	21ff      	movs	r1, #255	; 0xff
 8003f68:	4091      	lsls	r1, r2
 8003f6a:	000a      	movs	r2, r1
 8003f6c:	43d2      	mvns	r2, r2
 8003f6e:	401a      	ands	r2, r3
 8003f70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	019b      	lsls	r3, r3, #6
 8003f76:	22ff      	movs	r2, #255	; 0xff
 8003f78:	401a      	ands	r2, r3
 8003f7a:	1dfb      	adds	r3, r7, #7
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	0018      	movs	r0, r3
 8003f80:	2303      	movs	r3, #3
 8003f82:	4003      	ands	r3, r0
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f88:	4809      	ldr	r0, [pc, #36]	; (8003fb0 <__NVIC_SetPriority+0xd8>)
 8003f8a:	1dfb      	adds	r3, r7, #7
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	001c      	movs	r4, r3
 8003f90:	230f      	movs	r3, #15
 8003f92:	4023      	ands	r3, r4
 8003f94:	3b08      	subs	r3, #8
 8003f96:	089b      	lsrs	r3, r3, #2
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	3306      	adds	r3, #6
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	18c3      	adds	r3, r0, r3
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	601a      	str	r2, [r3, #0]
}
 8003fa4:	46c0      	nop			; (mov r8, r8)
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b003      	add	sp, #12
 8003faa:	bd90      	pop	{r4, r7, pc}
 8003fac:	e000e100 	.word	0xe000e100
 8003fb0:	e000ed00 	.word	0xe000ed00

08003fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	1e5a      	subs	r2, r3, #1
 8003fc0:	2380      	movs	r3, #128	; 0x80
 8003fc2:	045b      	lsls	r3, r3, #17
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d301      	bcc.n	8003fcc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e010      	b.n	8003fee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <SysTick_Config+0x44>)
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	3a01      	subs	r2, #1
 8003fd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	425b      	negs	r3, r3
 8003fd8:	2103      	movs	r1, #3
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f7ff ff7c 	bl	8003ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <SysTick_Config+0x44>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fe6:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <SysTick_Config+0x44>)
 8003fe8:	2207      	movs	r2, #7
 8003fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	0018      	movs	r0, r3
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	b002      	add	sp, #8
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	e000e010 	.word	0xe000e010

08003ffc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
 8004006:	210f      	movs	r1, #15
 8004008:	187b      	adds	r3, r7, r1
 800400a:	1c02      	adds	r2, r0, #0
 800400c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	187b      	adds	r3, r7, r1
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	b25b      	sxtb	r3, r3
 8004016:	0011      	movs	r1, r2
 8004018:	0018      	movs	r0, r3
 800401a:	f7ff ff5d 	bl	8003ed8 <__NVIC_SetPriority>
}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	46bd      	mov	sp, r7
 8004022:	b004      	add	sp, #16
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b082      	sub	sp, #8
 800402a:	af00      	add	r7, sp, #0
 800402c:	0002      	movs	r2, r0
 800402e:	1dfb      	adds	r3, r7, #7
 8004030:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004032:	1dfb      	adds	r3, r7, #7
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	b25b      	sxtb	r3, r3
 8004038:	0018      	movs	r0, r3
 800403a:	f7ff ff33 	bl	8003ea4 <__NVIC_EnableIRQ>
}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	46bd      	mov	sp, r7
 8004042:	b002      	add	sp, #8
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	0018      	movs	r0, r3
 8004052:	f7ff ffaf 	bl	8003fb4 <SysTick_Config>
 8004056:	0003      	movs	r3, r0
}
 8004058:	0018      	movs	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	b002      	add	sp, #8
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2221      	movs	r2, #33	; 0x21
 800406c:	5c9b      	ldrb	r3, [r3, r2]
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d008      	beq.n	8004086 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2204      	movs	r2, #4
 8004078:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	2100      	movs	r1, #0
 8004080:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e020      	b.n	80040c8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	210e      	movs	r1, #14
 8004092:	438a      	bics	r2, r1
 8004094:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2101      	movs	r1, #1
 80040a2:	438a      	bics	r2, r1
 80040a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ae:	2101      	movs	r1, #1
 80040b0:	4091      	lsls	r1, r2
 80040b2:	000a      	movs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2221      	movs	r2, #33	; 0x21
 80040ba:	2101      	movs	r1, #1
 80040bc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	2100      	movs	r1, #0
 80040c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	0018      	movs	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b002      	add	sp, #8
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d8:	210f      	movs	r1, #15
 80040da:	187b      	adds	r3, r7, r1
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2221      	movs	r2, #33	; 0x21
 80040e4:	5c9b      	ldrb	r3, [r3, r2]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d006      	beq.n	80040fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2204      	movs	r2, #4
 80040f0:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80040f2:	187b      	adds	r3, r7, r1
 80040f4:	2201      	movs	r2, #1
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	e028      	b.n	800414c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	210e      	movs	r1, #14
 8004106:	438a      	bics	r2, r1
 8004108:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2101      	movs	r1, #1
 8004116:	438a      	bics	r2, r1
 8004118:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004122:	2101      	movs	r1, #1
 8004124:	4091      	lsls	r1, r2
 8004126:	000a      	movs	r2, r1
 8004128:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2221      	movs	r2, #33	; 0x21
 800412e:	2101      	movs	r1, #1
 8004130:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2220      	movs	r2, #32
 8004136:	2100      	movs	r1, #0
 8004138:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413e:	2b00      	cmp	r3, #0
 8004140:	d004      	beq.n	800414c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	0010      	movs	r0, r2
 800414a:	4798      	blx	r3
    }
  }
  return status;
 800414c:	230f      	movs	r3, #15
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	781b      	ldrb	r3, [r3, #0]
}
 8004152:	0018      	movs	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	b004      	add	sp, #16
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800416a:	e14f      	b.n	800440c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2101      	movs	r1, #1
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4091      	lsls	r1, r2
 8004176:	000a      	movs	r2, r1
 8004178:	4013      	ands	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d100      	bne.n	8004184 <HAL_GPIO_Init+0x28>
 8004182:	e140      	b.n	8004406 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2203      	movs	r2, #3
 800418a:	4013      	ands	r3, r2
 800418c:	2b01      	cmp	r3, #1
 800418e:	d005      	beq.n	800419c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2203      	movs	r2, #3
 8004196:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004198:	2b02      	cmp	r3, #2
 800419a:	d130      	bne.n	80041fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	2203      	movs	r2, #3
 80041a8:	409a      	lsls	r2, r3
 80041aa:	0013      	movs	r3, r2
 80041ac:	43da      	mvns	r2, r3
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4013      	ands	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	409a      	lsls	r2, r3
 80041be:	0013      	movs	r3, r2
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041d2:	2201      	movs	r2, #1
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	409a      	lsls	r2, r3
 80041d8:	0013      	movs	r3, r2
 80041da:	43da      	mvns	r2, r3
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	4013      	ands	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	091b      	lsrs	r3, r3, #4
 80041e8:	2201      	movs	r2, #1
 80041ea:	401a      	ands	r2, r3
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	409a      	lsls	r2, r3
 80041f0:	0013      	movs	r3, r2
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2203      	movs	r2, #3
 8004204:	4013      	ands	r3, r2
 8004206:	2b03      	cmp	r3, #3
 8004208:	d017      	beq.n	800423a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	2203      	movs	r2, #3
 8004216:	409a      	lsls	r2, r3
 8004218:	0013      	movs	r3, r2
 800421a:	43da      	mvns	r2, r3
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4013      	ands	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	409a      	lsls	r2, r3
 800422c:	0013      	movs	r3, r2
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2203      	movs	r2, #3
 8004240:	4013      	ands	r3, r2
 8004242:	2b02      	cmp	r3, #2
 8004244:	d123      	bne.n	800428e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	08da      	lsrs	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3208      	adds	r2, #8
 800424e:	0092      	lsls	r2, r2, #2
 8004250:	58d3      	ldr	r3, [r2, r3]
 8004252:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	2207      	movs	r2, #7
 8004258:	4013      	ands	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	220f      	movs	r2, #15
 800425e:	409a      	lsls	r2, r3
 8004260:	0013      	movs	r3, r2
 8004262:	43da      	mvns	r2, r3
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	4013      	ands	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2107      	movs	r1, #7
 8004272:	400b      	ands	r3, r1
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	409a      	lsls	r2, r3
 8004278:	0013      	movs	r3, r2
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	08da      	lsrs	r2, r3, #3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3208      	adds	r2, #8
 8004288:	0092      	lsls	r2, r2, #2
 800428a:	6939      	ldr	r1, [r7, #16]
 800428c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	2203      	movs	r2, #3
 800429a:	409a      	lsls	r2, r3
 800429c:	0013      	movs	r3, r2
 800429e:	43da      	mvns	r2, r3
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4013      	ands	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2203      	movs	r2, #3
 80042ac:	401a      	ands	r2, r3
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	409a      	lsls	r2, r3
 80042b4:	0013      	movs	r3, r2
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	23c0      	movs	r3, #192	; 0xc0
 80042c8:	029b      	lsls	r3, r3, #10
 80042ca:	4013      	ands	r3, r2
 80042cc:	d100      	bne.n	80042d0 <HAL_GPIO_Init+0x174>
 80042ce:	e09a      	b.n	8004406 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042d0:	4b54      	ldr	r3, [pc, #336]	; (8004424 <HAL_GPIO_Init+0x2c8>)
 80042d2:	699a      	ldr	r2, [r3, #24]
 80042d4:	4b53      	ldr	r3, [pc, #332]	; (8004424 <HAL_GPIO_Init+0x2c8>)
 80042d6:	2101      	movs	r1, #1
 80042d8:	430a      	orrs	r2, r1
 80042da:	619a      	str	r2, [r3, #24]
 80042dc:	4b51      	ldr	r3, [pc, #324]	; (8004424 <HAL_GPIO_Init+0x2c8>)
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	2201      	movs	r2, #1
 80042e2:	4013      	ands	r3, r2
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80042e8:	4a4f      	ldr	r2, [pc, #316]	; (8004428 <HAL_GPIO_Init+0x2cc>)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	089b      	lsrs	r3, r3, #2
 80042ee:	3302      	adds	r3, #2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	589b      	ldr	r3, [r3, r2]
 80042f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2203      	movs	r2, #3
 80042fa:	4013      	ands	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	220f      	movs	r2, #15
 8004300:	409a      	lsls	r2, r3
 8004302:	0013      	movs	r3, r2
 8004304:	43da      	mvns	r2, r3
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4013      	ands	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	2390      	movs	r3, #144	; 0x90
 8004310:	05db      	lsls	r3, r3, #23
 8004312:	429a      	cmp	r2, r3
 8004314:	d013      	beq.n	800433e <HAL_GPIO_Init+0x1e2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a44      	ldr	r2, [pc, #272]	; (800442c <HAL_GPIO_Init+0x2d0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00d      	beq.n	800433a <HAL_GPIO_Init+0x1de>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a43      	ldr	r2, [pc, #268]	; (8004430 <HAL_GPIO_Init+0x2d4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d007      	beq.n	8004336 <HAL_GPIO_Init+0x1da>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a42      	ldr	r2, [pc, #264]	; (8004434 <HAL_GPIO_Init+0x2d8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d101      	bne.n	8004332 <HAL_GPIO_Init+0x1d6>
 800432e:	2303      	movs	r3, #3
 8004330:	e006      	b.n	8004340 <HAL_GPIO_Init+0x1e4>
 8004332:	2305      	movs	r3, #5
 8004334:	e004      	b.n	8004340 <HAL_GPIO_Init+0x1e4>
 8004336:	2302      	movs	r3, #2
 8004338:	e002      	b.n	8004340 <HAL_GPIO_Init+0x1e4>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <HAL_GPIO_Init+0x1e4>
 800433e:	2300      	movs	r3, #0
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	2103      	movs	r1, #3
 8004344:	400a      	ands	r2, r1
 8004346:	0092      	lsls	r2, r2, #2
 8004348:	4093      	lsls	r3, r2
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004350:	4935      	ldr	r1, [pc, #212]	; (8004428 <HAL_GPIO_Init+0x2cc>)
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	089b      	lsrs	r3, r3, #2
 8004356:	3302      	adds	r3, #2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800435e:	4b36      	ldr	r3, [pc, #216]	; (8004438 <HAL_GPIO_Init+0x2dc>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	43da      	mvns	r2, r3
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	4013      	ands	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	2380      	movs	r3, #128	; 0x80
 8004374:	035b      	lsls	r3, r3, #13
 8004376:	4013      	ands	r3, r2
 8004378:	d003      	beq.n	8004382 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004382:	4b2d      	ldr	r3, [pc, #180]	; (8004438 <HAL_GPIO_Init+0x2dc>)
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004388:	4b2b      	ldr	r3, [pc, #172]	; (8004438 <HAL_GPIO_Init+0x2dc>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	43da      	mvns	r2, r3
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4013      	ands	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	2380      	movs	r3, #128	; 0x80
 800439e:	039b      	lsls	r3, r3, #14
 80043a0:	4013      	ands	r3, r2
 80043a2:	d003      	beq.n	80043ac <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80043ac:	4b22      	ldr	r3, [pc, #136]	; (8004438 <HAL_GPIO_Init+0x2dc>)
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80043b2:	4b21      	ldr	r3, [pc, #132]	; (8004438 <HAL_GPIO_Init+0x2dc>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	43da      	mvns	r2, r3
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4013      	ands	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	2380      	movs	r3, #128	; 0x80
 80043c8:	029b      	lsls	r3, r3, #10
 80043ca:	4013      	ands	r3, r2
 80043cc:	d003      	beq.n	80043d6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80043d6:	4b18      	ldr	r3, [pc, #96]	; (8004438 <HAL_GPIO_Init+0x2dc>)
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80043dc:	4b16      	ldr	r3, [pc, #88]	; (8004438 <HAL_GPIO_Init+0x2dc>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	43da      	mvns	r2, r3
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4013      	ands	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	2380      	movs	r3, #128	; 0x80
 80043f2:	025b      	lsls	r3, r3, #9
 80043f4:	4013      	ands	r3, r2
 80043f6:	d003      	beq.n	8004400 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004400:	4b0d      	ldr	r3, [pc, #52]	; (8004438 <HAL_GPIO_Init+0x2dc>)
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	3301      	adds	r3, #1
 800440a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	40da      	lsrs	r2, r3
 8004414:	1e13      	subs	r3, r2, #0
 8004416:	d000      	beq.n	800441a <HAL_GPIO_Init+0x2be>
 8004418:	e6a8      	b.n	800416c <HAL_GPIO_Init+0x10>
  } 
}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	46c0      	nop			; (mov r8, r8)
 800441e:	46bd      	mov	sp, r7
 8004420:	b006      	add	sp, #24
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40021000 	.word	0x40021000
 8004428:	40010000 	.word	0x40010000
 800442c:	48000400 	.word	0x48000400
 8004430:	48000800 	.word	0x48000800
 8004434:	48000c00 	.word	0x48000c00
 8004438:	40010400 	.word	0x40010400

0800443c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	0008      	movs	r0, r1
 8004446:	0011      	movs	r1, r2
 8004448:	1cbb      	adds	r3, r7, #2
 800444a:	1c02      	adds	r2, r0, #0
 800444c:	801a      	strh	r2, [r3, #0]
 800444e:	1c7b      	adds	r3, r7, #1
 8004450:	1c0a      	adds	r2, r1, #0
 8004452:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004454:	1c7b      	adds	r3, r7, #1
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d004      	beq.n	8004466 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800445c:	1cbb      	adds	r3, r7, #2
 800445e:	881a      	ldrh	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004464:	e003      	b.n	800446e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004466:	1cbb      	adds	r3, r7, #2
 8004468:	881a      	ldrh	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	46bd      	mov	sp, r7
 8004472:	b002      	add	sp, #8
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	0002      	movs	r2, r0
 8004480:	1dbb      	adds	r3, r7, #6
 8004482:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	1dba      	adds	r2, r7, #6
 800448a:	8812      	ldrh	r2, [r2, #0]
 800448c:	4013      	ands	r3, r2
 800448e:	d008      	beq.n	80044a2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004490:	4b06      	ldr	r3, [pc, #24]	; (80044ac <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004492:	1dba      	adds	r2, r7, #6
 8004494:	8812      	ldrh	r2, [r2, #0]
 8004496:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004498:	1dbb      	adds	r3, r7, #6
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	0018      	movs	r0, r3
 800449e:	f7fe ff45 	bl	800332c <HAL_GPIO_EXTI_Callback>
  }
}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	46bd      	mov	sp, r7
 80044a6:	b002      	add	sp, #8
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	40010400 	.word	0x40010400

080044b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e305      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2201      	movs	r2, #1
 80044c8:	4013      	ands	r3, r2
 80044ca:	d100      	bne.n	80044ce <HAL_RCC_OscConfig+0x1e>
 80044cc:	e08d      	b.n	80045ea <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80044ce:	4bc5      	ldr	r3, [pc, #788]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	220c      	movs	r2, #12
 80044d4:	4013      	ands	r3, r2
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d00e      	beq.n	80044f8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044da:	4bc2      	ldr	r3, [pc, #776]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	220c      	movs	r2, #12
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d116      	bne.n	8004514 <HAL_RCC_OscConfig+0x64>
 80044e6:	4bbf      	ldr	r3, [pc, #764]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	23c0      	movs	r3, #192	; 0xc0
 80044ec:	025b      	lsls	r3, r3, #9
 80044ee:	401a      	ands	r2, r3
 80044f0:	2380      	movs	r3, #128	; 0x80
 80044f2:	025b      	lsls	r3, r3, #9
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d10d      	bne.n	8004514 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f8:	4bba      	ldr	r3, [pc, #744]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	029b      	lsls	r3, r3, #10
 8004500:	4013      	ands	r3, r2
 8004502:	d100      	bne.n	8004506 <HAL_RCC_OscConfig+0x56>
 8004504:	e070      	b.n	80045e8 <HAL_RCC_OscConfig+0x138>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d000      	beq.n	8004510 <HAL_RCC_OscConfig+0x60>
 800450e:	e06b      	b.n	80045e8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e2dc      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d107      	bne.n	800452c <HAL_RCC_OscConfig+0x7c>
 800451c:	4bb1      	ldr	r3, [pc, #708]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	4bb0      	ldr	r3, [pc, #704]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 8004522:	2180      	movs	r1, #128	; 0x80
 8004524:	0249      	lsls	r1, r1, #9
 8004526:	430a      	orrs	r2, r1
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	e02f      	b.n	800458c <HAL_RCC_OscConfig+0xdc>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10c      	bne.n	800454e <HAL_RCC_OscConfig+0x9e>
 8004534:	4bab      	ldr	r3, [pc, #684]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	4baa      	ldr	r3, [pc, #680]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 800453a:	49ab      	ldr	r1, [pc, #684]	; (80047e8 <HAL_RCC_OscConfig+0x338>)
 800453c:	400a      	ands	r2, r1
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	4ba8      	ldr	r3, [pc, #672]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	4ba7      	ldr	r3, [pc, #668]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 8004546:	49a9      	ldr	r1, [pc, #676]	; (80047ec <HAL_RCC_OscConfig+0x33c>)
 8004548:	400a      	ands	r2, r1
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	e01e      	b.n	800458c <HAL_RCC_OscConfig+0xdc>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b05      	cmp	r3, #5
 8004554:	d10e      	bne.n	8004574 <HAL_RCC_OscConfig+0xc4>
 8004556:	4ba3      	ldr	r3, [pc, #652]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	4ba2      	ldr	r3, [pc, #648]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 800455c:	2180      	movs	r1, #128	; 0x80
 800455e:	02c9      	lsls	r1, r1, #11
 8004560:	430a      	orrs	r2, r1
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	4b9f      	ldr	r3, [pc, #636]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	4b9e      	ldr	r3, [pc, #632]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 800456a:	2180      	movs	r1, #128	; 0x80
 800456c:	0249      	lsls	r1, r1, #9
 800456e:	430a      	orrs	r2, r1
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	e00b      	b.n	800458c <HAL_RCC_OscConfig+0xdc>
 8004574:	4b9b      	ldr	r3, [pc, #620]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	4b9a      	ldr	r3, [pc, #616]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 800457a:	499b      	ldr	r1, [pc, #620]	; (80047e8 <HAL_RCC_OscConfig+0x338>)
 800457c:	400a      	ands	r2, r1
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	4b98      	ldr	r3, [pc, #608]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	4b97      	ldr	r3, [pc, #604]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 8004586:	4999      	ldr	r1, [pc, #612]	; (80047ec <HAL_RCC_OscConfig+0x33c>)
 8004588:	400a      	ands	r2, r1
 800458a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d014      	beq.n	80045be <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004594:	f7ff fc7c 	bl	8003e90 <HAL_GetTick>
 8004598:	0003      	movs	r3, r0
 800459a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800459e:	f7ff fc77 	bl	8003e90 <HAL_GetTick>
 80045a2:	0002      	movs	r2, r0
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b64      	cmp	r3, #100	; 0x64
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e28e      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b0:	4b8c      	ldr	r3, [pc, #560]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	2380      	movs	r3, #128	; 0x80
 80045b6:	029b      	lsls	r3, r3, #10
 80045b8:	4013      	ands	r3, r2
 80045ba:	d0f0      	beq.n	800459e <HAL_RCC_OscConfig+0xee>
 80045bc:	e015      	b.n	80045ea <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045be:	f7ff fc67 	bl	8003e90 <HAL_GetTick>
 80045c2:	0003      	movs	r3, r0
 80045c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045c8:	f7ff fc62 	bl	8003e90 <HAL_GetTick>
 80045cc:	0002      	movs	r2, r0
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b64      	cmp	r3, #100	; 0x64
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e279      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045da:	4b82      	ldr	r3, [pc, #520]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	2380      	movs	r3, #128	; 0x80
 80045e0:	029b      	lsls	r3, r3, #10
 80045e2:	4013      	ands	r3, r2
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x118>
 80045e6:	e000      	b.n	80045ea <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2202      	movs	r2, #2
 80045f0:	4013      	ands	r3, r2
 80045f2:	d100      	bne.n	80045f6 <HAL_RCC_OscConfig+0x146>
 80045f4:	e06c      	b.n	80046d0 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80045f6:	4b7b      	ldr	r3, [pc, #492]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	220c      	movs	r2, #12
 80045fc:	4013      	ands	r3, r2
 80045fe:	d00e      	beq.n	800461e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004600:	4b78      	ldr	r3, [pc, #480]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	220c      	movs	r2, #12
 8004606:	4013      	ands	r3, r2
 8004608:	2b08      	cmp	r3, #8
 800460a:	d11f      	bne.n	800464c <HAL_RCC_OscConfig+0x19c>
 800460c:	4b75      	ldr	r3, [pc, #468]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	23c0      	movs	r3, #192	; 0xc0
 8004612:	025b      	lsls	r3, r3, #9
 8004614:	401a      	ands	r2, r3
 8004616:	2380      	movs	r3, #128	; 0x80
 8004618:	021b      	lsls	r3, r3, #8
 800461a:	429a      	cmp	r2, r3
 800461c:	d116      	bne.n	800464c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800461e:	4b71      	ldr	r3, [pc, #452]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2202      	movs	r2, #2
 8004624:	4013      	ands	r3, r2
 8004626:	d005      	beq.n	8004634 <HAL_RCC_OscConfig+0x184>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d001      	beq.n	8004634 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e24c      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004634:	4b6b      	ldr	r3, [pc, #428]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	22f8      	movs	r2, #248	; 0xf8
 800463a:	4393      	bics	r3, r2
 800463c:	0019      	movs	r1, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	00da      	lsls	r2, r3, #3
 8004644:	4b67      	ldr	r3, [pc, #412]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 8004646:	430a      	orrs	r2, r1
 8004648:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464a:	e041      	b.n	80046d0 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d024      	beq.n	800469e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004654:	4b63      	ldr	r3, [pc, #396]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	4b62      	ldr	r3, [pc, #392]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 800465a:	2101      	movs	r1, #1
 800465c:	430a      	orrs	r2, r1
 800465e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004660:	f7ff fc16 	bl	8003e90 <HAL_GetTick>
 8004664:	0003      	movs	r3, r0
 8004666:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800466a:	f7ff fc11 	bl	8003e90 <HAL_GetTick>
 800466e:	0002      	movs	r2, r0
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e228      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467c:	4b59      	ldr	r3, [pc, #356]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2202      	movs	r2, #2
 8004682:	4013      	ands	r3, r2
 8004684:	d0f1      	beq.n	800466a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004686:	4b57      	ldr	r3, [pc, #348]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	22f8      	movs	r2, #248	; 0xf8
 800468c:	4393      	bics	r3, r2
 800468e:	0019      	movs	r1, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	00da      	lsls	r2, r3, #3
 8004696:	4b53      	ldr	r3, [pc, #332]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 8004698:	430a      	orrs	r2, r1
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	e018      	b.n	80046d0 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800469e:	4b51      	ldr	r3, [pc, #324]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4b50      	ldr	r3, [pc, #320]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 80046a4:	2101      	movs	r1, #1
 80046a6:	438a      	bics	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046aa:	f7ff fbf1 	bl	8003e90 <HAL_GetTick>
 80046ae:	0003      	movs	r3, r0
 80046b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046b4:	f7ff fbec 	bl	8003e90 <HAL_GetTick>
 80046b8:	0002      	movs	r2, r0
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e203      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046c6:	4b47      	ldr	r3, [pc, #284]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2202      	movs	r2, #2
 80046cc:	4013      	ands	r3, r2
 80046ce:	d1f1      	bne.n	80046b4 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2208      	movs	r2, #8
 80046d6:	4013      	ands	r3, r2
 80046d8:	d036      	beq.n	8004748 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d019      	beq.n	8004716 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046e2:	4b40      	ldr	r3, [pc, #256]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 80046e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046e6:	4b3f      	ldr	r3, [pc, #252]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 80046e8:	2101      	movs	r1, #1
 80046ea:	430a      	orrs	r2, r1
 80046ec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ee:	f7ff fbcf 	bl	8003e90 <HAL_GetTick>
 80046f2:	0003      	movs	r3, r0
 80046f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046f8:	f7ff fbca 	bl	8003e90 <HAL_GetTick>
 80046fc:	0002      	movs	r2, r0
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e1e1      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800470a:	4b36      	ldr	r3, [pc, #216]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	2202      	movs	r2, #2
 8004710:	4013      	ands	r3, r2
 8004712:	d0f1      	beq.n	80046f8 <HAL_RCC_OscConfig+0x248>
 8004714:	e018      	b.n	8004748 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004716:	4b33      	ldr	r3, [pc, #204]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 8004718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800471a:	4b32      	ldr	r3, [pc, #200]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 800471c:	2101      	movs	r1, #1
 800471e:	438a      	bics	r2, r1
 8004720:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004722:	f7ff fbb5 	bl	8003e90 <HAL_GetTick>
 8004726:	0003      	movs	r3, r0
 8004728:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800472c:	f7ff fbb0 	bl	8003e90 <HAL_GetTick>
 8004730:	0002      	movs	r2, r0
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e1c7      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800473e:	4b29      	ldr	r3, [pc, #164]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	2202      	movs	r2, #2
 8004744:	4013      	ands	r3, r2
 8004746:	d1f1      	bne.n	800472c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2204      	movs	r2, #4
 800474e:	4013      	ands	r3, r2
 8004750:	d100      	bne.n	8004754 <HAL_RCC_OscConfig+0x2a4>
 8004752:	e0b5      	b.n	80048c0 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004754:	201f      	movs	r0, #31
 8004756:	183b      	adds	r3, r7, r0
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800475c:	4b21      	ldr	r3, [pc, #132]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	2380      	movs	r3, #128	; 0x80
 8004762:	055b      	lsls	r3, r3, #21
 8004764:	4013      	ands	r3, r2
 8004766:	d110      	bne.n	800478a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004768:	4b1e      	ldr	r3, [pc, #120]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 800476a:	69da      	ldr	r2, [r3, #28]
 800476c:	4b1d      	ldr	r3, [pc, #116]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 800476e:	2180      	movs	r1, #128	; 0x80
 8004770:	0549      	lsls	r1, r1, #21
 8004772:	430a      	orrs	r2, r1
 8004774:	61da      	str	r2, [r3, #28]
 8004776:	4b1b      	ldr	r3, [pc, #108]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 8004778:	69da      	ldr	r2, [r3, #28]
 800477a:	2380      	movs	r3, #128	; 0x80
 800477c:	055b      	lsls	r3, r3, #21
 800477e:	4013      	ands	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004784:	183b      	adds	r3, r7, r0
 8004786:	2201      	movs	r2, #1
 8004788:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478a:	4b19      	ldr	r3, [pc, #100]	; (80047f0 <HAL_RCC_OscConfig+0x340>)
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	2380      	movs	r3, #128	; 0x80
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	4013      	ands	r3, r2
 8004794:	d11a      	bne.n	80047cc <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004796:	4b16      	ldr	r3, [pc, #88]	; (80047f0 <HAL_RCC_OscConfig+0x340>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	4b15      	ldr	r3, [pc, #84]	; (80047f0 <HAL_RCC_OscConfig+0x340>)
 800479c:	2180      	movs	r1, #128	; 0x80
 800479e:	0049      	lsls	r1, r1, #1
 80047a0:	430a      	orrs	r2, r1
 80047a2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a4:	f7ff fb74 	bl	8003e90 <HAL_GetTick>
 80047a8:	0003      	movs	r3, r0
 80047aa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ae:	f7ff fb6f 	bl	8003e90 <HAL_GetTick>
 80047b2:	0002      	movs	r2, r0
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b64      	cmp	r3, #100	; 0x64
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e186      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <HAL_RCC_OscConfig+0x340>)
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	2380      	movs	r3, #128	; 0x80
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	4013      	ands	r3, r2
 80047ca:	d0f0      	beq.n	80047ae <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d10f      	bne.n	80047f4 <HAL_RCC_OscConfig+0x344>
 80047d4:	4b03      	ldr	r3, [pc, #12]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 80047d6:	6a1a      	ldr	r2, [r3, #32]
 80047d8:	4b02      	ldr	r3, [pc, #8]	; (80047e4 <HAL_RCC_OscConfig+0x334>)
 80047da:	2101      	movs	r1, #1
 80047dc:	430a      	orrs	r2, r1
 80047de:	621a      	str	r2, [r3, #32]
 80047e0:	e036      	b.n	8004850 <HAL_RCC_OscConfig+0x3a0>
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	40021000 	.word	0x40021000
 80047e8:	fffeffff 	.word	0xfffeffff
 80047ec:	fffbffff 	.word	0xfffbffff
 80047f0:	40007000 	.word	0x40007000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10c      	bne.n	8004816 <HAL_RCC_OscConfig+0x366>
 80047fc:	4bb6      	ldr	r3, [pc, #728]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 80047fe:	6a1a      	ldr	r2, [r3, #32]
 8004800:	4bb5      	ldr	r3, [pc, #724]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004802:	2101      	movs	r1, #1
 8004804:	438a      	bics	r2, r1
 8004806:	621a      	str	r2, [r3, #32]
 8004808:	4bb3      	ldr	r3, [pc, #716]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 800480a:	6a1a      	ldr	r2, [r3, #32]
 800480c:	4bb2      	ldr	r3, [pc, #712]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 800480e:	2104      	movs	r1, #4
 8004810:	438a      	bics	r2, r1
 8004812:	621a      	str	r2, [r3, #32]
 8004814:	e01c      	b.n	8004850 <HAL_RCC_OscConfig+0x3a0>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2b05      	cmp	r3, #5
 800481c:	d10c      	bne.n	8004838 <HAL_RCC_OscConfig+0x388>
 800481e:	4bae      	ldr	r3, [pc, #696]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004820:	6a1a      	ldr	r2, [r3, #32]
 8004822:	4bad      	ldr	r3, [pc, #692]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004824:	2104      	movs	r1, #4
 8004826:	430a      	orrs	r2, r1
 8004828:	621a      	str	r2, [r3, #32]
 800482a:	4bab      	ldr	r3, [pc, #684]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 800482c:	6a1a      	ldr	r2, [r3, #32]
 800482e:	4baa      	ldr	r3, [pc, #680]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004830:	2101      	movs	r1, #1
 8004832:	430a      	orrs	r2, r1
 8004834:	621a      	str	r2, [r3, #32]
 8004836:	e00b      	b.n	8004850 <HAL_RCC_OscConfig+0x3a0>
 8004838:	4ba7      	ldr	r3, [pc, #668]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 800483a:	6a1a      	ldr	r2, [r3, #32]
 800483c:	4ba6      	ldr	r3, [pc, #664]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 800483e:	2101      	movs	r1, #1
 8004840:	438a      	bics	r2, r1
 8004842:	621a      	str	r2, [r3, #32]
 8004844:	4ba4      	ldr	r3, [pc, #656]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004846:	6a1a      	ldr	r2, [r3, #32]
 8004848:	4ba3      	ldr	r3, [pc, #652]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 800484a:	2104      	movs	r1, #4
 800484c:	438a      	bics	r2, r1
 800484e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d014      	beq.n	8004882 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004858:	f7ff fb1a 	bl	8003e90 <HAL_GetTick>
 800485c:	0003      	movs	r3, r0
 800485e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004860:	e009      	b.n	8004876 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004862:	f7ff fb15 	bl	8003e90 <HAL_GetTick>
 8004866:	0002      	movs	r2, r0
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	4a9b      	ldr	r2, [pc, #620]	; (8004adc <HAL_RCC_OscConfig+0x62c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e12b      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004876:	4b98      	ldr	r3, [pc, #608]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	2202      	movs	r2, #2
 800487c:	4013      	ands	r3, r2
 800487e:	d0f0      	beq.n	8004862 <HAL_RCC_OscConfig+0x3b2>
 8004880:	e013      	b.n	80048aa <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004882:	f7ff fb05 	bl	8003e90 <HAL_GetTick>
 8004886:	0003      	movs	r3, r0
 8004888:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488a:	e009      	b.n	80048a0 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800488c:	f7ff fb00 	bl	8003e90 <HAL_GetTick>
 8004890:	0002      	movs	r2, r0
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	4a91      	ldr	r2, [pc, #580]	; (8004adc <HAL_RCC_OscConfig+0x62c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e116      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a0:	4b8d      	ldr	r3, [pc, #564]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	2202      	movs	r2, #2
 80048a6:	4013      	ands	r3, r2
 80048a8:	d1f0      	bne.n	800488c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048aa:	231f      	movs	r3, #31
 80048ac:	18fb      	adds	r3, r7, r3
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d105      	bne.n	80048c0 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b4:	4b88      	ldr	r3, [pc, #544]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	4b87      	ldr	r3, [pc, #540]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 80048ba:	4989      	ldr	r1, [pc, #548]	; (8004ae0 <HAL_RCC_OscConfig+0x630>)
 80048bc:	400a      	ands	r2, r1
 80048be:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2210      	movs	r2, #16
 80048c6:	4013      	ands	r3, r2
 80048c8:	d063      	beq.n	8004992 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d12a      	bne.n	8004928 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80048d2:	4b81      	ldr	r3, [pc, #516]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 80048d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048d6:	4b80      	ldr	r3, [pc, #512]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 80048d8:	2104      	movs	r1, #4
 80048da:	430a      	orrs	r2, r1
 80048dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80048de:	4b7e      	ldr	r3, [pc, #504]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 80048e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048e2:	4b7d      	ldr	r3, [pc, #500]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 80048e4:	2101      	movs	r1, #1
 80048e6:	430a      	orrs	r2, r1
 80048e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ea:	f7ff fad1 	bl	8003e90 <HAL_GetTick>
 80048ee:	0003      	movs	r3, r0
 80048f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80048f4:	f7ff facc 	bl	8003e90 <HAL_GetTick>
 80048f8:	0002      	movs	r2, r0
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e0e3      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004906:	4b74      	ldr	r3, [pc, #464]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490a:	2202      	movs	r2, #2
 800490c:	4013      	ands	r3, r2
 800490e:	d0f1      	beq.n	80048f4 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004910:	4b71      	ldr	r3, [pc, #452]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004914:	22f8      	movs	r2, #248	; 0xf8
 8004916:	4393      	bics	r3, r2
 8004918:	0019      	movs	r1, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	00da      	lsls	r2, r3, #3
 8004920:	4b6d      	ldr	r3, [pc, #436]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004922:	430a      	orrs	r2, r1
 8004924:	635a      	str	r2, [r3, #52]	; 0x34
 8004926:	e034      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	3305      	adds	r3, #5
 800492e:	d111      	bne.n	8004954 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004930:	4b69      	ldr	r3, [pc, #420]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004934:	4b68      	ldr	r3, [pc, #416]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004936:	2104      	movs	r1, #4
 8004938:	438a      	bics	r2, r1
 800493a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800493c:	4b66      	ldr	r3, [pc, #408]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 800493e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004940:	22f8      	movs	r2, #248	; 0xf8
 8004942:	4393      	bics	r3, r2
 8004944:	0019      	movs	r1, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	00da      	lsls	r2, r3, #3
 800494c:	4b62      	ldr	r3, [pc, #392]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 800494e:	430a      	orrs	r2, r1
 8004950:	635a      	str	r2, [r3, #52]	; 0x34
 8004952:	e01e      	b.n	8004992 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004954:	4b60      	ldr	r3, [pc, #384]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004958:	4b5f      	ldr	r3, [pc, #380]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 800495a:	2104      	movs	r1, #4
 800495c:	430a      	orrs	r2, r1
 800495e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004960:	4b5d      	ldr	r3, [pc, #372]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004964:	4b5c      	ldr	r3, [pc, #368]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004966:	2101      	movs	r1, #1
 8004968:	438a      	bics	r2, r1
 800496a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800496c:	f7ff fa90 	bl	8003e90 <HAL_GetTick>
 8004970:	0003      	movs	r3, r0
 8004972:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004976:	f7ff fa8b 	bl	8003e90 <HAL_GetTick>
 800497a:	0002      	movs	r2, r0
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e0a2      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004988:	4b53      	ldr	r3, [pc, #332]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 800498a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498c:	2202      	movs	r2, #2
 800498e:	4013      	ands	r3, r2
 8004990:	d1f1      	bne.n	8004976 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d100      	bne.n	800499c <HAL_RCC_OscConfig+0x4ec>
 800499a:	e097      	b.n	8004acc <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800499c:	4b4e      	ldr	r3, [pc, #312]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	220c      	movs	r2, #12
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d100      	bne.n	80049aa <HAL_RCC_OscConfig+0x4fa>
 80049a8:	e06b      	b.n	8004a82 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d14c      	bne.n	8004a4c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b2:	4b49      	ldr	r3, [pc, #292]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	4b48      	ldr	r3, [pc, #288]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 80049b8:	494a      	ldr	r1, [pc, #296]	; (8004ae4 <HAL_RCC_OscConfig+0x634>)
 80049ba:	400a      	ands	r2, r1
 80049bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049be:	f7ff fa67 	bl	8003e90 <HAL_GetTick>
 80049c2:	0003      	movs	r3, r0
 80049c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049c8:	f7ff fa62 	bl	8003e90 <HAL_GetTick>
 80049cc:	0002      	movs	r2, r0
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e079      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049da:	4b3f      	ldr	r3, [pc, #252]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	2380      	movs	r3, #128	; 0x80
 80049e0:	049b      	lsls	r3, r3, #18
 80049e2:	4013      	ands	r3, r2
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049e6:	4b3c      	ldr	r3, [pc, #240]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	220f      	movs	r2, #15
 80049ec:	4393      	bics	r3, r2
 80049ee:	0019      	movs	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f4:	4b38      	ldr	r3, [pc, #224]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 80049f6:	430a      	orrs	r2, r1
 80049f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80049fa:	4b37      	ldr	r3, [pc, #220]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	4a3a      	ldr	r2, [pc, #232]	; (8004ae8 <HAL_RCC_OscConfig+0x638>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	0019      	movs	r1, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	4b32      	ldr	r3, [pc, #200]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004a10:	430a      	orrs	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a14:	4b30      	ldr	r3, [pc, #192]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	4b2f      	ldr	r3, [pc, #188]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004a1a:	2180      	movs	r1, #128	; 0x80
 8004a1c:	0449      	lsls	r1, r1, #17
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a22:	f7ff fa35 	bl	8003e90 <HAL_GetTick>
 8004a26:	0003      	movs	r3, r0
 8004a28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a2c:	f7ff fa30 	bl	8003e90 <HAL_GetTick>
 8004a30:	0002      	movs	r2, r0
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e047      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a3e:	4b26      	ldr	r3, [pc, #152]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	2380      	movs	r3, #128	; 0x80
 8004a44:	049b      	lsls	r3, r3, #18
 8004a46:	4013      	ands	r3, r2
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCC_OscConfig+0x57c>
 8004a4a:	e03f      	b.n	8004acc <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a4c:	4b22      	ldr	r3, [pc, #136]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	4b21      	ldr	r3, [pc, #132]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004a52:	4924      	ldr	r1, [pc, #144]	; (8004ae4 <HAL_RCC_OscConfig+0x634>)
 8004a54:	400a      	ands	r2, r1
 8004a56:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a58:	f7ff fa1a 	bl	8003e90 <HAL_GetTick>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a62:	f7ff fa15 	bl	8003e90 <HAL_GetTick>
 8004a66:	0002      	movs	r2, r0
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e02c      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a74:	4b18      	ldr	r3, [pc, #96]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	2380      	movs	r3, #128	; 0x80
 8004a7a:	049b      	lsls	r3, r3, #18
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d1f0      	bne.n	8004a62 <HAL_RCC_OscConfig+0x5b2>
 8004a80:	e024      	b.n	8004acc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e01f      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004a8e:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004a94:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <HAL_RCC_OscConfig+0x628>)
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	23c0      	movs	r3, #192	; 0xc0
 8004a9e:	025b      	lsls	r3, r3, #9
 8004aa0:	401a      	ands	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d10e      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	220f      	movs	r2, #15
 8004aae:	401a      	ands	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d107      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	23f0      	movs	r3, #240	; 0xf0
 8004abc:	039b      	lsls	r3, r3, #14
 8004abe:	401a      	ands	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d001      	beq.n	8004acc <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e000      	b.n	8004ace <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	0018      	movs	r0, r3
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	b008      	add	sp, #32
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	46c0      	nop			; (mov r8, r8)
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	00001388 	.word	0x00001388
 8004ae0:	efffffff 	.word	0xefffffff
 8004ae4:	feffffff 	.word	0xfeffffff
 8004ae8:	ffc27fff 	.word	0xffc27fff

08004aec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0b3      	b.n	8004c68 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b00:	4b5b      	ldr	r3, [pc, #364]	; (8004c70 <HAL_RCC_ClockConfig+0x184>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2201      	movs	r2, #1
 8004b06:	4013      	ands	r3, r2
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d911      	bls.n	8004b32 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0e:	4b58      	ldr	r3, [pc, #352]	; (8004c70 <HAL_RCC_ClockConfig+0x184>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2201      	movs	r2, #1
 8004b14:	4393      	bics	r3, r2
 8004b16:	0019      	movs	r1, r3
 8004b18:	4b55      	ldr	r3, [pc, #340]	; (8004c70 <HAL_RCC_ClockConfig+0x184>)
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b20:	4b53      	ldr	r3, [pc, #332]	; (8004c70 <HAL_RCC_ClockConfig+0x184>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2201      	movs	r2, #1
 8004b26:	4013      	ands	r3, r2
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d001      	beq.n	8004b32 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e09a      	b.n	8004c68 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2202      	movs	r2, #2
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d015      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2204      	movs	r2, #4
 8004b42:	4013      	ands	r3, r2
 8004b44:	d006      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b46:	4b4b      	ldr	r3, [pc, #300]	; (8004c74 <HAL_RCC_ClockConfig+0x188>)
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	4b4a      	ldr	r3, [pc, #296]	; (8004c74 <HAL_RCC_ClockConfig+0x188>)
 8004b4c:	21e0      	movs	r1, #224	; 0xe0
 8004b4e:	00c9      	lsls	r1, r1, #3
 8004b50:	430a      	orrs	r2, r1
 8004b52:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b54:	4b47      	ldr	r3, [pc, #284]	; (8004c74 <HAL_RCC_ClockConfig+0x188>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	22f0      	movs	r2, #240	; 0xf0
 8004b5a:	4393      	bics	r3, r2
 8004b5c:	0019      	movs	r1, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	4b44      	ldr	r3, [pc, #272]	; (8004c74 <HAL_RCC_ClockConfig+0x188>)
 8004b64:	430a      	orrs	r2, r1
 8004b66:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d040      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d107      	bne.n	8004b8a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7a:	4b3e      	ldr	r3, [pc, #248]	; (8004c74 <HAL_RCC_ClockConfig+0x188>)
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	2380      	movs	r3, #128	; 0x80
 8004b80:	029b      	lsls	r3, r3, #10
 8004b82:	4013      	ands	r3, r2
 8004b84:	d114      	bne.n	8004bb0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e06e      	b.n	8004c68 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d107      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b92:	4b38      	ldr	r3, [pc, #224]	; (8004c74 <HAL_RCC_ClockConfig+0x188>)
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	2380      	movs	r3, #128	; 0x80
 8004b98:	049b      	lsls	r3, r3, #18
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d108      	bne.n	8004bb0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e062      	b.n	8004c68 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba2:	4b34      	ldr	r3, [pc, #208]	; (8004c74 <HAL_RCC_ClockConfig+0x188>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	4013      	ands	r3, r2
 8004baa:	d101      	bne.n	8004bb0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e05b      	b.n	8004c68 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bb0:	4b30      	ldr	r3, [pc, #192]	; (8004c74 <HAL_RCC_ClockConfig+0x188>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	4393      	bics	r3, r2
 8004bb8:	0019      	movs	r1, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	4b2d      	ldr	r3, [pc, #180]	; (8004c74 <HAL_RCC_ClockConfig+0x188>)
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bc4:	f7ff f964 	bl	8003e90 <HAL_GetTick>
 8004bc8:	0003      	movs	r3, r0
 8004bca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bcc:	e009      	b.n	8004be2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bce:	f7ff f95f 	bl	8003e90 <HAL_GetTick>
 8004bd2:	0002      	movs	r2, r0
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	4a27      	ldr	r2, [pc, #156]	; (8004c78 <HAL_RCC_ClockConfig+0x18c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e042      	b.n	8004c68 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be2:	4b24      	ldr	r3, [pc, #144]	; (8004c74 <HAL_RCC_ClockConfig+0x188>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	220c      	movs	r2, #12
 8004be8:	401a      	ands	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d1ec      	bne.n	8004bce <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bf4:	4b1e      	ldr	r3, [pc, #120]	; (8004c70 <HAL_RCC_ClockConfig+0x184>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d211      	bcs.n	8004c26 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c02:	4b1b      	ldr	r3, [pc, #108]	; (8004c70 <HAL_RCC_ClockConfig+0x184>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2201      	movs	r2, #1
 8004c08:	4393      	bics	r3, r2
 8004c0a:	0019      	movs	r1, r3
 8004c0c:	4b18      	ldr	r3, [pc, #96]	; (8004c70 <HAL_RCC_ClockConfig+0x184>)
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c14:	4b16      	ldr	r3, [pc, #88]	; (8004c70 <HAL_RCC_ClockConfig+0x184>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d001      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e020      	b.n	8004c68 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2204      	movs	r2, #4
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	d009      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c30:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <HAL_RCC_ClockConfig+0x188>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a11      	ldr	r2, [pc, #68]	; (8004c7c <HAL_RCC_ClockConfig+0x190>)
 8004c36:	4013      	ands	r3, r2
 8004c38:	0019      	movs	r1, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <HAL_RCC_ClockConfig+0x188>)
 8004c40:	430a      	orrs	r2, r1
 8004c42:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c44:	f000 f820 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 8004c48:	0001      	movs	r1, r0
 8004c4a:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <HAL_RCC_ClockConfig+0x188>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	091b      	lsrs	r3, r3, #4
 8004c50:	220f      	movs	r2, #15
 8004c52:	4013      	ands	r3, r2
 8004c54:	4a0a      	ldr	r2, [pc, #40]	; (8004c80 <HAL_RCC_ClockConfig+0x194>)
 8004c56:	5cd3      	ldrb	r3, [r2, r3]
 8004c58:	000a      	movs	r2, r1
 8004c5a:	40da      	lsrs	r2, r3
 8004c5c:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <HAL_RCC_ClockConfig+0x198>)
 8004c5e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004c60:	2000      	movs	r0, #0
 8004c62:	f7ff f8cf 	bl	8003e04 <HAL_InitTick>
  
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	0018      	movs	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	b004      	add	sp, #16
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40022000 	.word	0x40022000
 8004c74:	40021000 	.word	0x40021000
 8004c78:	00001388 	.word	0x00001388
 8004c7c:	fffff8ff 	.word	0xfffff8ff
 8004c80:	0800a178 	.word	0x0800a178
 8004c84:	20000004 	.word	0x20000004

08004c88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	2300      	movs	r3, #0
 8004c94:	60bb      	str	r3, [r7, #8]
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004ca2:	4b21      	ldr	r3, [pc, #132]	; (8004d28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	220c      	movs	r2, #12
 8004cac:	4013      	ands	r3, r2
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d002      	beq.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x30>
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d003      	beq.n	8004cbe <HAL_RCC_GetSysClockFreq+0x36>
 8004cb6:	e02e      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cb8:	4b1c      	ldr	r3, [pc, #112]	; (8004d2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004cba:	613b      	str	r3, [r7, #16]
      break;
 8004cbc:	e02e      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	0c9b      	lsrs	r3, r3, #18
 8004cc2:	220f      	movs	r2, #15
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	4a1a      	ldr	r2, [pc, #104]	; (8004d30 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004cc8:	5cd3      	ldrb	r3, [r2, r3]
 8004cca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004ccc:	4b16      	ldr	r3, [pc, #88]	; (8004d28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	220f      	movs	r2, #15
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	4a17      	ldr	r2, [pc, #92]	; (8004d34 <HAL_RCC_GetSysClockFreq+0xac>)
 8004cd6:	5cd3      	ldrb	r3, [r2, r3]
 8004cd8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	23c0      	movs	r3, #192	; 0xc0
 8004cde:	025b      	lsls	r3, r3, #9
 8004ce0:	401a      	ands	r2, r3
 8004ce2:	2380      	movs	r3, #128	; 0x80
 8004ce4:	025b      	lsls	r3, r3, #9
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d109      	bne.n	8004cfe <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	480f      	ldr	r0, [pc, #60]	; (8004d2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004cee:	f7fb fa27 	bl	8000140 <__udivsi3>
 8004cf2:	0003      	movs	r3, r0
 8004cf4:	001a      	movs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4353      	muls	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	480a      	ldr	r0, [pc, #40]	; (8004d2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d02:	f7fb fa1d 	bl	8000140 <__udivsi3>
 8004d06:	0003      	movs	r3, r0
 8004d08:	001a      	movs	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4353      	muls	r3, r2
 8004d0e:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	613b      	str	r3, [r7, #16]
      break;
 8004d14:	e002      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d16:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d18:	613b      	str	r3, [r7, #16]
      break;
 8004d1a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004d1c:	693b      	ldr	r3, [r7, #16]
}
 8004d1e:	0018      	movs	r0, r3
 8004d20:	46bd      	mov	sp, r7
 8004d22:	b006      	add	sp, #24
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	46c0      	nop			; (mov r8, r8)
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	007a1200 	.word	0x007a1200
 8004d30:	0800a190 	.word	0x0800a190
 8004d34:	0800a1a0 	.word	0x0800a1a0

08004d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d3c:	4b02      	ldr	r3, [pc, #8]	; (8004d48 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
}
 8004d40:	0018      	movs	r0, r3
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	20000004 	.word	0x20000004

08004d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004d50:	f7ff fff2 	bl	8004d38 <HAL_RCC_GetHCLKFreq>
 8004d54:	0001      	movs	r1, r0
 8004d56:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	0a1b      	lsrs	r3, r3, #8
 8004d5c:	2207      	movs	r2, #7
 8004d5e:	4013      	ands	r3, r2
 8004d60:	4a04      	ldr	r2, [pc, #16]	; (8004d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d62:	5cd3      	ldrb	r3, [r2, r3]
 8004d64:	40d9      	lsrs	r1, r3
 8004d66:	000b      	movs	r3, r1
}    
 8004d68:	0018      	movs	r0, r3
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	40021000 	.word	0x40021000
 8004d74:	0800a188 	.word	0x0800a188

08004d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e042      	b.n	8004e10 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	223d      	movs	r2, #61	; 0x3d
 8004d8e:	5c9b      	ldrb	r3, [r3, r2]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d107      	bne.n	8004da6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	223c      	movs	r2, #60	; 0x3c
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	0018      	movs	r0, r3
 8004da2:	f7fe fe17 	bl	80039d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	223d      	movs	r2, #61	; 0x3d
 8004daa:	2102      	movs	r1, #2
 8004dac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3304      	adds	r3, #4
 8004db6:	0019      	movs	r1, r3
 8004db8:	0010      	movs	r0, r2
 8004dba:	f000 fccb 	bl	8005754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2246      	movs	r2, #70	; 0x46
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	223e      	movs	r2, #62	; 0x3e
 8004dca:	2101      	movs	r1, #1
 8004dcc:	5499      	strb	r1, [r3, r2]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	223f      	movs	r2, #63	; 0x3f
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	5499      	strb	r1, [r3, r2]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2240      	movs	r2, #64	; 0x40
 8004dda:	2101      	movs	r1, #1
 8004ddc:	5499      	strb	r1, [r3, r2]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2241      	movs	r2, #65	; 0x41
 8004de2:	2101      	movs	r1, #1
 8004de4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2242      	movs	r2, #66	; 0x42
 8004dea:	2101      	movs	r1, #1
 8004dec:	5499      	strb	r1, [r3, r2]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2243      	movs	r2, #67	; 0x43
 8004df2:	2101      	movs	r1, #1
 8004df4:	5499      	strb	r1, [r3, r2]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2244      	movs	r2, #68	; 0x44
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	5499      	strb	r1, [r3, r2]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2245      	movs	r2, #69	; 0x45
 8004e02:	2101      	movs	r1, #1
 8004e04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	223d      	movs	r2, #61	; 0x3d
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	0018      	movs	r0, r3
 8004e12:	46bd      	mov	sp, r7
 8004e14:	b002      	add	sp, #8
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	223d      	movs	r2, #61	; 0x3d
 8004e24:	5c9b      	ldrb	r3, [r3, r2]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d001      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e035      	b.n	8004e9c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	223d      	movs	r2, #61	; 0x3d
 8004e34:	2102      	movs	r1, #2
 8004e36:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2101      	movs	r1, #1
 8004e44:	430a      	orrs	r2, r1
 8004e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a15      	ldr	r2, [pc, #84]	; (8004ea4 <HAL_TIM_Base_Start_IT+0x8c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d009      	beq.n	8004e66 <HAL_TIM_Base_Start_IT+0x4e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a14      	ldr	r2, [pc, #80]	; (8004ea8 <HAL_TIM_Base_Start_IT+0x90>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d004      	beq.n	8004e66 <HAL_TIM_Base_Start_IT+0x4e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a12      	ldr	r2, [pc, #72]	; (8004eac <HAL_TIM_Base_Start_IT+0x94>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d111      	bne.n	8004e8a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	2207      	movs	r2, #7
 8004e6e:	4013      	ands	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b06      	cmp	r3, #6
 8004e76:	d010      	beq.n	8004e9a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2101      	movs	r1, #1
 8004e84:	430a      	orrs	r2, r1
 8004e86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e88:	e007      	b.n	8004e9a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2101      	movs	r1, #1
 8004e96:	430a      	orrs	r2, r1
 8004e98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b004      	add	sp, #16
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40012c00 	.word	0x40012c00
 8004ea8:	40000400 	.word	0x40000400
 8004eac:	40014000 	.word	0x40014000

08004eb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e042      	b.n	8004f48 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	223d      	movs	r2, #61	; 0x3d
 8004ec6:	5c9b      	ldrb	r3, [r3, r2]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d107      	bne.n	8004ede <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	223c      	movs	r2, #60	; 0x3c
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f000 f839 	bl	8004f50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	223d      	movs	r2, #61	; 0x3d
 8004ee2:	2102      	movs	r1, #2
 8004ee4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3304      	adds	r3, #4
 8004eee:	0019      	movs	r1, r3
 8004ef0:	0010      	movs	r0, r2
 8004ef2:	f000 fc2f 	bl	8005754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2246      	movs	r2, #70	; 0x46
 8004efa:	2101      	movs	r1, #1
 8004efc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	223e      	movs	r2, #62	; 0x3e
 8004f02:	2101      	movs	r1, #1
 8004f04:	5499      	strb	r1, [r3, r2]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	223f      	movs	r2, #63	; 0x3f
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	5499      	strb	r1, [r3, r2]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2240      	movs	r2, #64	; 0x40
 8004f12:	2101      	movs	r1, #1
 8004f14:	5499      	strb	r1, [r3, r2]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2241      	movs	r2, #65	; 0x41
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2242      	movs	r2, #66	; 0x42
 8004f22:	2101      	movs	r1, #1
 8004f24:	5499      	strb	r1, [r3, r2]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2243      	movs	r2, #67	; 0x43
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	5499      	strb	r1, [r3, r2]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2244      	movs	r2, #68	; 0x44
 8004f32:	2101      	movs	r1, #1
 8004f34:	5499      	strb	r1, [r3, r2]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2245      	movs	r2, #69	; 0x45
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	223d      	movs	r2, #61	; 0x3d
 8004f42:	2101      	movs	r1, #1
 8004f44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	0018      	movs	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b002      	add	sp, #8
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f58:	46c0      	nop			; (mov r8, r8)
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	b002      	add	sp, #8
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d108      	bne.n	8004f82 <HAL_TIM_PWM_Start+0x22>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	223e      	movs	r2, #62	; 0x3e
 8004f74:	5c9b      	ldrb	r3, [r3, r2]
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	1e5a      	subs	r2, r3, #1
 8004f7c:	4193      	sbcs	r3, r2
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	e01f      	b.n	8004fc2 <HAL_TIM_PWM_Start+0x62>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d108      	bne.n	8004f9a <HAL_TIM_PWM_Start+0x3a>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	223f      	movs	r2, #63	; 0x3f
 8004f8c:	5c9b      	ldrb	r3, [r3, r2]
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	3b01      	subs	r3, #1
 8004f92:	1e5a      	subs	r2, r3, #1
 8004f94:	4193      	sbcs	r3, r2
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	e013      	b.n	8004fc2 <HAL_TIM_PWM_Start+0x62>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d108      	bne.n	8004fb2 <HAL_TIM_PWM_Start+0x52>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2240      	movs	r2, #64	; 0x40
 8004fa4:	5c9b      	ldrb	r3, [r3, r2]
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	1e5a      	subs	r2, r3, #1
 8004fac:	4193      	sbcs	r3, r2
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	e007      	b.n	8004fc2 <HAL_TIM_PWM_Start+0x62>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2241      	movs	r2, #65	; 0x41
 8004fb6:	5c9b      	ldrb	r3, [r3, r2]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	1e5a      	subs	r2, r3, #1
 8004fbe:	4193      	sbcs	r3, r2
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e06e      	b.n	80050a8 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d104      	bne.n	8004fda <HAL_TIM_PWM_Start+0x7a>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	223e      	movs	r2, #62	; 0x3e
 8004fd4:	2102      	movs	r1, #2
 8004fd6:	5499      	strb	r1, [r3, r2]
 8004fd8:	e013      	b.n	8005002 <HAL_TIM_PWM_Start+0xa2>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d104      	bne.n	8004fea <HAL_TIM_PWM_Start+0x8a>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	223f      	movs	r2, #63	; 0x3f
 8004fe4:	2102      	movs	r1, #2
 8004fe6:	5499      	strb	r1, [r3, r2]
 8004fe8:	e00b      	b.n	8005002 <HAL_TIM_PWM_Start+0xa2>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d104      	bne.n	8004ffa <HAL_TIM_PWM_Start+0x9a>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2240      	movs	r2, #64	; 0x40
 8004ff4:	2102      	movs	r1, #2
 8004ff6:	5499      	strb	r1, [r3, r2]
 8004ff8:	e003      	b.n	8005002 <HAL_TIM_PWM_Start+0xa2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2241      	movs	r2, #65	; 0x41
 8004ffe:	2102      	movs	r1, #2
 8005000:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6839      	ldr	r1, [r7, #0]
 8005008:	2201      	movs	r2, #1
 800500a:	0018      	movs	r0, r3
 800500c:	f000 fe14 	bl	8005c38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a26      	ldr	r2, [pc, #152]	; (80050b0 <HAL_TIM_PWM_Start+0x150>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00e      	beq.n	8005038 <HAL_TIM_PWM_Start+0xd8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a25      	ldr	r2, [pc, #148]	; (80050b4 <HAL_TIM_PWM_Start+0x154>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d009      	beq.n	8005038 <HAL_TIM_PWM_Start+0xd8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a23      	ldr	r2, [pc, #140]	; (80050b8 <HAL_TIM_PWM_Start+0x158>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d004      	beq.n	8005038 <HAL_TIM_PWM_Start+0xd8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a22      	ldr	r2, [pc, #136]	; (80050bc <HAL_TIM_PWM_Start+0x15c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d101      	bne.n	800503c <HAL_TIM_PWM_Start+0xdc>
 8005038:	2301      	movs	r3, #1
 800503a:	e000      	b.n	800503e <HAL_TIM_PWM_Start+0xde>
 800503c:	2300      	movs	r3, #0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d008      	beq.n	8005054 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2180      	movs	r1, #128	; 0x80
 800504e:	0209      	lsls	r1, r1, #8
 8005050:	430a      	orrs	r2, r1
 8005052:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a15      	ldr	r2, [pc, #84]	; (80050b0 <HAL_TIM_PWM_Start+0x150>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d009      	beq.n	8005072 <HAL_TIM_PWM_Start+0x112>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a17      	ldr	r2, [pc, #92]	; (80050c0 <HAL_TIM_PWM_Start+0x160>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d004      	beq.n	8005072 <HAL_TIM_PWM_Start+0x112>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a11      	ldr	r2, [pc, #68]	; (80050b4 <HAL_TIM_PWM_Start+0x154>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d111      	bne.n	8005096 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	2207      	movs	r2, #7
 800507a:	4013      	ands	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b06      	cmp	r3, #6
 8005082:	d010      	beq.n	80050a6 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2101      	movs	r1, #1
 8005090:	430a      	orrs	r2, r1
 8005092:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005094:	e007      	b.n	80050a6 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2101      	movs	r1, #1
 80050a2:	430a      	orrs	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	0018      	movs	r0, r3
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b004      	add	sp, #16
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40012c00 	.word	0x40012c00
 80050b4:	40014000 	.word	0x40014000
 80050b8:	40014400 	.word	0x40014400
 80050bc:	40014800 	.word	0x40014800
 80050c0:	40000400 	.word	0x40000400

080050c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e090      	b.n	80051fa <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	223d      	movs	r2, #61	; 0x3d
 80050dc:	5c9b      	ldrb	r3, [r3, r2]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d107      	bne.n	80050f4 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	223c      	movs	r2, #60	; 0x3c
 80050e8:	2100      	movs	r1, #0
 80050ea:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	0018      	movs	r0, r3
 80050f0:	f7fe fc1e 	bl	8003930 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	223d      	movs	r2, #61	; 0x3d
 80050f8:	2102      	movs	r1, #2
 80050fa:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	493f      	ldr	r1, [pc, #252]	; (8005204 <HAL_TIM_Encoder_Init+0x140>)
 8005108:	400a      	ands	r2, r1
 800510a:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3304      	adds	r3, #4
 8005114:	0019      	movs	r1, r3
 8005116:	0010      	movs	r0, r2
 8005118:	f000 fb1c 	bl	8005754 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	4313      	orrs	r3, r2
 800513c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	4a31      	ldr	r2, [pc, #196]	; (8005208 <HAL_TIM_Encoder_Init+0x144>)
 8005142:	4013      	ands	r3, r2
 8005144:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	4313      	orrs	r3, r2
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4a2c      	ldr	r2, [pc, #176]	; (800520c <HAL_TIM_Encoder_Init+0x148>)
 800515c:	4013      	ands	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	4a2b      	ldr	r2, [pc, #172]	; (8005210 <HAL_TIM_Encoder_Init+0x14c>)
 8005164:	4013      	ands	r3, r2
 8005166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	021b      	lsls	r3, r3, #8
 8005172:	4313      	orrs	r3, r2
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	011a      	lsls	r2, r3, #4
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	031b      	lsls	r3, r3, #12
 8005186:	4313      	orrs	r3, r2
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2222      	movs	r2, #34	; 0x22
 8005192:	4393      	bics	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2288      	movs	r2, #136	; 0x88
 800519a:	4393      	bics	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	4313      	orrs	r3, r2
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2246      	movs	r2, #70	; 0x46
 80051cc:	2101      	movs	r1, #1
 80051ce:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	223e      	movs	r2, #62	; 0x3e
 80051d4:	2101      	movs	r1, #1
 80051d6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	223f      	movs	r2, #63	; 0x3f
 80051dc:	2101      	movs	r1, #1
 80051de:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2242      	movs	r2, #66	; 0x42
 80051e4:	2101      	movs	r1, #1
 80051e6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2243      	movs	r2, #67	; 0x43
 80051ec:	2101      	movs	r1, #1
 80051ee:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	223d      	movs	r2, #61	; 0x3d
 80051f4:	2101      	movs	r1, #1
 80051f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	0018      	movs	r0, r3
 80051fc:	46bd      	mov	sp, r7
 80051fe:	b006      	add	sp, #24
 8005200:	bd80      	pop	{r7, pc}
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	ffffbff8 	.word	0xffffbff8
 8005208:	fffffcfc 	.word	0xfffffcfc
 800520c:	fffff3f3 	.word	0xfffff3f3
 8005210:	ffff0f0f 	.word	0xffff0f0f

08005214 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005214:	b590      	push	{r4, r7, lr}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800521e:	200f      	movs	r0, #15
 8005220:	183b      	adds	r3, r7, r0
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	213e      	movs	r1, #62	; 0x3e
 8005226:	5c52      	ldrb	r2, [r2, r1]
 8005228:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800522a:	230e      	movs	r3, #14
 800522c:	18fb      	adds	r3, r7, r3
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	213f      	movs	r1, #63	; 0x3f
 8005232:	5c52      	ldrb	r2, [r2, r1]
 8005234:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005236:	240d      	movs	r4, #13
 8005238:	193b      	adds	r3, r7, r4
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	2142      	movs	r1, #66	; 0x42
 800523e:	5c52      	ldrb	r2, [r2, r1]
 8005240:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005242:	230c      	movs	r3, #12
 8005244:	18fb      	adds	r3, r7, r3
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	2143      	movs	r1, #67	; 0x43
 800524a:	5c52      	ldrb	r2, [r2, r1]
 800524c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d112      	bne.n	800527a <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005254:	183b      	adds	r3, r7, r0
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d103      	bne.n	8005264 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800525c:	193b      	adds	r3, r7, r4
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d001      	beq.n	8005268 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e075      	b.n	8005354 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	223e      	movs	r2, #62	; 0x3e
 800526c:	2102      	movs	r1, #2
 800526e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2242      	movs	r2, #66	; 0x42
 8005274:	2102      	movs	r1, #2
 8005276:	5499      	strb	r1, [r3, r2]
 8005278:	e03d      	b.n	80052f6 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b04      	cmp	r3, #4
 800527e:	d114      	bne.n	80052aa <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005280:	230e      	movs	r3, #14
 8005282:	18fb      	adds	r3, r7, r3
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d104      	bne.n	8005294 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800528a:	230c      	movs	r3, #12
 800528c:	18fb      	adds	r3, r7, r3
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d001      	beq.n	8005298 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e05d      	b.n	8005354 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	223f      	movs	r2, #63	; 0x3f
 800529c:	2102      	movs	r1, #2
 800529e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2243      	movs	r2, #67	; 0x43
 80052a4:	2102      	movs	r1, #2
 80052a6:	5499      	strb	r1, [r3, r2]
 80052a8:	e025      	b.n	80052f6 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052aa:	230f      	movs	r3, #15
 80052ac:	18fb      	adds	r3, r7, r3
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d10e      	bne.n	80052d2 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80052b4:	230e      	movs	r3, #14
 80052b6:	18fb      	adds	r3, r7, r3
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d109      	bne.n	80052d2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052be:	230d      	movs	r3, #13
 80052c0:	18fb      	adds	r3, r7, r3
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d104      	bne.n	80052d2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80052c8:	230c      	movs	r3, #12
 80052ca:	18fb      	adds	r3, r7, r3
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d001      	beq.n	80052d6 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e03e      	b.n	8005354 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	223e      	movs	r2, #62	; 0x3e
 80052da:	2102      	movs	r1, #2
 80052dc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	223f      	movs	r2, #63	; 0x3f
 80052e2:	2102      	movs	r1, #2
 80052e4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2242      	movs	r2, #66	; 0x42
 80052ea:	2102      	movs	r1, #2
 80052ec:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2243      	movs	r2, #67	; 0x43
 80052f2:	2102      	movs	r1, #2
 80052f4:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <HAL_TIM_Encoder_Start+0xf0>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d008      	beq.n	8005314 <HAL_TIM_Encoder_Start+0x100>
 8005302:	e00f      	b.n	8005324 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2201      	movs	r2, #1
 800530a:	2100      	movs	r1, #0
 800530c:	0018      	movs	r0, r3
 800530e:	f000 fc93 	bl	8005c38 <TIM_CCxChannelCmd>
      break;
 8005312:	e016      	b.n	8005342 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2201      	movs	r2, #1
 800531a:	2104      	movs	r1, #4
 800531c:	0018      	movs	r0, r3
 800531e:	f000 fc8b 	bl	8005c38 <TIM_CCxChannelCmd>
      break;
 8005322:	e00e      	b.n	8005342 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2201      	movs	r2, #1
 800532a:	2100      	movs	r1, #0
 800532c:	0018      	movs	r0, r3
 800532e:	f000 fc83 	bl	8005c38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2201      	movs	r2, #1
 8005338:	2104      	movs	r1, #4
 800533a:	0018      	movs	r0, r3
 800533c:	f000 fc7c 	bl	8005c38 <TIM_CCxChannelCmd>
      break;
 8005340:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2101      	movs	r1, #1
 800534e:	430a      	orrs	r2, r1
 8005350:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	0018      	movs	r0, r3
 8005356:	46bd      	mov	sp, r7
 8005358:	b005      	add	sp, #20
 800535a:	bd90      	pop	{r4, r7, pc}

0800535c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	2202      	movs	r2, #2
 800536c:	4013      	ands	r3, r2
 800536e:	2b02      	cmp	r3, #2
 8005370:	d124      	bne.n	80053bc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	2202      	movs	r2, #2
 800537a:	4013      	ands	r3, r2
 800537c:	2b02      	cmp	r3, #2
 800537e:	d11d      	bne.n	80053bc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2203      	movs	r2, #3
 8005386:	4252      	negs	r2, r2
 8005388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	2203      	movs	r2, #3
 8005398:	4013      	ands	r3, r2
 800539a:	d004      	beq.n	80053a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	0018      	movs	r0, r3
 80053a0:	f000 f9c0 	bl	8005724 <HAL_TIM_IC_CaptureCallback>
 80053a4:	e007      	b.n	80053b6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	0018      	movs	r0, r3
 80053aa:	f000 f9b3 	bl	8005714 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	0018      	movs	r0, r3
 80053b2:	f000 f9bf 	bl	8005734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2204      	movs	r2, #4
 80053c4:	4013      	ands	r3, r2
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d125      	bne.n	8005416 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	2204      	movs	r2, #4
 80053d2:	4013      	ands	r3, r2
 80053d4:	2b04      	cmp	r3, #4
 80053d6:	d11e      	bne.n	8005416 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2205      	movs	r2, #5
 80053de:	4252      	negs	r2, r2
 80053e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	23c0      	movs	r3, #192	; 0xc0
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4013      	ands	r3, r2
 80053f4:	d004      	beq.n	8005400 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	0018      	movs	r0, r3
 80053fa:	f000 f993 	bl	8005724 <HAL_TIM_IC_CaptureCallback>
 80053fe:	e007      	b.n	8005410 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	0018      	movs	r0, r3
 8005404:	f000 f986 	bl	8005714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	0018      	movs	r0, r3
 800540c:	f000 f992 	bl	8005734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	2208      	movs	r2, #8
 800541e:	4013      	ands	r3, r2
 8005420:	2b08      	cmp	r3, #8
 8005422:	d124      	bne.n	800546e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	2208      	movs	r2, #8
 800542c:	4013      	ands	r3, r2
 800542e:	2b08      	cmp	r3, #8
 8005430:	d11d      	bne.n	800546e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2209      	movs	r2, #9
 8005438:	4252      	negs	r2, r2
 800543a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2204      	movs	r2, #4
 8005440:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	2203      	movs	r2, #3
 800544a:	4013      	ands	r3, r2
 800544c:	d004      	beq.n	8005458 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	0018      	movs	r0, r3
 8005452:	f000 f967 	bl	8005724 <HAL_TIM_IC_CaptureCallback>
 8005456:	e007      	b.n	8005468 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	0018      	movs	r0, r3
 800545c:	f000 f95a 	bl	8005714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	0018      	movs	r0, r3
 8005464:	f000 f966 	bl	8005734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	2210      	movs	r2, #16
 8005476:	4013      	ands	r3, r2
 8005478:	2b10      	cmp	r3, #16
 800547a:	d125      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	2210      	movs	r2, #16
 8005484:	4013      	ands	r3, r2
 8005486:	2b10      	cmp	r3, #16
 8005488:	d11e      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2211      	movs	r2, #17
 8005490:	4252      	negs	r2, r2
 8005492:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2208      	movs	r2, #8
 8005498:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69da      	ldr	r2, [r3, #28]
 80054a0:	23c0      	movs	r3, #192	; 0xc0
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4013      	ands	r3, r2
 80054a6:	d004      	beq.n	80054b2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	0018      	movs	r0, r3
 80054ac:	f000 f93a 	bl	8005724 <HAL_TIM_IC_CaptureCallback>
 80054b0:	e007      	b.n	80054c2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	0018      	movs	r0, r3
 80054b6:	f000 f92d 	bl	8005714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	0018      	movs	r0, r3
 80054be:	f000 f939 	bl	8005734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2201      	movs	r2, #1
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d10f      	bne.n	80054f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	4013      	ands	r3, r2
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d108      	bne.n	80054f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2202      	movs	r2, #2
 80054ea:	4252      	negs	r2, r2
 80054ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	0018      	movs	r0, r3
 80054f2:	f7fd fdeb 	bl	80030cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2280      	movs	r2, #128	; 0x80
 80054fe:	4013      	ands	r3, r2
 8005500:	2b80      	cmp	r3, #128	; 0x80
 8005502:	d10f      	bne.n	8005524 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	2280      	movs	r2, #128	; 0x80
 800550c:	4013      	ands	r3, r2
 800550e:	2b80      	cmp	r3, #128	; 0x80
 8005510:	d108      	bne.n	8005524 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2281      	movs	r2, #129	; 0x81
 8005518:	4252      	negs	r2, r2
 800551a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	0018      	movs	r0, r3
 8005520:	f000 fc6c 	bl	8005dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	2240      	movs	r2, #64	; 0x40
 800552c:	4013      	ands	r3, r2
 800552e:	2b40      	cmp	r3, #64	; 0x40
 8005530:	d10f      	bne.n	8005552 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	2240      	movs	r2, #64	; 0x40
 800553a:	4013      	ands	r3, r2
 800553c:	2b40      	cmp	r3, #64	; 0x40
 800553e:	d108      	bne.n	8005552 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2241      	movs	r2, #65	; 0x41
 8005546:	4252      	negs	r2, r2
 8005548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	0018      	movs	r0, r3
 800554e:	f000 f8f9 	bl	8005744 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	2220      	movs	r2, #32
 800555a:	4013      	ands	r3, r2
 800555c:	2b20      	cmp	r3, #32
 800555e:	d10f      	bne.n	8005580 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	4013      	ands	r3, r2
 800556a:	2b20      	cmp	r3, #32
 800556c:	d108      	bne.n	8005580 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2221      	movs	r2, #33	; 0x21
 8005574:	4252      	negs	r2, r2
 8005576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	0018      	movs	r0, r3
 800557c:	f000 fc36 	bl	8005dec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005580:	46c0      	nop			; (mov r8, r8)
 8005582:	46bd      	mov	sp, r7
 8005584:	b002      	add	sp, #8
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005594:	2317      	movs	r3, #23
 8005596:	18fb      	adds	r3, r7, r3
 8005598:	2200      	movs	r2, #0
 800559a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	223c      	movs	r2, #60	; 0x3c
 80055a0:	5c9b      	ldrb	r3, [r3, r2]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d101      	bne.n	80055aa <HAL_TIM_PWM_ConfigChannel+0x22>
 80055a6:	2302      	movs	r3, #2
 80055a8:	e0ad      	b.n	8005706 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	223c      	movs	r2, #60	; 0x3c
 80055ae:	2101      	movs	r1, #1
 80055b0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b0c      	cmp	r3, #12
 80055b6:	d100      	bne.n	80055ba <HAL_TIM_PWM_ConfigChannel+0x32>
 80055b8:	e076      	b.n	80056a8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b0c      	cmp	r3, #12
 80055be:	d900      	bls.n	80055c2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80055c0:	e095      	b.n	80056ee <HAL_TIM_PWM_ConfigChannel+0x166>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d04e      	beq.n	8005666 <HAL_TIM_PWM_ConfigChannel+0xde>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b08      	cmp	r3, #8
 80055cc:	d900      	bls.n	80055d0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80055ce:	e08e      	b.n	80056ee <HAL_TIM_PWM_ConfigChannel+0x166>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_TIM_PWM_ConfigChannel+0x56>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d021      	beq.n	8005620 <HAL_TIM_PWM_ConfigChannel+0x98>
 80055dc:	e087      	b.n	80056ee <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	0011      	movs	r1, r2
 80055e6:	0018      	movs	r0, r3
 80055e8:	f000 f92a 	bl	8005840 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699a      	ldr	r2, [r3, #24]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2108      	movs	r1, #8
 80055f8:	430a      	orrs	r2, r1
 80055fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2104      	movs	r1, #4
 8005608:	438a      	bics	r2, r1
 800560a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6999      	ldr	r1, [r3, #24]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	619a      	str	r2, [r3, #24]
      break;
 800561e:	e06b      	b.n	80056f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	0011      	movs	r1, r2
 8005628:	0018      	movs	r0, r3
 800562a:	f000 f991 	bl	8005950 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	699a      	ldr	r2, [r3, #24]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2180      	movs	r1, #128	; 0x80
 800563a:	0109      	lsls	r1, r1, #4
 800563c:	430a      	orrs	r2, r1
 800563e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699a      	ldr	r2, [r3, #24]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4931      	ldr	r1, [pc, #196]	; (8005710 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800564c:	400a      	ands	r2, r1
 800564e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6999      	ldr	r1, [r3, #24]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	021a      	lsls	r2, r3, #8
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	619a      	str	r2, [r3, #24]
      break;
 8005664:	e048      	b.n	80056f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	0011      	movs	r1, r2
 800566e:	0018      	movs	r0, r3
 8005670:	f000 f9f2 	bl	8005a58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	69da      	ldr	r2, [r3, #28]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2108      	movs	r1, #8
 8005680:	430a      	orrs	r2, r1
 8005682:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	69da      	ldr	r2, [r3, #28]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2104      	movs	r1, #4
 8005690:	438a      	bics	r2, r1
 8005692:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69d9      	ldr	r1, [r3, #28]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	691a      	ldr	r2, [r3, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	61da      	str	r2, [r3, #28]
      break;
 80056a6:	e027      	b.n	80056f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	0011      	movs	r1, r2
 80056b0:	0018      	movs	r0, r3
 80056b2:	f000 fa57 	bl	8005b64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69da      	ldr	r2, [r3, #28]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2180      	movs	r1, #128	; 0x80
 80056c2:	0109      	lsls	r1, r1, #4
 80056c4:	430a      	orrs	r2, r1
 80056c6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69da      	ldr	r2, [r3, #28]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	490f      	ldr	r1, [pc, #60]	; (8005710 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80056d4:	400a      	ands	r2, r1
 80056d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	69d9      	ldr	r1, [r3, #28]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	021a      	lsls	r2, r3, #8
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	61da      	str	r2, [r3, #28]
      break;
 80056ec:	e004      	b.n	80056f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80056ee:	2317      	movs	r3, #23
 80056f0:	18fb      	adds	r3, r7, r3
 80056f2:	2201      	movs	r2, #1
 80056f4:	701a      	strb	r2, [r3, #0]
      break;
 80056f6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	223c      	movs	r2, #60	; 0x3c
 80056fc:	2100      	movs	r1, #0
 80056fe:	5499      	strb	r1, [r3, r2]

  return status;
 8005700:	2317      	movs	r3, #23
 8005702:	18fb      	adds	r3, r7, r3
 8005704:	781b      	ldrb	r3, [r3, #0]
}
 8005706:	0018      	movs	r0, r3
 8005708:	46bd      	mov	sp, r7
 800570a:	b006      	add	sp, #24
 800570c:	bd80      	pop	{r7, pc}
 800570e:	46c0      	nop			; (mov r8, r8)
 8005710:	fffffbff 	.word	0xfffffbff

08005714 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800571c:	46c0      	nop			; (mov r8, r8)
 800571e:	46bd      	mov	sp, r7
 8005720:	b002      	add	sp, #8
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800572c:	46c0      	nop			; (mov r8, r8)
 800572e:	46bd      	mov	sp, r7
 8005730:	b002      	add	sp, #8
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800573c:	46c0      	nop			; (mov r8, r8)
 800573e:	46bd      	mov	sp, r7
 8005740:	b002      	add	sp, #8
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800574c:	46c0      	nop			; (mov r8, r8)
 800574e:	46bd      	mov	sp, r7
 8005750:	b002      	add	sp, #8
 8005752:	bd80      	pop	{r7, pc}

08005754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a2f      	ldr	r2, [pc, #188]	; (8005824 <TIM_Base_SetConfig+0xd0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d003      	beq.n	8005774 <TIM_Base_SetConfig+0x20>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a2e      	ldr	r2, [pc, #184]	; (8005828 <TIM_Base_SetConfig+0xd4>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d108      	bne.n	8005786 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2270      	movs	r2, #112	; 0x70
 8005778:	4393      	bics	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a26      	ldr	r2, [pc, #152]	; (8005824 <TIM_Base_SetConfig+0xd0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d013      	beq.n	80057b6 <TIM_Base_SetConfig+0x62>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a25      	ldr	r2, [pc, #148]	; (8005828 <TIM_Base_SetConfig+0xd4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00f      	beq.n	80057b6 <TIM_Base_SetConfig+0x62>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a24      	ldr	r2, [pc, #144]	; (800582c <TIM_Base_SetConfig+0xd8>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00b      	beq.n	80057b6 <TIM_Base_SetConfig+0x62>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a23      	ldr	r2, [pc, #140]	; (8005830 <TIM_Base_SetConfig+0xdc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d007      	beq.n	80057b6 <TIM_Base_SetConfig+0x62>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a22      	ldr	r2, [pc, #136]	; (8005834 <TIM_Base_SetConfig+0xe0>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d003      	beq.n	80057b6 <TIM_Base_SetConfig+0x62>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a21      	ldr	r2, [pc, #132]	; (8005838 <TIM_Base_SetConfig+0xe4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d108      	bne.n	80057c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4a20      	ldr	r2, [pc, #128]	; (800583c <TIM_Base_SetConfig+0xe8>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2280      	movs	r2, #128	; 0x80
 80057cc:	4393      	bics	r3, r2
 80057ce:	001a      	movs	r2, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a0c      	ldr	r2, [pc, #48]	; (8005824 <TIM_Base_SetConfig+0xd0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00b      	beq.n	800580e <TIM_Base_SetConfig+0xba>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a0d      	ldr	r2, [pc, #52]	; (8005830 <TIM_Base_SetConfig+0xdc>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d007      	beq.n	800580e <TIM_Base_SetConfig+0xba>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a0c      	ldr	r2, [pc, #48]	; (8005834 <TIM_Base_SetConfig+0xe0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d003      	beq.n	800580e <TIM_Base_SetConfig+0xba>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a0b      	ldr	r2, [pc, #44]	; (8005838 <TIM_Base_SetConfig+0xe4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d103      	bne.n	8005816 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	691a      	ldr	r2, [r3, #16]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	615a      	str	r2, [r3, #20]
}
 800581c:	46c0      	nop			; (mov r8, r8)
 800581e:	46bd      	mov	sp, r7
 8005820:	b004      	add	sp, #16
 8005822:	bd80      	pop	{r7, pc}
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40000400 	.word	0x40000400
 800582c:	40002000 	.word	0x40002000
 8005830:	40014000 	.word	0x40014000
 8005834:	40014400 	.word	0x40014400
 8005838:	40014800 	.word	0x40014800
 800583c:	fffffcff 	.word	0xfffffcff

08005840 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	2201      	movs	r2, #1
 8005850:	4393      	bics	r3, r2
 8005852:	001a      	movs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2270      	movs	r2, #112	; 0x70
 800586e:	4393      	bics	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2203      	movs	r2, #3
 8005876:	4393      	bics	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4313      	orrs	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2202      	movs	r2, #2
 8005888:	4393      	bics	r3, r2
 800588a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a27      	ldr	r2, [pc, #156]	; (8005938 <TIM_OC1_SetConfig+0xf8>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d00b      	beq.n	80058b6 <TIM_OC1_SetConfig+0x76>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a26      	ldr	r2, [pc, #152]	; (800593c <TIM_OC1_SetConfig+0xfc>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d007      	beq.n	80058b6 <TIM_OC1_SetConfig+0x76>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a25      	ldr	r2, [pc, #148]	; (8005940 <TIM_OC1_SetConfig+0x100>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d003      	beq.n	80058b6 <TIM_OC1_SetConfig+0x76>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a24      	ldr	r2, [pc, #144]	; (8005944 <TIM_OC1_SetConfig+0x104>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d10c      	bne.n	80058d0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2208      	movs	r2, #8
 80058ba:	4393      	bics	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	2204      	movs	r2, #4
 80058cc:	4393      	bics	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a19      	ldr	r2, [pc, #100]	; (8005938 <TIM_OC1_SetConfig+0xf8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00b      	beq.n	80058f0 <TIM_OC1_SetConfig+0xb0>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a18      	ldr	r2, [pc, #96]	; (800593c <TIM_OC1_SetConfig+0xfc>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d007      	beq.n	80058f0 <TIM_OC1_SetConfig+0xb0>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a17      	ldr	r2, [pc, #92]	; (8005940 <TIM_OC1_SetConfig+0x100>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_OC1_SetConfig+0xb0>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a16      	ldr	r2, [pc, #88]	; (8005944 <TIM_OC1_SetConfig+0x104>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d111      	bne.n	8005914 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	4a15      	ldr	r2, [pc, #84]	; (8005948 <TIM_OC1_SetConfig+0x108>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	4a14      	ldr	r2, [pc, #80]	; (800594c <TIM_OC1_SetConfig+0x10c>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4313      	orrs	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	621a      	str	r2, [r3, #32]
}
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	46bd      	mov	sp, r7
 8005932:	b006      	add	sp, #24
 8005934:	bd80      	pop	{r7, pc}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	40012c00 	.word	0x40012c00
 800593c:	40014000 	.word	0x40014000
 8005940:	40014400 	.word	0x40014400
 8005944:	40014800 	.word	0x40014800
 8005948:	fffffeff 	.word	0xfffffeff
 800594c:	fffffdff 	.word	0xfffffdff

08005950 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	2210      	movs	r2, #16
 8005960:	4393      	bics	r3, r2
 8005962:	001a      	movs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4a2e      	ldr	r2, [pc, #184]	; (8005a38 <TIM_OC2_SetConfig+0xe8>)
 800597e:	4013      	ands	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4a2d      	ldr	r2, [pc, #180]	; (8005a3c <TIM_OC2_SetConfig+0xec>)
 8005986:	4013      	ands	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	021b      	lsls	r3, r3, #8
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2220      	movs	r2, #32
 800599a:	4393      	bics	r3, r2
 800599c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a24      	ldr	r2, [pc, #144]	; (8005a40 <TIM_OC2_SetConfig+0xf0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d10d      	bne.n	80059ce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2280      	movs	r2, #128	; 0x80
 80059b6:	4393      	bics	r3, r2
 80059b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	011b      	lsls	r3, r3, #4
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2240      	movs	r2, #64	; 0x40
 80059ca:	4393      	bics	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a1b      	ldr	r2, [pc, #108]	; (8005a40 <TIM_OC2_SetConfig+0xf0>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00b      	beq.n	80059ee <TIM_OC2_SetConfig+0x9e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a1a      	ldr	r2, [pc, #104]	; (8005a44 <TIM_OC2_SetConfig+0xf4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d007      	beq.n	80059ee <TIM_OC2_SetConfig+0x9e>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a19      	ldr	r2, [pc, #100]	; (8005a48 <TIM_OC2_SetConfig+0xf8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d003      	beq.n	80059ee <TIM_OC2_SetConfig+0x9e>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a18      	ldr	r2, [pc, #96]	; (8005a4c <TIM_OC2_SetConfig+0xfc>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d113      	bne.n	8005a16 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	4a17      	ldr	r2, [pc, #92]	; (8005a50 <TIM_OC2_SetConfig+0x100>)
 80059f2:	4013      	ands	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4a16      	ldr	r2, [pc, #88]	; (8005a54 <TIM_OC2_SetConfig+0x104>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	621a      	str	r2, [r3, #32]
}
 8005a30:	46c0      	nop			; (mov r8, r8)
 8005a32:	46bd      	mov	sp, r7
 8005a34:	b006      	add	sp, #24
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	ffff8fff 	.word	0xffff8fff
 8005a3c:	fffffcff 	.word	0xfffffcff
 8005a40:	40012c00 	.word	0x40012c00
 8005a44:	40014000 	.word	0x40014000
 8005a48:	40014400 	.word	0x40014400
 8005a4c:	40014800 	.word	0x40014800
 8005a50:	fffffbff 	.word	0xfffffbff
 8005a54:	fffff7ff 	.word	0xfffff7ff

08005a58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	4a35      	ldr	r2, [pc, #212]	; (8005b3c <TIM_OC3_SetConfig+0xe4>)
 8005a68:	401a      	ands	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2270      	movs	r2, #112	; 0x70
 8005a84:	4393      	bics	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2203      	movs	r2, #3
 8005a8c:	4393      	bics	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	4a28      	ldr	r2, [pc, #160]	; (8005b40 <TIM_OC3_SetConfig+0xe8>)
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	021b      	lsls	r3, r3, #8
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a24      	ldr	r2, [pc, #144]	; (8005b44 <TIM_OC3_SetConfig+0xec>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d10d      	bne.n	8005ad2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	4a23      	ldr	r2, [pc, #140]	; (8005b48 <TIM_OC3_SetConfig+0xf0>)
 8005aba:	4013      	ands	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	021b      	lsls	r3, r3, #8
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	4a1f      	ldr	r2, [pc, #124]	; (8005b4c <TIM_OC3_SetConfig+0xf4>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a1b      	ldr	r2, [pc, #108]	; (8005b44 <TIM_OC3_SetConfig+0xec>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d00b      	beq.n	8005af2 <TIM_OC3_SetConfig+0x9a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a1c      	ldr	r2, [pc, #112]	; (8005b50 <TIM_OC3_SetConfig+0xf8>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d007      	beq.n	8005af2 <TIM_OC3_SetConfig+0x9a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a1b      	ldr	r2, [pc, #108]	; (8005b54 <TIM_OC3_SetConfig+0xfc>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d003      	beq.n	8005af2 <TIM_OC3_SetConfig+0x9a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a1a      	ldr	r2, [pc, #104]	; (8005b58 <TIM_OC3_SetConfig+0x100>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d113      	bne.n	8005b1a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	4a19      	ldr	r2, [pc, #100]	; (8005b5c <TIM_OC3_SetConfig+0x104>)
 8005af6:	4013      	ands	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4a18      	ldr	r2, [pc, #96]	; (8005b60 <TIM_OC3_SetConfig+0x108>)
 8005afe:	4013      	ands	r3, r2
 8005b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	621a      	str	r2, [r3, #32]
}
 8005b34:	46c0      	nop			; (mov r8, r8)
 8005b36:	46bd      	mov	sp, r7
 8005b38:	b006      	add	sp, #24
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	fffffeff 	.word	0xfffffeff
 8005b40:	fffffdff 	.word	0xfffffdff
 8005b44:	40012c00 	.word	0x40012c00
 8005b48:	fffff7ff 	.word	0xfffff7ff
 8005b4c:	fffffbff 	.word	0xfffffbff
 8005b50:	40014000 	.word	0x40014000
 8005b54:	40014400 	.word	0x40014400
 8005b58:	40014800 	.word	0x40014800
 8005b5c:	ffffefff 	.word	0xffffefff
 8005b60:	ffffdfff 	.word	0xffffdfff

08005b64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	4a28      	ldr	r2, [pc, #160]	; (8005c14 <TIM_OC4_SetConfig+0xb0>)
 8005b74:	401a      	ands	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4a22      	ldr	r2, [pc, #136]	; (8005c18 <TIM_OC4_SetConfig+0xb4>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4a21      	ldr	r2, [pc, #132]	; (8005c1c <TIM_OC4_SetConfig+0xb8>)
 8005b98:	4013      	ands	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4a1d      	ldr	r2, [pc, #116]	; (8005c20 <TIM_OC4_SetConfig+0xbc>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	031b      	lsls	r3, r3, #12
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a19      	ldr	r2, [pc, #100]	; (8005c24 <TIM_OC4_SetConfig+0xc0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00b      	beq.n	8005bdc <TIM_OC4_SetConfig+0x78>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a18      	ldr	r2, [pc, #96]	; (8005c28 <TIM_OC4_SetConfig+0xc4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d007      	beq.n	8005bdc <TIM_OC4_SetConfig+0x78>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a17      	ldr	r2, [pc, #92]	; (8005c2c <TIM_OC4_SetConfig+0xc8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d003      	beq.n	8005bdc <TIM_OC4_SetConfig+0x78>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a16      	ldr	r2, [pc, #88]	; (8005c30 <TIM_OC4_SetConfig+0xcc>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d109      	bne.n	8005bf0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	4a15      	ldr	r2, [pc, #84]	; (8005c34 <TIM_OC4_SetConfig+0xd0>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	019b      	lsls	r3, r3, #6
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	621a      	str	r2, [r3, #32]
}
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	b006      	add	sp, #24
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	46c0      	nop			; (mov r8, r8)
 8005c14:	ffffefff 	.word	0xffffefff
 8005c18:	ffff8fff 	.word	0xffff8fff
 8005c1c:	fffffcff 	.word	0xfffffcff
 8005c20:	ffffdfff 	.word	0xffffdfff
 8005c24:	40012c00 	.word	0x40012c00
 8005c28:	40014000 	.word	0x40014000
 8005c2c:	40014400 	.word	0x40014400
 8005c30:	40014800 	.word	0x40014800
 8005c34:	ffffbfff 	.word	0xffffbfff

08005c38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	221f      	movs	r2, #31
 8005c48:	4013      	ands	r3, r2
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	409a      	lsls	r2, r3
 8005c4e:	0013      	movs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	43d2      	mvns	r2, r2
 8005c5a:	401a      	ands	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6a1a      	ldr	r2, [r3, #32]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	211f      	movs	r1, #31
 8005c68:	400b      	ands	r3, r1
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	4099      	lsls	r1, r3
 8005c6e:	000b      	movs	r3, r1
 8005c70:	431a      	orrs	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	621a      	str	r2, [r3, #32]
}
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	b006      	add	sp, #24
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	223c      	movs	r2, #60	; 0x3c
 8005c8e:	5c9b      	ldrb	r3, [r3, r2]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e041      	b.n	8005d1c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	223c      	movs	r2, #60	; 0x3c
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	223d      	movs	r2, #61	; 0x3d
 8005ca4:	2102      	movs	r1, #2
 8005ca6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2270      	movs	r2, #112	; 0x70
 8005cbc:	4393      	bics	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a13      	ldr	r2, [pc, #76]	; (8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d009      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a11      	ldr	r2, [pc, #68]	; (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d004      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a10      	ldr	r2, [pc, #64]	; (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d10c      	bne.n	8005d0a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2280      	movs	r2, #128	; 0x80
 8005cf4:	4393      	bics	r3, r2
 8005cf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	223d      	movs	r2, #61	; 0x3d
 8005d0e:	2101      	movs	r1, #1
 8005d10:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	223c      	movs	r2, #60	; 0x3c
 8005d16:	2100      	movs	r1, #0
 8005d18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	b004      	add	sp, #16
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40012c00 	.word	0x40012c00
 8005d28:	40000400 	.word	0x40000400
 8005d2c:	40014000 	.word	0x40014000

08005d30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	223c      	movs	r2, #60	; 0x3c
 8005d42:	5c9b      	ldrb	r3, [r3, r2]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e03e      	b.n	8005dca <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	223c      	movs	r2, #60	; 0x3c
 8005d50:	2101      	movs	r1, #1
 8005d52:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	22ff      	movs	r2, #255	; 0xff
 8005d58:	4393      	bics	r3, r2
 8005d5a:	001a      	movs	r2, r3
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4a1b      	ldr	r2, [pc, #108]	; (8005dd4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005d68:	401a      	ands	r2, r3
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4a18      	ldr	r2, [pc, #96]	; (8005dd8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005d76:	401a      	ands	r2, r3
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4a16      	ldr	r2, [pc, #88]	; (8005ddc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005d84:	401a      	ands	r2, r3
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005d92:	401a      	ands	r2, r3
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4a11      	ldr	r2, [pc, #68]	; (8005de4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005da0:	401a      	ands	r2, r3
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4a0e      	ldr	r2, [pc, #56]	; (8005de8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8005dae:	401a      	ands	r2, r3
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	223c      	movs	r2, #60	; 0x3c
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	0018      	movs	r0, r3
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	b004      	add	sp, #16
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	fffffcff 	.word	0xfffffcff
 8005dd8:	fffffbff 	.word	0xfffffbff
 8005ddc:	fffff7ff 	.word	0xfffff7ff
 8005de0:	ffffefff 	.word	0xffffefff
 8005de4:	ffffdfff 	.word	0xffffdfff
 8005de8:	ffffbfff 	.word	0xffffbfff

08005dec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005df4:	46c0      	nop			; (mov r8, r8)
 8005df6:	46bd      	mov	sp, r7
 8005df8:	b002      	add	sp, #8
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e04:	46c0      	nop			; (mov r8, r8)
 8005e06:	46bd      	mov	sp, r7
 8005e08:	b002      	add	sp, #8
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e044      	b.n	8005ea8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d107      	bne.n	8005e36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2278      	movs	r2, #120	; 0x78
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	0018      	movs	r0, r3
 8005e32:	f7fd fe4b 	bl	8003acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2224      	movs	r2, #36	; 0x24
 8005e3a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2101      	movs	r1, #1
 8005e48:	438a      	bics	r2, r1
 8005e4a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	0018      	movs	r0, r3
 8005e50:	f000 fbb4 	bl	80065bc <UART_SetConfig>
 8005e54:	0003      	movs	r3, r0
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d101      	bne.n	8005e5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e024      	b.n	8005ea8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	0018      	movs	r0, r3
 8005e6a:	f000 fcff 	bl	800686c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	490d      	ldr	r1, [pc, #52]	; (8005eb0 <HAL_UART_Init+0xa4>)
 8005e7a:	400a      	ands	r2, r1
 8005e7c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2108      	movs	r1, #8
 8005e8a:	438a      	bics	r2, r1
 8005e8c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2101      	movs	r1, #1
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	f000 fd97 	bl	80069d4 <UART_CheckIdleState>
 8005ea6:	0003      	movs	r3, r0
}
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	b002      	add	sp, #8
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	fffff7ff 	.word	0xfffff7ff

08005eb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b08a      	sub	sp, #40	; 0x28
 8005eb8:	af02      	add	r7, sp, #8
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	603b      	str	r3, [r7, #0]
 8005ec0:	1dbb      	adds	r3, r7, #6
 8005ec2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	d000      	beq.n	8005ece <HAL_UART_Transmit+0x1a>
 8005ecc:	e08d      	b.n	8005fea <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <HAL_UART_Transmit+0x28>
 8005ed4:	1dbb      	adds	r3, r7, #6
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e085      	b.n	8005fec <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	2380      	movs	r3, #128	; 0x80
 8005ee6:	015b      	lsls	r3, r3, #5
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d109      	bne.n	8005f00 <HAL_UART_Transmit+0x4c>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d105      	bne.n	8005f00 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	4013      	ands	r3, r2
 8005efa:	d001      	beq.n	8005f00 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e075      	b.n	8005fec <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2284      	movs	r2, #132	; 0x84
 8005f04:	2100      	movs	r1, #0
 8005f06:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2221      	movs	r2, #33	; 0x21
 8005f0c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f0e:	f7fd ffbf 	bl	8003e90 <HAL_GetTick>
 8005f12:	0003      	movs	r3, r0
 8005f14:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	1dba      	adds	r2, r7, #6
 8005f1a:	2150      	movs	r1, #80	; 0x50
 8005f1c:	8812      	ldrh	r2, [r2, #0]
 8005f1e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	1dba      	adds	r2, r7, #6
 8005f24:	2152      	movs	r1, #82	; 0x52
 8005f26:	8812      	ldrh	r2, [r2, #0]
 8005f28:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	2380      	movs	r3, #128	; 0x80
 8005f30:	015b      	lsls	r3, r3, #5
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d108      	bne.n	8005f48 <HAL_UART_Transmit+0x94>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d104      	bne.n	8005f48 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	61bb      	str	r3, [r7, #24]
 8005f46:	e003      	b.n	8005f50 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f50:	e030      	b.n	8005fb4 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	0013      	movs	r3, r2
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2180      	movs	r1, #128	; 0x80
 8005f60:	f000 fde0 	bl	8006b24 <UART_WaitOnFlagUntilTimeout>
 8005f64:	1e03      	subs	r3, r0, #0
 8005f66:	d004      	beq.n	8005f72 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e03c      	b.n	8005fec <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10b      	bne.n	8005f90 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	881a      	ldrh	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	05d2      	lsls	r2, r2, #23
 8005f82:	0dd2      	lsrs	r2, r2, #23
 8005f84:	b292      	uxth	r2, r2
 8005f86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	3302      	adds	r3, #2
 8005f8c:	61bb      	str	r3, [r7, #24]
 8005f8e:	e008      	b.n	8005fa2 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	781a      	ldrb	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	b292      	uxth	r2, r2
 8005f9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2252      	movs	r2, #82	; 0x52
 8005fa6:	5a9b      	ldrh	r3, [r3, r2]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	3b01      	subs	r3, #1
 8005fac:	b299      	uxth	r1, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2252      	movs	r2, #82	; 0x52
 8005fb2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2252      	movs	r2, #82	; 0x52
 8005fb8:	5a9b      	ldrh	r3, [r3, r2]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1c8      	bne.n	8005f52 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	0013      	movs	r3, r2
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2140      	movs	r1, #64	; 0x40
 8005fce:	f000 fda9 	bl	8006b24 <UART_WaitOnFlagUntilTimeout>
 8005fd2:	1e03      	subs	r3, r0, #0
 8005fd4:	d004      	beq.n	8005fe0 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e005      	b.n	8005fec <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	e000      	b.n	8005fec <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8005fea:	2302      	movs	r3, #2
  }
}
 8005fec:	0018      	movs	r0, r3
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	b008      	add	sp, #32
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b0ab      	sub	sp, #172	; 0xac
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	22a4      	movs	r2, #164	; 0xa4
 8006004:	18b9      	adds	r1, r7, r2
 8006006:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	20a0      	movs	r0, #160	; 0xa0
 8006010:	1839      	adds	r1, r7, r0
 8006012:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	219c      	movs	r1, #156	; 0x9c
 800601c:	1879      	adds	r1, r7, r1
 800601e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006020:	0011      	movs	r1, r2
 8006022:	18bb      	adds	r3, r7, r2
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a99      	ldr	r2, [pc, #612]	; (800628c <HAL_UART_IRQHandler+0x298>)
 8006028:	4013      	ands	r3, r2
 800602a:	2298      	movs	r2, #152	; 0x98
 800602c:	18bc      	adds	r4, r7, r2
 800602e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006030:	18bb      	adds	r3, r7, r2
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d114      	bne.n	8006062 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006038:	187b      	adds	r3, r7, r1
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2220      	movs	r2, #32
 800603e:	4013      	ands	r3, r2
 8006040:	d00f      	beq.n	8006062 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006042:	183b      	adds	r3, r7, r0
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2220      	movs	r2, #32
 8006048:	4013      	ands	r3, r2
 800604a:	d00a      	beq.n	8006062 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006050:	2b00      	cmp	r3, #0
 8006052:	d100      	bne.n	8006056 <HAL_UART_IRQHandler+0x62>
 8006054:	e286      	b.n	8006564 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	0010      	movs	r0, r2
 800605e:	4798      	blx	r3
      }
      return;
 8006060:	e280      	b.n	8006564 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006062:	2398      	movs	r3, #152	; 0x98
 8006064:	18fb      	adds	r3, r7, r3
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d100      	bne.n	800606e <HAL_UART_IRQHandler+0x7a>
 800606c:	e114      	b.n	8006298 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800606e:	239c      	movs	r3, #156	; 0x9c
 8006070:	18fb      	adds	r3, r7, r3
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2201      	movs	r2, #1
 8006076:	4013      	ands	r3, r2
 8006078:	d106      	bne.n	8006088 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800607a:	23a0      	movs	r3, #160	; 0xa0
 800607c:	18fb      	adds	r3, r7, r3
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a83      	ldr	r2, [pc, #524]	; (8006290 <HAL_UART_IRQHandler+0x29c>)
 8006082:	4013      	ands	r3, r2
 8006084:	d100      	bne.n	8006088 <HAL_UART_IRQHandler+0x94>
 8006086:	e107      	b.n	8006298 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006088:	23a4      	movs	r3, #164	; 0xa4
 800608a:	18fb      	adds	r3, r7, r3
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2201      	movs	r2, #1
 8006090:	4013      	ands	r3, r2
 8006092:	d012      	beq.n	80060ba <HAL_UART_IRQHandler+0xc6>
 8006094:	23a0      	movs	r3, #160	; 0xa0
 8006096:	18fb      	adds	r3, r7, r3
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	2380      	movs	r3, #128	; 0x80
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	4013      	ands	r3, r2
 80060a0:	d00b      	beq.n	80060ba <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2201      	movs	r2, #1
 80060a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2284      	movs	r2, #132	; 0x84
 80060ae:	589b      	ldr	r3, [r3, r2]
 80060b0:	2201      	movs	r2, #1
 80060b2:	431a      	orrs	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2184      	movs	r1, #132	; 0x84
 80060b8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060ba:	23a4      	movs	r3, #164	; 0xa4
 80060bc:	18fb      	adds	r3, r7, r3
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2202      	movs	r2, #2
 80060c2:	4013      	ands	r3, r2
 80060c4:	d011      	beq.n	80060ea <HAL_UART_IRQHandler+0xf6>
 80060c6:	239c      	movs	r3, #156	; 0x9c
 80060c8:	18fb      	adds	r3, r7, r3
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2201      	movs	r2, #1
 80060ce:	4013      	ands	r3, r2
 80060d0:	d00b      	beq.n	80060ea <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2202      	movs	r2, #2
 80060d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2284      	movs	r2, #132	; 0x84
 80060de:	589b      	ldr	r3, [r3, r2]
 80060e0:	2204      	movs	r2, #4
 80060e2:	431a      	orrs	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2184      	movs	r1, #132	; 0x84
 80060e8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060ea:	23a4      	movs	r3, #164	; 0xa4
 80060ec:	18fb      	adds	r3, r7, r3
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2204      	movs	r2, #4
 80060f2:	4013      	ands	r3, r2
 80060f4:	d011      	beq.n	800611a <HAL_UART_IRQHandler+0x126>
 80060f6:	239c      	movs	r3, #156	; 0x9c
 80060f8:	18fb      	adds	r3, r7, r3
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2201      	movs	r2, #1
 80060fe:	4013      	ands	r3, r2
 8006100:	d00b      	beq.n	800611a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2204      	movs	r2, #4
 8006108:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2284      	movs	r2, #132	; 0x84
 800610e:	589b      	ldr	r3, [r3, r2]
 8006110:	2202      	movs	r2, #2
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2184      	movs	r1, #132	; 0x84
 8006118:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800611a:	23a4      	movs	r3, #164	; 0xa4
 800611c:	18fb      	adds	r3, r7, r3
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2208      	movs	r2, #8
 8006122:	4013      	ands	r3, r2
 8006124:	d017      	beq.n	8006156 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006126:	23a0      	movs	r3, #160	; 0xa0
 8006128:	18fb      	adds	r3, r7, r3
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2220      	movs	r2, #32
 800612e:	4013      	ands	r3, r2
 8006130:	d105      	bne.n	800613e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006132:	239c      	movs	r3, #156	; 0x9c
 8006134:	18fb      	adds	r3, r7, r3
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2201      	movs	r2, #1
 800613a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800613c:	d00b      	beq.n	8006156 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2208      	movs	r2, #8
 8006144:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2284      	movs	r2, #132	; 0x84
 800614a:	589b      	ldr	r3, [r3, r2]
 800614c:	2208      	movs	r2, #8
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2184      	movs	r1, #132	; 0x84
 8006154:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006156:	23a4      	movs	r3, #164	; 0xa4
 8006158:	18fb      	adds	r3, r7, r3
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	2380      	movs	r3, #128	; 0x80
 800615e:	011b      	lsls	r3, r3, #4
 8006160:	4013      	ands	r3, r2
 8006162:	d013      	beq.n	800618c <HAL_UART_IRQHandler+0x198>
 8006164:	23a0      	movs	r3, #160	; 0xa0
 8006166:	18fb      	adds	r3, r7, r3
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	2380      	movs	r3, #128	; 0x80
 800616c:	04db      	lsls	r3, r3, #19
 800616e:	4013      	ands	r3, r2
 8006170:	d00c      	beq.n	800618c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2280      	movs	r2, #128	; 0x80
 8006178:	0112      	lsls	r2, r2, #4
 800617a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2284      	movs	r2, #132	; 0x84
 8006180:	589b      	ldr	r3, [r3, r2]
 8006182:	2220      	movs	r2, #32
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2184      	movs	r1, #132	; 0x84
 800618a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2284      	movs	r2, #132	; 0x84
 8006190:	589b      	ldr	r3, [r3, r2]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d100      	bne.n	8006198 <HAL_UART_IRQHandler+0x1a4>
 8006196:	e1e7      	b.n	8006568 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006198:	23a4      	movs	r3, #164	; 0xa4
 800619a:	18fb      	adds	r3, r7, r3
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2220      	movs	r2, #32
 80061a0:	4013      	ands	r3, r2
 80061a2:	d00e      	beq.n	80061c2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061a4:	23a0      	movs	r3, #160	; 0xa0
 80061a6:	18fb      	adds	r3, r7, r3
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2220      	movs	r2, #32
 80061ac:	4013      	ands	r3, r2
 80061ae:	d008      	beq.n	80061c2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d004      	beq.n	80061c2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	0010      	movs	r0, r2
 80061c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2284      	movs	r2, #132	; 0x84
 80061c6:	589b      	ldr	r3, [r3, r2]
 80061c8:	2194      	movs	r1, #148	; 0x94
 80061ca:	187a      	adds	r2, r7, r1
 80061cc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	2240      	movs	r2, #64	; 0x40
 80061d6:	4013      	ands	r3, r2
 80061d8:	2b40      	cmp	r3, #64	; 0x40
 80061da:	d004      	beq.n	80061e6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061dc:	187b      	adds	r3, r7, r1
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2228      	movs	r2, #40	; 0x28
 80061e2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061e4:	d047      	beq.n	8006276 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	0018      	movs	r0, r3
 80061ea:	f000 fdcf 	bl	8006d8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	2240      	movs	r2, #64	; 0x40
 80061f6:	4013      	ands	r3, r2
 80061f8:	2b40      	cmp	r3, #64	; 0x40
 80061fa:	d137      	bne.n	800626c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006200:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006204:	2090      	movs	r0, #144	; 0x90
 8006206:	183a      	adds	r2, r7, r0
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	2301      	movs	r3, #1
 800620c:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800620e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006210:	f383 8810 	msr	PRIMASK, r3
}
 8006214:	46c0      	nop			; (mov r8, r8)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2140      	movs	r1, #64	; 0x40
 8006222:	438a      	bics	r2, r1
 8006224:	609a      	str	r2, [r3, #8]
 8006226:	183b      	adds	r3, r7, r0
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800622c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800622e:	f383 8810 	msr	PRIMASK, r3
}
 8006232:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006238:	2b00      	cmp	r3, #0
 800623a:	d012      	beq.n	8006262 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006240:	4a14      	ldr	r2, [pc, #80]	; (8006294 <HAL_UART_IRQHandler+0x2a0>)
 8006242:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006248:	0018      	movs	r0, r3
 800624a:	f7fd ff41 	bl	80040d0 <HAL_DMA_Abort_IT>
 800624e:	1e03      	subs	r3, r0, #0
 8006250:	d01a      	beq.n	8006288 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800625c:	0018      	movs	r0, r3
 800625e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006260:	e012      	b.n	8006288 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	0018      	movs	r0, r3
 8006266:	f000 f995 	bl	8006594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800626a:	e00d      	b.n	8006288 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	0018      	movs	r0, r3
 8006270:	f000 f990 	bl	8006594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006274:	e008      	b.n	8006288 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	0018      	movs	r0, r3
 800627a:	f000 f98b 	bl	8006594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2284      	movs	r2, #132	; 0x84
 8006282:	2100      	movs	r1, #0
 8006284:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006286:	e16f      	b.n	8006568 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006288:	46c0      	nop			; (mov r8, r8)
    return;
 800628a:	e16d      	b.n	8006568 <HAL_UART_IRQHandler+0x574>
 800628c:	0000080f 	.word	0x0000080f
 8006290:	04000120 	.word	0x04000120
 8006294:	08006e55 	.word	0x08006e55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800629c:	2b01      	cmp	r3, #1
 800629e:	d000      	beq.n	80062a2 <HAL_UART_IRQHandler+0x2ae>
 80062a0:	e139      	b.n	8006516 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062a2:	23a4      	movs	r3, #164	; 0xa4
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2210      	movs	r2, #16
 80062aa:	4013      	ands	r3, r2
 80062ac:	d100      	bne.n	80062b0 <HAL_UART_IRQHandler+0x2bc>
 80062ae:	e132      	b.n	8006516 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062b0:	23a0      	movs	r3, #160	; 0xa0
 80062b2:	18fb      	adds	r3, r7, r3
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2210      	movs	r2, #16
 80062b8:	4013      	ands	r3, r2
 80062ba:	d100      	bne.n	80062be <HAL_UART_IRQHandler+0x2ca>
 80062bc:	e12b      	b.n	8006516 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2210      	movs	r2, #16
 80062c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	2240      	movs	r2, #64	; 0x40
 80062ce:	4013      	ands	r3, r2
 80062d0:	2b40      	cmp	r3, #64	; 0x40
 80062d2:	d000      	beq.n	80062d6 <HAL_UART_IRQHandler+0x2e2>
 80062d4:	e09f      	b.n	8006416 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	217e      	movs	r1, #126	; 0x7e
 80062e0:	187b      	adds	r3, r7, r1
 80062e2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80062e4:	187b      	adds	r3, r7, r1
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d100      	bne.n	80062ee <HAL_UART_IRQHandler+0x2fa>
 80062ec:	e13e      	b.n	800656c <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2258      	movs	r2, #88	; 0x58
 80062f2:	5a9b      	ldrh	r3, [r3, r2]
 80062f4:	187a      	adds	r2, r7, r1
 80062f6:	8812      	ldrh	r2, [r2, #0]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d300      	bcc.n	80062fe <HAL_UART_IRQHandler+0x30a>
 80062fc:	e136      	b.n	800656c <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	187a      	adds	r2, r7, r1
 8006302:	215a      	movs	r1, #90	; 0x5a
 8006304:	8812      	ldrh	r2, [r2, #0]
 8006306:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	2b20      	cmp	r3, #32
 8006310:	d06f      	beq.n	80063f2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006312:	f3ef 8310 	mrs	r3, PRIMASK
 8006316:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800631a:	67bb      	str	r3, [r7, #120]	; 0x78
 800631c:	2301      	movs	r3, #1
 800631e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006322:	f383 8810 	msr	PRIMASK, r3
}
 8006326:	46c0      	nop			; (mov r8, r8)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4992      	ldr	r1, [pc, #584]	; (800657c <HAL_UART_IRQHandler+0x588>)
 8006334:	400a      	ands	r2, r1
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800633a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800633c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633e:	f383 8810 	msr	PRIMASK, r3
}
 8006342:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006344:	f3ef 8310 	mrs	r3, PRIMASK
 8006348:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800634a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634c:	677b      	str	r3, [r7, #116]	; 0x74
 800634e:	2301      	movs	r3, #1
 8006350:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006354:	f383 8810 	msr	PRIMASK, r3
}
 8006358:	46c0      	nop			; (mov r8, r8)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2101      	movs	r1, #1
 8006366:	438a      	bics	r2, r1
 8006368:	609a      	str	r2, [r3, #8]
 800636a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800636c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800636e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006370:	f383 8810 	msr	PRIMASK, r3
}
 8006374:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006376:	f3ef 8310 	mrs	r3, PRIMASK
 800637a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800637c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800637e:	673b      	str	r3, [r7, #112]	; 0x70
 8006380:	2301      	movs	r3, #1
 8006382:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006386:	f383 8810 	msr	PRIMASK, r3
}
 800638a:	46c0      	nop			; (mov r8, r8)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2140      	movs	r1, #64	; 0x40
 8006398:	438a      	bics	r2, r1
 800639a:	609a      	str	r2, [r3, #8]
 800639c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800639e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063a2:	f383 8810 	msr	PRIMASK, r3
}
 80063a6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2280      	movs	r2, #128	; 0x80
 80063ac:	2120      	movs	r1, #32
 80063ae:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063b6:	f3ef 8310 	mrs	r3, PRIMASK
 80063ba:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80063bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063c0:	2301      	movs	r3, #1
 80063c2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063c6:	f383 8810 	msr	PRIMASK, r3
}
 80063ca:	46c0      	nop			; (mov r8, r8)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2110      	movs	r1, #16
 80063d8:	438a      	bics	r2, r1
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063de:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063e2:	f383 8810 	msr	PRIMASK, r3
}
 80063e6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ec:	0018      	movs	r0, r3
 80063ee:	f7fd fe37 	bl	8004060 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2202      	movs	r2, #2
 80063f6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2258      	movs	r2, #88	; 0x58
 80063fc:	5a9a      	ldrh	r2, [r3, r2]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	215a      	movs	r1, #90	; 0x5a
 8006402:	5a5b      	ldrh	r3, [r3, r1]
 8006404:	b29b      	uxth	r3, r3
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	b29a      	uxth	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	0011      	movs	r1, r2
 800640e:	0018      	movs	r0, r3
 8006410:	f000 f8c8 	bl	80065a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006414:	e0aa      	b.n	800656c <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2258      	movs	r2, #88	; 0x58
 800641a:	5a99      	ldrh	r1, [r3, r2]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	225a      	movs	r2, #90	; 0x5a
 8006420:	5a9b      	ldrh	r3, [r3, r2]
 8006422:	b29a      	uxth	r2, r3
 8006424:	208e      	movs	r0, #142	; 0x8e
 8006426:	183b      	adds	r3, r7, r0
 8006428:	1a8a      	subs	r2, r1, r2
 800642a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	225a      	movs	r2, #90	; 0x5a
 8006430:	5a9b      	ldrh	r3, [r3, r2]
 8006432:	b29b      	uxth	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d100      	bne.n	800643a <HAL_UART_IRQHandler+0x446>
 8006438:	e09a      	b.n	8006570 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 800643a:	183b      	adds	r3, r7, r0
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d100      	bne.n	8006444 <HAL_UART_IRQHandler+0x450>
 8006442:	e095      	b.n	8006570 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006444:	f3ef 8310 	mrs	r3, PRIMASK
 8006448:	60fb      	str	r3, [r7, #12]
  return(result);
 800644a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800644c:	2488      	movs	r4, #136	; 0x88
 800644e:	193a      	adds	r2, r7, r4
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	2301      	movs	r3, #1
 8006454:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f383 8810 	msr	PRIMASK, r3
}
 800645c:	46c0      	nop			; (mov r8, r8)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4945      	ldr	r1, [pc, #276]	; (8006580 <HAL_UART_IRQHandler+0x58c>)
 800646a:	400a      	ands	r2, r1
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	193b      	adds	r3, r7, r4
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f383 8810 	msr	PRIMASK, r3
}
 800647a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800647c:	f3ef 8310 	mrs	r3, PRIMASK
 8006480:	61bb      	str	r3, [r7, #24]
  return(result);
 8006482:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006484:	2484      	movs	r4, #132	; 0x84
 8006486:	193a      	adds	r2, r7, r4
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	2301      	movs	r3, #1
 800648c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	f383 8810 	msr	PRIMASK, r3
}
 8006494:	46c0      	nop			; (mov r8, r8)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2101      	movs	r1, #1
 80064a2:	438a      	bics	r2, r1
 80064a4:	609a      	str	r2, [r3, #8]
 80064a6:	193b      	adds	r3, r7, r4
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	f383 8810 	msr	PRIMASK, r3
}
 80064b2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2280      	movs	r2, #128	; 0x80
 80064b8:	2120      	movs	r1, #32
 80064ba:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064c8:	f3ef 8310 	mrs	r3, PRIMASK
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d0:	2480      	movs	r4, #128	; 0x80
 80064d2:	193a      	adds	r2, r7, r4
 80064d4:	6013      	str	r3, [r2, #0]
 80064d6:	2301      	movs	r3, #1
 80064d8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	f383 8810 	msr	PRIMASK, r3
}
 80064e0:	46c0      	nop			; (mov r8, r8)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2110      	movs	r1, #16
 80064ee:	438a      	bics	r2, r1
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	193b      	adds	r3, r7, r4
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fa:	f383 8810 	msr	PRIMASK, r3
}
 80064fe:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006506:	183b      	adds	r3, r7, r0
 8006508:	881a      	ldrh	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	0011      	movs	r1, r2
 800650e:	0018      	movs	r0, r3
 8006510:	f000 f848 	bl	80065a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006514:	e02c      	b.n	8006570 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006516:	23a4      	movs	r3, #164	; 0xa4
 8006518:	18fb      	adds	r3, r7, r3
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2280      	movs	r2, #128	; 0x80
 800651e:	4013      	ands	r3, r2
 8006520:	d00f      	beq.n	8006542 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006522:	23a0      	movs	r3, #160	; 0xa0
 8006524:	18fb      	adds	r3, r7, r3
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2280      	movs	r2, #128	; 0x80
 800652a:	4013      	ands	r3, r2
 800652c:	d009      	beq.n	8006542 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006532:	2b00      	cmp	r3, #0
 8006534:	d01e      	beq.n	8006574 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	0010      	movs	r0, r2
 800653e:	4798      	blx	r3
    }
    return;
 8006540:	e018      	b.n	8006574 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006542:	23a4      	movs	r3, #164	; 0xa4
 8006544:	18fb      	adds	r3, r7, r3
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2240      	movs	r2, #64	; 0x40
 800654a:	4013      	ands	r3, r2
 800654c:	d013      	beq.n	8006576 <HAL_UART_IRQHandler+0x582>
 800654e:	23a0      	movs	r3, #160	; 0xa0
 8006550:	18fb      	adds	r3, r7, r3
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2240      	movs	r2, #64	; 0x40
 8006556:	4013      	ands	r3, r2
 8006558:	d00d      	beq.n	8006576 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	0018      	movs	r0, r3
 800655e:	f000 fc90 	bl	8006e82 <UART_EndTransmit_IT>
    return;
 8006562:	e008      	b.n	8006576 <HAL_UART_IRQHandler+0x582>
      return;
 8006564:	46c0      	nop			; (mov r8, r8)
 8006566:	e006      	b.n	8006576 <HAL_UART_IRQHandler+0x582>
    return;
 8006568:	46c0      	nop			; (mov r8, r8)
 800656a:	e004      	b.n	8006576 <HAL_UART_IRQHandler+0x582>
      return;
 800656c:	46c0      	nop			; (mov r8, r8)
 800656e:	e002      	b.n	8006576 <HAL_UART_IRQHandler+0x582>
      return;
 8006570:	46c0      	nop			; (mov r8, r8)
 8006572:	e000      	b.n	8006576 <HAL_UART_IRQHandler+0x582>
    return;
 8006574:	46c0      	nop			; (mov r8, r8)
  }

}
 8006576:	46bd      	mov	sp, r7
 8006578:	b02b      	add	sp, #172	; 0xac
 800657a:	bd90      	pop	{r4, r7, pc}
 800657c:	fffffeff 	.word	0xfffffeff
 8006580:	fffffedf 	.word	0xfffffedf

08006584 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800658c:	46c0      	nop			; (mov r8, r8)
 800658e:	46bd      	mov	sp, r7
 8006590:	b002      	add	sp, #8
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800659c:	46c0      	nop			; (mov r8, r8)
 800659e:	46bd      	mov	sp, r7
 80065a0:	b002      	add	sp, #8
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	000a      	movs	r2, r1
 80065ae:	1cbb      	adds	r3, r7, #2
 80065b0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	46bd      	mov	sp, r7
 80065b6:	b002      	add	sp, #8
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b088      	sub	sp, #32
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065c4:	231e      	movs	r3, #30
 80065c6:	18fb      	adds	r3, r7, r3
 80065c8:	2200      	movs	r2, #0
 80065ca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	431a      	orrs	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	431a      	orrs	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a97      	ldr	r2, [pc, #604]	; (8006848 <UART_SetConfig+0x28c>)
 80065ec:	4013      	ands	r3, r2
 80065ee:	0019      	movs	r1, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	4a92      	ldr	r2, [pc, #584]	; (800684c <UART_SetConfig+0x290>)
 8006602:	4013      	ands	r3, r2
 8006604:	0019      	movs	r1, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	4313      	orrs	r3, r2
 8006620:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	4a89      	ldr	r2, [pc, #548]	; (8006850 <UART_SetConfig+0x294>)
 800662a:	4013      	ands	r3, r2
 800662c:	0019      	movs	r1, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	430a      	orrs	r2, r1
 8006636:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a85      	ldr	r2, [pc, #532]	; (8006854 <UART_SetConfig+0x298>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d127      	bne.n	8006692 <UART_SetConfig+0xd6>
 8006642:	4b85      	ldr	r3, [pc, #532]	; (8006858 <UART_SetConfig+0x29c>)
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	2203      	movs	r2, #3
 8006648:	4013      	ands	r3, r2
 800664a:	2b03      	cmp	r3, #3
 800664c:	d00d      	beq.n	800666a <UART_SetConfig+0xae>
 800664e:	d81b      	bhi.n	8006688 <UART_SetConfig+0xcc>
 8006650:	2b02      	cmp	r3, #2
 8006652:	d014      	beq.n	800667e <UART_SetConfig+0xc2>
 8006654:	d818      	bhi.n	8006688 <UART_SetConfig+0xcc>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <UART_SetConfig+0xa4>
 800665a:	2b01      	cmp	r3, #1
 800665c:	d00a      	beq.n	8006674 <UART_SetConfig+0xb8>
 800665e:	e013      	b.n	8006688 <UART_SetConfig+0xcc>
 8006660:	231f      	movs	r3, #31
 8006662:	18fb      	adds	r3, r7, r3
 8006664:	2200      	movs	r2, #0
 8006666:	701a      	strb	r2, [r3, #0]
 8006668:	e035      	b.n	80066d6 <UART_SetConfig+0x11a>
 800666a:	231f      	movs	r3, #31
 800666c:	18fb      	adds	r3, r7, r3
 800666e:	2202      	movs	r2, #2
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	e030      	b.n	80066d6 <UART_SetConfig+0x11a>
 8006674:	231f      	movs	r3, #31
 8006676:	18fb      	adds	r3, r7, r3
 8006678:	2204      	movs	r2, #4
 800667a:	701a      	strb	r2, [r3, #0]
 800667c:	e02b      	b.n	80066d6 <UART_SetConfig+0x11a>
 800667e:	231f      	movs	r3, #31
 8006680:	18fb      	adds	r3, r7, r3
 8006682:	2208      	movs	r2, #8
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	e026      	b.n	80066d6 <UART_SetConfig+0x11a>
 8006688:	231f      	movs	r3, #31
 800668a:	18fb      	adds	r3, r7, r3
 800668c:	2210      	movs	r2, #16
 800668e:	701a      	strb	r2, [r3, #0]
 8006690:	e021      	b.n	80066d6 <UART_SetConfig+0x11a>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a71      	ldr	r2, [pc, #452]	; (800685c <UART_SetConfig+0x2a0>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d104      	bne.n	80066a6 <UART_SetConfig+0xea>
 800669c:	231f      	movs	r3, #31
 800669e:	18fb      	adds	r3, r7, r3
 80066a0:	2200      	movs	r2, #0
 80066a2:	701a      	strb	r2, [r3, #0]
 80066a4:	e017      	b.n	80066d6 <UART_SetConfig+0x11a>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a6d      	ldr	r2, [pc, #436]	; (8006860 <UART_SetConfig+0x2a4>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d104      	bne.n	80066ba <UART_SetConfig+0xfe>
 80066b0:	231f      	movs	r3, #31
 80066b2:	18fb      	adds	r3, r7, r3
 80066b4:	2200      	movs	r2, #0
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	e00d      	b.n	80066d6 <UART_SetConfig+0x11a>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a69      	ldr	r2, [pc, #420]	; (8006864 <UART_SetConfig+0x2a8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d104      	bne.n	80066ce <UART_SetConfig+0x112>
 80066c4:	231f      	movs	r3, #31
 80066c6:	18fb      	adds	r3, r7, r3
 80066c8:	2200      	movs	r2, #0
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	e003      	b.n	80066d6 <UART_SetConfig+0x11a>
 80066ce:	231f      	movs	r3, #31
 80066d0:	18fb      	adds	r3, r7, r3
 80066d2:	2210      	movs	r2, #16
 80066d4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	69da      	ldr	r2, [r3, #28]
 80066da:	2380      	movs	r3, #128	; 0x80
 80066dc:	021b      	lsls	r3, r3, #8
 80066de:	429a      	cmp	r2, r3
 80066e0:	d15c      	bne.n	800679c <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 80066e2:	231f      	movs	r3, #31
 80066e4:	18fb      	adds	r3, r7, r3
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d015      	beq.n	8006718 <UART_SetConfig+0x15c>
 80066ec:	dc18      	bgt.n	8006720 <UART_SetConfig+0x164>
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d00d      	beq.n	800670e <UART_SetConfig+0x152>
 80066f2:	dc15      	bgt.n	8006720 <UART_SetConfig+0x164>
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <UART_SetConfig+0x142>
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d005      	beq.n	8006708 <UART_SetConfig+0x14c>
 80066fc:	e010      	b.n	8006720 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066fe:	f7fe fb25 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 8006702:	0003      	movs	r3, r0
 8006704:	61bb      	str	r3, [r7, #24]
        break;
 8006706:	e012      	b.n	800672e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006708:	4b57      	ldr	r3, [pc, #348]	; (8006868 <UART_SetConfig+0x2ac>)
 800670a:	61bb      	str	r3, [r7, #24]
        break;
 800670c:	e00f      	b.n	800672e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800670e:	f7fe fabb 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 8006712:	0003      	movs	r3, r0
 8006714:	61bb      	str	r3, [r7, #24]
        break;
 8006716:	e00a      	b.n	800672e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006718:	2380      	movs	r3, #128	; 0x80
 800671a:	021b      	lsls	r3, r3, #8
 800671c:	61bb      	str	r3, [r7, #24]
        break;
 800671e:	e006      	b.n	800672e <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006724:	231e      	movs	r3, #30
 8006726:	18fb      	adds	r3, r7, r3
 8006728:	2201      	movs	r2, #1
 800672a:	701a      	strb	r2, [r3, #0]
        break;
 800672c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d100      	bne.n	8006736 <UART_SetConfig+0x17a>
 8006734:	e07a      	b.n	800682c <UART_SetConfig+0x270>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	005a      	lsls	r2, r3, #1
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	085b      	lsrs	r3, r3, #1
 8006740:	18d2      	adds	r2, r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	0019      	movs	r1, r3
 8006748:	0010      	movs	r0, r2
 800674a:	f7f9 fcf9 	bl	8000140 <__udivsi3>
 800674e:	0003      	movs	r3, r0
 8006750:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	2b0f      	cmp	r3, #15
 8006756:	d91c      	bls.n	8006792 <UART_SetConfig+0x1d6>
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	2380      	movs	r3, #128	; 0x80
 800675c:	025b      	lsls	r3, r3, #9
 800675e:	429a      	cmp	r2, r3
 8006760:	d217      	bcs.n	8006792 <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	b29a      	uxth	r2, r3
 8006766:	200e      	movs	r0, #14
 8006768:	183b      	adds	r3, r7, r0
 800676a:	210f      	movs	r1, #15
 800676c:	438a      	bics	r2, r1
 800676e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	085b      	lsrs	r3, r3, #1
 8006774:	b29b      	uxth	r3, r3
 8006776:	2207      	movs	r2, #7
 8006778:	4013      	ands	r3, r2
 800677a:	b299      	uxth	r1, r3
 800677c:	183b      	adds	r3, r7, r0
 800677e:	183a      	adds	r2, r7, r0
 8006780:	8812      	ldrh	r2, [r2, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	183a      	adds	r2, r7, r0
 800678c:	8812      	ldrh	r2, [r2, #0]
 800678e:	60da      	str	r2, [r3, #12]
 8006790:	e04c      	b.n	800682c <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8006792:	231e      	movs	r3, #30
 8006794:	18fb      	adds	r3, r7, r3
 8006796:	2201      	movs	r2, #1
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	e047      	b.n	800682c <UART_SetConfig+0x270>
      }
    }
  }
  else
  {
    switch (clocksource)
 800679c:	231f      	movs	r3, #31
 800679e:	18fb      	adds	r3, r7, r3
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b08      	cmp	r3, #8
 80067a4:	d015      	beq.n	80067d2 <UART_SetConfig+0x216>
 80067a6:	dc18      	bgt.n	80067da <UART_SetConfig+0x21e>
 80067a8:	2b04      	cmp	r3, #4
 80067aa:	d00d      	beq.n	80067c8 <UART_SetConfig+0x20c>
 80067ac:	dc15      	bgt.n	80067da <UART_SetConfig+0x21e>
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d002      	beq.n	80067b8 <UART_SetConfig+0x1fc>
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d005      	beq.n	80067c2 <UART_SetConfig+0x206>
 80067b6:	e010      	b.n	80067da <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067b8:	f7fe fac8 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 80067bc:	0003      	movs	r3, r0
 80067be:	61bb      	str	r3, [r7, #24]
        break;
 80067c0:	e012      	b.n	80067e8 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067c2:	4b29      	ldr	r3, [pc, #164]	; (8006868 <UART_SetConfig+0x2ac>)
 80067c4:	61bb      	str	r3, [r7, #24]
        break;
 80067c6:	e00f      	b.n	80067e8 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067c8:	f7fe fa5e 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 80067cc:	0003      	movs	r3, r0
 80067ce:	61bb      	str	r3, [r7, #24]
        break;
 80067d0:	e00a      	b.n	80067e8 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067d2:	2380      	movs	r3, #128	; 0x80
 80067d4:	021b      	lsls	r3, r3, #8
 80067d6:	61bb      	str	r3, [r7, #24]
        break;
 80067d8:	e006      	b.n	80067e8 <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067de:	231e      	movs	r3, #30
 80067e0:	18fb      	adds	r3, r7, r3
 80067e2:	2201      	movs	r2, #1
 80067e4:	701a      	strb	r2, [r3, #0]
        break;
 80067e6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d01e      	beq.n	800682c <UART_SetConfig+0x270>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	085a      	lsrs	r2, r3, #1
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	18d2      	adds	r2, r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	0019      	movs	r1, r3
 80067fe:	0010      	movs	r0, r2
 8006800:	f7f9 fc9e 	bl	8000140 <__udivsi3>
 8006804:	0003      	movs	r3, r0
 8006806:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	2b0f      	cmp	r3, #15
 800680c:	d90a      	bls.n	8006824 <UART_SetConfig+0x268>
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	2380      	movs	r3, #128	; 0x80
 8006812:	025b      	lsls	r3, r3, #9
 8006814:	429a      	cmp	r2, r3
 8006816:	d205      	bcs.n	8006824 <UART_SetConfig+0x268>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	b29a      	uxth	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	60da      	str	r2, [r3, #12]
 8006822:	e003      	b.n	800682c <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8006824:	231e      	movs	r3, #30
 8006826:	18fb      	adds	r3, r7, r3
 8006828:	2201      	movs	r2, #1
 800682a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006838:	231e      	movs	r3, #30
 800683a:	18fb      	adds	r3, r7, r3
 800683c:	781b      	ldrb	r3, [r3, #0]
}
 800683e:	0018      	movs	r0, r3
 8006840:	46bd      	mov	sp, r7
 8006842:	b008      	add	sp, #32
 8006844:	bd80      	pop	{r7, pc}
 8006846:	46c0      	nop			; (mov r8, r8)
 8006848:	efff69f3 	.word	0xefff69f3
 800684c:	ffffcfff 	.word	0xffffcfff
 8006850:	fffff4ff 	.word	0xfffff4ff
 8006854:	40013800 	.word	0x40013800
 8006858:	40021000 	.word	0x40021000
 800685c:	40004400 	.word	0x40004400
 8006860:	40004800 	.word	0x40004800
 8006864:	40004c00 	.word	0x40004c00
 8006868:	007a1200 	.word	0x007a1200

0800686c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	2201      	movs	r2, #1
 800687a:	4013      	ands	r3, r2
 800687c:	d00b      	beq.n	8006896 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	4a4a      	ldr	r2, [pc, #296]	; (80069b0 <UART_AdvFeatureConfig+0x144>)
 8006886:	4013      	ands	r3, r2
 8006888:	0019      	movs	r1, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	430a      	orrs	r2, r1
 8006894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689a:	2202      	movs	r2, #2
 800689c:	4013      	ands	r3, r2
 800689e:	d00b      	beq.n	80068b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	4a43      	ldr	r2, [pc, #268]	; (80069b4 <UART_AdvFeatureConfig+0x148>)
 80068a8:	4013      	ands	r3, r2
 80068aa:	0019      	movs	r1, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	2204      	movs	r2, #4
 80068be:	4013      	ands	r3, r2
 80068c0:	d00b      	beq.n	80068da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	4a3b      	ldr	r2, [pc, #236]	; (80069b8 <UART_AdvFeatureConfig+0x14c>)
 80068ca:	4013      	ands	r3, r2
 80068cc:	0019      	movs	r1, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	2208      	movs	r2, #8
 80068e0:	4013      	ands	r3, r2
 80068e2:	d00b      	beq.n	80068fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	4a34      	ldr	r2, [pc, #208]	; (80069bc <UART_AdvFeatureConfig+0x150>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	0019      	movs	r1, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006900:	2210      	movs	r2, #16
 8006902:	4013      	ands	r3, r2
 8006904:	d00b      	beq.n	800691e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	4a2c      	ldr	r2, [pc, #176]	; (80069c0 <UART_AdvFeatureConfig+0x154>)
 800690e:	4013      	ands	r3, r2
 8006910:	0019      	movs	r1, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006922:	2220      	movs	r2, #32
 8006924:	4013      	ands	r3, r2
 8006926:	d00b      	beq.n	8006940 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	4a25      	ldr	r2, [pc, #148]	; (80069c4 <UART_AdvFeatureConfig+0x158>)
 8006930:	4013      	ands	r3, r2
 8006932:	0019      	movs	r1, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	430a      	orrs	r2, r1
 800693e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	2240      	movs	r2, #64	; 0x40
 8006946:	4013      	ands	r3, r2
 8006948:	d01d      	beq.n	8006986 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	4a1d      	ldr	r2, [pc, #116]	; (80069c8 <UART_AdvFeatureConfig+0x15c>)
 8006952:	4013      	ands	r3, r2
 8006954:	0019      	movs	r1, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006966:	2380      	movs	r3, #128	; 0x80
 8006968:	035b      	lsls	r3, r3, #13
 800696a:	429a      	cmp	r2, r3
 800696c:	d10b      	bne.n	8006986 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	4a15      	ldr	r2, [pc, #84]	; (80069cc <UART_AdvFeatureConfig+0x160>)
 8006976:	4013      	ands	r3, r2
 8006978:	0019      	movs	r1, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	2280      	movs	r2, #128	; 0x80
 800698c:	4013      	ands	r3, r2
 800698e:	d00b      	beq.n	80069a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	4a0e      	ldr	r2, [pc, #56]	; (80069d0 <UART_AdvFeatureConfig+0x164>)
 8006998:	4013      	ands	r3, r2
 800699a:	0019      	movs	r1, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	605a      	str	r2, [r3, #4]
  }
}
 80069a8:	46c0      	nop			; (mov r8, r8)
 80069aa:	46bd      	mov	sp, r7
 80069ac:	b002      	add	sp, #8
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	fffdffff 	.word	0xfffdffff
 80069b4:	fffeffff 	.word	0xfffeffff
 80069b8:	fffbffff 	.word	0xfffbffff
 80069bc:	ffff7fff 	.word	0xffff7fff
 80069c0:	ffffefff 	.word	0xffffefff
 80069c4:	ffffdfff 	.word	0xffffdfff
 80069c8:	ffefffff 	.word	0xffefffff
 80069cc:	ff9fffff 	.word	0xff9fffff
 80069d0:	fff7ffff 	.word	0xfff7ffff

080069d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b092      	sub	sp, #72	; 0x48
 80069d8:	af02      	add	r7, sp, #8
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2284      	movs	r2, #132	; 0x84
 80069e0:	2100      	movs	r1, #0
 80069e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069e4:	f7fd fa54 	bl	8003e90 <HAL_GetTick>
 80069e8:	0003      	movs	r3, r0
 80069ea:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2208      	movs	r2, #8
 80069f4:	4013      	ands	r3, r2
 80069f6:	2b08      	cmp	r3, #8
 80069f8:	d12c      	bne.n	8006a54 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fc:	2280      	movs	r2, #128	; 0x80
 80069fe:	0391      	lsls	r1, r2, #14
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	4a46      	ldr	r2, [pc, #280]	; (8006b1c <UART_CheckIdleState+0x148>)
 8006a04:	9200      	str	r2, [sp, #0]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f000 f88c 	bl	8006b24 <UART_WaitOnFlagUntilTimeout>
 8006a0c:	1e03      	subs	r3, r0, #0
 8006a0e:	d021      	beq.n	8006a54 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a10:	f3ef 8310 	mrs	r3, PRIMASK
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a18:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a20:	f383 8810 	msr	PRIMASK, r3
}
 8006a24:	46c0      	nop			; (mov r8, r8)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2180      	movs	r1, #128	; 0x80
 8006a32:	438a      	bics	r2, r1
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3c:	f383 8810 	msr	PRIMASK, r3
}
 8006a40:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2278      	movs	r2, #120	; 0x78
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e05f      	b.n	8006b14 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d146      	bne.n	8006af0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a64:	2280      	movs	r2, #128	; 0x80
 8006a66:	03d1      	lsls	r1, r2, #15
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	4a2c      	ldr	r2, [pc, #176]	; (8006b1c <UART_CheckIdleState+0x148>)
 8006a6c:	9200      	str	r2, [sp, #0]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f000 f858 	bl	8006b24 <UART_WaitOnFlagUntilTimeout>
 8006a74:	1e03      	subs	r3, r0, #0
 8006a76:	d03b      	beq.n	8006af0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a78:	f3ef 8310 	mrs	r3, PRIMASK
 8006a7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a80:	637b      	str	r3, [r7, #52]	; 0x34
 8006a82:	2301      	movs	r3, #1
 8006a84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f383 8810 	msr	PRIMASK, r3
}
 8006a8c:	46c0      	nop			; (mov r8, r8)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4921      	ldr	r1, [pc, #132]	; (8006b20 <UART_CheckIdleState+0x14c>)
 8006a9a:	400a      	ands	r2, r1
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f383 8810 	msr	PRIMASK, r3
}
 8006aa8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8006aae:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ab0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	f383 8810 	msr	PRIMASK, r3
}
 8006abe:	46c0      	nop			; (mov r8, r8)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2101      	movs	r1, #1
 8006acc:	438a      	bics	r2, r1
 8006ace:	609a      	str	r2, [r3, #8]
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	f383 8810 	msr	PRIMASK, r3
}
 8006ada:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2280      	movs	r2, #128	; 0x80
 8006ae0:	2120      	movs	r1, #32
 8006ae2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2278      	movs	r2, #120	; 0x78
 8006ae8:	2100      	movs	r1, #0
 8006aea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e011      	b.n	8006b14 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2220      	movs	r2, #32
 8006af4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2280      	movs	r2, #128	; 0x80
 8006afa:	2120      	movs	r1, #32
 8006afc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2278      	movs	r2, #120	; 0x78
 8006b0e:	2100      	movs	r1, #0
 8006b10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	0018      	movs	r0, r3
 8006b16:	46bd      	mov	sp, r7
 8006b18:	b010      	add	sp, #64	; 0x40
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	01ffffff 	.word	0x01ffffff
 8006b20:	fffffedf 	.word	0xfffffedf

08006b24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	603b      	str	r3, [r7, #0]
 8006b30:	1dfb      	adds	r3, r7, #7
 8006b32:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b34:	e04b      	b.n	8006bce <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	d048      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b3c:	f7fd f9a8 	bl	8003e90 <HAL_GetTick>
 8006b40:	0002      	movs	r2, r0
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d302      	bcc.n	8006b52 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e04b      	b.n	8006bee <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2204      	movs	r2, #4
 8006b5e:	4013      	ands	r3, r2
 8006b60:	d035      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	2208      	movs	r2, #8
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	d111      	bne.n	8006b94 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2208      	movs	r2, #8
 8006b76:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f000 f906 	bl	8006d8c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2284      	movs	r2, #132	; 0x84
 8006b84:	2108      	movs	r1, #8
 8006b86:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2278      	movs	r2, #120	; 0x78
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e02c      	b.n	8006bee <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	69da      	ldr	r2, [r3, #28]
 8006b9a:	2380      	movs	r3, #128	; 0x80
 8006b9c:	011b      	lsls	r3, r3, #4
 8006b9e:	401a      	ands	r2, r3
 8006ba0:	2380      	movs	r3, #128	; 0x80
 8006ba2:	011b      	lsls	r3, r3, #4
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d112      	bne.n	8006bce <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2280      	movs	r2, #128	; 0x80
 8006bae:	0112      	lsls	r2, r2, #4
 8006bb0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	f000 f8e9 	bl	8006d8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2284      	movs	r2, #132	; 0x84
 8006bbe:	2120      	movs	r1, #32
 8006bc0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2278      	movs	r2, #120	; 0x78
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e00f      	b.n	8006bee <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	425a      	negs	r2, r3
 8006bde:	4153      	adcs	r3, r2
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	001a      	movs	r2, r3
 8006be4:	1dfb      	adds	r3, r7, #7
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d0a4      	beq.n	8006b36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	0018      	movs	r0, r3
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	b004      	add	sp, #16
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b090      	sub	sp, #64	; 0x40
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	1dbb      	adds	r3, r7, #6
 8006c04:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	1dba      	adds	r2, r7, #6
 8006c10:	2158      	movs	r1, #88	; 0x58
 8006c12:	8812      	ldrh	r2, [r2, #0]
 8006c14:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	1dba      	adds	r2, r7, #6
 8006c1a:	215a      	movs	r1, #90	; 0x5a
 8006c1c:	8812      	ldrh	r2, [r2, #0]
 8006c1e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	689a      	ldr	r2, [r3, #8]
 8006c2a:	2380      	movs	r3, #128	; 0x80
 8006c2c:	015b      	lsls	r3, r3, #5
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d10d      	bne.n	8006c4e <UART_Start_Receive_IT+0x56>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d104      	bne.n	8006c44 <UART_Start_Receive_IT+0x4c>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	225c      	movs	r2, #92	; 0x5c
 8006c3e:	4950      	ldr	r1, [pc, #320]	; (8006d80 <UART_Start_Receive_IT+0x188>)
 8006c40:	5299      	strh	r1, [r3, r2]
 8006c42:	e02e      	b.n	8006ca2 <UART_Start_Receive_IT+0xaa>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	225c      	movs	r2, #92	; 0x5c
 8006c48:	21ff      	movs	r1, #255	; 0xff
 8006c4a:	5299      	strh	r1, [r3, r2]
 8006c4c:	e029      	b.n	8006ca2 <UART_Start_Receive_IT+0xaa>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10d      	bne.n	8006c72 <UART_Start_Receive_IT+0x7a>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d104      	bne.n	8006c68 <UART_Start_Receive_IT+0x70>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	225c      	movs	r2, #92	; 0x5c
 8006c62:	21ff      	movs	r1, #255	; 0xff
 8006c64:	5299      	strh	r1, [r3, r2]
 8006c66:	e01c      	b.n	8006ca2 <UART_Start_Receive_IT+0xaa>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	225c      	movs	r2, #92	; 0x5c
 8006c6c:	217f      	movs	r1, #127	; 0x7f
 8006c6e:	5299      	strh	r1, [r3, r2]
 8006c70:	e017      	b.n	8006ca2 <UART_Start_Receive_IT+0xaa>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	689a      	ldr	r2, [r3, #8]
 8006c76:	2380      	movs	r3, #128	; 0x80
 8006c78:	055b      	lsls	r3, r3, #21
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d10d      	bne.n	8006c9a <UART_Start_Receive_IT+0xa2>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d104      	bne.n	8006c90 <UART_Start_Receive_IT+0x98>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	225c      	movs	r2, #92	; 0x5c
 8006c8a:	217f      	movs	r1, #127	; 0x7f
 8006c8c:	5299      	strh	r1, [r3, r2]
 8006c8e:	e008      	b.n	8006ca2 <UART_Start_Receive_IT+0xaa>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	225c      	movs	r2, #92	; 0x5c
 8006c94:	213f      	movs	r1, #63	; 0x3f
 8006c96:	5299      	strh	r1, [r3, r2]
 8006c98:	e003      	b.n	8006ca2 <UART_Start_Receive_IT+0xaa>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	225c      	movs	r2, #92	; 0x5c
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2284      	movs	r2, #132	; 0x84
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2280      	movs	r2, #128	; 0x80
 8006cae:	2122      	movs	r1, #34	; 0x22
 8006cb0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8006cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc2:	f383 8810 	msr	PRIMASK, r3
}
 8006cc6:	46c0      	nop			; (mov r8, r8)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	609a      	str	r2, [r3, #8]
 8006cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cda:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cde:	f383 8810 	msr	PRIMASK, r3
}
 8006ce2:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	689a      	ldr	r2, [r3, #8]
 8006ce8:	2380      	movs	r3, #128	; 0x80
 8006cea:	015b      	lsls	r3, r3, #5
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d107      	bne.n	8006d00 <UART_Start_Receive_IT+0x108>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d103      	bne.n	8006d00 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4a22      	ldr	r2, [pc, #136]	; (8006d84 <UART_Start_Receive_IT+0x18c>)
 8006cfc:	669a      	str	r2, [r3, #104]	; 0x68
 8006cfe:	e002      	b.n	8006d06 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4a21      	ldr	r2, [pc, #132]	; (8006d88 <UART_Start_Receive_IT+0x190>)
 8006d04:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d019      	beq.n	8006d42 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d12:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d14:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006d16:	637b      	str	r3, [r7, #52]	; 0x34
 8006d18:	2301      	movs	r3, #1
 8006d1a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	f383 8810 	msr	PRIMASK, r3
}
 8006d22:	46c0      	nop			; (mov r8, r8)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2190      	movs	r1, #144	; 0x90
 8006d30:	0049      	lsls	r1, r1, #1
 8006d32:	430a      	orrs	r2, r1
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d38:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	f383 8810 	msr	PRIMASK, r3
}
 8006d40:	e018      	b.n	8006d74 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d42:	f3ef 8310 	mrs	r3, PRIMASK
 8006d46:	613b      	str	r3, [r7, #16]
  return(result);
 8006d48:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006d4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f383 8810 	msr	PRIMASK, r3
}
 8006d56:	46c0      	nop			; (mov r8, r8)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2120      	movs	r1, #32
 8006d64:	430a      	orrs	r2, r1
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	f383 8810 	msr	PRIMASK, r3
}
 8006d72:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	0018      	movs	r0, r3
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	b010      	add	sp, #64	; 0x40
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	46c0      	nop			; (mov r8, r8)
 8006d80:	000001ff 	.word	0x000001ff
 8006d84:	08007091 	.word	0x08007091
 8006d88:	08006ed9 	.word	0x08006ed9

08006d8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08e      	sub	sp, #56	; 0x38
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d94:	f3ef 8310 	mrs	r3, PRIMASK
 8006d98:	617b      	str	r3, [r7, #20]
  return(result);
 8006d9a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d9e:	2301      	movs	r3, #1
 8006da0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	f383 8810 	msr	PRIMASK, r3
}
 8006da8:	46c0      	nop			; (mov r8, r8)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4926      	ldr	r1, [pc, #152]	; (8006e50 <UART_EndRxTransfer+0xc4>)
 8006db6:	400a      	ands	r2, r1
 8006db8:	601a      	str	r2, [r3, #0]
 8006dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	f383 8810 	msr	PRIMASK, r3
}
 8006dc4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8006dca:	623b      	str	r3, [r7, #32]
  return(result);
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dce:	633b      	str	r3, [r7, #48]	; 0x30
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	f383 8810 	msr	PRIMASK, r3
}
 8006dda:	46c0      	nop			; (mov r8, r8)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2101      	movs	r1, #1
 8006de8:	438a      	bics	r2, r1
 8006dea:	609a      	str	r2, [r3, #8]
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df2:	f383 8810 	msr	PRIMASK, r3
}
 8006df6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d118      	bne.n	8006e32 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e00:	f3ef 8310 	mrs	r3, PRIMASK
 8006e04:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e06:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f383 8810 	msr	PRIMASK, r3
}
 8006e14:	46c0      	nop			; (mov r8, r8)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2110      	movs	r1, #16
 8006e22:	438a      	bics	r2, r1
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	f383 8810 	msr	PRIMASK, r3
}
 8006e30:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2280      	movs	r2, #128	; 0x80
 8006e36:	2120      	movs	r1, #32
 8006e38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006e46:	46c0      	nop			; (mov r8, r8)
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	b00e      	add	sp, #56	; 0x38
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	46c0      	nop			; (mov r8, r8)
 8006e50:	fffffedf 	.word	0xfffffedf

08006e54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	225a      	movs	r2, #90	; 0x5a
 8006e66:	2100      	movs	r1, #0
 8006e68:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2252      	movs	r2, #82	; 0x52
 8006e6e:	2100      	movs	r1, #0
 8006e70:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	0018      	movs	r0, r3
 8006e76:	f7ff fb8d 	bl	8006594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e7a:	46c0      	nop			; (mov r8, r8)
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	b004      	add	sp, #16
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b086      	sub	sp, #24
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e90:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	2301      	movs	r3, #1
 8006e96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f383 8810 	msr	PRIMASK, r3
}
 8006e9e:	46c0      	nop			; (mov r8, r8)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2140      	movs	r1, #64	; 0x40
 8006eac:	438a      	bics	r2, r1
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f383 8810 	msr	PRIMASK, r3
}
 8006eba:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	0018      	movs	r0, r3
 8006ecc:	f7ff fb5a 	bl	8006584 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ed0:	46c0      	nop			; (mov r8, r8)
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	b006      	add	sp, #24
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b094      	sub	sp, #80	; 0x50
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ee0:	204e      	movs	r0, #78	; 0x4e
 8006ee2:	183b      	adds	r3, r7, r0
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	215c      	movs	r1, #92	; 0x5c
 8006ee8:	5a52      	ldrh	r2, [r2, r1]
 8006eea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2280      	movs	r2, #128	; 0x80
 8006ef0:	589b      	ldr	r3, [r3, r2]
 8006ef2:	2b22      	cmp	r3, #34	; 0x22
 8006ef4:	d000      	beq.n	8006ef8 <UART_RxISR_8BIT+0x20>
 8006ef6:	e0ba      	b.n	800706e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	214c      	movs	r1, #76	; 0x4c
 8006efe:	187b      	adds	r3, r7, r1
 8006f00:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006f02:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f04:	187b      	adds	r3, r7, r1
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	183b      	adds	r3, r7, r0
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	b2d9      	uxtb	r1, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f14:	400a      	ands	r2, r1
 8006f16:	b2d2      	uxtb	r2, r2
 8006f18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	225a      	movs	r2, #90	; 0x5a
 8006f28:	5a9b      	ldrh	r3, [r3, r2]
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	b299      	uxth	r1, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	225a      	movs	r2, #90	; 0x5a
 8006f34:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	225a      	movs	r2, #90	; 0x5a
 8006f3a:	5a9b      	ldrh	r3, [r3, r2]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d000      	beq.n	8006f44 <UART_RxISR_8BIT+0x6c>
 8006f42:	e09c      	b.n	800707e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f44:	f3ef 8310 	mrs	r3, PRIMASK
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f4e:	2301      	movs	r3, #1
 8006f50:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f54:	f383 8810 	msr	PRIMASK, r3
}
 8006f58:	46c0      	nop			; (mov r8, r8)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4948      	ldr	r1, [pc, #288]	; (8007088 <UART_RxISR_8BIT+0x1b0>)
 8006f66:	400a      	ands	r2, r1
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f70:	f383 8810 	msr	PRIMASK, r3
}
 8006f74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f76:	f3ef 8310 	mrs	r3, PRIMASK
 8006f7a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f80:	2301      	movs	r3, #1
 8006f82:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f86:	f383 8810 	msr	PRIMASK, r3
}
 8006f8a:	46c0      	nop			; (mov r8, r8)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2101      	movs	r1, #1
 8006f98:	438a      	bics	r2, r1
 8006f9a:	609a      	str	r2, [r3, #8]
 8006f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa2:	f383 8810 	msr	PRIMASK, r3
}
 8006fa6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2280      	movs	r2, #128	; 0x80
 8006fac:	2120      	movs	r1, #32
 8006fae:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	2380      	movs	r3, #128	; 0x80
 8006fc4:	041b      	lsls	r3, r3, #16
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	d018      	beq.n	8006ffc <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fca:	f3ef 8310 	mrs	r3, PRIMASK
 8006fce:	61bb      	str	r3, [r7, #24]
  return(result);
 8006fd0:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	f383 8810 	msr	PRIMASK, r3
}
 8006fde:	46c0      	nop			; (mov r8, r8)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4928      	ldr	r1, [pc, #160]	; (800708c <UART_RxISR_8BIT+0x1b4>)
 8006fec:	400a      	ands	r2, r1
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ff2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	f383 8810 	msr	PRIMASK, r3
}
 8006ffa:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007000:	2b01      	cmp	r3, #1
 8007002:	d12f      	bne.n	8007064 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800700a:	f3ef 8310 	mrs	r3, PRIMASK
 800700e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007010:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007014:	2301      	movs	r3, #1
 8007016:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f383 8810 	msr	PRIMASK, r3
}
 800701e:	46c0      	nop			; (mov r8, r8)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2110      	movs	r1, #16
 800702c:	438a      	bics	r2, r1
 800702e:	601a      	str	r2, [r3, #0]
 8007030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007032:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f383 8810 	msr	PRIMASK, r3
}
 800703a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	2210      	movs	r2, #16
 8007044:	4013      	ands	r3, r2
 8007046:	2b10      	cmp	r3, #16
 8007048:	d103      	bne.n	8007052 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2210      	movs	r2, #16
 8007050:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2258      	movs	r2, #88	; 0x58
 8007056:	5a9a      	ldrh	r2, [r3, r2]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	0011      	movs	r1, r2
 800705c:	0018      	movs	r0, r3
 800705e:	f7ff faa1 	bl	80065a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007062:	e00c      	b.n	800707e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	0018      	movs	r0, r3
 8007068:	f7fc f8e6 	bl	8003238 <HAL_UART_RxCpltCallback>
}
 800706c:	e007      	b.n	800707e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	699a      	ldr	r2, [r3, #24]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2108      	movs	r1, #8
 800707a:	430a      	orrs	r2, r1
 800707c:	619a      	str	r2, [r3, #24]
}
 800707e:	46c0      	nop			; (mov r8, r8)
 8007080:	46bd      	mov	sp, r7
 8007082:	b014      	add	sp, #80	; 0x50
 8007084:	bd80      	pop	{r7, pc}
 8007086:	46c0      	nop			; (mov r8, r8)
 8007088:	fffffedf 	.word	0xfffffedf
 800708c:	fbffffff 	.word	0xfbffffff

08007090 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b094      	sub	sp, #80	; 0x50
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007098:	204e      	movs	r0, #78	; 0x4e
 800709a:	183b      	adds	r3, r7, r0
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	215c      	movs	r1, #92	; 0x5c
 80070a0:	5a52      	ldrh	r2, [r2, r1]
 80070a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2280      	movs	r2, #128	; 0x80
 80070a8:	589b      	ldr	r3, [r3, r2]
 80070aa:	2b22      	cmp	r3, #34	; 0x22
 80070ac:	d000      	beq.n	80070b0 <UART_RxISR_16BIT+0x20>
 80070ae:	e0ba      	b.n	8007226 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	214c      	movs	r1, #76	; 0x4c
 80070b6:	187b      	adds	r3, r7, r1
 80070b8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80070ba:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c0:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80070c2:	187b      	adds	r3, r7, r1
 80070c4:	183a      	adds	r2, r7, r0
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	8812      	ldrh	r2, [r2, #0]
 80070ca:	4013      	ands	r3, r2
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d6:	1c9a      	adds	r2, r3, #2
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	225a      	movs	r2, #90	; 0x5a
 80070e0:	5a9b      	ldrh	r3, [r3, r2]
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	3b01      	subs	r3, #1
 80070e6:	b299      	uxth	r1, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	225a      	movs	r2, #90	; 0x5a
 80070ec:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	225a      	movs	r2, #90	; 0x5a
 80070f2:	5a9b      	ldrh	r3, [r3, r2]
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d000      	beq.n	80070fc <UART_RxISR_16BIT+0x6c>
 80070fa:	e09c      	b.n	8007236 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007100:	623b      	str	r3, [r7, #32]
  return(result);
 8007102:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007104:	647b      	str	r3, [r7, #68]	; 0x44
 8007106:	2301      	movs	r3, #1
 8007108:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	f383 8810 	msr	PRIMASK, r3
}
 8007110:	46c0      	nop			; (mov r8, r8)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4948      	ldr	r1, [pc, #288]	; (8007240 <UART_RxISR_16BIT+0x1b0>)
 800711e:	400a      	ands	r2, r1
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007124:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007128:	f383 8810 	msr	PRIMASK, r3
}
 800712c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800712e:	f3ef 8310 	mrs	r3, PRIMASK
 8007132:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007136:	643b      	str	r3, [r7, #64]	; 0x40
 8007138:	2301      	movs	r3, #1
 800713a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713e:	f383 8810 	msr	PRIMASK, r3
}
 8007142:	46c0      	nop			; (mov r8, r8)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2101      	movs	r1, #1
 8007150:	438a      	bics	r2, r1
 8007152:	609a      	str	r2, [r3, #8]
 8007154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007156:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800715a:	f383 8810 	msr	PRIMASK, r3
}
 800715e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2280      	movs	r2, #128	; 0x80
 8007164:	2120      	movs	r1, #32
 8007166:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	2380      	movs	r3, #128	; 0x80
 800717c:	041b      	lsls	r3, r3, #16
 800717e:	4013      	ands	r3, r2
 8007180:	d018      	beq.n	80071b4 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007182:	f3ef 8310 	mrs	r3, PRIMASK
 8007186:	617b      	str	r3, [r7, #20]
  return(result);
 8007188:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800718a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800718c:	2301      	movs	r3, #1
 800718e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	f383 8810 	msr	PRIMASK, r3
}
 8007196:	46c0      	nop			; (mov r8, r8)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4928      	ldr	r1, [pc, #160]	; (8007244 <UART_RxISR_16BIT+0x1b4>)
 80071a4:	400a      	ands	r2, r1
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	f383 8810 	msr	PRIMASK, r3
}
 80071b2:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d12f      	bne.n	800721c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071c2:	f3ef 8310 	mrs	r3, PRIMASK
 80071c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80071c8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80071cc:	2301      	movs	r3, #1
 80071ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f383 8810 	msr	PRIMASK, r3
}
 80071d6:	46c0      	nop			; (mov r8, r8)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2110      	movs	r1, #16
 80071e4:	438a      	bics	r2, r1
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f383 8810 	msr	PRIMASK, r3
}
 80071f2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	2210      	movs	r2, #16
 80071fc:	4013      	ands	r3, r2
 80071fe:	2b10      	cmp	r3, #16
 8007200:	d103      	bne.n	800720a <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2210      	movs	r2, #16
 8007208:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2258      	movs	r2, #88	; 0x58
 800720e:	5a9a      	ldrh	r2, [r3, r2]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	0011      	movs	r1, r2
 8007214:	0018      	movs	r0, r3
 8007216:	f7ff f9c5 	bl	80065a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800721a:	e00c      	b.n	8007236 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	0018      	movs	r0, r3
 8007220:	f7fc f80a 	bl	8003238 <HAL_UART_RxCpltCallback>
}
 8007224:	e007      	b.n	8007236 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	699a      	ldr	r2, [r3, #24]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2108      	movs	r1, #8
 8007232:	430a      	orrs	r2, r1
 8007234:	619a      	str	r2, [r3, #24]
}
 8007236:	46c0      	nop			; (mov r8, r8)
 8007238:	46bd      	mov	sp, r7
 800723a:	b014      	add	sp, #80	; 0x50
 800723c:	bd80      	pop	{r7, pc}
 800723e:	46c0      	nop			; (mov r8, r8)
 8007240:	fffffedf 	.word	0xfffffedf
 8007244:	fbffffff 	.word	0xfbffffff

08007248 <__cvt>:
 8007248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800724a:	001e      	movs	r6, r3
 800724c:	2300      	movs	r3, #0
 800724e:	0014      	movs	r4, r2
 8007250:	b08b      	sub	sp, #44	; 0x2c
 8007252:	429e      	cmp	r6, r3
 8007254:	da04      	bge.n	8007260 <__cvt+0x18>
 8007256:	2180      	movs	r1, #128	; 0x80
 8007258:	0609      	lsls	r1, r1, #24
 800725a:	1873      	adds	r3, r6, r1
 800725c:	001e      	movs	r6, r3
 800725e:	232d      	movs	r3, #45	; 0x2d
 8007260:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007262:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007264:	7013      	strb	r3, [r2, #0]
 8007266:	2320      	movs	r3, #32
 8007268:	2203      	movs	r2, #3
 800726a:	439f      	bics	r7, r3
 800726c:	2f46      	cmp	r7, #70	; 0x46
 800726e:	d007      	beq.n	8007280 <__cvt+0x38>
 8007270:	003b      	movs	r3, r7
 8007272:	3b45      	subs	r3, #69	; 0x45
 8007274:	4259      	negs	r1, r3
 8007276:	414b      	adcs	r3, r1
 8007278:	9910      	ldr	r1, [sp, #64]	; 0x40
 800727a:	3a01      	subs	r2, #1
 800727c:	18cb      	adds	r3, r1, r3
 800727e:	9310      	str	r3, [sp, #64]	; 0x40
 8007280:	ab09      	add	r3, sp, #36	; 0x24
 8007282:	9304      	str	r3, [sp, #16]
 8007284:	ab08      	add	r3, sp, #32
 8007286:	9303      	str	r3, [sp, #12]
 8007288:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800728a:	9200      	str	r2, [sp, #0]
 800728c:	9302      	str	r3, [sp, #8]
 800728e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007290:	0022      	movs	r2, r4
 8007292:	9301      	str	r3, [sp, #4]
 8007294:	0033      	movs	r3, r6
 8007296:	f000 fe93 	bl	8007fc0 <_dtoa_r>
 800729a:	0005      	movs	r5, r0
 800729c:	2f47      	cmp	r7, #71	; 0x47
 800729e:	d102      	bne.n	80072a6 <__cvt+0x5e>
 80072a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072a2:	07db      	lsls	r3, r3, #31
 80072a4:	d528      	bpl.n	80072f8 <__cvt+0xb0>
 80072a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072a8:	18eb      	adds	r3, r5, r3
 80072aa:	9307      	str	r3, [sp, #28]
 80072ac:	2f46      	cmp	r7, #70	; 0x46
 80072ae:	d114      	bne.n	80072da <__cvt+0x92>
 80072b0:	782b      	ldrb	r3, [r5, #0]
 80072b2:	2b30      	cmp	r3, #48	; 0x30
 80072b4:	d10c      	bne.n	80072d0 <__cvt+0x88>
 80072b6:	2200      	movs	r2, #0
 80072b8:	2300      	movs	r3, #0
 80072ba:	0020      	movs	r0, r4
 80072bc:	0031      	movs	r1, r6
 80072be:	f7f9 f8c5 	bl	800044c <__aeabi_dcmpeq>
 80072c2:	2800      	cmp	r0, #0
 80072c4:	d104      	bne.n	80072d0 <__cvt+0x88>
 80072c6:	2301      	movs	r3, #1
 80072c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072ca:	1a9b      	subs	r3, r3, r2
 80072cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072d2:	9a07      	ldr	r2, [sp, #28]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	18d3      	adds	r3, r2, r3
 80072d8:	9307      	str	r3, [sp, #28]
 80072da:	2200      	movs	r2, #0
 80072dc:	2300      	movs	r3, #0
 80072de:	0020      	movs	r0, r4
 80072e0:	0031      	movs	r1, r6
 80072e2:	f7f9 f8b3 	bl	800044c <__aeabi_dcmpeq>
 80072e6:	2800      	cmp	r0, #0
 80072e8:	d001      	beq.n	80072ee <__cvt+0xa6>
 80072ea:	9b07      	ldr	r3, [sp, #28]
 80072ec:	9309      	str	r3, [sp, #36]	; 0x24
 80072ee:	2230      	movs	r2, #48	; 0x30
 80072f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f2:	9907      	ldr	r1, [sp, #28]
 80072f4:	428b      	cmp	r3, r1
 80072f6:	d306      	bcc.n	8007306 <__cvt+0xbe>
 80072f8:	0028      	movs	r0, r5
 80072fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80072fe:	1b5b      	subs	r3, r3, r5
 8007300:	6013      	str	r3, [r2, #0]
 8007302:	b00b      	add	sp, #44	; 0x2c
 8007304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007306:	1c59      	adds	r1, r3, #1
 8007308:	9109      	str	r1, [sp, #36]	; 0x24
 800730a:	701a      	strb	r2, [r3, #0]
 800730c:	e7f0      	b.n	80072f0 <__cvt+0xa8>

0800730e <__exponent>:
 800730e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007310:	1c83      	adds	r3, r0, #2
 8007312:	b087      	sub	sp, #28
 8007314:	9303      	str	r3, [sp, #12]
 8007316:	0005      	movs	r5, r0
 8007318:	000c      	movs	r4, r1
 800731a:	232b      	movs	r3, #43	; 0x2b
 800731c:	7002      	strb	r2, [r0, #0]
 800731e:	2900      	cmp	r1, #0
 8007320:	da01      	bge.n	8007326 <__exponent+0x18>
 8007322:	424c      	negs	r4, r1
 8007324:	3302      	adds	r3, #2
 8007326:	706b      	strb	r3, [r5, #1]
 8007328:	2c09      	cmp	r4, #9
 800732a:	dd2f      	ble.n	800738c <__exponent+0x7e>
 800732c:	270a      	movs	r7, #10
 800732e:	ab04      	add	r3, sp, #16
 8007330:	1dde      	adds	r6, r3, #7
 8007332:	0020      	movs	r0, r4
 8007334:	0039      	movs	r1, r7
 8007336:	9601      	str	r6, [sp, #4]
 8007338:	f7f9 f872 	bl	8000420 <__aeabi_idivmod>
 800733c:	3e01      	subs	r6, #1
 800733e:	3130      	adds	r1, #48	; 0x30
 8007340:	0020      	movs	r0, r4
 8007342:	7031      	strb	r1, [r6, #0]
 8007344:	0039      	movs	r1, r7
 8007346:	9402      	str	r4, [sp, #8]
 8007348:	f7f8 ff84 	bl	8000254 <__divsi3>
 800734c:	9b02      	ldr	r3, [sp, #8]
 800734e:	0004      	movs	r4, r0
 8007350:	2b63      	cmp	r3, #99	; 0x63
 8007352:	dcee      	bgt.n	8007332 <__exponent+0x24>
 8007354:	9b01      	ldr	r3, [sp, #4]
 8007356:	3430      	adds	r4, #48	; 0x30
 8007358:	1e9a      	subs	r2, r3, #2
 800735a:	0013      	movs	r3, r2
 800735c:	9903      	ldr	r1, [sp, #12]
 800735e:	7014      	strb	r4, [r2, #0]
 8007360:	a804      	add	r0, sp, #16
 8007362:	3007      	adds	r0, #7
 8007364:	4298      	cmp	r0, r3
 8007366:	d80c      	bhi.n	8007382 <__exponent+0x74>
 8007368:	2300      	movs	r3, #0
 800736a:	4282      	cmp	r2, r0
 800736c:	d804      	bhi.n	8007378 <__exponent+0x6a>
 800736e:	aa04      	add	r2, sp, #16
 8007370:	3309      	adds	r3, #9
 8007372:	189b      	adds	r3, r3, r2
 8007374:	9a01      	ldr	r2, [sp, #4]
 8007376:	1a9b      	subs	r3, r3, r2
 8007378:	9a03      	ldr	r2, [sp, #12]
 800737a:	18d3      	adds	r3, r2, r3
 800737c:	1b58      	subs	r0, r3, r5
 800737e:	b007      	add	sp, #28
 8007380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007382:	7818      	ldrb	r0, [r3, #0]
 8007384:	3301      	adds	r3, #1
 8007386:	7008      	strb	r0, [r1, #0]
 8007388:	3101      	adds	r1, #1
 800738a:	e7e9      	b.n	8007360 <__exponent+0x52>
 800738c:	2330      	movs	r3, #48	; 0x30
 800738e:	3430      	adds	r4, #48	; 0x30
 8007390:	70ab      	strb	r3, [r5, #2]
 8007392:	70ec      	strb	r4, [r5, #3]
 8007394:	1d2b      	adds	r3, r5, #4
 8007396:	e7f1      	b.n	800737c <__exponent+0x6e>

08007398 <_printf_float>:
 8007398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800739a:	b095      	sub	sp, #84	; 0x54
 800739c:	000c      	movs	r4, r1
 800739e:	9208      	str	r2, [sp, #32]
 80073a0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80073a2:	9309      	str	r3, [sp, #36]	; 0x24
 80073a4:	0007      	movs	r7, r0
 80073a6:	f000 fcf3 	bl	8007d90 <_localeconv_r>
 80073aa:	6803      	ldr	r3, [r0, #0]
 80073ac:	0018      	movs	r0, r3
 80073ae:	930c      	str	r3, [sp, #48]	; 0x30
 80073b0:	f7f8 feaa 	bl	8000108 <strlen>
 80073b4:	2300      	movs	r3, #0
 80073b6:	9312      	str	r3, [sp, #72]	; 0x48
 80073b8:	7e23      	ldrb	r3, [r4, #24]
 80073ba:	2207      	movs	r2, #7
 80073bc:	930a      	str	r3, [sp, #40]	; 0x28
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	900d      	str	r0, [sp, #52]	; 0x34
 80073c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80073c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073c6:	682b      	ldr	r3, [r5, #0]
 80073c8:	05c9      	lsls	r1, r1, #23
 80073ca:	d547      	bpl.n	800745c <_printf_float+0xc4>
 80073cc:	189b      	adds	r3, r3, r2
 80073ce:	4393      	bics	r3, r2
 80073d0:	001a      	movs	r2, r3
 80073d2:	3208      	adds	r2, #8
 80073d4:	602a      	str	r2, [r5, #0]
 80073d6:	681e      	ldr	r6, [r3, #0]
 80073d8:	685d      	ldr	r5, [r3, #4]
 80073da:	0032      	movs	r2, r6
 80073dc:	002b      	movs	r3, r5
 80073de:	64a2      	str	r2, [r4, #72]	; 0x48
 80073e0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80073e2:	2201      	movs	r2, #1
 80073e4:	006b      	lsls	r3, r5, #1
 80073e6:	085b      	lsrs	r3, r3, #1
 80073e8:	930e      	str	r3, [sp, #56]	; 0x38
 80073ea:	0030      	movs	r0, r6
 80073ec:	4bab      	ldr	r3, [pc, #684]	; (800769c <_printf_float+0x304>)
 80073ee:	990e      	ldr	r1, [sp, #56]	; 0x38
 80073f0:	4252      	negs	r2, r2
 80073f2:	f7fb fc71 	bl	8002cd8 <__aeabi_dcmpun>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d132      	bne.n	8007460 <_printf_float+0xc8>
 80073fa:	2201      	movs	r2, #1
 80073fc:	0030      	movs	r0, r6
 80073fe:	4ba7      	ldr	r3, [pc, #668]	; (800769c <_printf_float+0x304>)
 8007400:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007402:	4252      	negs	r2, r2
 8007404:	f7f9 f832 	bl	800046c <__aeabi_dcmple>
 8007408:	2800      	cmp	r0, #0
 800740a:	d129      	bne.n	8007460 <_printf_float+0xc8>
 800740c:	2200      	movs	r2, #0
 800740e:	2300      	movs	r3, #0
 8007410:	0030      	movs	r0, r6
 8007412:	0029      	movs	r1, r5
 8007414:	f7f9 f820 	bl	8000458 <__aeabi_dcmplt>
 8007418:	2800      	cmp	r0, #0
 800741a:	d003      	beq.n	8007424 <_printf_float+0x8c>
 800741c:	0023      	movs	r3, r4
 800741e:	222d      	movs	r2, #45	; 0x2d
 8007420:	3343      	adds	r3, #67	; 0x43
 8007422:	701a      	strb	r2, [r3, #0]
 8007424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007426:	4d9e      	ldr	r5, [pc, #632]	; (80076a0 <_printf_float+0x308>)
 8007428:	2b47      	cmp	r3, #71	; 0x47
 800742a:	d900      	bls.n	800742e <_printf_float+0x96>
 800742c:	4d9d      	ldr	r5, [pc, #628]	; (80076a4 <_printf_float+0x30c>)
 800742e:	2303      	movs	r3, #3
 8007430:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007432:	6123      	str	r3, [r4, #16]
 8007434:	3301      	adds	r3, #1
 8007436:	439a      	bics	r2, r3
 8007438:	2300      	movs	r3, #0
 800743a:	6022      	str	r2, [r4, #0]
 800743c:	930b      	str	r3, [sp, #44]	; 0x2c
 800743e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007440:	0021      	movs	r1, r4
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	0038      	movs	r0, r7
 8007446:	9b08      	ldr	r3, [sp, #32]
 8007448:	aa13      	add	r2, sp, #76	; 0x4c
 800744a:	f000 f9fb 	bl	8007844 <_printf_common>
 800744e:	3001      	adds	r0, #1
 8007450:	d000      	beq.n	8007454 <_printf_float+0xbc>
 8007452:	e0a3      	b.n	800759c <_printf_float+0x204>
 8007454:	2001      	movs	r0, #1
 8007456:	4240      	negs	r0, r0
 8007458:	b015      	add	sp, #84	; 0x54
 800745a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800745c:	3307      	adds	r3, #7
 800745e:	e7b6      	b.n	80073ce <_printf_float+0x36>
 8007460:	0032      	movs	r2, r6
 8007462:	002b      	movs	r3, r5
 8007464:	0030      	movs	r0, r6
 8007466:	0029      	movs	r1, r5
 8007468:	f7fb fc36 	bl	8002cd8 <__aeabi_dcmpun>
 800746c:	2800      	cmp	r0, #0
 800746e:	d00b      	beq.n	8007488 <_printf_float+0xf0>
 8007470:	2d00      	cmp	r5, #0
 8007472:	da03      	bge.n	800747c <_printf_float+0xe4>
 8007474:	0023      	movs	r3, r4
 8007476:	222d      	movs	r2, #45	; 0x2d
 8007478:	3343      	adds	r3, #67	; 0x43
 800747a:	701a      	strb	r2, [r3, #0]
 800747c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800747e:	4d8a      	ldr	r5, [pc, #552]	; (80076a8 <_printf_float+0x310>)
 8007480:	2b47      	cmp	r3, #71	; 0x47
 8007482:	d9d4      	bls.n	800742e <_printf_float+0x96>
 8007484:	4d89      	ldr	r5, [pc, #548]	; (80076ac <_printf_float+0x314>)
 8007486:	e7d2      	b.n	800742e <_printf_float+0x96>
 8007488:	2220      	movs	r2, #32
 800748a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800748c:	6863      	ldr	r3, [r4, #4]
 800748e:	4391      	bics	r1, r2
 8007490:	910e      	str	r1, [sp, #56]	; 0x38
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	d14a      	bne.n	800752c <_printf_float+0x194>
 8007496:	3307      	adds	r3, #7
 8007498:	6063      	str	r3, [r4, #4]
 800749a:	2380      	movs	r3, #128	; 0x80
 800749c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800749e:	00db      	lsls	r3, r3, #3
 80074a0:	4313      	orrs	r3, r2
 80074a2:	2200      	movs	r2, #0
 80074a4:	9206      	str	r2, [sp, #24]
 80074a6:	aa12      	add	r2, sp, #72	; 0x48
 80074a8:	9205      	str	r2, [sp, #20]
 80074aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	9204      	str	r2, [sp, #16]
 80074b0:	aa11      	add	r2, sp, #68	; 0x44
 80074b2:	9203      	str	r2, [sp, #12]
 80074b4:	2223      	movs	r2, #35	; 0x23
 80074b6:	a908      	add	r1, sp, #32
 80074b8:	9301      	str	r3, [sp, #4]
 80074ba:	6863      	ldr	r3, [r4, #4]
 80074bc:	1852      	adds	r2, r2, r1
 80074be:	9202      	str	r2, [sp, #8]
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	0032      	movs	r2, r6
 80074c4:	002b      	movs	r3, r5
 80074c6:	0038      	movs	r0, r7
 80074c8:	f7ff febe 	bl	8007248 <__cvt>
 80074cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074ce:	0005      	movs	r5, r0
 80074d0:	2b47      	cmp	r3, #71	; 0x47
 80074d2:	d109      	bne.n	80074e8 <_printf_float+0x150>
 80074d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074d6:	1cda      	adds	r2, r3, #3
 80074d8:	db02      	blt.n	80074e0 <_printf_float+0x148>
 80074da:	6862      	ldr	r2, [r4, #4]
 80074dc:	4293      	cmp	r3, r2
 80074de:	dd49      	ble.n	8007574 <_printf_float+0x1dc>
 80074e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074e2:	3b02      	subs	r3, #2
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	930a      	str	r3, [sp, #40]	; 0x28
 80074e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ea:	9911      	ldr	r1, [sp, #68]	; 0x44
 80074ec:	2b65      	cmp	r3, #101	; 0x65
 80074ee:	d824      	bhi.n	800753a <_printf_float+0x1a2>
 80074f0:	0020      	movs	r0, r4
 80074f2:	001a      	movs	r2, r3
 80074f4:	3901      	subs	r1, #1
 80074f6:	3050      	adds	r0, #80	; 0x50
 80074f8:	9111      	str	r1, [sp, #68]	; 0x44
 80074fa:	f7ff ff08 	bl	800730e <__exponent>
 80074fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007500:	900b      	str	r0, [sp, #44]	; 0x2c
 8007502:	1813      	adds	r3, r2, r0
 8007504:	6123      	str	r3, [r4, #16]
 8007506:	2a01      	cmp	r2, #1
 8007508:	dc02      	bgt.n	8007510 <_printf_float+0x178>
 800750a:	6822      	ldr	r2, [r4, #0]
 800750c:	07d2      	lsls	r2, r2, #31
 800750e:	d501      	bpl.n	8007514 <_printf_float+0x17c>
 8007510:	3301      	adds	r3, #1
 8007512:	6123      	str	r3, [r4, #16]
 8007514:	2323      	movs	r3, #35	; 0x23
 8007516:	aa08      	add	r2, sp, #32
 8007518:	189b      	adds	r3, r3, r2
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d100      	bne.n	8007522 <_printf_float+0x18a>
 8007520:	e78d      	b.n	800743e <_printf_float+0xa6>
 8007522:	0023      	movs	r3, r4
 8007524:	222d      	movs	r2, #45	; 0x2d
 8007526:	3343      	adds	r3, #67	; 0x43
 8007528:	701a      	strb	r2, [r3, #0]
 800752a:	e788      	b.n	800743e <_printf_float+0xa6>
 800752c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800752e:	2a47      	cmp	r2, #71	; 0x47
 8007530:	d1b3      	bne.n	800749a <_printf_float+0x102>
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1b1      	bne.n	800749a <_printf_float+0x102>
 8007536:	3301      	adds	r3, #1
 8007538:	e7ae      	b.n	8007498 <_printf_float+0x100>
 800753a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800753c:	2b66      	cmp	r3, #102	; 0x66
 800753e:	d11b      	bne.n	8007578 <_printf_float+0x1e0>
 8007540:	6863      	ldr	r3, [r4, #4]
 8007542:	2900      	cmp	r1, #0
 8007544:	dd09      	ble.n	800755a <_printf_float+0x1c2>
 8007546:	6121      	str	r1, [r4, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d102      	bne.n	8007552 <_printf_float+0x1ba>
 800754c:	6822      	ldr	r2, [r4, #0]
 800754e:	07d2      	lsls	r2, r2, #31
 8007550:	d50b      	bpl.n	800756a <_printf_float+0x1d2>
 8007552:	3301      	adds	r3, #1
 8007554:	185b      	adds	r3, r3, r1
 8007556:	6123      	str	r3, [r4, #16]
 8007558:	e007      	b.n	800756a <_printf_float+0x1d2>
 800755a:	2b00      	cmp	r3, #0
 800755c:	d103      	bne.n	8007566 <_printf_float+0x1ce>
 800755e:	2201      	movs	r2, #1
 8007560:	6821      	ldr	r1, [r4, #0]
 8007562:	4211      	tst	r1, r2
 8007564:	d000      	beq.n	8007568 <_printf_float+0x1d0>
 8007566:	1c9a      	adds	r2, r3, #2
 8007568:	6122      	str	r2, [r4, #16]
 800756a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800756c:	65a3      	str	r3, [r4, #88]	; 0x58
 800756e:	2300      	movs	r3, #0
 8007570:	930b      	str	r3, [sp, #44]	; 0x2c
 8007572:	e7cf      	b.n	8007514 <_printf_float+0x17c>
 8007574:	2367      	movs	r3, #103	; 0x67
 8007576:	930a      	str	r3, [sp, #40]	; 0x28
 8007578:	9911      	ldr	r1, [sp, #68]	; 0x44
 800757a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800757c:	4299      	cmp	r1, r3
 800757e:	db06      	blt.n	800758e <_printf_float+0x1f6>
 8007580:	6823      	ldr	r3, [r4, #0]
 8007582:	6121      	str	r1, [r4, #16]
 8007584:	07db      	lsls	r3, r3, #31
 8007586:	d5f0      	bpl.n	800756a <_printf_float+0x1d2>
 8007588:	3101      	adds	r1, #1
 800758a:	6121      	str	r1, [r4, #16]
 800758c:	e7ed      	b.n	800756a <_printf_float+0x1d2>
 800758e:	2201      	movs	r2, #1
 8007590:	2900      	cmp	r1, #0
 8007592:	dc01      	bgt.n	8007598 <_printf_float+0x200>
 8007594:	1892      	adds	r2, r2, r2
 8007596:	1a52      	subs	r2, r2, r1
 8007598:	189b      	adds	r3, r3, r2
 800759a:	e7dc      	b.n	8007556 <_printf_float+0x1be>
 800759c:	6822      	ldr	r2, [r4, #0]
 800759e:	0553      	lsls	r3, r2, #21
 80075a0:	d408      	bmi.n	80075b4 <_printf_float+0x21c>
 80075a2:	6923      	ldr	r3, [r4, #16]
 80075a4:	002a      	movs	r2, r5
 80075a6:	0038      	movs	r0, r7
 80075a8:	9908      	ldr	r1, [sp, #32]
 80075aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80075ac:	47a8      	blx	r5
 80075ae:	3001      	adds	r0, #1
 80075b0:	d12a      	bne.n	8007608 <_printf_float+0x270>
 80075b2:	e74f      	b.n	8007454 <_printf_float+0xbc>
 80075b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b6:	2b65      	cmp	r3, #101	; 0x65
 80075b8:	d800      	bhi.n	80075bc <_printf_float+0x224>
 80075ba:	e0ec      	b.n	8007796 <_printf_float+0x3fe>
 80075bc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80075be:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80075c0:	2200      	movs	r2, #0
 80075c2:	2300      	movs	r3, #0
 80075c4:	f7f8 ff42 	bl	800044c <__aeabi_dcmpeq>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	d034      	beq.n	8007636 <_printf_float+0x29e>
 80075cc:	2301      	movs	r3, #1
 80075ce:	0038      	movs	r0, r7
 80075d0:	4a37      	ldr	r2, [pc, #220]	; (80076b0 <_printf_float+0x318>)
 80075d2:	9908      	ldr	r1, [sp, #32]
 80075d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80075d6:	47a8      	blx	r5
 80075d8:	3001      	adds	r0, #1
 80075da:	d100      	bne.n	80075de <_printf_float+0x246>
 80075dc:	e73a      	b.n	8007454 <_printf_float+0xbc>
 80075de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80075e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075e2:	429a      	cmp	r2, r3
 80075e4:	db02      	blt.n	80075ec <_printf_float+0x254>
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	07db      	lsls	r3, r3, #31
 80075ea:	d50d      	bpl.n	8007608 <_printf_float+0x270>
 80075ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80075ee:	0038      	movs	r0, r7
 80075f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075f4:	9908      	ldr	r1, [sp, #32]
 80075f6:	47a8      	blx	r5
 80075f8:	2500      	movs	r5, #0
 80075fa:	3001      	adds	r0, #1
 80075fc:	d100      	bne.n	8007600 <_printf_float+0x268>
 80075fe:	e729      	b.n	8007454 <_printf_float+0xbc>
 8007600:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007602:	3b01      	subs	r3, #1
 8007604:	42ab      	cmp	r3, r5
 8007606:	dc0a      	bgt.n	800761e <_printf_float+0x286>
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	079b      	lsls	r3, r3, #30
 800760c:	d500      	bpl.n	8007610 <_printf_float+0x278>
 800760e:	e116      	b.n	800783e <_printf_float+0x4a6>
 8007610:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007612:	68e0      	ldr	r0, [r4, #12]
 8007614:	4298      	cmp	r0, r3
 8007616:	db00      	blt.n	800761a <_printf_float+0x282>
 8007618:	e71e      	b.n	8007458 <_printf_float+0xc0>
 800761a:	0018      	movs	r0, r3
 800761c:	e71c      	b.n	8007458 <_printf_float+0xc0>
 800761e:	0022      	movs	r2, r4
 8007620:	2301      	movs	r3, #1
 8007622:	0038      	movs	r0, r7
 8007624:	9908      	ldr	r1, [sp, #32]
 8007626:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007628:	321a      	adds	r2, #26
 800762a:	47b0      	blx	r6
 800762c:	3001      	adds	r0, #1
 800762e:	d100      	bne.n	8007632 <_printf_float+0x29a>
 8007630:	e710      	b.n	8007454 <_printf_float+0xbc>
 8007632:	3501      	adds	r5, #1
 8007634:	e7e4      	b.n	8007600 <_printf_float+0x268>
 8007636:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007638:	2b00      	cmp	r3, #0
 800763a:	dc3b      	bgt.n	80076b4 <_printf_float+0x31c>
 800763c:	2301      	movs	r3, #1
 800763e:	0038      	movs	r0, r7
 8007640:	4a1b      	ldr	r2, [pc, #108]	; (80076b0 <_printf_float+0x318>)
 8007642:	9908      	ldr	r1, [sp, #32]
 8007644:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007646:	47b0      	blx	r6
 8007648:	3001      	adds	r0, #1
 800764a:	d100      	bne.n	800764e <_printf_float+0x2b6>
 800764c:	e702      	b.n	8007454 <_printf_float+0xbc>
 800764e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007650:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007652:	4313      	orrs	r3, r2
 8007654:	d102      	bne.n	800765c <_printf_float+0x2c4>
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	07db      	lsls	r3, r3, #31
 800765a:	d5d5      	bpl.n	8007608 <_printf_float+0x270>
 800765c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800765e:	0038      	movs	r0, r7
 8007660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007662:	9908      	ldr	r1, [sp, #32]
 8007664:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007666:	47b0      	blx	r6
 8007668:	2300      	movs	r3, #0
 800766a:	3001      	adds	r0, #1
 800766c:	d100      	bne.n	8007670 <_printf_float+0x2d8>
 800766e:	e6f1      	b.n	8007454 <_printf_float+0xbc>
 8007670:	930a      	str	r3, [sp, #40]	; 0x28
 8007672:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007674:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007676:	425b      	negs	r3, r3
 8007678:	4293      	cmp	r3, r2
 800767a:	dc01      	bgt.n	8007680 <_printf_float+0x2e8>
 800767c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800767e:	e791      	b.n	80075a4 <_printf_float+0x20c>
 8007680:	0022      	movs	r2, r4
 8007682:	2301      	movs	r3, #1
 8007684:	0038      	movs	r0, r7
 8007686:	9908      	ldr	r1, [sp, #32]
 8007688:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800768a:	321a      	adds	r2, #26
 800768c:	47b0      	blx	r6
 800768e:	3001      	adds	r0, #1
 8007690:	d100      	bne.n	8007694 <_printf_float+0x2fc>
 8007692:	e6df      	b.n	8007454 <_printf_float+0xbc>
 8007694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007696:	3301      	adds	r3, #1
 8007698:	e7ea      	b.n	8007670 <_printf_float+0x2d8>
 800769a:	46c0      	nop			; (mov r8, r8)
 800769c:	7fefffff 	.word	0x7fefffff
 80076a0:	0800a1b0 	.word	0x0800a1b0
 80076a4:	0800a1b4 	.word	0x0800a1b4
 80076a8:	0800a1b8 	.word	0x0800a1b8
 80076ac:	0800a1bc 	.word	0x0800a1bc
 80076b0:	0800a1c0 	.word	0x0800a1c0
 80076b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076b8:	920a      	str	r2, [sp, #40]	; 0x28
 80076ba:	429a      	cmp	r2, r3
 80076bc:	dd00      	ble.n	80076c0 <_printf_float+0x328>
 80076be:	930a      	str	r3, [sp, #40]	; 0x28
 80076c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	dc3d      	bgt.n	8007742 <_printf_float+0x3aa>
 80076c6:	2300      	movs	r3, #0
 80076c8:	930e      	str	r3, [sp, #56]	; 0x38
 80076ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076cc:	43db      	mvns	r3, r3
 80076ce:	17db      	asrs	r3, r3, #31
 80076d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80076d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80076d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076da:	4013      	ands	r3, r2
 80076dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076e2:	4293      	cmp	r3, r2
 80076e4:	dc36      	bgt.n	8007754 <_printf_float+0x3bc>
 80076e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80076e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076ea:	429a      	cmp	r2, r3
 80076ec:	db40      	blt.n	8007770 <_printf_float+0x3d8>
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	07db      	lsls	r3, r3, #31
 80076f2:	d43d      	bmi.n	8007770 <_printf_float+0x3d8>
 80076f4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80076f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80076f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076fa:	1af3      	subs	r3, r6, r3
 80076fc:	1ab6      	subs	r6, r6, r2
 80076fe:	429e      	cmp	r6, r3
 8007700:	dd00      	ble.n	8007704 <_printf_float+0x36c>
 8007702:	001e      	movs	r6, r3
 8007704:	2e00      	cmp	r6, #0
 8007706:	dc3c      	bgt.n	8007782 <_printf_float+0x3ea>
 8007708:	2300      	movs	r3, #0
 800770a:	930a      	str	r3, [sp, #40]	; 0x28
 800770c:	43f3      	mvns	r3, r6
 800770e:	17db      	asrs	r3, r3, #31
 8007710:	930b      	str	r3, [sp, #44]	; 0x2c
 8007712:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007714:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007716:	1a9b      	subs	r3, r3, r2
 8007718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800771a:	4032      	ands	r2, r6
 800771c:	1a9b      	subs	r3, r3, r2
 800771e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007720:	4293      	cmp	r3, r2
 8007722:	dc00      	bgt.n	8007726 <_printf_float+0x38e>
 8007724:	e770      	b.n	8007608 <_printf_float+0x270>
 8007726:	0022      	movs	r2, r4
 8007728:	2301      	movs	r3, #1
 800772a:	0038      	movs	r0, r7
 800772c:	9908      	ldr	r1, [sp, #32]
 800772e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007730:	321a      	adds	r2, #26
 8007732:	47a8      	blx	r5
 8007734:	3001      	adds	r0, #1
 8007736:	d100      	bne.n	800773a <_printf_float+0x3a2>
 8007738:	e68c      	b.n	8007454 <_printf_float+0xbc>
 800773a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800773c:	3301      	adds	r3, #1
 800773e:	930a      	str	r3, [sp, #40]	; 0x28
 8007740:	e7e7      	b.n	8007712 <_printf_float+0x37a>
 8007742:	002a      	movs	r2, r5
 8007744:	0038      	movs	r0, r7
 8007746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007748:	9908      	ldr	r1, [sp, #32]
 800774a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800774c:	47b0      	blx	r6
 800774e:	3001      	adds	r0, #1
 8007750:	d1b9      	bne.n	80076c6 <_printf_float+0x32e>
 8007752:	e67f      	b.n	8007454 <_printf_float+0xbc>
 8007754:	0022      	movs	r2, r4
 8007756:	2301      	movs	r3, #1
 8007758:	0038      	movs	r0, r7
 800775a:	9908      	ldr	r1, [sp, #32]
 800775c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800775e:	321a      	adds	r2, #26
 8007760:	47b0      	blx	r6
 8007762:	3001      	adds	r0, #1
 8007764:	d100      	bne.n	8007768 <_printf_float+0x3d0>
 8007766:	e675      	b.n	8007454 <_printf_float+0xbc>
 8007768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800776a:	3301      	adds	r3, #1
 800776c:	930e      	str	r3, [sp, #56]	; 0x38
 800776e:	e7b0      	b.n	80076d2 <_printf_float+0x33a>
 8007770:	0038      	movs	r0, r7
 8007772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007774:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007776:	9908      	ldr	r1, [sp, #32]
 8007778:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800777a:	47b0      	blx	r6
 800777c:	3001      	adds	r0, #1
 800777e:	d1b9      	bne.n	80076f4 <_printf_float+0x35c>
 8007780:	e668      	b.n	8007454 <_printf_float+0xbc>
 8007782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007784:	0038      	movs	r0, r7
 8007786:	18ea      	adds	r2, r5, r3
 8007788:	9908      	ldr	r1, [sp, #32]
 800778a:	0033      	movs	r3, r6
 800778c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800778e:	47a8      	blx	r5
 8007790:	3001      	adds	r0, #1
 8007792:	d1b9      	bne.n	8007708 <_printf_float+0x370>
 8007794:	e65e      	b.n	8007454 <_printf_float+0xbc>
 8007796:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007798:	2b01      	cmp	r3, #1
 800779a:	dc02      	bgt.n	80077a2 <_printf_float+0x40a>
 800779c:	2301      	movs	r3, #1
 800779e:	421a      	tst	r2, r3
 80077a0:	d03a      	beq.n	8007818 <_printf_float+0x480>
 80077a2:	2301      	movs	r3, #1
 80077a4:	002a      	movs	r2, r5
 80077a6:	0038      	movs	r0, r7
 80077a8:	9908      	ldr	r1, [sp, #32]
 80077aa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80077ac:	47b0      	blx	r6
 80077ae:	3001      	adds	r0, #1
 80077b0:	d100      	bne.n	80077b4 <_printf_float+0x41c>
 80077b2:	e64f      	b.n	8007454 <_printf_float+0xbc>
 80077b4:	0038      	movs	r0, r7
 80077b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077ba:	9908      	ldr	r1, [sp, #32]
 80077bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80077be:	47b0      	blx	r6
 80077c0:	3001      	adds	r0, #1
 80077c2:	d100      	bne.n	80077c6 <_printf_float+0x42e>
 80077c4:	e646      	b.n	8007454 <_printf_float+0xbc>
 80077c6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80077c8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80077ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077cc:	2200      	movs	r2, #0
 80077ce:	001e      	movs	r6, r3
 80077d0:	2300      	movs	r3, #0
 80077d2:	f7f8 fe3b 	bl	800044c <__aeabi_dcmpeq>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d11c      	bne.n	8007814 <_printf_float+0x47c>
 80077da:	0033      	movs	r3, r6
 80077dc:	1c6a      	adds	r2, r5, #1
 80077de:	3b01      	subs	r3, #1
 80077e0:	0038      	movs	r0, r7
 80077e2:	9908      	ldr	r1, [sp, #32]
 80077e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80077e6:	47a8      	blx	r5
 80077e8:	3001      	adds	r0, #1
 80077ea:	d10f      	bne.n	800780c <_printf_float+0x474>
 80077ec:	e632      	b.n	8007454 <_printf_float+0xbc>
 80077ee:	0022      	movs	r2, r4
 80077f0:	2301      	movs	r3, #1
 80077f2:	0038      	movs	r0, r7
 80077f4:	9908      	ldr	r1, [sp, #32]
 80077f6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80077f8:	321a      	adds	r2, #26
 80077fa:	47b0      	blx	r6
 80077fc:	3001      	adds	r0, #1
 80077fe:	d100      	bne.n	8007802 <_printf_float+0x46a>
 8007800:	e628      	b.n	8007454 <_printf_float+0xbc>
 8007802:	3501      	adds	r5, #1
 8007804:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007806:	3b01      	subs	r3, #1
 8007808:	42ab      	cmp	r3, r5
 800780a:	dcf0      	bgt.n	80077ee <_printf_float+0x456>
 800780c:	0022      	movs	r2, r4
 800780e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007810:	3250      	adds	r2, #80	; 0x50
 8007812:	e6c8      	b.n	80075a6 <_printf_float+0x20e>
 8007814:	2500      	movs	r5, #0
 8007816:	e7f5      	b.n	8007804 <_printf_float+0x46c>
 8007818:	002a      	movs	r2, r5
 800781a:	e7e1      	b.n	80077e0 <_printf_float+0x448>
 800781c:	0022      	movs	r2, r4
 800781e:	2301      	movs	r3, #1
 8007820:	0038      	movs	r0, r7
 8007822:	9908      	ldr	r1, [sp, #32]
 8007824:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007826:	3219      	adds	r2, #25
 8007828:	47b0      	blx	r6
 800782a:	3001      	adds	r0, #1
 800782c:	d100      	bne.n	8007830 <_printf_float+0x498>
 800782e:	e611      	b.n	8007454 <_printf_float+0xbc>
 8007830:	3501      	adds	r5, #1
 8007832:	68e3      	ldr	r3, [r4, #12]
 8007834:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007836:	1a9b      	subs	r3, r3, r2
 8007838:	42ab      	cmp	r3, r5
 800783a:	dcef      	bgt.n	800781c <_printf_float+0x484>
 800783c:	e6e8      	b.n	8007610 <_printf_float+0x278>
 800783e:	2500      	movs	r5, #0
 8007840:	e7f7      	b.n	8007832 <_printf_float+0x49a>
 8007842:	46c0      	nop			; (mov r8, r8)

08007844 <_printf_common>:
 8007844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007846:	0016      	movs	r6, r2
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	688a      	ldr	r2, [r1, #8]
 800784c:	690b      	ldr	r3, [r1, #16]
 800784e:	000c      	movs	r4, r1
 8007850:	9000      	str	r0, [sp, #0]
 8007852:	4293      	cmp	r3, r2
 8007854:	da00      	bge.n	8007858 <_printf_common+0x14>
 8007856:	0013      	movs	r3, r2
 8007858:	0022      	movs	r2, r4
 800785a:	6033      	str	r3, [r6, #0]
 800785c:	3243      	adds	r2, #67	; 0x43
 800785e:	7812      	ldrb	r2, [r2, #0]
 8007860:	2a00      	cmp	r2, #0
 8007862:	d001      	beq.n	8007868 <_printf_common+0x24>
 8007864:	3301      	adds	r3, #1
 8007866:	6033      	str	r3, [r6, #0]
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	069b      	lsls	r3, r3, #26
 800786c:	d502      	bpl.n	8007874 <_printf_common+0x30>
 800786e:	6833      	ldr	r3, [r6, #0]
 8007870:	3302      	adds	r3, #2
 8007872:	6033      	str	r3, [r6, #0]
 8007874:	6822      	ldr	r2, [r4, #0]
 8007876:	2306      	movs	r3, #6
 8007878:	0015      	movs	r5, r2
 800787a:	401d      	ands	r5, r3
 800787c:	421a      	tst	r2, r3
 800787e:	d027      	beq.n	80078d0 <_printf_common+0x8c>
 8007880:	0023      	movs	r3, r4
 8007882:	3343      	adds	r3, #67	; 0x43
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	1e5a      	subs	r2, r3, #1
 8007888:	4193      	sbcs	r3, r2
 800788a:	6822      	ldr	r2, [r4, #0]
 800788c:	0692      	lsls	r2, r2, #26
 800788e:	d430      	bmi.n	80078f2 <_printf_common+0xae>
 8007890:	0022      	movs	r2, r4
 8007892:	9901      	ldr	r1, [sp, #4]
 8007894:	9800      	ldr	r0, [sp, #0]
 8007896:	9d08      	ldr	r5, [sp, #32]
 8007898:	3243      	adds	r2, #67	; 0x43
 800789a:	47a8      	blx	r5
 800789c:	3001      	adds	r0, #1
 800789e:	d025      	beq.n	80078ec <_printf_common+0xa8>
 80078a0:	2206      	movs	r2, #6
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	2500      	movs	r5, #0
 80078a6:	4013      	ands	r3, r2
 80078a8:	2b04      	cmp	r3, #4
 80078aa:	d105      	bne.n	80078b8 <_printf_common+0x74>
 80078ac:	6833      	ldr	r3, [r6, #0]
 80078ae:	68e5      	ldr	r5, [r4, #12]
 80078b0:	1aed      	subs	r5, r5, r3
 80078b2:	43eb      	mvns	r3, r5
 80078b4:	17db      	asrs	r3, r3, #31
 80078b6:	401d      	ands	r5, r3
 80078b8:	68a3      	ldr	r3, [r4, #8]
 80078ba:	6922      	ldr	r2, [r4, #16]
 80078bc:	4293      	cmp	r3, r2
 80078be:	dd01      	ble.n	80078c4 <_printf_common+0x80>
 80078c0:	1a9b      	subs	r3, r3, r2
 80078c2:	18ed      	adds	r5, r5, r3
 80078c4:	2600      	movs	r6, #0
 80078c6:	42b5      	cmp	r5, r6
 80078c8:	d120      	bne.n	800790c <_printf_common+0xc8>
 80078ca:	2000      	movs	r0, #0
 80078cc:	e010      	b.n	80078f0 <_printf_common+0xac>
 80078ce:	3501      	adds	r5, #1
 80078d0:	68e3      	ldr	r3, [r4, #12]
 80078d2:	6832      	ldr	r2, [r6, #0]
 80078d4:	1a9b      	subs	r3, r3, r2
 80078d6:	42ab      	cmp	r3, r5
 80078d8:	ddd2      	ble.n	8007880 <_printf_common+0x3c>
 80078da:	0022      	movs	r2, r4
 80078dc:	2301      	movs	r3, #1
 80078de:	9901      	ldr	r1, [sp, #4]
 80078e0:	9800      	ldr	r0, [sp, #0]
 80078e2:	9f08      	ldr	r7, [sp, #32]
 80078e4:	3219      	adds	r2, #25
 80078e6:	47b8      	blx	r7
 80078e8:	3001      	adds	r0, #1
 80078ea:	d1f0      	bne.n	80078ce <_printf_common+0x8a>
 80078ec:	2001      	movs	r0, #1
 80078ee:	4240      	negs	r0, r0
 80078f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80078f2:	2030      	movs	r0, #48	; 0x30
 80078f4:	18e1      	adds	r1, r4, r3
 80078f6:	3143      	adds	r1, #67	; 0x43
 80078f8:	7008      	strb	r0, [r1, #0]
 80078fa:	0021      	movs	r1, r4
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	3145      	adds	r1, #69	; 0x45
 8007900:	7809      	ldrb	r1, [r1, #0]
 8007902:	18a2      	adds	r2, r4, r2
 8007904:	3243      	adds	r2, #67	; 0x43
 8007906:	3302      	adds	r3, #2
 8007908:	7011      	strb	r1, [r2, #0]
 800790a:	e7c1      	b.n	8007890 <_printf_common+0x4c>
 800790c:	0022      	movs	r2, r4
 800790e:	2301      	movs	r3, #1
 8007910:	9901      	ldr	r1, [sp, #4]
 8007912:	9800      	ldr	r0, [sp, #0]
 8007914:	9f08      	ldr	r7, [sp, #32]
 8007916:	321a      	adds	r2, #26
 8007918:	47b8      	blx	r7
 800791a:	3001      	adds	r0, #1
 800791c:	d0e6      	beq.n	80078ec <_printf_common+0xa8>
 800791e:	3601      	adds	r6, #1
 8007920:	e7d1      	b.n	80078c6 <_printf_common+0x82>
	...

08007924 <_printf_i>:
 8007924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007926:	b08b      	sub	sp, #44	; 0x2c
 8007928:	9206      	str	r2, [sp, #24]
 800792a:	000a      	movs	r2, r1
 800792c:	3243      	adds	r2, #67	; 0x43
 800792e:	9307      	str	r3, [sp, #28]
 8007930:	9005      	str	r0, [sp, #20]
 8007932:	9204      	str	r2, [sp, #16]
 8007934:	7e0a      	ldrb	r2, [r1, #24]
 8007936:	000c      	movs	r4, r1
 8007938:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800793a:	2a78      	cmp	r2, #120	; 0x78
 800793c:	d809      	bhi.n	8007952 <_printf_i+0x2e>
 800793e:	2a62      	cmp	r2, #98	; 0x62
 8007940:	d80b      	bhi.n	800795a <_printf_i+0x36>
 8007942:	2a00      	cmp	r2, #0
 8007944:	d100      	bne.n	8007948 <_printf_i+0x24>
 8007946:	e0be      	b.n	8007ac6 <_printf_i+0x1a2>
 8007948:	497c      	ldr	r1, [pc, #496]	; (8007b3c <_printf_i+0x218>)
 800794a:	9103      	str	r1, [sp, #12]
 800794c:	2a58      	cmp	r2, #88	; 0x58
 800794e:	d100      	bne.n	8007952 <_printf_i+0x2e>
 8007950:	e093      	b.n	8007a7a <_printf_i+0x156>
 8007952:	0026      	movs	r6, r4
 8007954:	3642      	adds	r6, #66	; 0x42
 8007956:	7032      	strb	r2, [r6, #0]
 8007958:	e022      	b.n	80079a0 <_printf_i+0x7c>
 800795a:	0010      	movs	r0, r2
 800795c:	3863      	subs	r0, #99	; 0x63
 800795e:	2815      	cmp	r0, #21
 8007960:	d8f7      	bhi.n	8007952 <_printf_i+0x2e>
 8007962:	f7f8 fbe3 	bl	800012c <__gnu_thumb1_case_shi>
 8007966:	0016      	.short	0x0016
 8007968:	fff6001f 	.word	0xfff6001f
 800796c:	fff6fff6 	.word	0xfff6fff6
 8007970:	001ffff6 	.word	0x001ffff6
 8007974:	fff6fff6 	.word	0xfff6fff6
 8007978:	fff6fff6 	.word	0xfff6fff6
 800797c:	003600a3 	.word	0x003600a3
 8007980:	fff60083 	.word	0xfff60083
 8007984:	00b4fff6 	.word	0x00b4fff6
 8007988:	0036fff6 	.word	0x0036fff6
 800798c:	fff6fff6 	.word	0xfff6fff6
 8007990:	0087      	.short	0x0087
 8007992:	0026      	movs	r6, r4
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	3642      	adds	r6, #66	; 0x42
 8007998:	1d11      	adds	r1, r2, #4
 800799a:	6019      	str	r1, [r3, #0]
 800799c:	6813      	ldr	r3, [r2, #0]
 800799e:	7033      	strb	r3, [r6, #0]
 80079a0:	2301      	movs	r3, #1
 80079a2:	e0a2      	b.n	8007aea <_printf_i+0x1c6>
 80079a4:	6818      	ldr	r0, [r3, #0]
 80079a6:	6809      	ldr	r1, [r1, #0]
 80079a8:	1d02      	adds	r2, r0, #4
 80079aa:	060d      	lsls	r5, r1, #24
 80079ac:	d50b      	bpl.n	80079c6 <_printf_i+0xa2>
 80079ae:	6805      	ldr	r5, [r0, #0]
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	2d00      	cmp	r5, #0
 80079b4:	da03      	bge.n	80079be <_printf_i+0x9a>
 80079b6:	232d      	movs	r3, #45	; 0x2d
 80079b8:	9a04      	ldr	r2, [sp, #16]
 80079ba:	426d      	negs	r5, r5
 80079bc:	7013      	strb	r3, [r2, #0]
 80079be:	4b5f      	ldr	r3, [pc, #380]	; (8007b3c <_printf_i+0x218>)
 80079c0:	270a      	movs	r7, #10
 80079c2:	9303      	str	r3, [sp, #12]
 80079c4:	e01b      	b.n	80079fe <_printf_i+0xda>
 80079c6:	6805      	ldr	r5, [r0, #0]
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	0649      	lsls	r1, r1, #25
 80079cc:	d5f1      	bpl.n	80079b2 <_printf_i+0x8e>
 80079ce:	b22d      	sxth	r5, r5
 80079d0:	e7ef      	b.n	80079b2 <_printf_i+0x8e>
 80079d2:	680d      	ldr	r5, [r1, #0]
 80079d4:	6819      	ldr	r1, [r3, #0]
 80079d6:	1d08      	adds	r0, r1, #4
 80079d8:	6018      	str	r0, [r3, #0]
 80079da:	062e      	lsls	r6, r5, #24
 80079dc:	d501      	bpl.n	80079e2 <_printf_i+0xbe>
 80079de:	680d      	ldr	r5, [r1, #0]
 80079e0:	e003      	b.n	80079ea <_printf_i+0xc6>
 80079e2:	066d      	lsls	r5, r5, #25
 80079e4:	d5fb      	bpl.n	80079de <_printf_i+0xba>
 80079e6:	680d      	ldr	r5, [r1, #0]
 80079e8:	b2ad      	uxth	r5, r5
 80079ea:	4b54      	ldr	r3, [pc, #336]	; (8007b3c <_printf_i+0x218>)
 80079ec:	2708      	movs	r7, #8
 80079ee:	9303      	str	r3, [sp, #12]
 80079f0:	2a6f      	cmp	r2, #111	; 0x6f
 80079f2:	d000      	beq.n	80079f6 <_printf_i+0xd2>
 80079f4:	3702      	adds	r7, #2
 80079f6:	0023      	movs	r3, r4
 80079f8:	2200      	movs	r2, #0
 80079fa:	3343      	adds	r3, #67	; 0x43
 80079fc:	701a      	strb	r2, [r3, #0]
 80079fe:	6863      	ldr	r3, [r4, #4]
 8007a00:	60a3      	str	r3, [r4, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	db03      	blt.n	8007a0e <_printf_i+0xea>
 8007a06:	2104      	movs	r1, #4
 8007a08:	6822      	ldr	r2, [r4, #0]
 8007a0a:	438a      	bics	r2, r1
 8007a0c:	6022      	str	r2, [r4, #0]
 8007a0e:	2d00      	cmp	r5, #0
 8007a10:	d102      	bne.n	8007a18 <_printf_i+0xf4>
 8007a12:	9e04      	ldr	r6, [sp, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00c      	beq.n	8007a32 <_printf_i+0x10e>
 8007a18:	9e04      	ldr	r6, [sp, #16]
 8007a1a:	0028      	movs	r0, r5
 8007a1c:	0039      	movs	r1, r7
 8007a1e:	f7f8 fc15 	bl	800024c <__aeabi_uidivmod>
 8007a22:	9b03      	ldr	r3, [sp, #12]
 8007a24:	3e01      	subs	r6, #1
 8007a26:	5c5b      	ldrb	r3, [r3, r1]
 8007a28:	7033      	strb	r3, [r6, #0]
 8007a2a:	002b      	movs	r3, r5
 8007a2c:	0005      	movs	r5, r0
 8007a2e:	429f      	cmp	r7, r3
 8007a30:	d9f3      	bls.n	8007a1a <_printf_i+0xf6>
 8007a32:	2f08      	cmp	r7, #8
 8007a34:	d109      	bne.n	8007a4a <_printf_i+0x126>
 8007a36:	6823      	ldr	r3, [r4, #0]
 8007a38:	07db      	lsls	r3, r3, #31
 8007a3a:	d506      	bpl.n	8007a4a <_printf_i+0x126>
 8007a3c:	6862      	ldr	r2, [r4, #4]
 8007a3e:	6923      	ldr	r3, [r4, #16]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	dc02      	bgt.n	8007a4a <_printf_i+0x126>
 8007a44:	2330      	movs	r3, #48	; 0x30
 8007a46:	3e01      	subs	r6, #1
 8007a48:	7033      	strb	r3, [r6, #0]
 8007a4a:	9b04      	ldr	r3, [sp, #16]
 8007a4c:	1b9b      	subs	r3, r3, r6
 8007a4e:	6123      	str	r3, [r4, #16]
 8007a50:	9b07      	ldr	r3, [sp, #28]
 8007a52:	0021      	movs	r1, r4
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	9805      	ldr	r0, [sp, #20]
 8007a58:	9b06      	ldr	r3, [sp, #24]
 8007a5a:	aa09      	add	r2, sp, #36	; 0x24
 8007a5c:	f7ff fef2 	bl	8007844 <_printf_common>
 8007a60:	3001      	adds	r0, #1
 8007a62:	d147      	bne.n	8007af4 <_printf_i+0x1d0>
 8007a64:	2001      	movs	r0, #1
 8007a66:	4240      	negs	r0, r0
 8007a68:	b00b      	add	sp, #44	; 0x2c
 8007a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	6809      	ldr	r1, [r1, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	6022      	str	r2, [r4, #0]
 8007a74:	2278      	movs	r2, #120	; 0x78
 8007a76:	4932      	ldr	r1, [pc, #200]	; (8007b40 <_printf_i+0x21c>)
 8007a78:	9103      	str	r1, [sp, #12]
 8007a7a:	0021      	movs	r1, r4
 8007a7c:	3145      	adds	r1, #69	; 0x45
 8007a7e:	700a      	strb	r2, [r1, #0]
 8007a80:	6819      	ldr	r1, [r3, #0]
 8007a82:	6822      	ldr	r2, [r4, #0]
 8007a84:	c920      	ldmia	r1!, {r5}
 8007a86:	0610      	lsls	r0, r2, #24
 8007a88:	d402      	bmi.n	8007a90 <_printf_i+0x16c>
 8007a8a:	0650      	lsls	r0, r2, #25
 8007a8c:	d500      	bpl.n	8007a90 <_printf_i+0x16c>
 8007a8e:	b2ad      	uxth	r5, r5
 8007a90:	6019      	str	r1, [r3, #0]
 8007a92:	07d3      	lsls	r3, r2, #31
 8007a94:	d502      	bpl.n	8007a9c <_printf_i+0x178>
 8007a96:	2320      	movs	r3, #32
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	6023      	str	r3, [r4, #0]
 8007a9c:	2710      	movs	r7, #16
 8007a9e:	2d00      	cmp	r5, #0
 8007aa0:	d1a9      	bne.n	80079f6 <_printf_i+0xd2>
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	4393      	bics	r3, r2
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	e7a4      	b.n	80079f6 <_printf_i+0xd2>
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	680d      	ldr	r5, [r1, #0]
 8007ab0:	1d10      	adds	r0, r2, #4
 8007ab2:	6949      	ldr	r1, [r1, #20]
 8007ab4:	6018      	str	r0, [r3, #0]
 8007ab6:	6813      	ldr	r3, [r2, #0]
 8007ab8:	062e      	lsls	r6, r5, #24
 8007aba:	d501      	bpl.n	8007ac0 <_printf_i+0x19c>
 8007abc:	6019      	str	r1, [r3, #0]
 8007abe:	e002      	b.n	8007ac6 <_printf_i+0x1a2>
 8007ac0:	066d      	lsls	r5, r5, #25
 8007ac2:	d5fb      	bpl.n	8007abc <_printf_i+0x198>
 8007ac4:	8019      	strh	r1, [r3, #0]
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	9e04      	ldr	r6, [sp, #16]
 8007aca:	6123      	str	r3, [r4, #16]
 8007acc:	e7c0      	b.n	8007a50 <_printf_i+0x12c>
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	1d11      	adds	r1, r2, #4
 8007ad2:	6019      	str	r1, [r3, #0]
 8007ad4:	6816      	ldr	r6, [r2, #0]
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	0030      	movs	r0, r6
 8007ada:	6862      	ldr	r2, [r4, #4]
 8007adc:	f000 f9d6 	bl	8007e8c <memchr>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d001      	beq.n	8007ae8 <_printf_i+0x1c4>
 8007ae4:	1b80      	subs	r0, r0, r6
 8007ae6:	6060      	str	r0, [r4, #4]
 8007ae8:	6863      	ldr	r3, [r4, #4]
 8007aea:	6123      	str	r3, [r4, #16]
 8007aec:	2300      	movs	r3, #0
 8007aee:	9a04      	ldr	r2, [sp, #16]
 8007af0:	7013      	strb	r3, [r2, #0]
 8007af2:	e7ad      	b.n	8007a50 <_printf_i+0x12c>
 8007af4:	0032      	movs	r2, r6
 8007af6:	6923      	ldr	r3, [r4, #16]
 8007af8:	9906      	ldr	r1, [sp, #24]
 8007afa:	9805      	ldr	r0, [sp, #20]
 8007afc:	9d07      	ldr	r5, [sp, #28]
 8007afe:	47a8      	blx	r5
 8007b00:	3001      	adds	r0, #1
 8007b02:	d0af      	beq.n	8007a64 <_printf_i+0x140>
 8007b04:	6823      	ldr	r3, [r4, #0]
 8007b06:	079b      	lsls	r3, r3, #30
 8007b08:	d415      	bmi.n	8007b36 <_printf_i+0x212>
 8007b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b0c:	68e0      	ldr	r0, [r4, #12]
 8007b0e:	4298      	cmp	r0, r3
 8007b10:	daaa      	bge.n	8007a68 <_printf_i+0x144>
 8007b12:	0018      	movs	r0, r3
 8007b14:	e7a8      	b.n	8007a68 <_printf_i+0x144>
 8007b16:	0022      	movs	r2, r4
 8007b18:	2301      	movs	r3, #1
 8007b1a:	9906      	ldr	r1, [sp, #24]
 8007b1c:	9805      	ldr	r0, [sp, #20]
 8007b1e:	9e07      	ldr	r6, [sp, #28]
 8007b20:	3219      	adds	r2, #25
 8007b22:	47b0      	blx	r6
 8007b24:	3001      	adds	r0, #1
 8007b26:	d09d      	beq.n	8007a64 <_printf_i+0x140>
 8007b28:	3501      	adds	r5, #1
 8007b2a:	68e3      	ldr	r3, [r4, #12]
 8007b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b2e:	1a9b      	subs	r3, r3, r2
 8007b30:	42ab      	cmp	r3, r5
 8007b32:	dcf0      	bgt.n	8007b16 <_printf_i+0x1f2>
 8007b34:	e7e9      	b.n	8007b0a <_printf_i+0x1e6>
 8007b36:	2500      	movs	r5, #0
 8007b38:	e7f7      	b.n	8007b2a <_printf_i+0x206>
 8007b3a:	46c0      	nop			; (mov r8, r8)
 8007b3c:	0800a1c2 	.word	0x0800a1c2
 8007b40:	0800a1d3 	.word	0x0800a1d3

08007b44 <std>:
 8007b44:	2300      	movs	r3, #0
 8007b46:	b510      	push	{r4, lr}
 8007b48:	0004      	movs	r4, r0
 8007b4a:	6003      	str	r3, [r0, #0]
 8007b4c:	6043      	str	r3, [r0, #4]
 8007b4e:	6083      	str	r3, [r0, #8]
 8007b50:	8181      	strh	r1, [r0, #12]
 8007b52:	6643      	str	r3, [r0, #100]	; 0x64
 8007b54:	0019      	movs	r1, r3
 8007b56:	81c2      	strh	r2, [r0, #14]
 8007b58:	6103      	str	r3, [r0, #16]
 8007b5a:	6143      	str	r3, [r0, #20]
 8007b5c:	6183      	str	r3, [r0, #24]
 8007b5e:	2208      	movs	r2, #8
 8007b60:	305c      	adds	r0, #92	; 0x5c
 8007b62:	f000 f90d 	bl	8007d80 <memset>
 8007b66:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <std+0x38>)
 8007b68:	6224      	str	r4, [r4, #32]
 8007b6a:	6263      	str	r3, [r4, #36]	; 0x24
 8007b6c:	4b04      	ldr	r3, [pc, #16]	; (8007b80 <std+0x3c>)
 8007b6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b70:	4b04      	ldr	r3, [pc, #16]	; (8007b84 <std+0x40>)
 8007b72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b74:	4b04      	ldr	r3, [pc, #16]	; (8007b88 <std+0x44>)
 8007b76:	6323      	str	r3, [r4, #48]	; 0x30
 8007b78:	bd10      	pop	{r4, pc}
 8007b7a:	46c0      	nop			; (mov r8, r8)
 8007b7c:	08007ce9 	.word	0x08007ce9
 8007b80:	08007d11 	.word	0x08007d11
 8007b84:	08007d49 	.word	0x08007d49
 8007b88:	08007d75 	.word	0x08007d75

08007b8c <stdio_exit_handler>:
 8007b8c:	b510      	push	{r4, lr}
 8007b8e:	4a03      	ldr	r2, [pc, #12]	; (8007b9c <stdio_exit_handler+0x10>)
 8007b90:	4903      	ldr	r1, [pc, #12]	; (8007ba0 <stdio_exit_handler+0x14>)
 8007b92:	4804      	ldr	r0, [pc, #16]	; (8007ba4 <stdio_exit_handler+0x18>)
 8007b94:	f000 f86c 	bl	8007c70 <_fwalk_sglue>
 8007b98:	bd10      	pop	{r4, pc}
 8007b9a:	46c0      	nop			; (mov r8, r8)
 8007b9c:	20000010 	.word	0x20000010
 8007ba0:	080098f9 	.word	0x080098f9
 8007ba4:	2000001c 	.word	0x2000001c

08007ba8 <cleanup_stdio>:
 8007ba8:	6841      	ldr	r1, [r0, #4]
 8007baa:	4b0b      	ldr	r3, [pc, #44]	; (8007bd8 <cleanup_stdio+0x30>)
 8007bac:	b510      	push	{r4, lr}
 8007bae:	0004      	movs	r4, r0
 8007bb0:	4299      	cmp	r1, r3
 8007bb2:	d001      	beq.n	8007bb8 <cleanup_stdio+0x10>
 8007bb4:	f001 fea0 	bl	80098f8 <_fflush_r>
 8007bb8:	68a1      	ldr	r1, [r4, #8]
 8007bba:	4b08      	ldr	r3, [pc, #32]	; (8007bdc <cleanup_stdio+0x34>)
 8007bbc:	4299      	cmp	r1, r3
 8007bbe:	d002      	beq.n	8007bc6 <cleanup_stdio+0x1e>
 8007bc0:	0020      	movs	r0, r4
 8007bc2:	f001 fe99 	bl	80098f8 <_fflush_r>
 8007bc6:	68e1      	ldr	r1, [r4, #12]
 8007bc8:	4b05      	ldr	r3, [pc, #20]	; (8007be0 <cleanup_stdio+0x38>)
 8007bca:	4299      	cmp	r1, r3
 8007bcc:	d002      	beq.n	8007bd4 <cleanup_stdio+0x2c>
 8007bce:	0020      	movs	r0, r4
 8007bd0:	f001 fe92 	bl	80098f8 <_fflush_r>
 8007bd4:	bd10      	pop	{r4, pc}
 8007bd6:	46c0      	nop			; (mov r8, r8)
 8007bd8:	200006a8 	.word	0x200006a8
 8007bdc:	20000710 	.word	0x20000710
 8007be0:	20000778 	.word	0x20000778

08007be4 <global_stdio_init.part.0>:
 8007be4:	b510      	push	{r4, lr}
 8007be6:	4b09      	ldr	r3, [pc, #36]	; (8007c0c <global_stdio_init.part.0+0x28>)
 8007be8:	4a09      	ldr	r2, [pc, #36]	; (8007c10 <global_stdio_init.part.0+0x2c>)
 8007bea:	2104      	movs	r1, #4
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	4809      	ldr	r0, [pc, #36]	; (8007c14 <global_stdio_init.part.0+0x30>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f7ff ffa7 	bl	8007b44 <std>
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	2109      	movs	r1, #9
 8007bfa:	4807      	ldr	r0, [pc, #28]	; (8007c18 <global_stdio_init.part.0+0x34>)
 8007bfc:	f7ff ffa2 	bl	8007b44 <std>
 8007c00:	2202      	movs	r2, #2
 8007c02:	2112      	movs	r1, #18
 8007c04:	4805      	ldr	r0, [pc, #20]	; (8007c1c <global_stdio_init.part.0+0x38>)
 8007c06:	f7ff ff9d 	bl	8007b44 <std>
 8007c0a:	bd10      	pop	{r4, pc}
 8007c0c:	200007e0 	.word	0x200007e0
 8007c10:	08007b8d 	.word	0x08007b8d
 8007c14:	200006a8 	.word	0x200006a8
 8007c18:	20000710 	.word	0x20000710
 8007c1c:	20000778 	.word	0x20000778

08007c20 <__sfp_lock_acquire>:
 8007c20:	b510      	push	{r4, lr}
 8007c22:	4802      	ldr	r0, [pc, #8]	; (8007c2c <__sfp_lock_acquire+0xc>)
 8007c24:	f000 f930 	bl	8007e88 <__retarget_lock_acquire_recursive>
 8007c28:	bd10      	pop	{r4, pc}
 8007c2a:	46c0      	nop			; (mov r8, r8)
 8007c2c:	200007e9 	.word	0x200007e9

08007c30 <__sfp_lock_release>:
 8007c30:	b510      	push	{r4, lr}
 8007c32:	4802      	ldr	r0, [pc, #8]	; (8007c3c <__sfp_lock_release+0xc>)
 8007c34:	f000 f929 	bl	8007e8a <__retarget_lock_release_recursive>
 8007c38:	bd10      	pop	{r4, pc}
 8007c3a:	46c0      	nop			; (mov r8, r8)
 8007c3c:	200007e9 	.word	0x200007e9

08007c40 <__sinit>:
 8007c40:	b510      	push	{r4, lr}
 8007c42:	0004      	movs	r4, r0
 8007c44:	f7ff ffec 	bl	8007c20 <__sfp_lock_acquire>
 8007c48:	6a23      	ldr	r3, [r4, #32]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d002      	beq.n	8007c54 <__sinit+0x14>
 8007c4e:	f7ff ffef 	bl	8007c30 <__sfp_lock_release>
 8007c52:	bd10      	pop	{r4, pc}
 8007c54:	4b04      	ldr	r3, [pc, #16]	; (8007c68 <__sinit+0x28>)
 8007c56:	6223      	str	r3, [r4, #32]
 8007c58:	4b04      	ldr	r3, [pc, #16]	; (8007c6c <__sinit+0x2c>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1f6      	bne.n	8007c4e <__sinit+0xe>
 8007c60:	f7ff ffc0 	bl	8007be4 <global_stdio_init.part.0>
 8007c64:	e7f3      	b.n	8007c4e <__sinit+0xe>
 8007c66:	46c0      	nop			; (mov r8, r8)
 8007c68:	08007ba9 	.word	0x08007ba9
 8007c6c:	200007e0 	.word	0x200007e0

08007c70 <_fwalk_sglue>:
 8007c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c72:	0014      	movs	r4, r2
 8007c74:	2600      	movs	r6, #0
 8007c76:	9000      	str	r0, [sp, #0]
 8007c78:	9101      	str	r1, [sp, #4]
 8007c7a:	68a5      	ldr	r5, [r4, #8]
 8007c7c:	6867      	ldr	r7, [r4, #4]
 8007c7e:	3f01      	subs	r7, #1
 8007c80:	d504      	bpl.n	8007c8c <_fwalk_sglue+0x1c>
 8007c82:	6824      	ldr	r4, [r4, #0]
 8007c84:	2c00      	cmp	r4, #0
 8007c86:	d1f8      	bne.n	8007c7a <_fwalk_sglue+0xa>
 8007c88:	0030      	movs	r0, r6
 8007c8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c8c:	89ab      	ldrh	r3, [r5, #12]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d908      	bls.n	8007ca4 <_fwalk_sglue+0x34>
 8007c92:	220e      	movs	r2, #14
 8007c94:	5eab      	ldrsh	r3, [r5, r2]
 8007c96:	3301      	adds	r3, #1
 8007c98:	d004      	beq.n	8007ca4 <_fwalk_sglue+0x34>
 8007c9a:	0029      	movs	r1, r5
 8007c9c:	9800      	ldr	r0, [sp, #0]
 8007c9e:	9b01      	ldr	r3, [sp, #4]
 8007ca0:	4798      	blx	r3
 8007ca2:	4306      	orrs	r6, r0
 8007ca4:	3568      	adds	r5, #104	; 0x68
 8007ca6:	e7ea      	b.n	8007c7e <_fwalk_sglue+0xe>

08007ca8 <siprintf>:
 8007ca8:	b40e      	push	{r1, r2, r3}
 8007caa:	b500      	push	{lr}
 8007cac:	490b      	ldr	r1, [pc, #44]	; (8007cdc <siprintf+0x34>)
 8007cae:	b09c      	sub	sp, #112	; 0x70
 8007cb0:	ab1d      	add	r3, sp, #116	; 0x74
 8007cb2:	9002      	str	r0, [sp, #8]
 8007cb4:	9006      	str	r0, [sp, #24]
 8007cb6:	9107      	str	r1, [sp, #28]
 8007cb8:	9104      	str	r1, [sp, #16]
 8007cba:	4809      	ldr	r0, [pc, #36]	; (8007ce0 <siprintf+0x38>)
 8007cbc:	4909      	ldr	r1, [pc, #36]	; (8007ce4 <siprintf+0x3c>)
 8007cbe:	cb04      	ldmia	r3!, {r2}
 8007cc0:	9105      	str	r1, [sp, #20]
 8007cc2:	6800      	ldr	r0, [r0, #0]
 8007cc4:	a902      	add	r1, sp, #8
 8007cc6:	9301      	str	r3, [sp, #4]
 8007cc8:	f001 fc8c 	bl	80095e4 <_svfiprintf_r>
 8007ccc:	2200      	movs	r2, #0
 8007cce:	9b02      	ldr	r3, [sp, #8]
 8007cd0:	701a      	strb	r2, [r3, #0]
 8007cd2:	b01c      	add	sp, #112	; 0x70
 8007cd4:	bc08      	pop	{r3}
 8007cd6:	b003      	add	sp, #12
 8007cd8:	4718      	bx	r3
 8007cda:	46c0      	nop			; (mov r8, r8)
 8007cdc:	7fffffff 	.word	0x7fffffff
 8007ce0:	20000068 	.word	0x20000068
 8007ce4:	ffff0208 	.word	0xffff0208

08007ce8 <__sread>:
 8007ce8:	b570      	push	{r4, r5, r6, lr}
 8007cea:	000c      	movs	r4, r1
 8007cec:	250e      	movs	r5, #14
 8007cee:	5f49      	ldrsh	r1, [r1, r5]
 8007cf0:	f000 f878 	bl	8007de4 <_read_r>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	db03      	blt.n	8007d00 <__sread+0x18>
 8007cf8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007cfa:	181b      	adds	r3, r3, r0
 8007cfc:	6563      	str	r3, [r4, #84]	; 0x54
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}
 8007d00:	89a3      	ldrh	r3, [r4, #12]
 8007d02:	4a02      	ldr	r2, [pc, #8]	; (8007d0c <__sread+0x24>)
 8007d04:	4013      	ands	r3, r2
 8007d06:	81a3      	strh	r3, [r4, #12]
 8007d08:	e7f9      	b.n	8007cfe <__sread+0x16>
 8007d0a:	46c0      	nop			; (mov r8, r8)
 8007d0c:	ffffefff 	.word	0xffffefff

08007d10 <__swrite>:
 8007d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d12:	001f      	movs	r7, r3
 8007d14:	898b      	ldrh	r3, [r1, #12]
 8007d16:	0005      	movs	r5, r0
 8007d18:	000c      	movs	r4, r1
 8007d1a:	0016      	movs	r6, r2
 8007d1c:	05db      	lsls	r3, r3, #23
 8007d1e:	d505      	bpl.n	8007d2c <__swrite+0x1c>
 8007d20:	230e      	movs	r3, #14
 8007d22:	5ec9      	ldrsh	r1, [r1, r3]
 8007d24:	2200      	movs	r2, #0
 8007d26:	2302      	movs	r3, #2
 8007d28:	f000 f848 	bl	8007dbc <_lseek_r>
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	4a05      	ldr	r2, [pc, #20]	; (8007d44 <__swrite+0x34>)
 8007d30:	0028      	movs	r0, r5
 8007d32:	4013      	ands	r3, r2
 8007d34:	81a3      	strh	r3, [r4, #12]
 8007d36:	0032      	movs	r2, r6
 8007d38:	230e      	movs	r3, #14
 8007d3a:	5ee1      	ldrsh	r1, [r4, r3]
 8007d3c:	003b      	movs	r3, r7
 8007d3e:	f000 f865 	bl	8007e0c <_write_r>
 8007d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d44:	ffffefff 	.word	0xffffefff

08007d48 <__sseek>:
 8007d48:	b570      	push	{r4, r5, r6, lr}
 8007d4a:	000c      	movs	r4, r1
 8007d4c:	250e      	movs	r5, #14
 8007d4e:	5f49      	ldrsh	r1, [r1, r5]
 8007d50:	f000 f834 	bl	8007dbc <_lseek_r>
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	1c42      	adds	r2, r0, #1
 8007d58:	d103      	bne.n	8007d62 <__sseek+0x1a>
 8007d5a:	4a05      	ldr	r2, [pc, #20]	; (8007d70 <__sseek+0x28>)
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	81a3      	strh	r3, [r4, #12]
 8007d60:	bd70      	pop	{r4, r5, r6, pc}
 8007d62:	2280      	movs	r2, #128	; 0x80
 8007d64:	0152      	lsls	r2, r2, #5
 8007d66:	4313      	orrs	r3, r2
 8007d68:	81a3      	strh	r3, [r4, #12]
 8007d6a:	6560      	str	r0, [r4, #84]	; 0x54
 8007d6c:	e7f8      	b.n	8007d60 <__sseek+0x18>
 8007d6e:	46c0      	nop			; (mov r8, r8)
 8007d70:	ffffefff 	.word	0xffffefff

08007d74 <__sclose>:
 8007d74:	b510      	push	{r4, lr}
 8007d76:	230e      	movs	r3, #14
 8007d78:	5ec9      	ldrsh	r1, [r1, r3]
 8007d7a:	f000 f80d 	bl	8007d98 <_close_r>
 8007d7e:	bd10      	pop	{r4, pc}

08007d80 <memset>:
 8007d80:	0003      	movs	r3, r0
 8007d82:	1882      	adds	r2, r0, r2
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d100      	bne.n	8007d8a <memset+0xa>
 8007d88:	4770      	bx	lr
 8007d8a:	7019      	strb	r1, [r3, #0]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	e7f9      	b.n	8007d84 <memset+0x4>

08007d90 <_localeconv_r>:
 8007d90:	4800      	ldr	r0, [pc, #0]	; (8007d94 <_localeconv_r+0x4>)
 8007d92:	4770      	bx	lr
 8007d94:	2000015c 	.word	0x2000015c

08007d98 <_close_r>:
 8007d98:	2300      	movs	r3, #0
 8007d9a:	b570      	push	{r4, r5, r6, lr}
 8007d9c:	4d06      	ldr	r5, [pc, #24]	; (8007db8 <_close_r+0x20>)
 8007d9e:	0004      	movs	r4, r0
 8007da0:	0008      	movs	r0, r1
 8007da2:	602b      	str	r3, [r5, #0]
 8007da4:	f7fb ff87 	bl	8003cb6 <_close>
 8007da8:	1c43      	adds	r3, r0, #1
 8007daa:	d103      	bne.n	8007db4 <_close_r+0x1c>
 8007dac:	682b      	ldr	r3, [r5, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d000      	beq.n	8007db4 <_close_r+0x1c>
 8007db2:	6023      	str	r3, [r4, #0]
 8007db4:	bd70      	pop	{r4, r5, r6, pc}
 8007db6:	46c0      	nop			; (mov r8, r8)
 8007db8:	200007e4 	.word	0x200007e4

08007dbc <_lseek_r>:
 8007dbc:	b570      	push	{r4, r5, r6, lr}
 8007dbe:	0004      	movs	r4, r0
 8007dc0:	0008      	movs	r0, r1
 8007dc2:	0011      	movs	r1, r2
 8007dc4:	001a      	movs	r2, r3
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	4d05      	ldr	r5, [pc, #20]	; (8007de0 <_lseek_r+0x24>)
 8007dca:	602b      	str	r3, [r5, #0]
 8007dcc:	f7fb ff94 	bl	8003cf8 <_lseek>
 8007dd0:	1c43      	adds	r3, r0, #1
 8007dd2:	d103      	bne.n	8007ddc <_lseek_r+0x20>
 8007dd4:	682b      	ldr	r3, [r5, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d000      	beq.n	8007ddc <_lseek_r+0x20>
 8007dda:	6023      	str	r3, [r4, #0]
 8007ddc:	bd70      	pop	{r4, r5, r6, pc}
 8007dde:	46c0      	nop			; (mov r8, r8)
 8007de0:	200007e4 	.word	0x200007e4

08007de4 <_read_r>:
 8007de4:	b570      	push	{r4, r5, r6, lr}
 8007de6:	0004      	movs	r4, r0
 8007de8:	0008      	movs	r0, r1
 8007dea:	0011      	movs	r1, r2
 8007dec:	001a      	movs	r2, r3
 8007dee:	2300      	movs	r3, #0
 8007df0:	4d05      	ldr	r5, [pc, #20]	; (8007e08 <_read_r+0x24>)
 8007df2:	602b      	str	r3, [r5, #0]
 8007df4:	f7fb ff26 	bl	8003c44 <_read>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d103      	bne.n	8007e04 <_read_r+0x20>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d000      	beq.n	8007e04 <_read_r+0x20>
 8007e02:	6023      	str	r3, [r4, #0]
 8007e04:	bd70      	pop	{r4, r5, r6, pc}
 8007e06:	46c0      	nop			; (mov r8, r8)
 8007e08:	200007e4 	.word	0x200007e4

08007e0c <_write_r>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	0004      	movs	r4, r0
 8007e10:	0008      	movs	r0, r1
 8007e12:	0011      	movs	r1, r2
 8007e14:	001a      	movs	r2, r3
 8007e16:	2300      	movs	r3, #0
 8007e18:	4d05      	ldr	r5, [pc, #20]	; (8007e30 <_write_r+0x24>)
 8007e1a:	602b      	str	r3, [r5, #0]
 8007e1c:	f7fb ff2f 	bl	8003c7e <_write>
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	d103      	bne.n	8007e2c <_write_r+0x20>
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d000      	beq.n	8007e2c <_write_r+0x20>
 8007e2a:	6023      	str	r3, [r4, #0]
 8007e2c:	bd70      	pop	{r4, r5, r6, pc}
 8007e2e:	46c0      	nop			; (mov r8, r8)
 8007e30:	200007e4 	.word	0x200007e4

08007e34 <__errno>:
 8007e34:	4b01      	ldr	r3, [pc, #4]	; (8007e3c <__errno+0x8>)
 8007e36:	6818      	ldr	r0, [r3, #0]
 8007e38:	4770      	bx	lr
 8007e3a:	46c0      	nop			; (mov r8, r8)
 8007e3c:	20000068 	.word	0x20000068

08007e40 <__libc_init_array>:
 8007e40:	b570      	push	{r4, r5, r6, lr}
 8007e42:	2600      	movs	r6, #0
 8007e44:	4c0c      	ldr	r4, [pc, #48]	; (8007e78 <__libc_init_array+0x38>)
 8007e46:	4d0d      	ldr	r5, [pc, #52]	; (8007e7c <__libc_init_array+0x3c>)
 8007e48:	1b64      	subs	r4, r4, r5
 8007e4a:	10a4      	asrs	r4, r4, #2
 8007e4c:	42a6      	cmp	r6, r4
 8007e4e:	d109      	bne.n	8007e64 <__libc_init_array+0x24>
 8007e50:	2600      	movs	r6, #0
 8007e52:	f002 f921 	bl	800a098 <_init>
 8007e56:	4c0a      	ldr	r4, [pc, #40]	; (8007e80 <__libc_init_array+0x40>)
 8007e58:	4d0a      	ldr	r5, [pc, #40]	; (8007e84 <__libc_init_array+0x44>)
 8007e5a:	1b64      	subs	r4, r4, r5
 8007e5c:	10a4      	asrs	r4, r4, #2
 8007e5e:	42a6      	cmp	r6, r4
 8007e60:	d105      	bne.n	8007e6e <__libc_init_array+0x2e>
 8007e62:	bd70      	pop	{r4, r5, r6, pc}
 8007e64:	00b3      	lsls	r3, r6, #2
 8007e66:	58eb      	ldr	r3, [r5, r3]
 8007e68:	4798      	blx	r3
 8007e6a:	3601      	adds	r6, #1
 8007e6c:	e7ee      	b.n	8007e4c <__libc_init_array+0xc>
 8007e6e:	00b3      	lsls	r3, r6, #2
 8007e70:	58eb      	ldr	r3, [r5, r3]
 8007e72:	4798      	blx	r3
 8007e74:	3601      	adds	r6, #1
 8007e76:	e7f2      	b.n	8007e5e <__libc_init_array+0x1e>
 8007e78:	0800a524 	.word	0x0800a524
 8007e7c:	0800a524 	.word	0x0800a524
 8007e80:	0800a528 	.word	0x0800a528
 8007e84:	0800a524 	.word	0x0800a524

08007e88 <__retarget_lock_acquire_recursive>:
 8007e88:	4770      	bx	lr

08007e8a <__retarget_lock_release_recursive>:
 8007e8a:	4770      	bx	lr

08007e8c <memchr>:
 8007e8c:	b2c9      	uxtb	r1, r1
 8007e8e:	1882      	adds	r2, r0, r2
 8007e90:	4290      	cmp	r0, r2
 8007e92:	d101      	bne.n	8007e98 <memchr+0xc>
 8007e94:	2000      	movs	r0, #0
 8007e96:	4770      	bx	lr
 8007e98:	7803      	ldrb	r3, [r0, #0]
 8007e9a:	428b      	cmp	r3, r1
 8007e9c:	d0fb      	beq.n	8007e96 <memchr+0xa>
 8007e9e:	3001      	adds	r0, #1
 8007ea0:	e7f6      	b.n	8007e90 <memchr+0x4>

08007ea2 <quorem>:
 8007ea2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ea4:	6902      	ldr	r2, [r0, #16]
 8007ea6:	690b      	ldr	r3, [r1, #16]
 8007ea8:	b089      	sub	sp, #36	; 0x24
 8007eaa:	0007      	movs	r7, r0
 8007eac:	9104      	str	r1, [sp, #16]
 8007eae:	2000      	movs	r0, #0
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	db69      	blt.n	8007f88 <quorem+0xe6>
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	009c      	lsls	r4, r3, #2
 8007eb8:	9301      	str	r3, [sp, #4]
 8007eba:	000b      	movs	r3, r1
 8007ebc:	3314      	adds	r3, #20
 8007ebe:	9306      	str	r3, [sp, #24]
 8007ec0:	191b      	adds	r3, r3, r4
 8007ec2:	9305      	str	r3, [sp, #20]
 8007ec4:	003b      	movs	r3, r7
 8007ec6:	3314      	adds	r3, #20
 8007ec8:	9303      	str	r3, [sp, #12]
 8007eca:	191c      	adds	r4, r3, r4
 8007ecc:	9b05      	ldr	r3, [sp, #20]
 8007ece:	6826      	ldr	r6, [r4, #0]
 8007ed0:	681d      	ldr	r5, [r3, #0]
 8007ed2:	0030      	movs	r0, r6
 8007ed4:	3501      	adds	r5, #1
 8007ed6:	0029      	movs	r1, r5
 8007ed8:	f7f8 f932 	bl	8000140 <__udivsi3>
 8007edc:	9002      	str	r0, [sp, #8]
 8007ede:	42ae      	cmp	r6, r5
 8007ee0:	d329      	bcc.n	8007f36 <quorem+0x94>
 8007ee2:	9b06      	ldr	r3, [sp, #24]
 8007ee4:	2600      	movs	r6, #0
 8007ee6:	469c      	mov	ip, r3
 8007ee8:	9d03      	ldr	r5, [sp, #12]
 8007eea:	9606      	str	r6, [sp, #24]
 8007eec:	4662      	mov	r2, ip
 8007eee:	ca08      	ldmia	r2!, {r3}
 8007ef0:	6828      	ldr	r0, [r5, #0]
 8007ef2:	4694      	mov	ip, r2
 8007ef4:	9a02      	ldr	r2, [sp, #8]
 8007ef6:	b299      	uxth	r1, r3
 8007ef8:	4351      	muls	r1, r2
 8007efa:	0c1b      	lsrs	r3, r3, #16
 8007efc:	4353      	muls	r3, r2
 8007efe:	1989      	adds	r1, r1, r6
 8007f00:	0c0a      	lsrs	r2, r1, #16
 8007f02:	189b      	adds	r3, r3, r2
 8007f04:	9307      	str	r3, [sp, #28]
 8007f06:	0c1e      	lsrs	r6, r3, #16
 8007f08:	9b06      	ldr	r3, [sp, #24]
 8007f0a:	b282      	uxth	r2, r0
 8007f0c:	18d2      	adds	r2, r2, r3
 8007f0e:	466b      	mov	r3, sp
 8007f10:	b289      	uxth	r1, r1
 8007f12:	8b9b      	ldrh	r3, [r3, #28]
 8007f14:	1a52      	subs	r2, r2, r1
 8007f16:	0c01      	lsrs	r1, r0, #16
 8007f18:	1ac9      	subs	r1, r1, r3
 8007f1a:	1413      	asrs	r3, r2, #16
 8007f1c:	18cb      	adds	r3, r1, r3
 8007f1e:	1419      	asrs	r1, r3, #16
 8007f20:	b292      	uxth	r2, r2
 8007f22:	041b      	lsls	r3, r3, #16
 8007f24:	4313      	orrs	r3, r2
 8007f26:	c508      	stmia	r5!, {r3}
 8007f28:	9b05      	ldr	r3, [sp, #20]
 8007f2a:	9106      	str	r1, [sp, #24]
 8007f2c:	4563      	cmp	r3, ip
 8007f2e:	d2dd      	bcs.n	8007eec <quorem+0x4a>
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d030      	beq.n	8007f98 <quorem+0xf6>
 8007f36:	0038      	movs	r0, r7
 8007f38:	9904      	ldr	r1, [sp, #16]
 8007f3a:	f001 f9dd 	bl	80092f8 <__mcmp>
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	db21      	blt.n	8007f86 <quorem+0xe4>
 8007f42:	0038      	movs	r0, r7
 8007f44:	2600      	movs	r6, #0
 8007f46:	9b02      	ldr	r3, [sp, #8]
 8007f48:	9c04      	ldr	r4, [sp, #16]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	9302      	str	r3, [sp, #8]
 8007f4e:	3014      	adds	r0, #20
 8007f50:	3414      	adds	r4, #20
 8007f52:	6803      	ldr	r3, [r0, #0]
 8007f54:	cc02      	ldmia	r4!, {r1}
 8007f56:	b29d      	uxth	r5, r3
 8007f58:	19ad      	adds	r5, r5, r6
 8007f5a:	b28a      	uxth	r2, r1
 8007f5c:	1aaa      	subs	r2, r5, r2
 8007f5e:	0c09      	lsrs	r1, r1, #16
 8007f60:	0c1b      	lsrs	r3, r3, #16
 8007f62:	1a5b      	subs	r3, r3, r1
 8007f64:	1411      	asrs	r1, r2, #16
 8007f66:	185b      	adds	r3, r3, r1
 8007f68:	141e      	asrs	r6, r3, #16
 8007f6a:	b292      	uxth	r2, r2
 8007f6c:	041b      	lsls	r3, r3, #16
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	c008      	stmia	r0!, {r3}
 8007f72:	9b05      	ldr	r3, [sp, #20]
 8007f74:	42a3      	cmp	r3, r4
 8007f76:	d2ec      	bcs.n	8007f52 <quorem+0xb0>
 8007f78:	9b01      	ldr	r3, [sp, #4]
 8007f7a:	9a03      	ldr	r2, [sp, #12]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	18d3      	adds	r3, r2, r3
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	2a00      	cmp	r2, #0
 8007f84:	d015      	beq.n	8007fb2 <quorem+0x110>
 8007f86:	9802      	ldr	r0, [sp, #8]
 8007f88:	b009      	add	sp, #36	; 0x24
 8007f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d106      	bne.n	8007fa0 <quorem+0xfe>
 8007f92:	9b01      	ldr	r3, [sp, #4]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	9301      	str	r3, [sp, #4]
 8007f98:	9b03      	ldr	r3, [sp, #12]
 8007f9a:	3c04      	subs	r4, #4
 8007f9c:	42a3      	cmp	r3, r4
 8007f9e:	d3f5      	bcc.n	8007f8c <quorem+0xea>
 8007fa0:	9b01      	ldr	r3, [sp, #4]
 8007fa2:	613b      	str	r3, [r7, #16]
 8007fa4:	e7c7      	b.n	8007f36 <quorem+0x94>
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	2a00      	cmp	r2, #0
 8007faa:	d106      	bne.n	8007fba <quorem+0x118>
 8007fac:	9a01      	ldr	r2, [sp, #4]
 8007fae:	3a01      	subs	r2, #1
 8007fb0:	9201      	str	r2, [sp, #4]
 8007fb2:	9a03      	ldr	r2, [sp, #12]
 8007fb4:	3b04      	subs	r3, #4
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d3f5      	bcc.n	8007fa6 <quorem+0x104>
 8007fba:	9b01      	ldr	r3, [sp, #4]
 8007fbc:	613b      	str	r3, [r7, #16]
 8007fbe:	e7e2      	b.n	8007f86 <quorem+0xe4>

08007fc0 <_dtoa_r>:
 8007fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fc2:	0014      	movs	r4, r2
 8007fc4:	001d      	movs	r5, r3
 8007fc6:	69c6      	ldr	r6, [r0, #28]
 8007fc8:	b09d      	sub	sp, #116	; 0x74
 8007fca:	9408      	str	r4, [sp, #32]
 8007fcc:	9509      	str	r5, [sp, #36]	; 0x24
 8007fce:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8007fd0:	9004      	str	r0, [sp, #16]
 8007fd2:	2e00      	cmp	r6, #0
 8007fd4:	d10f      	bne.n	8007ff6 <_dtoa_r+0x36>
 8007fd6:	2010      	movs	r0, #16
 8007fd8:	f000 fe4a 	bl	8008c70 <malloc>
 8007fdc:	9b04      	ldr	r3, [sp, #16]
 8007fde:	1e02      	subs	r2, r0, #0
 8007fe0:	61d8      	str	r0, [r3, #28]
 8007fe2:	d104      	bne.n	8007fee <_dtoa_r+0x2e>
 8007fe4:	21ef      	movs	r1, #239	; 0xef
 8007fe6:	4bc6      	ldr	r3, [pc, #792]	; (8008300 <_dtoa_r+0x340>)
 8007fe8:	48c6      	ldr	r0, [pc, #792]	; (8008304 <_dtoa_r+0x344>)
 8007fea:	f001 fcdf 	bl	80099ac <__assert_func>
 8007fee:	6046      	str	r6, [r0, #4]
 8007ff0:	6086      	str	r6, [r0, #8]
 8007ff2:	6006      	str	r6, [r0, #0]
 8007ff4:	60c6      	str	r6, [r0, #12]
 8007ff6:	9b04      	ldr	r3, [sp, #16]
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	6819      	ldr	r1, [r3, #0]
 8007ffc:	2900      	cmp	r1, #0
 8007ffe:	d00b      	beq.n	8008018 <_dtoa_r+0x58>
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	2301      	movs	r3, #1
 8008004:	4093      	lsls	r3, r2
 8008006:	604a      	str	r2, [r1, #4]
 8008008:	608b      	str	r3, [r1, #8]
 800800a:	9804      	ldr	r0, [sp, #16]
 800800c:	f000 ff32 	bl	8008e74 <_Bfree>
 8008010:	2200      	movs	r2, #0
 8008012:	9b04      	ldr	r3, [sp, #16]
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	2d00      	cmp	r5, #0
 800801a:	da1e      	bge.n	800805a <_dtoa_r+0x9a>
 800801c:	2301      	movs	r3, #1
 800801e:	603b      	str	r3, [r7, #0]
 8008020:	006b      	lsls	r3, r5, #1
 8008022:	085b      	lsrs	r3, r3, #1
 8008024:	9309      	str	r3, [sp, #36]	; 0x24
 8008026:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008028:	4bb7      	ldr	r3, [pc, #732]	; (8008308 <_dtoa_r+0x348>)
 800802a:	4ab7      	ldr	r2, [pc, #732]	; (8008308 <_dtoa_r+0x348>)
 800802c:	403b      	ands	r3, r7
 800802e:	4293      	cmp	r3, r2
 8008030:	d116      	bne.n	8008060 <_dtoa_r+0xa0>
 8008032:	4bb6      	ldr	r3, [pc, #728]	; (800830c <_dtoa_r+0x34c>)
 8008034:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008036:	6013      	str	r3, [r2, #0]
 8008038:	033b      	lsls	r3, r7, #12
 800803a:	0b1b      	lsrs	r3, r3, #12
 800803c:	4323      	orrs	r3, r4
 800803e:	d101      	bne.n	8008044 <_dtoa_r+0x84>
 8008040:	f000 fdb5 	bl	8008bae <_dtoa_r+0xbee>
 8008044:	4bb2      	ldr	r3, [pc, #712]	; (8008310 <_dtoa_r+0x350>)
 8008046:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008048:	9306      	str	r3, [sp, #24]
 800804a:	2a00      	cmp	r2, #0
 800804c:	d002      	beq.n	8008054 <_dtoa_r+0x94>
 800804e:	4bb1      	ldr	r3, [pc, #708]	; (8008314 <_dtoa_r+0x354>)
 8008050:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008052:	6013      	str	r3, [r2, #0]
 8008054:	9806      	ldr	r0, [sp, #24]
 8008056:	b01d      	add	sp, #116	; 0x74
 8008058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800805a:	2300      	movs	r3, #0
 800805c:	603b      	str	r3, [r7, #0]
 800805e:	e7e2      	b.n	8008026 <_dtoa_r+0x66>
 8008060:	9a08      	ldr	r2, [sp, #32]
 8008062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008064:	9210      	str	r2, [sp, #64]	; 0x40
 8008066:	9311      	str	r3, [sp, #68]	; 0x44
 8008068:	9810      	ldr	r0, [sp, #64]	; 0x40
 800806a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800806c:	2200      	movs	r2, #0
 800806e:	2300      	movs	r3, #0
 8008070:	f7f8 f9ec 	bl	800044c <__aeabi_dcmpeq>
 8008074:	1e06      	subs	r6, r0, #0
 8008076:	d009      	beq.n	800808c <_dtoa_r+0xcc>
 8008078:	2301      	movs	r3, #1
 800807a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800807c:	6013      	str	r3, [r2, #0]
 800807e:	4ba6      	ldr	r3, [pc, #664]	; (8008318 <_dtoa_r+0x358>)
 8008080:	9306      	str	r3, [sp, #24]
 8008082:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008084:	2b00      	cmp	r3, #0
 8008086:	d0e5      	beq.n	8008054 <_dtoa_r+0x94>
 8008088:	4ba4      	ldr	r3, [pc, #656]	; (800831c <_dtoa_r+0x35c>)
 800808a:	e7e1      	b.n	8008050 <_dtoa_r+0x90>
 800808c:	ab1a      	add	r3, sp, #104	; 0x68
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	ab1b      	add	r3, sp, #108	; 0x6c
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	9804      	ldr	r0, [sp, #16]
 8008096:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008098:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800809a:	f001 f9e1 	bl	8009460 <__d2b>
 800809e:	007a      	lsls	r2, r7, #1
 80080a0:	9005      	str	r0, [sp, #20]
 80080a2:	0d52      	lsrs	r2, r2, #21
 80080a4:	d100      	bne.n	80080a8 <_dtoa_r+0xe8>
 80080a6:	e07b      	b.n	80081a0 <_dtoa_r+0x1e0>
 80080a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080aa:	9617      	str	r6, [sp, #92]	; 0x5c
 80080ac:	0319      	lsls	r1, r3, #12
 80080ae:	4b9c      	ldr	r3, [pc, #624]	; (8008320 <_dtoa_r+0x360>)
 80080b0:	0b09      	lsrs	r1, r1, #12
 80080b2:	430b      	orrs	r3, r1
 80080b4:	499b      	ldr	r1, [pc, #620]	; (8008324 <_dtoa_r+0x364>)
 80080b6:	1857      	adds	r7, r2, r1
 80080b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80080ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 80080bc:	0019      	movs	r1, r3
 80080be:	2200      	movs	r2, #0
 80080c0:	4b99      	ldr	r3, [pc, #612]	; (8008328 <_dtoa_r+0x368>)
 80080c2:	f7fa fa87 	bl	80025d4 <__aeabi_dsub>
 80080c6:	4a99      	ldr	r2, [pc, #612]	; (800832c <_dtoa_r+0x36c>)
 80080c8:	4b99      	ldr	r3, [pc, #612]	; (8008330 <_dtoa_r+0x370>)
 80080ca:	f7f9 ffc1 	bl	8002050 <__aeabi_dmul>
 80080ce:	4a99      	ldr	r2, [pc, #612]	; (8008334 <_dtoa_r+0x374>)
 80080d0:	4b99      	ldr	r3, [pc, #612]	; (8008338 <_dtoa_r+0x378>)
 80080d2:	f7f9 f863 	bl	800119c <__aeabi_dadd>
 80080d6:	0004      	movs	r4, r0
 80080d8:	0038      	movs	r0, r7
 80080da:	000d      	movs	r5, r1
 80080dc:	f7fa fe50 	bl	8002d80 <__aeabi_i2d>
 80080e0:	4a96      	ldr	r2, [pc, #600]	; (800833c <_dtoa_r+0x37c>)
 80080e2:	4b97      	ldr	r3, [pc, #604]	; (8008340 <_dtoa_r+0x380>)
 80080e4:	f7f9 ffb4 	bl	8002050 <__aeabi_dmul>
 80080e8:	0002      	movs	r2, r0
 80080ea:	000b      	movs	r3, r1
 80080ec:	0020      	movs	r0, r4
 80080ee:	0029      	movs	r1, r5
 80080f0:	f7f9 f854 	bl	800119c <__aeabi_dadd>
 80080f4:	0004      	movs	r4, r0
 80080f6:	000d      	movs	r5, r1
 80080f8:	f7fa fe0c 	bl	8002d14 <__aeabi_d2iz>
 80080fc:	2200      	movs	r2, #0
 80080fe:	9003      	str	r0, [sp, #12]
 8008100:	2300      	movs	r3, #0
 8008102:	0020      	movs	r0, r4
 8008104:	0029      	movs	r1, r5
 8008106:	f7f8 f9a7 	bl	8000458 <__aeabi_dcmplt>
 800810a:	2800      	cmp	r0, #0
 800810c:	d00b      	beq.n	8008126 <_dtoa_r+0x166>
 800810e:	9803      	ldr	r0, [sp, #12]
 8008110:	f7fa fe36 	bl	8002d80 <__aeabi_i2d>
 8008114:	002b      	movs	r3, r5
 8008116:	0022      	movs	r2, r4
 8008118:	f7f8 f998 	bl	800044c <__aeabi_dcmpeq>
 800811c:	4243      	negs	r3, r0
 800811e:	4158      	adcs	r0, r3
 8008120:	9b03      	ldr	r3, [sp, #12]
 8008122:	1a1b      	subs	r3, r3, r0
 8008124:	9303      	str	r3, [sp, #12]
 8008126:	2301      	movs	r3, #1
 8008128:	9316      	str	r3, [sp, #88]	; 0x58
 800812a:	9b03      	ldr	r3, [sp, #12]
 800812c:	2b16      	cmp	r3, #22
 800812e:	d810      	bhi.n	8008152 <_dtoa_r+0x192>
 8008130:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008132:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008134:	9a03      	ldr	r2, [sp, #12]
 8008136:	4b83      	ldr	r3, [pc, #524]	; (8008344 <_dtoa_r+0x384>)
 8008138:	00d2      	lsls	r2, r2, #3
 800813a:	189b      	adds	r3, r3, r2
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	f7f8 f98a 	bl	8000458 <__aeabi_dcmplt>
 8008144:	2800      	cmp	r0, #0
 8008146:	d047      	beq.n	80081d8 <_dtoa_r+0x218>
 8008148:	9b03      	ldr	r3, [sp, #12]
 800814a:	3b01      	subs	r3, #1
 800814c:	9303      	str	r3, [sp, #12]
 800814e:	2300      	movs	r3, #0
 8008150:	9316      	str	r3, [sp, #88]	; 0x58
 8008152:	2200      	movs	r2, #0
 8008154:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008156:	920a      	str	r2, [sp, #40]	; 0x28
 8008158:	1bdb      	subs	r3, r3, r7
 800815a:	1e5a      	subs	r2, r3, #1
 800815c:	d53e      	bpl.n	80081dc <_dtoa_r+0x21c>
 800815e:	2201      	movs	r2, #1
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	930a      	str	r3, [sp, #40]	; 0x28
 8008164:	2300      	movs	r3, #0
 8008166:	930c      	str	r3, [sp, #48]	; 0x30
 8008168:	9b03      	ldr	r3, [sp, #12]
 800816a:	2b00      	cmp	r3, #0
 800816c:	db38      	blt.n	80081e0 <_dtoa_r+0x220>
 800816e:	9a03      	ldr	r2, [sp, #12]
 8008170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008172:	4694      	mov	ip, r2
 8008174:	4463      	add	r3, ip
 8008176:	930c      	str	r3, [sp, #48]	; 0x30
 8008178:	2300      	movs	r3, #0
 800817a:	9213      	str	r2, [sp, #76]	; 0x4c
 800817c:	930d      	str	r3, [sp, #52]	; 0x34
 800817e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008180:	2401      	movs	r4, #1
 8008182:	2b09      	cmp	r3, #9
 8008184:	d867      	bhi.n	8008256 <_dtoa_r+0x296>
 8008186:	2b05      	cmp	r3, #5
 8008188:	dd02      	ble.n	8008190 <_dtoa_r+0x1d0>
 800818a:	2400      	movs	r4, #0
 800818c:	3b04      	subs	r3, #4
 800818e:	9322      	str	r3, [sp, #136]	; 0x88
 8008190:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008192:	1e98      	subs	r0, r3, #2
 8008194:	2803      	cmp	r0, #3
 8008196:	d867      	bhi.n	8008268 <_dtoa_r+0x2a8>
 8008198:	f7f7 ffbe 	bl	8000118 <__gnu_thumb1_case_uqi>
 800819c:	5b383a2b 	.word	0x5b383a2b
 80081a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081a2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80081a4:	18f6      	adds	r6, r6, r3
 80081a6:	4b68      	ldr	r3, [pc, #416]	; (8008348 <_dtoa_r+0x388>)
 80081a8:	18f2      	adds	r2, r6, r3
 80081aa:	2a20      	cmp	r2, #32
 80081ac:	dd0f      	ble.n	80081ce <_dtoa_r+0x20e>
 80081ae:	2340      	movs	r3, #64	; 0x40
 80081b0:	1a9b      	subs	r3, r3, r2
 80081b2:	409f      	lsls	r7, r3
 80081b4:	4b65      	ldr	r3, [pc, #404]	; (800834c <_dtoa_r+0x38c>)
 80081b6:	0038      	movs	r0, r7
 80081b8:	18f3      	adds	r3, r6, r3
 80081ba:	40dc      	lsrs	r4, r3
 80081bc:	4320      	orrs	r0, r4
 80081be:	f7fa fe0f 	bl	8002de0 <__aeabi_ui2d>
 80081c2:	2201      	movs	r2, #1
 80081c4:	4b62      	ldr	r3, [pc, #392]	; (8008350 <_dtoa_r+0x390>)
 80081c6:	1e77      	subs	r7, r6, #1
 80081c8:	18cb      	adds	r3, r1, r3
 80081ca:	9217      	str	r2, [sp, #92]	; 0x5c
 80081cc:	e776      	b.n	80080bc <_dtoa_r+0xfc>
 80081ce:	2320      	movs	r3, #32
 80081d0:	0020      	movs	r0, r4
 80081d2:	1a9b      	subs	r3, r3, r2
 80081d4:	4098      	lsls	r0, r3
 80081d6:	e7f2      	b.n	80081be <_dtoa_r+0x1fe>
 80081d8:	9016      	str	r0, [sp, #88]	; 0x58
 80081da:	e7ba      	b.n	8008152 <_dtoa_r+0x192>
 80081dc:	920c      	str	r2, [sp, #48]	; 0x30
 80081de:	e7c3      	b.n	8008168 <_dtoa_r+0x1a8>
 80081e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e2:	9a03      	ldr	r2, [sp, #12]
 80081e4:	1a9b      	subs	r3, r3, r2
 80081e6:	930a      	str	r3, [sp, #40]	; 0x28
 80081e8:	4253      	negs	r3, r2
 80081ea:	930d      	str	r3, [sp, #52]	; 0x34
 80081ec:	2300      	movs	r3, #0
 80081ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80081f0:	e7c5      	b.n	800817e <_dtoa_r+0x1be>
 80081f2:	2300      	movs	r3, #0
 80081f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80081f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80081f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80081fa:	9307      	str	r3, [sp, #28]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	dc13      	bgt.n	8008228 <_dtoa_r+0x268>
 8008200:	2301      	movs	r3, #1
 8008202:	001a      	movs	r2, r3
 8008204:	930b      	str	r3, [sp, #44]	; 0x2c
 8008206:	9307      	str	r3, [sp, #28]
 8008208:	9223      	str	r2, [sp, #140]	; 0x8c
 800820a:	e00d      	b.n	8008228 <_dtoa_r+0x268>
 800820c:	2301      	movs	r3, #1
 800820e:	e7f1      	b.n	80081f4 <_dtoa_r+0x234>
 8008210:	2300      	movs	r3, #0
 8008212:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008214:	930f      	str	r3, [sp, #60]	; 0x3c
 8008216:	4694      	mov	ip, r2
 8008218:	9b03      	ldr	r3, [sp, #12]
 800821a:	4463      	add	r3, ip
 800821c:	930b      	str	r3, [sp, #44]	; 0x2c
 800821e:	3301      	adds	r3, #1
 8008220:	9307      	str	r3, [sp, #28]
 8008222:	2b00      	cmp	r3, #0
 8008224:	dc00      	bgt.n	8008228 <_dtoa_r+0x268>
 8008226:	2301      	movs	r3, #1
 8008228:	9a04      	ldr	r2, [sp, #16]
 800822a:	2100      	movs	r1, #0
 800822c:	69d0      	ldr	r0, [r2, #28]
 800822e:	2204      	movs	r2, #4
 8008230:	0015      	movs	r5, r2
 8008232:	3514      	adds	r5, #20
 8008234:	429d      	cmp	r5, r3
 8008236:	d91b      	bls.n	8008270 <_dtoa_r+0x2b0>
 8008238:	6041      	str	r1, [r0, #4]
 800823a:	9804      	ldr	r0, [sp, #16]
 800823c:	f000 fdd6 	bl	8008dec <_Balloc>
 8008240:	9006      	str	r0, [sp, #24]
 8008242:	2800      	cmp	r0, #0
 8008244:	d117      	bne.n	8008276 <_dtoa_r+0x2b6>
 8008246:	21b0      	movs	r1, #176	; 0xb0
 8008248:	4b42      	ldr	r3, [pc, #264]	; (8008354 <_dtoa_r+0x394>)
 800824a:	482e      	ldr	r0, [pc, #184]	; (8008304 <_dtoa_r+0x344>)
 800824c:	9a06      	ldr	r2, [sp, #24]
 800824e:	31ff      	adds	r1, #255	; 0xff
 8008250:	e6cb      	b.n	8007fea <_dtoa_r+0x2a>
 8008252:	2301      	movs	r3, #1
 8008254:	e7dd      	b.n	8008212 <_dtoa_r+0x252>
 8008256:	2300      	movs	r3, #0
 8008258:	940f      	str	r4, [sp, #60]	; 0x3c
 800825a:	9322      	str	r3, [sp, #136]	; 0x88
 800825c:	3b01      	subs	r3, #1
 800825e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008260:	9307      	str	r3, [sp, #28]
 8008262:	2200      	movs	r2, #0
 8008264:	3313      	adds	r3, #19
 8008266:	e7cf      	b.n	8008208 <_dtoa_r+0x248>
 8008268:	2301      	movs	r3, #1
 800826a:	930f      	str	r3, [sp, #60]	; 0x3c
 800826c:	3b02      	subs	r3, #2
 800826e:	e7f6      	b.n	800825e <_dtoa_r+0x29e>
 8008270:	3101      	adds	r1, #1
 8008272:	0052      	lsls	r2, r2, #1
 8008274:	e7dc      	b.n	8008230 <_dtoa_r+0x270>
 8008276:	9b04      	ldr	r3, [sp, #16]
 8008278:	9a06      	ldr	r2, [sp, #24]
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	9b07      	ldr	r3, [sp, #28]
 8008280:	2b0e      	cmp	r3, #14
 8008282:	d900      	bls.n	8008286 <_dtoa_r+0x2c6>
 8008284:	e0e5      	b.n	8008452 <_dtoa_r+0x492>
 8008286:	2c00      	cmp	r4, #0
 8008288:	d100      	bne.n	800828c <_dtoa_r+0x2cc>
 800828a:	e0e2      	b.n	8008452 <_dtoa_r+0x492>
 800828c:	9b03      	ldr	r3, [sp, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	dd64      	ble.n	800835c <_dtoa_r+0x39c>
 8008292:	210f      	movs	r1, #15
 8008294:	9a03      	ldr	r2, [sp, #12]
 8008296:	4b2b      	ldr	r3, [pc, #172]	; (8008344 <_dtoa_r+0x384>)
 8008298:	400a      	ands	r2, r1
 800829a:	00d2      	lsls	r2, r2, #3
 800829c:	189b      	adds	r3, r3, r2
 800829e:	681e      	ldr	r6, [r3, #0]
 80082a0:	685f      	ldr	r7, [r3, #4]
 80082a2:	9b03      	ldr	r3, [sp, #12]
 80082a4:	2402      	movs	r4, #2
 80082a6:	111d      	asrs	r5, r3, #4
 80082a8:	05db      	lsls	r3, r3, #23
 80082aa:	d50a      	bpl.n	80082c2 <_dtoa_r+0x302>
 80082ac:	4b2a      	ldr	r3, [pc, #168]	; (8008358 <_dtoa_r+0x398>)
 80082ae:	400d      	ands	r5, r1
 80082b0:	6a1a      	ldr	r2, [r3, #32]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80082b6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80082b8:	f7f9 fad0 	bl	800185c <__aeabi_ddiv>
 80082bc:	9008      	str	r0, [sp, #32]
 80082be:	9109      	str	r1, [sp, #36]	; 0x24
 80082c0:	3401      	adds	r4, #1
 80082c2:	4b25      	ldr	r3, [pc, #148]	; (8008358 <_dtoa_r+0x398>)
 80082c4:	930e      	str	r3, [sp, #56]	; 0x38
 80082c6:	2d00      	cmp	r5, #0
 80082c8:	d108      	bne.n	80082dc <_dtoa_r+0x31c>
 80082ca:	9808      	ldr	r0, [sp, #32]
 80082cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082ce:	0032      	movs	r2, r6
 80082d0:	003b      	movs	r3, r7
 80082d2:	f7f9 fac3 	bl	800185c <__aeabi_ddiv>
 80082d6:	9008      	str	r0, [sp, #32]
 80082d8:	9109      	str	r1, [sp, #36]	; 0x24
 80082da:	e05a      	b.n	8008392 <_dtoa_r+0x3d2>
 80082dc:	2301      	movs	r3, #1
 80082de:	421d      	tst	r5, r3
 80082e0:	d009      	beq.n	80082f6 <_dtoa_r+0x336>
 80082e2:	18e4      	adds	r4, r4, r3
 80082e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082e6:	0030      	movs	r0, r6
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	0039      	movs	r1, r7
 80082ee:	f7f9 feaf 	bl	8002050 <__aeabi_dmul>
 80082f2:	0006      	movs	r6, r0
 80082f4:	000f      	movs	r7, r1
 80082f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082f8:	106d      	asrs	r5, r5, #1
 80082fa:	3308      	adds	r3, #8
 80082fc:	e7e2      	b.n	80082c4 <_dtoa_r+0x304>
 80082fe:	46c0      	nop			; (mov r8, r8)
 8008300:	0800a1f1 	.word	0x0800a1f1
 8008304:	0800a208 	.word	0x0800a208
 8008308:	7ff00000 	.word	0x7ff00000
 800830c:	0000270f 	.word	0x0000270f
 8008310:	0800a1ed 	.word	0x0800a1ed
 8008314:	0800a1f0 	.word	0x0800a1f0
 8008318:	0800a1c0 	.word	0x0800a1c0
 800831c:	0800a1c1 	.word	0x0800a1c1
 8008320:	3ff00000 	.word	0x3ff00000
 8008324:	fffffc01 	.word	0xfffffc01
 8008328:	3ff80000 	.word	0x3ff80000
 800832c:	636f4361 	.word	0x636f4361
 8008330:	3fd287a7 	.word	0x3fd287a7
 8008334:	8b60c8b3 	.word	0x8b60c8b3
 8008338:	3fc68a28 	.word	0x3fc68a28
 800833c:	509f79fb 	.word	0x509f79fb
 8008340:	3fd34413 	.word	0x3fd34413
 8008344:	0800a2f8 	.word	0x0800a2f8
 8008348:	00000432 	.word	0x00000432
 800834c:	00000412 	.word	0x00000412
 8008350:	fe100000 	.word	0xfe100000
 8008354:	0800a260 	.word	0x0800a260
 8008358:	0800a2d0 	.word	0x0800a2d0
 800835c:	9b03      	ldr	r3, [sp, #12]
 800835e:	2402      	movs	r4, #2
 8008360:	2b00      	cmp	r3, #0
 8008362:	d016      	beq.n	8008392 <_dtoa_r+0x3d2>
 8008364:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008366:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008368:	220f      	movs	r2, #15
 800836a:	425d      	negs	r5, r3
 800836c:	402a      	ands	r2, r5
 800836e:	4bdd      	ldr	r3, [pc, #884]	; (80086e4 <_dtoa_r+0x724>)
 8008370:	00d2      	lsls	r2, r2, #3
 8008372:	189b      	adds	r3, r3, r2
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	f7f9 fe6a 	bl	8002050 <__aeabi_dmul>
 800837c:	2701      	movs	r7, #1
 800837e:	2300      	movs	r3, #0
 8008380:	9008      	str	r0, [sp, #32]
 8008382:	9109      	str	r1, [sp, #36]	; 0x24
 8008384:	4ed8      	ldr	r6, [pc, #864]	; (80086e8 <_dtoa_r+0x728>)
 8008386:	112d      	asrs	r5, r5, #4
 8008388:	2d00      	cmp	r5, #0
 800838a:	d000      	beq.n	800838e <_dtoa_r+0x3ce>
 800838c:	e091      	b.n	80084b2 <_dtoa_r+0x4f2>
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1a1      	bne.n	80082d6 <_dtoa_r+0x316>
 8008392:	9e08      	ldr	r6, [sp, #32]
 8008394:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008396:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008398:	2b00      	cmp	r3, #0
 800839a:	d100      	bne.n	800839e <_dtoa_r+0x3de>
 800839c:	e094      	b.n	80084c8 <_dtoa_r+0x508>
 800839e:	2200      	movs	r2, #0
 80083a0:	0030      	movs	r0, r6
 80083a2:	0039      	movs	r1, r7
 80083a4:	4bd1      	ldr	r3, [pc, #836]	; (80086ec <_dtoa_r+0x72c>)
 80083a6:	f7f8 f857 	bl	8000458 <__aeabi_dcmplt>
 80083aa:	2800      	cmp	r0, #0
 80083ac:	d100      	bne.n	80083b0 <_dtoa_r+0x3f0>
 80083ae:	e08b      	b.n	80084c8 <_dtoa_r+0x508>
 80083b0:	9b07      	ldr	r3, [sp, #28]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d100      	bne.n	80083b8 <_dtoa_r+0x3f8>
 80083b6:	e087      	b.n	80084c8 <_dtoa_r+0x508>
 80083b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	dd45      	ble.n	800844a <_dtoa_r+0x48a>
 80083be:	9b03      	ldr	r3, [sp, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	3b01      	subs	r3, #1
 80083c4:	930e      	str	r3, [sp, #56]	; 0x38
 80083c6:	0030      	movs	r0, r6
 80083c8:	4bc9      	ldr	r3, [pc, #804]	; (80086f0 <_dtoa_r+0x730>)
 80083ca:	0039      	movs	r1, r7
 80083cc:	f7f9 fe40 	bl	8002050 <__aeabi_dmul>
 80083d0:	9008      	str	r0, [sp, #32]
 80083d2:	9109      	str	r1, [sp, #36]	; 0x24
 80083d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083d6:	3401      	adds	r4, #1
 80083d8:	0020      	movs	r0, r4
 80083da:	9e08      	ldr	r6, [sp, #32]
 80083dc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80083de:	9312      	str	r3, [sp, #72]	; 0x48
 80083e0:	f7fa fcce 	bl	8002d80 <__aeabi_i2d>
 80083e4:	0032      	movs	r2, r6
 80083e6:	003b      	movs	r3, r7
 80083e8:	f7f9 fe32 	bl	8002050 <__aeabi_dmul>
 80083ec:	2200      	movs	r2, #0
 80083ee:	4bc1      	ldr	r3, [pc, #772]	; (80086f4 <_dtoa_r+0x734>)
 80083f0:	f7f8 fed4 	bl	800119c <__aeabi_dadd>
 80083f4:	4ac0      	ldr	r2, [pc, #768]	; (80086f8 <_dtoa_r+0x738>)
 80083f6:	9014      	str	r0, [sp, #80]	; 0x50
 80083f8:	9115      	str	r1, [sp, #84]	; 0x54
 80083fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80083fe:	4694      	mov	ip, r2
 8008400:	9308      	str	r3, [sp, #32]
 8008402:	9409      	str	r4, [sp, #36]	; 0x24
 8008404:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008406:	4463      	add	r3, ip
 8008408:	9318      	str	r3, [sp, #96]	; 0x60
 800840a:	9309      	str	r3, [sp, #36]	; 0x24
 800840c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800840e:	2b00      	cmp	r3, #0
 8008410:	d15e      	bne.n	80084d0 <_dtoa_r+0x510>
 8008412:	2200      	movs	r2, #0
 8008414:	4bb9      	ldr	r3, [pc, #740]	; (80086fc <_dtoa_r+0x73c>)
 8008416:	0030      	movs	r0, r6
 8008418:	0039      	movs	r1, r7
 800841a:	f7fa f8db 	bl	80025d4 <__aeabi_dsub>
 800841e:	9a08      	ldr	r2, [sp, #32]
 8008420:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008422:	0004      	movs	r4, r0
 8008424:	000d      	movs	r5, r1
 8008426:	f7f8 f82b 	bl	8000480 <__aeabi_dcmpgt>
 800842a:	2800      	cmp	r0, #0
 800842c:	d000      	beq.n	8008430 <_dtoa_r+0x470>
 800842e:	e2b3      	b.n	8008998 <_dtoa_r+0x9d8>
 8008430:	48b3      	ldr	r0, [pc, #716]	; (8008700 <_dtoa_r+0x740>)
 8008432:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008434:	4684      	mov	ip, r0
 8008436:	4461      	add	r1, ip
 8008438:	000b      	movs	r3, r1
 800843a:	0020      	movs	r0, r4
 800843c:	0029      	movs	r1, r5
 800843e:	9a08      	ldr	r2, [sp, #32]
 8008440:	f7f8 f80a 	bl	8000458 <__aeabi_dcmplt>
 8008444:	2800      	cmp	r0, #0
 8008446:	d000      	beq.n	800844a <_dtoa_r+0x48a>
 8008448:	e2a3      	b.n	8008992 <_dtoa_r+0x9d2>
 800844a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800844c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800844e:	9308      	str	r3, [sp, #32]
 8008450:	9409      	str	r4, [sp, #36]	; 0x24
 8008452:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008454:	2b00      	cmp	r3, #0
 8008456:	da00      	bge.n	800845a <_dtoa_r+0x49a>
 8008458:	e179      	b.n	800874e <_dtoa_r+0x78e>
 800845a:	9a03      	ldr	r2, [sp, #12]
 800845c:	2a0e      	cmp	r2, #14
 800845e:	dd00      	ble.n	8008462 <_dtoa_r+0x4a2>
 8008460:	e175      	b.n	800874e <_dtoa_r+0x78e>
 8008462:	4ba0      	ldr	r3, [pc, #640]	; (80086e4 <_dtoa_r+0x724>)
 8008464:	00d2      	lsls	r2, r2, #3
 8008466:	189b      	adds	r3, r3, r2
 8008468:	681e      	ldr	r6, [r3, #0]
 800846a:	685f      	ldr	r7, [r3, #4]
 800846c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800846e:	2b00      	cmp	r3, #0
 8008470:	db00      	blt.n	8008474 <_dtoa_r+0x4b4>
 8008472:	e0e5      	b.n	8008640 <_dtoa_r+0x680>
 8008474:	9b07      	ldr	r3, [sp, #28]
 8008476:	2b00      	cmp	r3, #0
 8008478:	dd00      	ble.n	800847c <_dtoa_r+0x4bc>
 800847a:	e0e1      	b.n	8008640 <_dtoa_r+0x680>
 800847c:	d000      	beq.n	8008480 <_dtoa_r+0x4c0>
 800847e:	e288      	b.n	8008992 <_dtoa_r+0x9d2>
 8008480:	2200      	movs	r2, #0
 8008482:	0030      	movs	r0, r6
 8008484:	0039      	movs	r1, r7
 8008486:	4b9d      	ldr	r3, [pc, #628]	; (80086fc <_dtoa_r+0x73c>)
 8008488:	f7f9 fde2 	bl	8002050 <__aeabi_dmul>
 800848c:	9a08      	ldr	r2, [sp, #32]
 800848e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008490:	f7f8 f800 	bl	8000494 <__aeabi_dcmpge>
 8008494:	9e07      	ldr	r6, [sp, #28]
 8008496:	0037      	movs	r7, r6
 8008498:	2800      	cmp	r0, #0
 800849a:	d000      	beq.n	800849e <_dtoa_r+0x4de>
 800849c:	e25f      	b.n	800895e <_dtoa_r+0x99e>
 800849e:	9b06      	ldr	r3, [sp, #24]
 80084a0:	9a06      	ldr	r2, [sp, #24]
 80084a2:	3301      	adds	r3, #1
 80084a4:	9308      	str	r3, [sp, #32]
 80084a6:	2331      	movs	r3, #49	; 0x31
 80084a8:	7013      	strb	r3, [r2, #0]
 80084aa:	9b03      	ldr	r3, [sp, #12]
 80084ac:	3301      	adds	r3, #1
 80084ae:	9303      	str	r3, [sp, #12]
 80084b0:	e25a      	b.n	8008968 <_dtoa_r+0x9a8>
 80084b2:	423d      	tst	r5, r7
 80084b4:	d005      	beq.n	80084c2 <_dtoa_r+0x502>
 80084b6:	6832      	ldr	r2, [r6, #0]
 80084b8:	6873      	ldr	r3, [r6, #4]
 80084ba:	f7f9 fdc9 	bl	8002050 <__aeabi_dmul>
 80084be:	003b      	movs	r3, r7
 80084c0:	3401      	adds	r4, #1
 80084c2:	106d      	asrs	r5, r5, #1
 80084c4:	3608      	adds	r6, #8
 80084c6:	e75f      	b.n	8008388 <_dtoa_r+0x3c8>
 80084c8:	9b03      	ldr	r3, [sp, #12]
 80084ca:	930e      	str	r3, [sp, #56]	; 0x38
 80084cc:	9b07      	ldr	r3, [sp, #28]
 80084ce:	e783      	b.n	80083d8 <_dtoa_r+0x418>
 80084d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084d2:	4b84      	ldr	r3, [pc, #528]	; (80086e4 <_dtoa_r+0x724>)
 80084d4:	3a01      	subs	r2, #1
 80084d6:	00d2      	lsls	r2, r2, #3
 80084d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80084da:	189b      	adds	r3, r3, r2
 80084dc:	9c08      	ldr	r4, [sp, #32]
 80084de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	2900      	cmp	r1, #0
 80084e6:	d051      	beq.n	800858c <_dtoa_r+0x5cc>
 80084e8:	2000      	movs	r0, #0
 80084ea:	4986      	ldr	r1, [pc, #536]	; (8008704 <_dtoa_r+0x744>)
 80084ec:	f7f9 f9b6 	bl	800185c <__aeabi_ddiv>
 80084f0:	0022      	movs	r2, r4
 80084f2:	002b      	movs	r3, r5
 80084f4:	f7fa f86e 	bl	80025d4 <__aeabi_dsub>
 80084f8:	9a06      	ldr	r2, [sp, #24]
 80084fa:	0004      	movs	r4, r0
 80084fc:	4694      	mov	ip, r2
 80084fe:	000d      	movs	r5, r1
 8008500:	9b06      	ldr	r3, [sp, #24]
 8008502:	9314      	str	r3, [sp, #80]	; 0x50
 8008504:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008506:	4463      	add	r3, ip
 8008508:	9318      	str	r3, [sp, #96]	; 0x60
 800850a:	0039      	movs	r1, r7
 800850c:	0030      	movs	r0, r6
 800850e:	f7fa fc01 	bl	8002d14 <__aeabi_d2iz>
 8008512:	9012      	str	r0, [sp, #72]	; 0x48
 8008514:	f7fa fc34 	bl	8002d80 <__aeabi_i2d>
 8008518:	0002      	movs	r2, r0
 800851a:	000b      	movs	r3, r1
 800851c:	0030      	movs	r0, r6
 800851e:	0039      	movs	r1, r7
 8008520:	f7fa f858 	bl	80025d4 <__aeabi_dsub>
 8008524:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008526:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008528:	3301      	adds	r3, #1
 800852a:	9308      	str	r3, [sp, #32]
 800852c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800852e:	0006      	movs	r6, r0
 8008530:	3330      	adds	r3, #48	; 0x30
 8008532:	7013      	strb	r3, [r2, #0]
 8008534:	0022      	movs	r2, r4
 8008536:	002b      	movs	r3, r5
 8008538:	000f      	movs	r7, r1
 800853a:	f7f7 ff8d 	bl	8000458 <__aeabi_dcmplt>
 800853e:	2800      	cmp	r0, #0
 8008540:	d174      	bne.n	800862c <_dtoa_r+0x66c>
 8008542:	0032      	movs	r2, r6
 8008544:	003b      	movs	r3, r7
 8008546:	2000      	movs	r0, #0
 8008548:	4968      	ldr	r1, [pc, #416]	; (80086ec <_dtoa_r+0x72c>)
 800854a:	f7fa f843 	bl	80025d4 <__aeabi_dsub>
 800854e:	0022      	movs	r2, r4
 8008550:	002b      	movs	r3, r5
 8008552:	f7f7 ff81 	bl	8000458 <__aeabi_dcmplt>
 8008556:	2800      	cmp	r0, #0
 8008558:	d000      	beq.n	800855c <_dtoa_r+0x59c>
 800855a:	e0d7      	b.n	800870c <_dtoa_r+0x74c>
 800855c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800855e:	9a08      	ldr	r2, [sp, #32]
 8008560:	4293      	cmp	r3, r2
 8008562:	d100      	bne.n	8008566 <_dtoa_r+0x5a6>
 8008564:	e771      	b.n	800844a <_dtoa_r+0x48a>
 8008566:	2200      	movs	r2, #0
 8008568:	0020      	movs	r0, r4
 800856a:	0029      	movs	r1, r5
 800856c:	4b60      	ldr	r3, [pc, #384]	; (80086f0 <_dtoa_r+0x730>)
 800856e:	f7f9 fd6f 	bl	8002050 <__aeabi_dmul>
 8008572:	4b5f      	ldr	r3, [pc, #380]	; (80086f0 <_dtoa_r+0x730>)
 8008574:	0004      	movs	r4, r0
 8008576:	000d      	movs	r5, r1
 8008578:	0030      	movs	r0, r6
 800857a:	0039      	movs	r1, r7
 800857c:	2200      	movs	r2, #0
 800857e:	f7f9 fd67 	bl	8002050 <__aeabi_dmul>
 8008582:	9b08      	ldr	r3, [sp, #32]
 8008584:	0006      	movs	r6, r0
 8008586:	000f      	movs	r7, r1
 8008588:	9314      	str	r3, [sp, #80]	; 0x50
 800858a:	e7be      	b.n	800850a <_dtoa_r+0x54a>
 800858c:	0020      	movs	r0, r4
 800858e:	0029      	movs	r1, r5
 8008590:	f7f9 fd5e 	bl	8002050 <__aeabi_dmul>
 8008594:	9a06      	ldr	r2, [sp, #24]
 8008596:	9b06      	ldr	r3, [sp, #24]
 8008598:	4694      	mov	ip, r2
 800859a:	9308      	str	r3, [sp, #32]
 800859c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800859e:	9014      	str	r0, [sp, #80]	; 0x50
 80085a0:	9115      	str	r1, [sp, #84]	; 0x54
 80085a2:	4463      	add	r3, ip
 80085a4:	9319      	str	r3, [sp, #100]	; 0x64
 80085a6:	0030      	movs	r0, r6
 80085a8:	0039      	movs	r1, r7
 80085aa:	f7fa fbb3 	bl	8002d14 <__aeabi_d2iz>
 80085ae:	9018      	str	r0, [sp, #96]	; 0x60
 80085b0:	f7fa fbe6 	bl	8002d80 <__aeabi_i2d>
 80085b4:	0002      	movs	r2, r0
 80085b6:	000b      	movs	r3, r1
 80085b8:	0030      	movs	r0, r6
 80085ba:	0039      	movs	r1, r7
 80085bc:	f7fa f80a 	bl	80025d4 <__aeabi_dsub>
 80085c0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80085c2:	9b08      	ldr	r3, [sp, #32]
 80085c4:	3630      	adds	r6, #48	; 0x30
 80085c6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80085c8:	701e      	strb	r6, [r3, #0]
 80085ca:	3301      	adds	r3, #1
 80085cc:	0004      	movs	r4, r0
 80085ce:	000d      	movs	r5, r1
 80085d0:	9308      	str	r3, [sp, #32]
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d12d      	bne.n	8008632 <_dtoa_r+0x672>
 80085d6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80085d8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80085da:	9a06      	ldr	r2, [sp, #24]
 80085dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085de:	4694      	mov	ip, r2
 80085e0:	4463      	add	r3, ip
 80085e2:	2200      	movs	r2, #0
 80085e4:	9308      	str	r3, [sp, #32]
 80085e6:	4b47      	ldr	r3, [pc, #284]	; (8008704 <_dtoa_r+0x744>)
 80085e8:	f7f8 fdd8 	bl	800119c <__aeabi_dadd>
 80085ec:	0002      	movs	r2, r0
 80085ee:	000b      	movs	r3, r1
 80085f0:	0020      	movs	r0, r4
 80085f2:	0029      	movs	r1, r5
 80085f4:	f7f7 ff44 	bl	8000480 <__aeabi_dcmpgt>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	d000      	beq.n	80085fe <_dtoa_r+0x63e>
 80085fc:	e086      	b.n	800870c <_dtoa_r+0x74c>
 80085fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008600:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008602:	2000      	movs	r0, #0
 8008604:	493f      	ldr	r1, [pc, #252]	; (8008704 <_dtoa_r+0x744>)
 8008606:	f7f9 ffe5 	bl	80025d4 <__aeabi_dsub>
 800860a:	0002      	movs	r2, r0
 800860c:	000b      	movs	r3, r1
 800860e:	0020      	movs	r0, r4
 8008610:	0029      	movs	r1, r5
 8008612:	f7f7 ff21 	bl	8000458 <__aeabi_dcmplt>
 8008616:	2800      	cmp	r0, #0
 8008618:	d100      	bne.n	800861c <_dtoa_r+0x65c>
 800861a:	e716      	b.n	800844a <_dtoa_r+0x48a>
 800861c:	9b08      	ldr	r3, [sp, #32]
 800861e:	001a      	movs	r2, r3
 8008620:	3a01      	subs	r2, #1
 8008622:	9208      	str	r2, [sp, #32]
 8008624:	7812      	ldrb	r2, [r2, #0]
 8008626:	2a30      	cmp	r2, #48	; 0x30
 8008628:	d0f8      	beq.n	800861c <_dtoa_r+0x65c>
 800862a:	9308      	str	r3, [sp, #32]
 800862c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800862e:	9303      	str	r3, [sp, #12]
 8008630:	e046      	b.n	80086c0 <_dtoa_r+0x700>
 8008632:	2200      	movs	r2, #0
 8008634:	4b2e      	ldr	r3, [pc, #184]	; (80086f0 <_dtoa_r+0x730>)
 8008636:	f7f9 fd0b 	bl	8002050 <__aeabi_dmul>
 800863a:	0006      	movs	r6, r0
 800863c:	000f      	movs	r7, r1
 800863e:	e7b2      	b.n	80085a6 <_dtoa_r+0x5e6>
 8008640:	9b06      	ldr	r3, [sp, #24]
 8008642:	9a06      	ldr	r2, [sp, #24]
 8008644:	930a      	str	r3, [sp, #40]	; 0x28
 8008646:	9b07      	ldr	r3, [sp, #28]
 8008648:	9c08      	ldr	r4, [sp, #32]
 800864a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800864c:	3b01      	subs	r3, #1
 800864e:	189b      	adds	r3, r3, r2
 8008650:	930b      	str	r3, [sp, #44]	; 0x2c
 8008652:	0032      	movs	r2, r6
 8008654:	003b      	movs	r3, r7
 8008656:	0020      	movs	r0, r4
 8008658:	0029      	movs	r1, r5
 800865a:	f7f9 f8ff 	bl	800185c <__aeabi_ddiv>
 800865e:	f7fa fb59 	bl	8002d14 <__aeabi_d2iz>
 8008662:	9007      	str	r0, [sp, #28]
 8008664:	f7fa fb8c 	bl	8002d80 <__aeabi_i2d>
 8008668:	0032      	movs	r2, r6
 800866a:	003b      	movs	r3, r7
 800866c:	f7f9 fcf0 	bl	8002050 <__aeabi_dmul>
 8008670:	0002      	movs	r2, r0
 8008672:	000b      	movs	r3, r1
 8008674:	0020      	movs	r0, r4
 8008676:	0029      	movs	r1, r5
 8008678:	f7f9 ffac 	bl	80025d4 <__aeabi_dsub>
 800867c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800867e:	001a      	movs	r2, r3
 8008680:	3201      	adds	r2, #1
 8008682:	920a      	str	r2, [sp, #40]	; 0x28
 8008684:	9208      	str	r2, [sp, #32]
 8008686:	9a07      	ldr	r2, [sp, #28]
 8008688:	3230      	adds	r2, #48	; 0x30
 800868a:	701a      	strb	r2, [r3, #0]
 800868c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800868e:	429a      	cmp	r2, r3
 8008690:	d14f      	bne.n	8008732 <_dtoa_r+0x772>
 8008692:	0002      	movs	r2, r0
 8008694:	000b      	movs	r3, r1
 8008696:	f7f8 fd81 	bl	800119c <__aeabi_dadd>
 800869a:	0032      	movs	r2, r6
 800869c:	003b      	movs	r3, r7
 800869e:	0004      	movs	r4, r0
 80086a0:	000d      	movs	r5, r1
 80086a2:	f7f7 feed 	bl	8000480 <__aeabi_dcmpgt>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	d12e      	bne.n	8008708 <_dtoa_r+0x748>
 80086aa:	0032      	movs	r2, r6
 80086ac:	003b      	movs	r3, r7
 80086ae:	0020      	movs	r0, r4
 80086b0:	0029      	movs	r1, r5
 80086b2:	f7f7 fecb 	bl	800044c <__aeabi_dcmpeq>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d002      	beq.n	80086c0 <_dtoa_r+0x700>
 80086ba:	9b07      	ldr	r3, [sp, #28]
 80086bc:	07de      	lsls	r6, r3, #31
 80086be:	d423      	bmi.n	8008708 <_dtoa_r+0x748>
 80086c0:	9905      	ldr	r1, [sp, #20]
 80086c2:	9804      	ldr	r0, [sp, #16]
 80086c4:	f000 fbd6 	bl	8008e74 <_Bfree>
 80086c8:	2300      	movs	r3, #0
 80086ca:	9a08      	ldr	r2, [sp, #32]
 80086cc:	7013      	strb	r3, [r2, #0]
 80086ce:	9b03      	ldr	r3, [sp, #12]
 80086d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80086d2:	3301      	adds	r3, #1
 80086d4:	6013      	str	r3, [r2, #0]
 80086d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d100      	bne.n	80086de <_dtoa_r+0x71e>
 80086dc:	e4ba      	b.n	8008054 <_dtoa_r+0x94>
 80086de:	9a08      	ldr	r2, [sp, #32]
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	e4b7      	b.n	8008054 <_dtoa_r+0x94>
 80086e4:	0800a2f8 	.word	0x0800a2f8
 80086e8:	0800a2d0 	.word	0x0800a2d0
 80086ec:	3ff00000 	.word	0x3ff00000
 80086f0:	40240000 	.word	0x40240000
 80086f4:	401c0000 	.word	0x401c0000
 80086f8:	fcc00000 	.word	0xfcc00000
 80086fc:	40140000 	.word	0x40140000
 8008700:	7cc00000 	.word	0x7cc00000
 8008704:	3fe00000 	.word	0x3fe00000
 8008708:	9b03      	ldr	r3, [sp, #12]
 800870a:	930e      	str	r3, [sp, #56]	; 0x38
 800870c:	9b08      	ldr	r3, [sp, #32]
 800870e:	9308      	str	r3, [sp, #32]
 8008710:	3b01      	subs	r3, #1
 8008712:	781a      	ldrb	r2, [r3, #0]
 8008714:	2a39      	cmp	r2, #57	; 0x39
 8008716:	d108      	bne.n	800872a <_dtoa_r+0x76a>
 8008718:	9a06      	ldr	r2, [sp, #24]
 800871a:	429a      	cmp	r2, r3
 800871c:	d1f7      	bne.n	800870e <_dtoa_r+0x74e>
 800871e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008720:	9906      	ldr	r1, [sp, #24]
 8008722:	3201      	adds	r2, #1
 8008724:	920e      	str	r2, [sp, #56]	; 0x38
 8008726:	2230      	movs	r2, #48	; 0x30
 8008728:	700a      	strb	r2, [r1, #0]
 800872a:	781a      	ldrb	r2, [r3, #0]
 800872c:	3201      	adds	r2, #1
 800872e:	701a      	strb	r2, [r3, #0]
 8008730:	e77c      	b.n	800862c <_dtoa_r+0x66c>
 8008732:	2200      	movs	r2, #0
 8008734:	4ba9      	ldr	r3, [pc, #676]	; (80089dc <_dtoa_r+0xa1c>)
 8008736:	f7f9 fc8b 	bl	8002050 <__aeabi_dmul>
 800873a:	2200      	movs	r2, #0
 800873c:	2300      	movs	r3, #0
 800873e:	0004      	movs	r4, r0
 8008740:	000d      	movs	r5, r1
 8008742:	f7f7 fe83 	bl	800044c <__aeabi_dcmpeq>
 8008746:	2800      	cmp	r0, #0
 8008748:	d100      	bne.n	800874c <_dtoa_r+0x78c>
 800874a:	e782      	b.n	8008652 <_dtoa_r+0x692>
 800874c:	e7b8      	b.n	80086c0 <_dtoa_r+0x700>
 800874e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8008750:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008752:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008754:	2f00      	cmp	r7, #0
 8008756:	d012      	beq.n	800877e <_dtoa_r+0x7be>
 8008758:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800875a:	2a01      	cmp	r2, #1
 800875c:	dc6e      	bgt.n	800883c <_dtoa_r+0x87c>
 800875e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008760:	2a00      	cmp	r2, #0
 8008762:	d065      	beq.n	8008830 <_dtoa_r+0x870>
 8008764:	4a9e      	ldr	r2, [pc, #632]	; (80089e0 <_dtoa_r+0xa20>)
 8008766:	189b      	adds	r3, r3, r2
 8008768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800876a:	2101      	movs	r1, #1
 800876c:	18d2      	adds	r2, r2, r3
 800876e:	920a      	str	r2, [sp, #40]	; 0x28
 8008770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008772:	9804      	ldr	r0, [sp, #16]
 8008774:	18d3      	adds	r3, r2, r3
 8008776:	930c      	str	r3, [sp, #48]	; 0x30
 8008778:	f000 fc2c 	bl	8008fd4 <__i2b>
 800877c:	0007      	movs	r7, r0
 800877e:	2c00      	cmp	r4, #0
 8008780:	d00e      	beq.n	80087a0 <_dtoa_r+0x7e0>
 8008782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008784:	2b00      	cmp	r3, #0
 8008786:	dd0b      	ble.n	80087a0 <_dtoa_r+0x7e0>
 8008788:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800878a:	0023      	movs	r3, r4
 800878c:	4294      	cmp	r4, r2
 800878e:	dd00      	ble.n	8008792 <_dtoa_r+0x7d2>
 8008790:	0013      	movs	r3, r2
 8008792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008794:	1ae4      	subs	r4, r4, r3
 8008796:	1ad2      	subs	r2, r2, r3
 8008798:	920a      	str	r2, [sp, #40]	; 0x28
 800879a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	930c      	str	r3, [sp, #48]	; 0x30
 80087a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d01e      	beq.n	80087e4 <_dtoa_r+0x824>
 80087a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d05c      	beq.n	8008866 <_dtoa_r+0x8a6>
 80087ac:	2d00      	cmp	r5, #0
 80087ae:	dd10      	ble.n	80087d2 <_dtoa_r+0x812>
 80087b0:	0039      	movs	r1, r7
 80087b2:	002a      	movs	r2, r5
 80087b4:	9804      	ldr	r0, [sp, #16]
 80087b6:	f000 fcd5 	bl	8009164 <__pow5mult>
 80087ba:	9a05      	ldr	r2, [sp, #20]
 80087bc:	0001      	movs	r1, r0
 80087be:	0007      	movs	r7, r0
 80087c0:	9804      	ldr	r0, [sp, #16]
 80087c2:	f000 fc1f 	bl	8009004 <__multiply>
 80087c6:	0006      	movs	r6, r0
 80087c8:	9905      	ldr	r1, [sp, #20]
 80087ca:	9804      	ldr	r0, [sp, #16]
 80087cc:	f000 fb52 	bl	8008e74 <_Bfree>
 80087d0:	9605      	str	r6, [sp, #20]
 80087d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087d4:	1b5a      	subs	r2, r3, r5
 80087d6:	42ab      	cmp	r3, r5
 80087d8:	d004      	beq.n	80087e4 <_dtoa_r+0x824>
 80087da:	9905      	ldr	r1, [sp, #20]
 80087dc:	9804      	ldr	r0, [sp, #16]
 80087de:	f000 fcc1 	bl	8009164 <__pow5mult>
 80087e2:	9005      	str	r0, [sp, #20]
 80087e4:	2101      	movs	r1, #1
 80087e6:	9804      	ldr	r0, [sp, #16]
 80087e8:	f000 fbf4 	bl	8008fd4 <__i2b>
 80087ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087ee:	0006      	movs	r6, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	dd3a      	ble.n	800886a <_dtoa_r+0x8aa>
 80087f4:	001a      	movs	r2, r3
 80087f6:	0001      	movs	r1, r0
 80087f8:	9804      	ldr	r0, [sp, #16]
 80087fa:	f000 fcb3 	bl	8009164 <__pow5mult>
 80087fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008800:	0006      	movs	r6, r0
 8008802:	2500      	movs	r5, #0
 8008804:	2b01      	cmp	r3, #1
 8008806:	dc38      	bgt.n	800887a <_dtoa_r+0x8ba>
 8008808:	2500      	movs	r5, #0
 800880a:	9b08      	ldr	r3, [sp, #32]
 800880c:	42ab      	cmp	r3, r5
 800880e:	d130      	bne.n	8008872 <_dtoa_r+0x8b2>
 8008810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008812:	031b      	lsls	r3, r3, #12
 8008814:	42ab      	cmp	r3, r5
 8008816:	d12c      	bne.n	8008872 <_dtoa_r+0x8b2>
 8008818:	4b72      	ldr	r3, [pc, #456]	; (80089e4 <_dtoa_r+0xa24>)
 800881a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800881c:	4213      	tst	r3, r2
 800881e:	d028      	beq.n	8008872 <_dtoa_r+0x8b2>
 8008820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008822:	3501      	adds	r5, #1
 8008824:	3301      	adds	r3, #1
 8008826:	930a      	str	r3, [sp, #40]	; 0x28
 8008828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800882a:	3301      	adds	r3, #1
 800882c:	930c      	str	r3, [sp, #48]	; 0x30
 800882e:	e020      	b.n	8008872 <_dtoa_r+0x8b2>
 8008830:	2336      	movs	r3, #54	; 0x36
 8008832:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008834:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008836:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008838:	1a9b      	subs	r3, r3, r2
 800883a:	e795      	b.n	8008768 <_dtoa_r+0x7a8>
 800883c:	9b07      	ldr	r3, [sp, #28]
 800883e:	1e5d      	subs	r5, r3, #1
 8008840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008842:	42ab      	cmp	r3, r5
 8008844:	db07      	blt.n	8008856 <_dtoa_r+0x896>
 8008846:	1b5d      	subs	r5, r3, r5
 8008848:	9b07      	ldr	r3, [sp, #28]
 800884a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800884c:	2b00      	cmp	r3, #0
 800884e:	da8b      	bge.n	8008768 <_dtoa_r+0x7a8>
 8008850:	1ae4      	subs	r4, r4, r3
 8008852:	2300      	movs	r3, #0
 8008854:	e788      	b.n	8008768 <_dtoa_r+0x7a8>
 8008856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008858:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800885a:	1aeb      	subs	r3, r5, r3
 800885c:	18d3      	adds	r3, r2, r3
 800885e:	950d      	str	r5, [sp, #52]	; 0x34
 8008860:	9313      	str	r3, [sp, #76]	; 0x4c
 8008862:	2500      	movs	r5, #0
 8008864:	e7f0      	b.n	8008848 <_dtoa_r+0x888>
 8008866:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008868:	e7b7      	b.n	80087da <_dtoa_r+0x81a>
 800886a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800886c:	2500      	movs	r5, #0
 800886e:	2b01      	cmp	r3, #1
 8008870:	ddca      	ble.n	8008808 <_dtoa_r+0x848>
 8008872:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008874:	2001      	movs	r0, #1
 8008876:	2b00      	cmp	r3, #0
 8008878:	d008      	beq.n	800888c <_dtoa_r+0x8cc>
 800887a:	6933      	ldr	r3, [r6, #16]
 800887c:	3303      	adds	r3, #3
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	18f3      	adds	r3, r6, r3
 8008882:	6858      	ldr	r0, [r3, #4]
 8008884:	f000 fb5e 	bl	8008f44 <__hi0bits>
 8008888:	2320      	movs	r3, #32
 800888a:	1a18      	subs	r0, r3, r0
 800888c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800888e:	1818      	adds	r0, r3, r0
 8008890:	0002      	movs	r2, r0
 8008892:	231f      	movs	r3, #31
 8008894:	401a      	ands	r2, r3
 8008896:	4218      	tst	r0, r3
 8008898:	d047      	beq.n	800892a <_dtoa_r+0x96a>
 800889a:	3301      	adds	r3, #1
 800889c:	1a9b      	subs	r3, r3, r2
 800889e:	2b04      	cmp	r3, #4
 80088a0:	dd3f      	ble.n	8008922 <_dtoa_r+0x962>
 80088a2:	231c      	movs	r3, #28
 80088a4:	1a9b      	subs	r3, r3, r2
 80088a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088a8:	18e4      	adds	r4, r4, r3
 80088aa:	18d2      	adds	r2, r2, r3
 80088ac:	920a      	str	r2, [sp, #40]	; 0x28
 80088ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088b0:	18d3      	adds	r3, r2, r3
 80088b2:	930c      	str	r3, [sp, #48]	; 0x30
 80088b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	dd05      	ble.n	80088c6 <_dtoa_r+0x906>
 80088ba:	001a      	movs	r2, r3
 80088bc:	9905      	ldr	r1, [sp, #20]
 80088be:	9804      	ldr	r0, [sp, #16]
 80088c0:	f000 fcac 	bl	800921c <__lshift>
 80088c4:	9005      	str	r0, [sp, #20]
 80088c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	dd05      	ble.n	80088d8 <_dtoa_r+0x918>
 80088cc:	0031      	movs	r1, r6
 80088ce:	001a      	movs	r2, r3
 80088d0:	9804      	ldr	r0, [sp, #16]
 80088d2:	f000 fca3 	bl	800921c <__lshift>
 80088d6:	0006      	movs	r6, r0
 80088d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d027      	beq.n	800892e <_dtoa_r+0x96e>
 80088de:	0031      	movs	r1, r6
 80088e0:	9805      	ldr	r0, [sp, #20]
 80088e2:	f000 fd09 	bl	80092f8 <__mcmp>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	da21      	bge.n	800892e <_dtoa_r+0x96e>
 80088ea:	9b03      	ldr	r3, [sp, #12]
 80088ec:	220a      	movs	r2, #10
 80088ee:	3b01      	subs	r3, #1
 80088f0:	9303      	str	r3, [sp, #12]
 80088f2:	9905      	ldr	r1, [sp, #20]
 80088f4:	2300      	movs	r3, #0
 80088f6:	9804      	ldr	r0, [sp, #16]
 80088f8:	f000 fae0 	bl	8008ebc <__multadd>
 80088fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088fe:	9005      	str	r0, [sp, #20]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d100      	bne.n	8008906 <_dtoa_r+0x946>
 8008904:	e15d      	b.n	8008bc2 <_dtoa_r+0xc02>
 8008906:	2300      	movs	r3, #0
 8008908:	0039      	movs	r1, r7
 800890a:	220a      	movs	r2, #10
 800890c:	9804      	ldr	r0, [sp, #16]
 800890e:	f000 fad5 	bl	8008ebc <__multadd>
 8008912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008914:	0007      	movs	r7, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	dc49      	bgt.n	80089ae <_dtoa_r+0x9ee>
 800891a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800891c:	2b02      	cmp	r3, #2
 800891e:	dc0e      	bgt.n	800893e <_dtoa_r+0x97e>
 8008920:	e045      	b.n	80089ae <_dtoa_r+0x9ee>
 8008922:	2b04      	cmp	r3, #4
 8008924:	d0c6      	beq.n	80088b4 <_dtoa_r+0x8f4>
 8008926:	331c      	adds	r3, #28
 8008928:	e7bd      	b.n	80088a6 <_dtoa_r+0x8e6>
 800892a:	0013      	movs	r3, r2
 800892c:	e7fb      	b.n	8008926 <_dtoa_r+0x966>
 800892e:	9b07      	ldr	r3, [sp, #28]
 8008930:	2b00      	cmp	r3, #0
 8008932:	dc36      	bgt.n	80089a2 <_dtoa_r+0x9e2>
 8008934:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008936:	2b02      	cmp	r3, #2
 8008938:	dd33      	ble.n	80089a2 <_dtoa_r+0x9e2>
 800893a:	9b07      	ldr	r3, [sp, #28]
 800893c:	930b      	str	r3, [sp, #44]	; 0x2c
 800893e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10c      	bne.n	800895e <_dtoa_r+0x99e>
 8008944:	0031      	movs	r1, r6
 8008946:	2205      	movs	r2, #5
 8008948:	9804      	ldr	r0, [sp, #16]
 800894a:	f000 fab7 	bl	8008ebc <__multadd>
 800894e:	0006      	movs	r6, r0
 8008950:	0001      	movs	r1, r0
 8008952:	9805      	ldr	r0, [sp, #20]
 8008954:	f000 fcd0 	bl	80092f8 <__mcmp>
 8008958:	2800      	cmp	r0, #0
 800895a:	dd00      	ble.n	800895e <_dtoa_r+0x99e>
 800895c:	e59f      	b.n	800849e <_dtoa_r+0x4de>
 800895e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008960:	43db      	mvns	r3, r3
 8008962:	9303      	str	r3, [sp, #12]
 8008964:	9b06      	ldr	r3, [sp, #24]
 8008966:	9308      	str	r3, [sp, #32]
 8008968:	2500      	movs	r5, #0
 800896a:	0031      	movs	r1, r6
 800896c:	9804      	ldr	r0, [sp, #16]
 800896e:	f000 fa81 	bl	8008e74 <_Bfree>
 8008972:	2f00      	cmp	r7, #0
 8008974:	d100      	bne.n	8008978 <_dtoa_r+0x9b8>
 8008976:	e6a3      	b.n	80086c0 <_dtoa_r+0x700>
 8008978:	2d00      	cmp	r5, #0
 800897a:	d005      	beq.n	8008988 <_dtoa_r+0x9c8>
 800897c:	42bd      	cmp	r5, r7
 800897e:	d003      	beq.n	8008988 <_dtoa_r+0x9c8>
 8008980:	0029      	movs	r1, r5
 8008982:	9804      	ldr	r0, [sp, #16]
 8008984:	f000 fa76 	bl	8008e74 <_Bfree>
 8008988:	0039      	movs	r1, r7
 800898a:	9804      	ldr	r0, [sp, #16]
 800898c:	f000 fa72 	bl	8008e74 <_Bfree>
 8008990:	e696      	b.n	80086c0 <_dtoa_r+0x700>
 8008992:	2600      	movs	r6, #0
 8008994:	0037      	movs	r7, r6
 8008996:	e7e2      	b.n	800895e <_dtoa_r+0x99e>
 8008998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800899a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800899c:	9303      	str	r3, [sp, #12]
 800899e:	0037      	movs	r7, r6
 80089a0:	e57d      	b.n	800849e <_dtoa_r+0x4de>
 80089a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d100      	bne.n	80089aa <_dtoa_r+0x9ea>
 80089a8:	e0c3      	b.n	8008b32 <_dtoa_r+0xb72>
 80089aa:	9b07      	ldr	r3, [sp, #28]
 80089ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80089ae:	2c00      	cmp	r4, #0
 80089b0:	dd05      	ble.n	80089be <_dtoa_r+0x9fe>
 80089b2:	0039      	movs	r1, r7
 80089b4:	0022      	movs	r2, r4
 80089b6:	9804      	ldr	r0, [sp, #16]
 80089b8:	f000 fc30 	bl	800921c <__lshift>
 80089bc:	0007      	movs	r7, r0
 80089be:	0038      	movs	r0, r7
 80089c0:	2d00      	cmp	r5, #0
 80089c2:	d024      	beq.n	8008a0e <_dtoa_r+0xa4e>
 80089c4:	6879      	ldr	r1, [r7, #4]
 80089c6:	9804      	ldr	r0, [sp, #16]
 80089c8:	f000 fa10 	bl	8008dec <_Balloc>
 80089cc:	1e04      	subs	r4, r0, #0
 80089ce:	d111      	bne.n	80089f4 <_dtoa_r+0xa34>
 80089d0:	0022      	movs	r2, r4
 80089d2:	4b05      	ldr	r3, [pc, #20]	; (80089e8 <_dtoa_r+0xa28>)
 80089d4:	4805      	ldr	r0, [pc, #20]	; (80089ec <_dtoa_r+0xa2c>)
 80089d6:	4906      	ldr	r1, [pc, #24]	; (80089f0 <_dtoa_r+0xa30>)
 80089d8:	f7ff fb07 	bl	8007fea <_dtoa_r+0x2a>
 80089dc:	40240000 	.word	0x40240000
 80089e0:	00000433 	.word	0x00000433
 80089e4:	7ff00000 	.word	0x7ff00000
 80089e8:	0800a260 	.word	0x0800a260
 80089ec:	0800a208 	.word	0x0800a208
 80089f0:	000002ef 	.word	0x000002ef
 80089f4:	0039      	movs	r1, r7
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	310c      	adds	r1, #12
 80089fa:	3202      	adds	r2, #2
 80089fc:	0092      	lsls	r2, r2, #2
 80089fe:	300c      	adds	r0, #12
 8008a00:	f000 ffca 	bl	8009998 <memcpy>
 8008a04:	2201      	movs	r2, #1
 8008a06:	0021      	movs	r1, r4
 8008a08:	9804      	ldr	r0, [sp, #16]
 8008a0a:	f000 fc07 	bl	800921c <__lshift>
 8008a0e:	9b06      	ldr	r3, [sp, #24]
 8008a10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a12:	9307      	str	r3, [sp, #28]
 8008a14:	3b01      	subs	r3, #1
 8008a16:	189b      	adds	r3, r3, r2
 8008a18:	2201      	movs	r2, #1
 8008a1a:	003d      	movs	r5, r7
 8008a1c:	0007      	movs	r7, r0
 8008a1e:	930e      	str	r3, [sp, #56]	; 0x38
 8008a20:	9b08      	ldr	r3, [sp, #32]
 8008a22:	4013      	ands	r3, r2
 8008a24:	930d      	str	r3, [sp, #52]	; 0x34
 8008a26:	0031      	movs	r1, r6
 8008a28:	9805      	ldr	r0, [sp, #20]
 8008a2a:	f7ff fa3a 	bl	8007ea2 <quorem>
 8008a2e:	0029      	movs	r1, r5
 8008a30:	0004      	movs	r4, r0
 8008a32:	900b      	str	r0, [sp, #44]	; 0x2c
 8008a34:	9805      	ldr	r0, [sp, #20]
 8008a36:	f000 fc5f 	bl	80092f8 <__mcmp>
 8008a3a:	003a      	movs	r2, r7
 8008a3c:	900c      	str	r0, [sp, #48]	; 0x30
 8008a3e:	0031      	movs	r1, r6
 8008a40:	9804      	ldr	r0, [sp, #16]
 8008a42:	f000 fc75 	bl	8009330 <__mdiff>
 8008a46:	2201      	movs	r2, #1
 8008a48:	68c3      	ldr	r3, [r0, #12]
 8008a4a:	3430      	adds	r4, #48	; 0x30
 8008a4c:	9008      	str	r0, [sp, #32]
 8008a4e:	920a      	str	r2, [sp, #40]	; 0x28
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d104      	bne.n	8008a5e <_dtoa_r+0xa9e>
 8008a54:	0001      	movs	r1, r0
 8008a56:	9805      	ldr	r0, [sp, #20]
 8008a58:	f000 fc4e 	bl	80092f8 <__mcmp>
 8008a5c:	900a      	str	r0, [sp, #40]	; 0x28
 8008a5e:	9908      	ldr	r1, [sp, #32]
 8008a60:	9804      	ldr	r0, [sp, #16]
 8008a62:	f000 fa07 	bl	8008e74 <_Bfree>
 8008a66:	9b07      	ldr	r3, [sp, #28]
 8008a68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	9308      	str	r3, [sp, #32]
 8008a6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a70:	4313      	orrs	r3, r2
 8008a72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a74:	4313      	orrs	r3, r2
 8008a76:	d109      	bne.n	8008a8c <_dtoa_r+0xacc>
 8008a78:	2c39      	cmp	r4, #57	; 0x39
 8008a7a:	d022      	beq.n	8008ac2 <_dtoa_r+0xb02>
 8008a7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	dd01      	ble.n	8008a86 <_dtoa_r+0xac6>
 8008a82:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008a84:	3431      	adds	r4, #49	; 0x31
 8008a86:	9b07      	ldr	r3, [sp, #28]
 8008a88:	701c      	strb	r4, [r3, #0]
 8008a8a:	e76e      	b.n	800896a <_dtoa_r+0x9aa>
 8008a8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	db04      	blt.n	8008a9c <_dtoa_r+0xadc>
 8008a92:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008a94:	4313      	orrs	r3, r2
 8008a96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	d11e      	bne.n	8008ada <_dtoa_r+0xb1a>
 8008a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	ddf1      	ble.n	8008a86 <_dtoa_r+0xac6>
 8008aa2:	9905      	ldr	r1, [sp, #20]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	9804      	ldr	r0, [sp, #16]
 8008aa8:	f000 fbb8 	bl	800921c <__lshift>
 8008aac:	0031      	movs	r1, r6
 8008aae:	9005      	str	r0, [sp, #20]
 8008ab0:	f000 fc22 	bl	80092f8 <__mcmp>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	dc02      	bgt.n	8008abe <_dtoa_r+0xafe>
 8008ab8:	d1e5      	bne.n	8008a86 <_dtoa_r+0xac6>
 8008aba:	07e3      	lsls	r3, r4, #31
 8008abc:	d5e3      	bpl.n	8008a86 <_dtoa_r+0xac6>
 8008abe:	2c39      	cmp	r4, #57	; 0x39
 8008ac0:	d1df      	bne.n	8008a82 <_dtoa_r+0xac2>
 8008ac2:	2339      	movs	r3, #57	; 0x39
 8008ac4:	9a07      	ldr	r2, [sp, #28]
 8008ac6:	7013      	strb	r3, [r2, #0]
 8008ac8:	9b08      	ldr	r3, [sp, #32]
 8008aca:	9308      	str	r3, [sp, #32]
 8008acc:	3b01      	subs	r3, #1
 8008ace:	781a      	ldrb	r2, [r3, #0]
 8008ad0:	2a39      	cmp	r2, #57	; 0x39
 8008ad2:	d063      	beq.n	8008b9c <_dtoa_r+0xbdc>
 8008ad4:	3201      	adds	r2, #1
 8008ad6:	701a      	strb	r2, [r3, #0]
 8008ad8:	e747      	b.n	800896a <_dtoa_r+0x9aa>
 8008ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	dd03      	ble.n	8008ae8 <_dtoa_r+0xb28>
 8008ae0:	2c39      	cmp	r4, #57	; 0x39
 8008ae2:	d0ee      	beq.n	8008ac2 <_dtoa_r+0xb02>
 8008ae4:	3401      	adds	r4, #1
 8008ae6:	e7ce      	b.n	8008a86 <_dtoa_r+0xac6>
 8008ae8:	9b07      	ldr	r3, [sp, #28]
 8008aea:	9a07      	ldr	r2, [sp, #28]
 8008aec:	701c      	strb	r4, [r3, #0]
 8008aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d03e      	beq.n	8008b72 <_dtoa_r+0xbb2>
 8008af4:	2300      	movs	r3, #0
 8008af6:	220a      	movs	r2, #10
 8008af8:	9905      	ldr	r1, [sp, #20]
 8008afa:	9804      	ldr	r0, [sp, #16]
 8008afc:	f000 f9de 	bl	8008ebc <__multadd>
 8008b00:	2300      	movs	r3, #0
 8008b02:	9005      	str	r0, [sp, #20]
 8008b04:	220a      	movs	r2, #10
 8008b06:	0029      	movs	r1, r5
 8008b08:	9804      	ldr	r0, [sp, #16]
 8008b0a:	42bd      	cmp	r5, r7
 8008b0c:	d106      	bne.n	8008b1c <_dtoa_r+0xb5c>
 8008b0e:	f000 f9d5 	bl	8008ebc <__multadd>
 8008b12:	0005      	movs	r5, r0
 8008b14:	0007      	movs	r7, r0
 8008b16:	9b08      	ldr	r3, [sp, #32]
 8008b18:	9307      	str	r3, [sp, #28]
 8008b1a:	e784      	b.n	8008a26 <_dtoa_r+0xa66>
 8008b1c:	f000 f9ce 	bl	8008ebc <__multadd>
 8008b20:	0039      	movs	r1, r7
 8008b22:	0005      	movs	r5, r0
 8008b24:	2300      	movs	r3, #0
 8008b26:	220a      	movs	r2, #10
 8008b28:	9804      	ldr	r0, [sp, #16]
 8008b2a:	f000 f9c7 	bl	8008ebc <__multadd>
 8008b2e:	0007      	movs	r7, r0
 8008b30:	e7f1      	b.n	8008b16 <_dtoa_r+0xb56>
 8008b32:	9b07      	ldr	r3, [sp, #28]
 8008b34:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b36:	2500      	movs	r5, #0
 8008b38:	0031      	movs	r1, r6
 8008b3a:	9805      	ldr	r0, [sp, #20]
 8008b3c:	f7ff f9b1 	bl	8007ea2 <quorem>
 8008b40:	9b06      	ldr	r3, [sp, #24]
 8008b42:	3030      	adds	r0, #48	; 0x30
 8008b44:	5558      	strb	r0, [r3, r5]
 8008b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b48:	3501      	adds	r5, #1
 8008b4a:	0004      	movs	r4, r0
 8008b4c:	42ab      	cmp	r3, r5
 8008b4e:	dd07      	ble.n	8008b60 <_dtoa_r+0xba0>
 8008b50:	2300      	movs	r3, #0
 8008b52:	220a      	movs	r2, #10
 8008b54:	9905      	ldr	r1, [sp, #20]
 8008b56:	9804      	ldr	r0, [sp, #16]
 8008b58:	f000 f9b0 	bl	8008ebc <__multadd>
 8008b5c:	9005      	str	r0, [sp, #20]
 8008b5e:	e7eb      	b.n	8008b38 <_dtoa_r+0xb78>
 8008b60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b62:	2301      	movs	r3, #1
 8008b64:	2a00      	cmp	r2, #0
 8008b66:	dd00      	ble.n	8008b6a <_dtoa_r+0xbaa>
 8008b68:	0013      	movs	r3, r2
 8008b6a:	2500      	movs	r5, #0
 8008b6c:	9a06      	ldr	r2, [sp, #24]
 8008b6e:	18d3      	adds	r3, r2, r3
 8008b70:	9308      	str	r3, [sp, #32]
 8008b72:	9905      	ldr	r1, [sp, #20]
 8008b74:	2201      	movs	r2, #1
 8008b76:	9804      	ldr	r0, [sp, #16]
 8008b78:	f000 fb50 	bl	800921c <__lshift>
 8008b7c:	0031      	movs	r1, r6
 8008b7e:	9005      	str	r0, [sp, #20]
 8008b80:	f000 fbba 	bl	80092f8 <__mcmp>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	dc9f      	bgt.n	8008ac8 <_dtoa_r+0xb08>
 8008b88:	d101      	bne.n	8008b8e <_dtoa_r+0xbce>
 8008b8a:	07e4      	lsls	r4, r4, #31
 8008b8c:	d49c      	bmi.n	8008ac8 <_dtoa_r+0xb08>
 8008b8e:	9b08      	ldr	r3, [sp, #32]
 8008b90:	9308      	str	r3, [sp, #32]
 8008b92:	3b01      	subs	r3, #1
 8008b94:	781a      	ldrb	r2, [r3, #0]
 8008b96:	2a30      	cmp	r2, #48	; 0x30
 8008b98:	d0fa      	beq.n	8008b90 <_dtoa_r+0xbd0>
 8008b9a:	e6e6      	b.n	800896a <_dtoa_r+0x9aa>
 8008b9c:	9a06      	ldr	r2, [sp, #24]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d193      	bne.n	8008aca <_dtoa_r+0xb0a>
 8008ba2:	9b03      	ldr	r3, [sp, #12]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	9303      	str	r3, [sp, #12]
 8008ba8:	2331      	movs	r3, #49	; 0x31
 8008baa:	7013      	strb	r3, [r2, #0]
 8008bac:	e6dd      	b.n	800896a <_dtoa_r+0x9aa>
 8008bae:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <_dtoa_r+0xc14>)
 8008bb0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008bb2:	9306      	str	r3, [sp, #24]
 8008bb4:	4b08      	ldr	r3, [pc, #32]	; (8008bd8 <_dtoa_r+0xc18>)
 8008bb6:	2a00      	cmp	r2, #0
 8008bb8:	d001      	beq.n	8008bbe <_dtoa_r+0xbfe>
 8008bba:	f7ff fa49 	bl	8008050 <_dtoa_r+0x90>
 8008bbe:	f7ff fa49 	bl	8008054 <_dtoa_r+0x94>
 8008bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	dcb6      	bgt.n	8008b36 <_dtoa_r+0xb76>
 8008bc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	dd00      	ble.n	8008bd0 <_dtoa_r+0xc10>
 8008bce:	e6b6      	b.n	800893e <_dtoa_r+0x97e>
 8008bd0:	e7b1      	b.n	8008b36 <_dtoa_r+0xb76>
 8008bd2:	46c0      	nop			; (mov r8, r8)
 8008bd4:	0800a1e4 	.word	0x0800a1e4
 8008bd8:	0800a1ec 	.word	0x0800a1ec

08008bdc <_free_r>:
 8008bdc:	b570      	push	{r4, r5, r6, lr}
 8008bde:	0005      	movs	r5, r0
 8008be0:	2900      	cmp	r1, #0
 8008be2:	d010      	beq.n	8008c06 <_free_r+0x2a>
 8008be4:	1f0c      	subs	r4, r1, #4
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	da00      	bge.n	8008bee <_free_r+0x12>
 8008bec:	18e4      	adds	r4, r4, r3
 8008bee:	0028      	movs	r0, r5
 8008bf0:	f000 f8ec 	bl	8008dcc <__malloc_lock>
 8008bf4:	4a1d      	ldr	r2, [pc, #116]	; (8008c6c <_free_r+0x90>)
 8008bf6:	6813      	ldr	r3, [r2, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d105      	bne.n	8008c08 <_free_r+0x2c>
 8008bfc:	6063      	str	r3, [r4, #4]
 8008bfe:	6014      	str	r4, [r2, #0]
 8008c00:	0028      	movs	r0, r5
 8008c02:	f000 f8eb 	bl	8008ddc <__malloc_unlock>
 8008c06:	bd70      	pop	{r4, r5, r6, pc}
 8008c08:	42a3      	cmp	r3, r4
 8008c0a:	d908      	bls.n	8008c1e <_free_r+0x42>
 8008c0c:	6820      	ldr	r0, [r4, #0]
 8008c0e:	1821      	adds	r1, r4, r0
 8008c10:	428b      	cmp	r3, r1
 8008c12:	d1f3      	bne.n	8008bfc <_free_r+0x20>
 8008c14:	6819      	ldr	r1, [r3, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	1809      	adds	r1, r1, r0
 8008c1a:	6021      	str	r1, [r4, #0]
 8008c1c:	e7ee      	b.n	8008bfc <_free_r+0x20>
 8008c1e:	001a      	movs	r2, r3
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <_free_r+0x4e>
 8008c26:	42a3      	cmp	r3, r4
 8008c28:	d9f9      	bls.n	8008c1e <_free_r+0x42>
 8008c2a:	6811      	ldr	r1, [r2, #0]
 8008c2c:	1850      	adds	r0, r2, r1
 8008c2e:	42a0      	cmp	r0, r4
 8008c30:	d10b      	bne.n	8008c4a <_free_r+0x6e>
 8008c32:	6820      	ldr	r0, [r4, #0]
 8008c34:	1809      	adds	r1, r1, r0
 8008c36:	1850      	adds	r0, r2, r1
 8008c38:	6011      	str	r1, [r2, #0]
 8008c3a:	4283      	cmp	r3, r0
 8008c3c:	d1e0      	bne.n	8008c00 <_free_r+0x24>
 8008c3e:	6818      	ldr	r0, [r3, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	1841      	adds	r1, r0, r1
 8008c44:	6011      	str	r1, [r2, #0]
 8008c46:	6053      	str	r3, [r2, #4]
 8008c48:	e7da      	b.n	8008c00 <_free_r+0x24>
 8008c4a:	42a0      	cmp	r0, r4
 8008c4c:	d902      	bls.n	8008c54 <_free_r+0x78>
 8008c4e:	230c      	movs	r3, #12
 8008c50:	602b      	str	r3, [r5, #0]
 8008c52:	e7d5      	b.n	8008c00 <_free_r+0x24>
 8008c54:	6820      	ldr	r0, [r4, #0]
 8008c56:	1821      	adds	r1, r4, r0
 8008c58:	428b      	cmp	r3, r1
 8008c5a:	d103      	bne.n	8008c64 <_free_r+0x88>
 8008c5c:	6819      	ldr	r1, [r3, #0]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	1809      	adds	r1, r1, r0
 8008c62:	6021      	str	r1, [r4, #0]
 8008c64:	6063      	str	r3, [r4, #4]
 8008c66:	6054      	str	r4, [r2, #4]
 8008c68:	e7ca      	b.n	8008c00 <_free_r+0x24>
 8008c6a:	46c0      	nop			; (mov r8, r8)
 8008c6c:	200007ec 	.word	0x200007ec

08008c70 <malloc>:
 8008c70:	b510      	push	{r4, lr}
 8008c72:	4b03      	ldr	r3, [pc, #12]	; (8008c80 <malloc+0x10>)
 8008c74:	0001      	movs	r1, r0
 8008c76:	6818      	ldr	r0, [r3, #0]
 8008c78:	f000 f826 	bl	8008cc8 <_malloc_r>
 8008c7c:	bd10      	pop	{r4, pc}
 8008c7e:	46c0      	nop			; (mov r8, r8)
 8008c80:	20000068 	.word	0x20000068

08008c84 <sbrk_aligned>:
 8008c84:	b570      	push	{r4, r5, r6, lr}
 8008c86:	4e0f      	ldr	r6, [pc, #60]	; (8008cc4 <sbrk_aligned+0x40>)
 8008c88:	000d      	movs	r5, r1
 8008c8a:	6831      	ldr	r1, [r6, #0]
 8008c8c:	0004      	movs	r4, r0
 8008c8e:	2900      	cmp	r1, #0
 8008c90:	d102      	bne.n	8008c98 <sbrk_aligned+0x14>
 8008c92:	f000 fe6f 	bl	8009974 <_sbrk_r>
 8008c96:	6030      	str	r0, [r6, #0]
 8008c98:	0029      	movs	r1, r5
 8008c9a:	0020      	movs	r0, r4
 8008c9c:	f000 fe6a 	bl	8009974 <_sbrk_r>
 8008ca0:	1c43      	adds	r3, r0, #1
 8008ca2:	d00a      	beq.n	8008cba <sbrk_aligned+0x36>
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	1cc5      	adds	r5, r0, #3
 8008ca8:	439d      	bics	r5, r3
 8008caa:	42a8      	cmp	r0, r5
 8008cac:	d007      	beq.n	8008cbe <sbrk_aligned+0x3a>
 8008cae:	1a29      	subs	r1, r5, r0
 8008cb0:	0020      	movs	r0, r4
 8008cb2:	f000 fe5f 	bl	8009974 <_sbrk_r>
 8008cb6:	3001      	adds	r0, #1
 8008cb8:	d101      	bne.n	8008cbe <sbrk_aligned+0x3a>
 8008cba:	2501      	movs	r5, #1
 8008cbc:	426d      	negs	r5, r5
 8008cbe:	0028      	movs	r0, r5
 8008cc0:	bd70      	pop	{r4, r5, r6, pc}
 8008cc2:	46c0      	nop			; (mov r8, r8)
 8008cc4:	200007f0 	.word	0x200007f0

08008cc8 <_malloc_r>:
 8008cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cca:	2203      	movs	r2, #3
 8008ccc:	1ccb      	adds	r3, r1, #3
 8008cce:	4393      	bics	r3, r2
 8008cd0:	3308      	adds	r3, #8
 8008cd2:	0006      	movs	r6, r0
 8008cd4:	001f      	movs	r7, r3
 8008cd6:	2b0c      	cmp	r3, #12
 8008cd8:	d238      	bcs.n	8008d4c <_malloc_r+0x84>
 8008cda:	270c      	movs	r7, #12
 8008cdc:	42b9      	cmp	r1, r7
 8008cde:	d837      	bhi.n	8008d50 <_malloc_r+0x88>
 8008ce0:	0030      	movs	r0, r6
 8008ce2:	f000 f873 	bl	8008dcc <__malloc_lock>
 8008ce6:	4b38      	ldr	r3, [pc, #224]	; (8008dc8 <_malloc_r+0x100>)
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	001c      	movs	r4, r3
 8008cee:	2c00      	cmp	r4, #0
 8008cf0:	d133      	bne.n	8008d5a <_malloc_r+0x92>
 8008cf2:	0039      	movs	r1, r7
 8008cf4:	0030      	movs	r0, r6
 8008cf6:	f7ff ffc5 	bl	8008c84 <sbrk_aligned>
 8008cfa:	0004      	movs	r4, r0
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d15e      	bne.n	8008dbe <_malloc_r+0xf6>
 8008d00:	9b00      	ldr	r3, [sp, #0]
 8008d02:	681c      	ldr	r4, [r3, #0]
 8008d04:	0025      	movs	r5, r4
 8008d06:	2d00      	cmp	r5, #0
 8008d08:	d14e      	bne.n	8008da8 <_malloc_r+0xe0>
 8008d0a:	2c00      	cmp	r4, #0
 8008d0c:	d051      	beq.n	8008db2 <_malloc_r+0xea>
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	0029      	movs	r1, r5
 8008d12:	18e3      	adds	r3, r4, r3
 8008d14:	0030      	movs	r0, r6
 8008d16:	9301      	str	r3, [sp, #4]
 8008d18:	f000 fe2c 	bl	8009974 <_sbrk_r>
 8008d1c:	9b01      	ldr	r3, [sp, #4]
 8008d1e:	4283      	cmp	r3, r0
 8008d20:	d147      	bne.n	8008db2 <_malloc_r+0xea>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	0030      	movs	r0, r6
 8008d26:	1aff      	subs	r7, r7, r3
 8008d28:	0039      	movs	r1, r7
 8008d2a:	f7ff ffab 	bl	8008c84 <sbrk_aligned>
 8008d2e:	3001      	adds	r0, #1
 8008d30:	d03f      	beq.n	8008db2 <_malloc_r+0xea>
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	19db      	adds	r3, r3, r7
 8008d36:	6023      	str	r3, [r4, #0]
 8008d38:	9b00      	ldr	r3, [sp, #0]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d040      	beq.n	8008dc2 <_malloc_r+0xfa>
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	42a2      	cmp	r2, r4
 8008d44:	d133      	bne.n	8008dae <_malloc_r+0xe6>
 8008d46:	2200      	movs	r2, #0
 8008d48:	605a      	str	r2, [r3, #4]
 8008d4a:	e014      	b.n	8008d76 <_malloc_r+0xae>
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	dac5      	bge.n	8008cdc <_malloc_r+0x14>
 8008d50:	230c      	movs	r3, #12
 8008d52:	2500      	movs	r5, #0
 8008d54:	6033      	str	r3, [r6, #0]
 8008d56:	0028      	movs	r0, r5
 8008d58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d5a:	6821      	ldr	r1, [r4, #0]
 8008d5c:	1bc9      	subs	r1, r1, r7
 8008d5e:	d420      	bmi.n	8008da2 <_malloc_r+0xda>
 8008d60:	290b      	cmp	r1, #11
 8008d62:	d918      	bls.n	8008d96 <_malloc_r+0xce>
 8008d64:	19e2      	adds	r2, r4, r7
 8008d66:	6027      	str	r7, [r4, #0]
 8008d68:	42a3      	cmp	r3, r4
 8008d6a:	d112      	bne.n	8008d92 <_malloc_r+0xca>
 8008d6c:	9b00      	ldr	r3, [sp, #0]
 8008d6e:	601a      	str	r2, [r3, #0]
 8008d70:	6863      	ldr	r3, [r4, #4]
 8008d72:	6011      	str	r1, [r2, #0]
 8008d74:	6053      	str	r3, [r2, #4]
 8008d76:	0030      	movs	r0, r6
 8008d78:	0025      	movs	r5, r4
 8008d7a:	f000 f82f 	bl	8008ddc <__malloc_unlock>
 8008d7e:	2207      	movs	r2, #7
 8008d80:	350b      	adds	r5, #11
 8008d82:	1d23      	adds	r3, r4, #4
 8008d84:	4395      	bics	r5, r2
 8008d86:	1aea      	subs	r2, r5, r3
 8008d88:	429d      	cmp	r5, r3
 8008d8a:	d0e4      	beq.n	8008d56 <_malloc_r+0x8e>
 8008d8c:	1b5b      	subs	r3, r3, r5
 8008d8e:	50a3      	str	r3, [r4, r2]
 8008d90:	e7e1      	b.n	8008d56 <_malloc_r+0x8e>
 8008d92:	605a      	str	r2, [r3, #4]
 8008d94:	e7ec      	b.n	8008d70 <_malloc_r+0xa8>
 8008d96:	6862      	ldr	r2, [r4, #4]
 8008d98:	42a3      	cmp	r3, r4
 8008d9a:	d1d5      	bne.n	8008d48 <_malloc_r+0x80>
 8008d9c:	9b00      	ldr	r3, [sp, #0]
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	e7e9      	b.n	8008d76 <_malloc_r+0xae>
 8008da2:	0023      	movs	r3, r4
 8008da4:	6864      	ldr	r4, [r4, #4]
 8008da6:	e7a2      	b.n	8008cee <_malloc_r+0x26>
 8008da8:	002c      	movs	r4, r5
 8008daa:	686d      	ldr	r5, [r5, #4]
 8008dac:	e7ab      	b.n	8008d06 <_malloc_r+0x3e>
 8008dae:	0013      	movs	r3, r2
 8008db0:	e7c4      	b.n	8008d3c <_malloc_r+0x74>
 8008db2:	230c      	movs	r3, #12
 8008db4:	0030      	movs	r0, r6
 8008db6:	6033      	str	r3, [r6, #0]
 8008db8:	f000 f810 	bl	8008ddc <__malloc_unlock>
 8008dbc:	e7cb      	b.n	8008d56 <_malloc_r+0x8e>
 8008dbe:	6027      	str	r7, [r4, #0]
 8008dc0:	e7d9      	b.n	8008d76 <_malloc_r+0xae>
 8008dc2:	605b      	str	r3, [r3, #4]
 8008dc4:	deff      	udf	#255	; 0xff
 8008dc6:	46c0      	nop			; (mov r8, r8)
 8008dc8:	200007ec 	.word	0x200007ec

08008dcc <__malloc_lock>:
 8008dcc:	b510      	push	{r4, lr}
 8008dce:	4802      	ldr	r0, [pc, #8]	; (8008dd8 <__malloc_lock+0xc>)
 8008dd0:	f7ff f85a 	bl	8007e88 <__retarget_lock_acquire_recursive>
 8008dd4:	bd10      	pop	{r4, pc}
 8008dd6:	46c0      	nop			; (mov r8, r8)
 8008dd8:	200007e8 	.word	0x200007e8

08008ddc <__malloc_unlock>:
 8008ddc:	b510      	push	{r4, lr}
 8008dde:	4802      	ldr	r0, [pc, #8]	; (8008de8 <__malloc_unlock+0xc>)
 8008de0:	f7ff f853 	bl	8007e8a <__retarget_lock_release_recursive>
 8008de4:	bd10      	pop	{r4, pc}
 8008de6:	46c0      	nop			; (mov r8, r8)
 8008de8:	200007e8 	.word	0x200007e8

08008dec <_Balloc>:
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	69c5      	ldr	r5, [r0, #28]
 8008df0:	0006      	movs	r6, r0
 8008df2:	000c      	movs	r4, r1
 8008df4:	2d00      	cmp	r5, #0
 8008df6:	d10e      	bne.n	8008e16 <_Balloc+0x2a>
 8008df8:	2010      	movs	r0, #16
 8008dfa:	f7ff ff39 	bl	8008c70 <malloc>
 8008dfe:	1e02      	subs	r2, r0, #0
 8008e00:	61f0      	str	r0, [r6, #28]
 8008e02:	d104      	bne.n	8008e0e <_Balloc+0x22>
 8008e04:	216b      	movs	r1, #107	; 0x6b
 8008e06:	4b19      	ldr	r3, [pc, #100]	; (8008e6c <_Balloc+0x80>)
 8008e08:	4819      	ldr	r0, [pc, #100]	; (8008e70 <_Balloc+0x84>)
 8008e0a:	f000 fdcf 	bl	80099ac <__assert_func>
 8008e0e:	6045      	str	r5, [r0, #4]
 8008e10:	6085      	str	r5, [r0, #8]
 8008e12:	6005      	str	r5, [r0, #0]
 8008e14:	60c5      	str	r5, [r0, #12]
 8008e16:	69f5      	ldr	r5, [r6, #28]
 8008e18:	68eb      	ldr	r3, [r5, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d013      	beq.n	8008e46 <_Balloc+0x5a>
 8008e1e:	69f3      	ldr	r3, [r6, #28]
 8008e20:	00a2      	lsls	r2, r4, #2
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	189b      	adds	r3, r3, r2
 8008e26:	6818      	ldr	r0, [r3, #0]
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d118      	bne.n	8008e5e <_Balloc+0x72>
 8008e2c:	2101      	movs	r1, #1
 8008e2e:	000d      	movs	r5, r1
 8008e30:	40a5      	lsls	r5, r4
 8008e32:	1d6a      	adds	r2, r5, #5
 8008e34:	0030      	movs	r0, r6
 8008e36:	0092      	lsls	r2, r2, #2
 8008e38:	f000 fdd6 	bl	80099e8 <_calloc_r>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d00c      	beq.n	8008e5a <_Balloc+0x6e>
 8008e40:	6044      	str	r4, [r0, #4]
 8008e42:	6085      	str	r5, [r0, #8]
 8008e44:	e00d      	b.n	8008e62 <_Balloc+0x76>
 8008e46:	2221      	movs	r2, #33	; 0x21
 8008e48:	2104      	movs	r1, #4
 8008e4a:	0030      	movs	r0, r6
 8008e4c:	f000 fdcc 	bl	80099e8 <_calloc_r>
 8008e50:	69f3      	ldr	r3, [r6, #28]
 8008e52:	60e8      	str	r0, [r5, #12]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d1e1      	bne.n	8008e1e <_Balloc+0x32>
 8008e5a:	2000      	movs	r0, #0
 8008e5c:	bd70      	pop	{r4, r5, r6, pc}
 8008e5e:	6802      	ldr	r2, [r0, #0]
 8008e60:	601a      	str	r2, [r3, #0]
 8008e62:	2300      	movs	r3, #0
 8008e64:	6103      	str	r3, [r0, #16]
 8008e66:	60c3      	str	r3, [r0, #12]
 8008e68:	e7f8      	b.n	8008e5c <_Balloc+0x70>
 8008e6a:	46c0      	nop			; (mov r8, r8)
 8008e6c:	0800a1f1 	.word	0x0800a1f1
 8008e70:	0800a271 	.word	0x0800a271

08008e74 <_Bfree>:
 8008e74:	b570      	push	{r4, r5, r6, lr}
 8008e76:	69c6      	ldr	r6, [r0, #28]
 8008e78:	0005      	movs	r5, r0
 8008e7a:	000c      	movs	r4, r1
 8008e7c:	2e00      	cmp	r6, #0
 8008e7e:	d10e      	bne.n	8008e9e <_Bfree+0x2a>
 8008e80:	2010      	movs	r0, #16
 8008e82:	f7ff fef5 	bl	8008c70 <malloc>
 8008e86:	1e02      	subs	r2, r0, #0
 8008e88:	61e8      	str	r0, [r5, #28]
 8008e8a:	d104      	bne.n	8008e96 <_Bfree+0x22>
 8008e8c:	218f      	movs	r1, #143	; 0x8f
 8008e8e:	4b09      	ldr	r3, [pc, #36]	; (8008eb4 <_Bfree+0x40>)
 8008e90:	4809      	ldr	r0, [pc, #36]	; (8008eb8 <_Bfree+0x44>)
 8008e92:	f000 fd8b 	bl	80099ac <__assert_func>
 8008e96:	6046      	str	r6, [r0, #4]
 8008e98:	6086      	str	r6, [r0, #8]
 8008e9a:	6006      	str	r6, [r0, #0]
 8008e9c:	60c6      	str	r6, [r0, #12]
 8008e9e:	2c00      	cmp	r4, #0
 8008ea0:	d007      	beq.n	8008eb2 <_Bfree+0x3e>
 8008ea2:	69eb      	ldr	r3, [r5, #28]
 8008ea4:	6862      	ldr	r2, [r4, #4]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	0092      	lsls	r2, r2, #2
 8008eaa:	189b      	adds	r3, r3, r2
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	6022      	str	r2, [r4, #0]
 8008eb0:	601c      	str	r4, [r3, #0]
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	0800a1f1 	.word	0x0800a1f1
 8008eb8:	0800a271 	.word	0x0800a271

08008ebc <__multadd>:
 8008ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ebe:	000e      	movs	r6, r1
 8008ec0:	9001      	str	r0, [sp, #4]
 8008ec2:	000c      	movs	r4, r1
 8008ec4:	001d      	movs	r5, r3
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	690f      	ldr	r7, [r1, #16]
 8008eca:	3614      	adds	r6, #20
 8008ecc:	6833      	ldr	r3, [r6, #0]
 8008ece:	3001      	adds	r0, #1
 8008ed0:	b299      	uxth	r1, r3
 8008ed2:	4351      	muls	r1, r2
 8008ed4:	0c1b      	lsrs	r3, r3, #16
 8008ed6:	4353      	muls	r3, r2
 8008ed8:	1949      	adds	r1, r1, r5
 8008eda:	0c0d      	lsrs	r5, r1, #16
 8008edc:	195b      	adds	r3, r3, r5
 8008ede:	0c1d      	lsrs	r5, r3, #16
 8008ee0:	b289      	uxth	r1, r1
 8008ee2:	041b      	lsls	r3, r3, #16
 8008ee4:	185b      	adds	r3, r3, r1
 8008ee6:	c608      	stmia	r6!, {r3}
 8008ee8:	4287      	cmp	r7, r0
 8008eea:	dcef      	bgt.n	8008ecc <__multadd+0x10>
 8008eec:	2d00      	cmp	r5, #0
 8008eee:	d022      	beq.n	8008f36 <__multadd+0x7a>
 8008ef0:	68a3      	ldr	r3, [r4, #8]
 8008ef2:	42bb      	cmp	r3, r7
 8008ef4:	dc19      	bgt.n	8008f2a <__multadd+0x6e>
 8008ef6:	6861      	ldr	r1, [r4, #4]
 8008ef8:	9801      	ldr	r0, [sp, #4]
 8008efa:	3101      	adds	r1, #1
 8008efc:	f7ff ff76 	bl	8008dec <_Balloc>
 8008f00:	1e06      	subs	r6, r0, #0
 8008f02:	d105      	bne.n	8008f10 <__multadd+0x54>
 8008f04:	0032      	movs	r2, r6
 8008f06:	21ba      	movs	r1, #186	; 0xba
 8008f08:	4b0c      	ldr	r3, [pc, #48]	; (8008f3c <__multadd+0x80>)
 8008f0a:	480d      	ldr	r0, [pc, #52]	; (8008f40 <__multadd+0x84>)
 8008f0c:	f000 fd4e 	bl	80099ac <__assert_func>
 8008f10:	0021      	movs	r1, r4
 8008f12:	6922      	ldr	r2, [r4, #16]
 8008f14:	310c      	adds	r1, #12
 8008f16:	3202      	adds	r2, #2
 8008f18:	0092      	lsls	r2, r2, #2
 8008f1a:	300c      	adds	r0, #12
 8008f1c:	f000 fd3c 	bl	8009998 <memcpy>
 8008f20:	0021      	movs	r1, r4
 8008f22:	9801      	ldr	r0, [sp, #4]
 8008f24:	f7ff ffa6 	bl	8008e74 <_Bfree>
 8008f28:	0034      	movs	r4, r6
 8008f2a:	1d3b      	adds	r3, r7, #4
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	18e3      	adds	r3, r4, r3
 8008f30:	605d      	str	r5, [r3, #4]
 8008f32:	1c7b      	adds	r3, r7, #1
 8008f34:	6123      	str	r3, [r4, #16]
 8008f36:	0020      	movs	r0, r4
 8008f38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f3a:	46c0      	nop			; (mov r8, r8)
 8008f3c:	0800a260 	.word	0x0800a260
 8008f40:	0800a271 	.word	0x0800a271

08008f44 <__hi0bits>:
 8008f44:	0003      	movs	r3, r0
 8008f46:	0c02      	lsrs	r2, r0, #16
 8008f48:	2000      	movs	r0, #0
 8008f4a:	4282      	cmp	r2, r0
 8008f4c:	d101      	bne.n	8008f52 <__hi0bits+0xe>
 8008f4e:	041b      	lsls	r3, r3, #16
 8008f50:	3010      	adds	r0, #16
 8008f52:	0e1a      	lsrs	r2, r3, #24
 8008f54:	d101      	bne.n	8008f5a <__hi0bits+0x16>
 8008f56:	3008      	adds	r0, #8
 8008f58:	021b      	lsls	r3, r3, #8
 8008f5a:	0f1a      	lsrs	r2, r3, #28
 8008f5c:	d101      	bne.n	8008f62 <__hi0bits+0x1e>
 8008f5e:	3004      	adds	r0, #4
 8008f60:	011b      	lsls	r3, r3, #4
 8008f62:	0f9a      	lsrs	r2, r3, #30
 8008f64:	d101      	bne.n	8008f6a <__hi0bits+0x26>
 8008f66:	3002      	adds	r0, #2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	db03      	blt.n	8008f76 <__hi0bits+0x32>
 8008f6e:	3001      	adds	r0, #1
 8008f70:	005b      	lsls	r3, r3, #1
 8008f72:	d400      	bmi.n	8008f76 <__hi0bits+0x32>
 8008f74:	2020      	movs	r0, #32
 8008f76:	4770      	bx	lr

08008f78 <__lo0bits>:
 8008f78:	6803      	ldr	r3, [r0, #0]
 8008f7a:	0001      	movs	r1, r0
 8008f7c:	2207      	movs	r2, #7
 8008f7e:	0018      	movs	r0, r3
 8008f80:	4010      	ands	r0, r2
 8008f82:	4213      	tst	r3, r2
 8008f84:	d00d      	beq.n	8008fa2 <__lo0bits+0x2a>
 8008f86:	3a06      	subs	r2, #6
 8008f88:	2000      	movs	r0, #0
 8008f8a:	4213      	tst	r3, r2
 8008f8c:	d105      	bne.n	8008f9a <__lo0bits+0x22>
 8008f8e:	3002      	adds	r0, #2
 8008f90:	4203      	tst	r3, r0
 8008f92:	d003      	beq.n	8008f9c <__lo0bits+0x24>
 8008f94:	40d3      	lsrs	r3, r2
 8008f96:	0010      	movs	r0, r2
 8008f98:	600b      	str	r3, [r1, #0]
 8008f9a:	4770      	bx	lr
 8008f9c:	089b      	lsrs	r3, r3, #2
 8008f9e:	600b      	str	r3, [r1, #0]
 8008fa0:	e7fb      	b.n	8008f9a <__lo0bits+0x22>
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	2a00      	cmp	r2, #0
 8008fa6:	d101      	bne.n	8008fac <__lo0bits+0x34>
 8008fa8:	2010      	movs	r0, #16
 8008faa:	0c1b      	lsrs	r3, r3, #16
 8008fac:	b2da      	uxtb	r2, r3
 8008fae:	2a00      	cmp	r2, #0
 8008fb0:	d101      	bne.n	8008fb6 <__lo0bits+0x3e>
 8008fb2:	3008      	adds	r0, #8
 8008fb4:	0a1b      	lsrs	r3, r3, #8
 8008fb6:	071a      	lsls	r2, r3, #28
 8008fb8:	d101      	bne.n	8008fbe <__lo0bits+0x46>
 8008fba:	3004      	adds	r0, #4
 8008fbc:	091b      	lsrs	r3, r3, #4
 8008fbe:	079a      	lsls	r2, r3, #30
 8008fc0:	d101      	bne.n	8008fc6 <__lo0bits+0x4e>
 8008fc2:	3002      	adds	r0, #2
 8008fc4:	089b      	lsrs	r3, r3, #2
 8008fc6:	07da      	lsls	r2, r3, #31
 8008fc8:	d4e9      	bmi.n	8008f9e <__lo0bits+0x26>
 8008fca:	3001      	adds	r0, #1
 8008fcc:	085b      	lsrs	r3, r3, #1
 8008fce:	d1e6      	bne.n	8008f9e <__lo0bits+0x26>
 8008fd0:	2020      	movs	r0, #32
 8008fd2:	e7e2      	b.n	8008f9a <__lo0bits+0x22>

08008fd4 <__i2b>:
 8008fd4:	b510      	push	{r4, lr}
 8008fd6:	000c      	movs	r4, r1
 8008fd8:	2101      	movs	r1, #1
 8008fda:	f7ff ff07 	bl	8008dec <_Balloc>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d107      	bne.n	8008ff2 <__i2b+0x1e>
 8008fe2:	2146      	movs	r1, #70	; 0x46
 8008fe4:	4c05      	ldr	r4, [pc, #20]	; (8008ffc <__i2b+0x28>)
 8008fe6:	0002      	movs	r2, r0
 8008fe8:	4b05      	ldr	r3, [pc, #20]	; (8009000 <__i2b+0x2c>)
 8008fea:	0020      	movs	r0, r4
 8008fec:	31ff      	adds	r1, #255	; 0xff
 8008fee:	f000 fcdd 	bl	80099ac <__assert_func>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	6144      	str	r4, [r0, #20]
 8008ff6:	6103      	str	r3, [r0, #16]
 8008ff8:	bd10      	pop	{r4, pc}
 8008ffa:	46c0      	nop			; (mov r8, r8)
 8008ffc:	0800a271 	.word	0x0800a271
 8009000:	0800a260 	.word	0x0800a260

08009004 <__multiply>:
 8009004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009006:	0015      	movs	r5, r2
 8009008:	690a      	ldr	r2, [r1, #16]
 800900a:	692b      	ldr	r3, [r5, #16]
 800900c:	000c      	movs	r4, r1
 800900e:	b08b      	sub	sp, #44	; 0x2c
 8009010:	429a      	cmp	r2, r3
 8009012:	da01      	bge.n	8009018 <__multiply+0x14>
 8009014:	002c      	movs	r4, r5
 8009016:	000d      	movs	r5, r1
 8009018:	6927      	ldr	r7, [r4, #16]
 800901a:	692e      	ldr	r6, [r5, #16]
 800901c:	6861      	ldr	r1, [r4, #4]
 800901e:	19bb      	adds	r3, r7, r6
 8009020:	9303      	str	r3, [sp, #12]
 8009022:	68a3      	ldr	r3, [r4, #8]
 8009024:	19ba      	adds	r2, r7, r6
 8009026:	4293      	cmp	r3, r2
 8009028:	da00      	bge.n	800902c <__multiply+0x28>
 800902a:	3101      	adds	r1, #1
 800902c:	f7ff fede 	bl	8008dec <_Balloc>
 8009030:	9002      	str	r0, [sp, #8]
 8009032:	2800      	cmp	r0, #0
 8009034:	d106      	bne.n	8009044 <__multiply+0x40>
 8009036:	21b1      	movs	r1, #177	; 0xb1
 8009038:	4b48      	ldr	r3, [pc, #288]	; (800915c <__multiply+0x158>)
 800903a:	4849      	ldr	r0, [pc, #292]	; (8009160 <__multiply+0x15c>)
 800903c:	9a02      	ldr	r2, [sp, #8]
 800903e:	0049      	lsls	r1, r1, #1
 8009040:	f000 fcb4 	bl	80099ac <__assert_func>
 8009044:	9b02      	ldr	r3, [sp, #8]
 8009046:	2200      	movs	r2, #0
 8009048:	3314      	adds	r3, #20
 800904a:	469c      	mov	ip, r3
 800904c:	19bb      	adds	r3, r7, r6
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4463      	add	r3, ip
 8009052:	9304      	str	r3, [sp, #16]
 8009054:	4663      	mov	r3, ip
 8009056:	9904      	ldr	r1, [sp, #16]
 8009058:	428b      	cmp	r3, r1
 800905a:	d32a      	bcc.n	80090b2 <__multiply+0xae>
 800905c:	0023      	movs	r3, r4
 800905e:	00bf      	lsls	r7, r7, #2
 8009060:	3314      	adds	r3, #20
 8009062:	3514      	adds	r5, #20
 8009064:	9308      	str	r3, [sp, #32]
 8009066:	00b6      	lsls	r6, r6, #2
 8009068:	19db      	adds	r3, r3, r7
 800906a:	9305      	str	r3, [sp, #20]
 800906c:	19ab      	adds	r3, r5, r6
 800906e:	9309      	str	r3, [sp, #36]	; 0x24
 8009070:	2304      	movs	r3, #4
 8009072:	9306      	str	r3, [sp, #24]
 8009074:	0023      	movs	r3, r4
 8009076:	9a05      	ldr	r2, [sp, #20]
 8009078:	3315      	adds	r3, #21
 800907a:	9501      	str	r5, [sp, #4]
 800907c:	429a      	cmp	r2, r3
 800907e:	d305      	bcc.n	800908c <__multiply+0x88>
 8009080:	1b13      	subs	r3, r2, r4
 8009082:	3b15      	subs	r3, #21
 8009084:	089b      	lsrs	r3, r3, #2
 8009086:	3301      	adds	r3, #1
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	9306      	str	r3, [sp, #24]
 800908c:	9b01      	ldr	r3, [sp, #4]
 800908e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009090:	4293      	cmp	r3, r2
 8009092:	d310      	bcc.n	80090b6 <__multiply+0xb2>
 8009094:	9b03      	ldr	r3, [sp, #12]
 8009096:	2b00      	cmp	r3, #0
 8009098:	dd05      	ble.n	80090a6 <__multiply+0xa2>
 800909a:	9b04      	ldr	r3, [sp, #16]
 800909c:	3b04      	subs	r3, #4
 800909e:	9304      	str	r3, [sp, #16]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d056      	beq.n	8009154 <__multiply+0x150>
 80090a6:	9b02      	ldr	r3, [sp, #8]
 80090a8:	9a03      	ldr	r2, [sp, #12]
 80090aa:	0018      	movs	r0, r3
 80090ac:	611a      	str	r2, [r3, #16]
 80090ae:	b00b      	add	sp, #44	; 0x2c
 80090b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090b2:	c304      	stmia	r3!, {r2}
 80090b4:	e7cf      	b.n	8009056 <__multiply+0x52>
 80090b6:	9b01      	ldr	r3, [sp, #4]
 80090b8:	6818      	ldr	r0, [r3, #0]
 80090ba:	b280      	uxth	r0, r0
 80090bc:	2800      	cmp	r0, #0
 80090be:	d01e      	beq.n	80090fe <__multiply+0xfa>
 80090c0:	4667      	mov	r7, ip
 80090c2:	2500      	movs	r5, #0
 80090c4:	9e08      	ldr	r6, [sp, #32]
 80090c6:	ce02      	ldmia	r6!, {r1}
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	9307      	str	r3, [sp, #28]
 80090cc:	b28b      	uxth	r3, r1
 80090ce:	4343      	muls	r3, r0
 80090d0:	001a      	movs	r2, r3
 80090d2:	466b      	mov	r3, sp
 80090d4:	8b9b      	ldrh	r3, [r3, #28]
 80090d6:	18d3      	adds	r3, r2, r3
 80090d8:	195b      	adds	r3, r3, r5
 80090da:	0c0d      	lsrs	r5, r1, #16
 80090dc:	4345      	muls	r5, r0
 80090de:	9a07      	ldr	r2, [sp, #28]
 80090e0:	0c11      	lsrs	r1, r2, #16
 80090e2:	1869      	adds	r1, r5, r1
 80090e4:	0c1a      	lsrs	r2, r3, #16
 80090e6:	188a      	adds	r2, r1, r2
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	0c15      	lsrs	r5, r2, #16
 80090ec:	0412      	lsls	r2, r2, #16
 80090ee:	431a      	orrs	r2, r3
 80090f0:	9b05      	ldr	r3, [sp, #20]
 80090f2:	c704      	stmia	r7!, {r2}
 80090f4:	42b3      	cmp	r3, r6
 80090f6:	d8e6      	bhi.n	80090c6 <__multiply+0xc2>
 80090f8:	4663      	mov	r3, ip
 80090fa:	9a06      	ldr	r2, [sp, #24]
 80090fc:	509d      	str	r5, [r3, r2]
 80090fe:	9b01      	ldr	r3, [sp, #4]
 8009100:	6818      	ldr	r0, [r3, #0]
 8009102:	0c00      	lsrs	r0, r0, #16
 8009104:	d020      	beq.n	8009148 <__multiply+0x144>
 8009106:	4663      	mov	r3, ip
 8009108:	0025      	movs	r5, r4
 800910a:	4661      	mov	r1, ip
 800910c:	2700      	movs	r7, #0
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3514      	adds	r5, #20
 8009112:	682a      	ldr	r2, [r5, #0]
 8009114:	680e      	ldr	r6, [r1, #0]
 8009116:	b292      	uxth	r2, r2
 8009118:	4342      	muls	r2, r0
 800911a:	0c36      	lsrs	r6, r6, #16
 800911c:	1992      	adds	r2, r2, r6
 800911e:	19d2      	adds	r2, r2, r7
 8009120:	0416      	lsls	r6, r2, #16
 8009122:	b29b      	uxth	r3, r3
 8009124:	431e      	orrs	r6, r3
 8009126:	600e      	str	r6, [r1, #0]
 8009128:	cd40      	ldmia	r5!, {r6}
 800912a:	684b      	ldr	r3, [r1, #4]
 800912c:	0c36      	lsrs	r6, r6, #16
 800912e:	4346      	muls	r6, r0
 8009130:	b29b      	uxth	r3, r3
 8009132:	0c12      	lsrs	r2, r2, #16
 8009134:	18f3      	adds	r3, r6, r3
 8009136:	189b      	adds	r3, r3, r2
 8009138:	9a05      	ldr	r2, [sp, #20]
 800913a:	0c1f      	lsrs	r7, r3, #16
 800913c:	3104      	adds	r1, #4
 800913e:	42aa      	cmp	r2, r5
 8009140:	d8e7      	bhi.n	8009112 <__multiply+0x10e>
 8009142:	4662      	mov	r2, ip
 8009144:	9906      	ldr	r1, [sp, #24]
 8009146:	5053      	str	r3, [r2, r1]
 8009148:	9b01      	ldr	r3, [sp, #4]
 800914a:	3304      	adds	r3, #4
 800914c:	9301      	str	r3, [sp, #4]
 800914e:	2304      	movs	r3, #4
 8009150:	449c      	add	ip, r3
 8009152:	e79b      	b.n	800908c <__multiply+0x88>
 8009154:	9b03      	ldr	r3, [sp, #12]
 8009156:	3b01      	subs	r3, #1
 8009158:	9303      	str	r3, [sp, #12]
 800915a:	e79b      	b.n	8009094 <__multiply+0x90>
 800915c:	0800a260 	.word	0x0800a260
 8009160:	0800a271 	.word	0x0800a271

08009164 <__pow5mult>:
 8009164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009166:	2303      	movs	r3, #3
 8009168:	0015      	movs	r5, r2
 800916a:	0007      	movs	r7, r0
 800916c:	000e      	movs	r6, r1
 800916e:	401a      	ands	r2, r3
 8009170:	421d      	tst	r5, r3
 8009172:	d008      	beq.n	8009186 <__pow5mult+0x22>
 8009174:	4925      	ldr	r1, [pc, #148]	; (800920c <__pow5mult+0xa8>)
 8009176:	3a01      	subs	r2, #1
 8009178:	0092      	lsls	r2, r2, #2
 800917a:	5852      	ldr	r2, [r2, r1]
 800917c:	2300      	movs	r3, #0
 800917e:	0031      	movs	r1, r6
 8009180:	f7ff fe9c 	bl	8008ebc <__multadd>
 8009184:	0006      	movs	r6, r0
 8009186:	10ad      	asrs	r5, r5, #2
 8009188:	d03d      	beq.n	8009206 <__pow5mult+0xa2>
 800918a:	69fc      	ldr	r4, [r7, #28]
 800918c:	2c00      	cmp	r4, #0
 800918e:	d10f      	bne.n	80091b0 <__pow5mult+0x4c>
 8009190:	2010      	movs	r0, #16
 8009192:	f7ff fd6d 	bl	8008c70 <malloc>
 8009196:	1e02      	subs	r2, r0, #0
 8009198:	61f8      	str	r0, [r7, #28]
 800919a:	d105      	bne.n	80091a8 <__pow5mult+0x44>
 800919c:	21b4      	movs	r1, #180	; 0xb4
 800919e:	4b1c      	ldr	r3, [pc, #112]	; (8009210 <__pow5mult+0xac>)
 80091a0:	481c      	ldr	r0, [pc, #112]	; (8009214 <__pow5mult+0xb0>)
 80091a2:	31ff      	adds	r1, #255	; 0xff
 80091a4:	f000 fc02 	bl	80099ac <__assert_func>
 80091a8:	6044      	str	r4, [r0, #4]
 80091aa:	6084      	str	r4, [r0, #8]
 80091ac:	6004      	str	r4, [r0, #0]
 80091ae:	60c4      	str	r4, [r0, #12]
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	689c      	ldr	r4, [r3, #8]
 80091b4:	9301      	str	r3, [sp, #4]
 80091b6:	2c00      	cmp	r4, #0
 80091b8:	d108      	bne.n	80091cc <__pow5mult+0x68>
 80091ba:	0038      	movs	r0, r7
 80091bc:	4916      	ldr	r1, [pc, #88]	; (8009218 <__pow5mult+0xb4>)
 80091be:	f7ff ff09 	bl	8008fd4 <__i2b>
 80091c2:	9b01      	ldr	r3, [sp, #4]
 80091c4:	0004      	movs	r4, r0
 80091c6:	6098      	str	r0, [r3, #8]
 80091c8:	2300      	movs	r3, #0
 80091ca:	6003      	str	r3, [r0, #0]
 80091cc:	2301      	movs	r3, #1
 80091ce:	421d      	tst	r5, r3
 80091d0:	d00a      	beq.n	80091e8 <__pow5mult+0x84>
 80091d2:	0031      	movs	r1, r6
 80091d4:	0022      	movs	r2, r4
 80091d6:	0038      	movs	r0, r7
 80091d8:	f7ff ff14 	bl	8009004 <__multiply>
 80091dc:	0031      	movs	r1, r6
 80091de:	9001      	str	r0, [sp, #4]
 80091e0:	0038      	movs	r0, r7
 80091e2:	f7ff fe47 	bl	8008e74 <_Bfree>
 80091e6:	9e01      	ldr	r6, [sp, #4]
 80091e8:	106d      	asrs	r5, r5, #1
 80091ea:	d00c      	beq.n	8009206 <__pow5mult+0xa2>
 80091ec:	6820      	ldr	r0, [r4, #0]
 80091ee:	2800      	cmp	r0, #0
 80091f0:	d107      	bne.n	8009202 <__pow5mult+0x9e>
 80091f2:	0022      	movs	r2, r4
 80091f4:	0021      	movs	r1, r4
 80091f6:	0038      	movs	r0, r7
 80091f8:	f7ff ff04 	bl	8009004 <__multiply>
 80091fc:	2300      	movs	r3, #0
 80091fe:	6020      	str	r0, [r4, #0]
 8009200:	6003      	str	r3, [r0, #0]
 8009202:	0004      	movs	r4, r0
 8009204:	e7e2      	b.n	80091cc <__pow5mult+0x68>
 8009206:	0030      	movs	r0, r6
 8009208:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800920a:	46c0      	nop			; (mov r8, r8)
 800920c:	0800a3c0 	.word	0x0800a3c0
 8009210:	0800a1f1 	.word	0x0800a1f1
 8009214:	0800a271 	.word	0x0800a271
 8009218:	00000271 	.word	0x00000271

0800921c <__lshift>:
 800921c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800921e:	000c      	movs	r4, r1
 8009220:	0017      	movs	r7, r2
 8009222:	6923      	ldr	r3, [r4, #16]
 8009224:	1155      	asrs	r5, r2, #5
 8009226:	b087      	sub	sp, #28
 8009228:	18eb      	adds	r3, r5, r3
 800922a:	9302      	str	r3, [sp, #8]
 800922c:	3301      	adds	r3, #1
 800922e:	9301      	str	r3, [sp, #4]
 8009230:	6849      	ldr	r1, [r1, #4]
 8009232:	68a3      	ldr	r3, [r4, #8]
 8009234:	9004      	str	r0, [sp, #16]
 8009236:	9a01      	ldr	r2, [sp, #4]
 8009238:	4293      	cmp	r3, r2
 800923a:	db10      	blt.n	800925e <__lshift+0x42>
 800923c:	9804      	ldr	r0, [sp, #16]
 800923e:	f7ff fdd5 	bl	8008dec <_Balloc>
 8009242:	2300      	movs	r3, #0
 8009244:	0002      	movs	r2, r0
 8009246:	0006      	movs	r6, r0
 8009248:	0019      	movs	r1, r3
 800924a:	3214      	adds	r2, #20
 800924c:	4298      	cmp	r0, r3
 800924e:	d10c      	bne.n	800926a <__lshift+0x4e>
 8009250:	31df      	adds	r1, #223	; 0xdf
 8009252:	0032      	movs	r2, r6
 8009254:	4b26      	ldr	r3, [pc, #152]	; (80092f0 <__lshift+0xd4>)
 8009256:	4827      	ldr	r0, [pc, #156]	; (80092f4 <__lshift+0xd8>)
 8009258:	31ff      	adds	r1, #255	; 0xff
 800925a:	f000 fba7 	bl	80099ac <__assert_func>
 800925e:	3101      	adds	r1, #1
 8009260:	005b      	lsls	r3, r3, #1
 8009262:	e7e8      	b.n	8009236 <__lshift+0x1a>
 8009264:	0098      	lsls	r0, r3, #2
 8009266:	5011      	str	r1, [r2, r0]
 8009268:	3301      	adds	r3, #1
 800926a:	42ab      	cmp	r3, r5
 800926c:	dbfa      	blt.n	8009264 <__lshift+0x48>
 800926e:	43eb      	mvns	r3, r5
 8009270:	17db      	asrs	r3, r3, #31
 8009272:	401d      	ands	r5, r3
 8009274:	211f      	movs	r1, #31
 8009276:	0023      	movs	r3, r4
 8009278:	0038      	movs	r0, r7
 800927a:	00ad      	lsls	r5, r5, #2
 800927c:	1955      	adds	r5, r2, r5
 800927e:	6922      	ldr	r2, [r4, #16]
 8009280:	3314      	adds	r3, #20
 8009282:	0092      	lsls	r2, r2, #2
 8009284:	4008      	ands	r0, r1
 8009286:	4684      	mov	ip, r0
 8009288:	189a      	adds	r2, r3, r2
 800928a:	420f      	tst	r7, r1
 800928c:	d02a      	beq.n	80092e4 <__lshift+0xc8>
 800928e:	3101      	adds	r1, #1
 8009290:	1a09      	subs	r1, r1, r0
 8009292:	9105      	str	r1, [sp, #20]
 8009294:	2100      	movs	r1, #0
 8009296:	9503      	str	r5, [sp, #12]
 8009298:	4667      	mov	r7, ip
 800929a:	6818      	ldr	r0, [r3, #0]
 800929c:	40b8      	lsls	r0, r7
 800929e:	4308      	orrs	r0, r1
 80092a0:	9903      	ldr	r1, [sp, #12]
 80092a2:	c101      	stmia	r1!, {r0}
 80092a4:	9103      	str	r1, [sp, #12]
 80092a6:	9805      	ldr	r0, [sp, #20]
 80092a8:	cb02      	ldmia	r3!, {r1}
 80092aa:	40c1      	lsrs	r1, r0
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d8f3      	bhi.n	8009298 <__lshift+0x7c>
 80092b0:	0020      	movs	r0, r4
 80092b2:	3015      	adds	r0, #21
 80092b4:	2304      	movs	r3, #4
 80092b6:	4282      	cmp	r2, r0
 80092b8:	d304      	bcc.n	80092c4 <__lshift+0xa8>
 80092ba:	1b13      	subs	r3, r2, r4
 80092bc:	3b15      	subs	r3, #21
 80092be:	089b      	lsrs	r3, r3, #2
 80092c0:	3301      	adds	r3, #1
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	50e9      	str	r1, [r5, r3]
 80092c6:	2900      	cmp	r1, #0
 80092c8:	d002      	beq.n	80092d0 <__lshift+0xb4>
 80092ca:	9b02      	ldr	r3, [sp, #8]
 80092cc:	3302      	adds	r3, #2
 80092ce:	9301      	str	r3, [sp, #4]
 80092d0:	9b01      	ldr	r3, [sp, #4]
 80092d2:	9804      	ldr	r0, [sp, #16]
 80092d4:	3b01      	subs	r3, #1
 80092d6:	0021      	movs	r1, r4
 80092d8:	6133      	str	r3, [r6, #16]
 80092da:	f7ff fdcb 	bl	8008e74 <_Bfree>
 80092de:	0030      	movs	r0, r6
 80092e0:	b007      	add	sp, #28
 80092e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092e4:	cb02      	ldmia	r3!, {r1}
 80092e6:	c502      	stmia	r5!, {r1}
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d8fb      	bhi.n	80092e4 <__lshift+0xc8>
 80092ec:	e7f0      	b.n	80092d0 <__lshift+0xb4>
 80092ee:	46c0      	nop			; (mov r8, r8)
 80092f0:	0800a260 	.word	0x0800a260
 80092f4:	0800a271 	.word	0x0800a271

080092f8 <__mcmp>:
 80092f8:	b530      	push	{r4, r5, lr}
 80092fa:	690b      	ldr	r3, [r1, #16]
 80092fc:	6904      	ldr	r4, [r0, #16]
 80092fe:	0002      	movs	r2, r0
 8009300:	1ae0      	subs	r0, r4, r3
 8009302:	429c      	cmp	r4, r3
 8009304:	d10e      	bne.n	8009324 <__mcmp+0x2c>
 8009306:	3214      	adds	r2, #20
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	3114      	adds	r1, #20
 800930c:	0014      	movs	r4, r2
 800930e:	18c9      	adds	r1, r1, r3
 8009310:	18d2      	adds	r2, r2, r3
 8009312:	3a04      	subs	r2, #4
 8009314:	3904      	subs	r1, #4
 8009316:	6815      	ldr	r5, [r2, #0]
 8009318:	680b      	ldr	r3, [r1, #0]
 800931a:	429d      	cmp	r5, r3
 800931c:	d003      	beq.n	8009326 <__mcmp+0x2e>
 800931e:	2001      	movs	r0, #1
 8009320:	429d      	cmp	r5, r3
 8009322:	d303      	bcc.n	800932c <__mcmp+0x34>
 8009324:	bd30      	pop	{r4, r5, pc}
 8009326:	4294      	cmp	r4, r2
 8009328:	d3f3      	bcc.n	8009312 <__mcmp+0x1a>
 800932a:	e7fb      	b.n	8009324 <__mcmp+0x2c>
 800932c:	4240      	negs	r0, r0
 800932e:	e7f9      	b.n	8009324 <__mcmp+0x2c>

08009330 <__mdiff>:
 8009330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009332:	000e      	movs	r6, r1
 8009334:	0007      	movs	r7, r0
 8009336:	0011      	movs	r1, r2
 8009338:	0030      	movs	r0, r6
 800933a:	b087      	sub	sp, #28
 800933c:	0014      	movs	r4, r2
 800933e:	f7ff ffdb 	bl	80092f8 <__mcmp>
 8009342:	1e05      	subs	r5, r0, #0
 8009344:	d110      	bne.n	8009368 <__mdiff+0x38>
 8009346:	0001      	movs	r1, r0
 8009348:	0038      	movs	r0, r7
 800934a:	f7ff fd4f 	bl	8008dec <_Balloc>
 800934e:	1e02      	subs	r2, r0, #0
 8009350:	d104      	bne.n	800935c <__mdiff+0x2c>
 8009352:	4b3f      	ldr	r3, [pc, #252]	; (8009450 <__mdiff+0x120>)
 8009354:	483f      	ldr	r0, [pc, #252]	; (8009454 <__mdiff+0x124>)
 8009356:	4940      	ldr	r1, [pc, #256]	; (8009458 <__mdiff+0x128>)
 8009358:	f000 fb28 	bl	80099ac <__assert_func>
 800935c:	2301      	movs	r3, #1
 800935e:	6145      	str	r5, [r0, #20]
 8009360:	6103      	str	r3, [r0, #16]
 8009362:	0010      	movs	r0, r2
 8009364:	b007      	add	sp, #28
 8009366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009368:	2301      	movs	r3, #1
 800936a:	9301      	str	r3, [sp, #4]
 800936c:	2800      	cmp	r0, #0
 800936e:	db04      	blt.n	800937a <__mdiff+0x4a>
 8009370:	0023      	movs	r3, r4
 8009372:	0034      	movs	r4, r6
 8009374:	001e      	movs	r6, r3
 8009376:	2300      	movs	r3, #0
 8009378:	9301      	str	r3, [sp, #4]
 800937a:	0038      	movs	r0, r7
 800937c:	6861      	ldr	r1, [r4, #4]
 800937e:	f7ff fd35 	bl	8008dec <_Balloc>
 8009382:	1e02      	subs	r2, r0, #0
 8009384:	d103      	bne.n	800938e <__mdiff+0x5e>
 8009386:	4b32      	ldr	r3, [pc, #200]	; (8009450 <__mdiff+0x120>)
 8009388:	4832      	ldr	r0, [pc, #200]	; (8009454 <__mdiff+0x124>)
 800938a:	4934      	ldr	r1, [pc, #208]	; (800945c <__mdiff+0x12c>)
 800938c:	e7e4      	b.n	8009358 <__mdiff+0x28>
 800938e:	9b01      	ldr	r3, [sp, #4]
 8009390:	2700      	movs	r7, #0
 8009392:	60c3      	str	r3, [r0, #12]
 8009394:	6920      	ldr	r0, [r4, #16]
 8009396:	3414      	adds	r4, #20
 8009398:	0083      	lsls	r3, r0, #2
 800939a:	18e3      	adds	r3, r4, r3
 800939c:	0021      	movs	r1, r4
 800939e:	9401      	str	r4, [sp, #4]
 80093a0:	0034      	movs	r4, r6
 80093a2:	9302      	str	r3, [sp, #8]
 80093a4:	6933      	ldr	r3, [r6, #16]
 80093a6:	3414      	adds	r4, #20
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	18e3      	adds	r3, r4, r3
 80093ac:	9303      	str	r3, [sp, #12]
 80093ae:	0013      	movs	r3, r2
 80093b0:	3314      	adds	r3, #20
 80093b2:	469c      	mov	ip, r3
 80093b4:	9305      	str	r3, [sp, #20]
 80093b6:	9104      	str	r1, [sp, #16]
 80093b8:	9b04      	ldr	r3, [sp, #16]
 80093ba:	cc02      	ldmia	r4!, {r1}
 80093bc:	cb20      	ldmia	r3!, {r5}
 80093be:	9304      	str	r3, [sp, #16]
 80093c0:	b2ab      	uxth	r3, r5
 80093c2:	19df      	adds	r7, r3, r7
 80093c4:	b28b      	uxth	r3, r1
 80093c6:	1afb      	subs	r3, r7, r3
 80093c8:	0c09      	lsrs	r1, r1, #16
 80093ca:	0c2d      	lsrs	r5, r5, #16
 80093cc:	1a6d      	subs	r5, r5, r1
 80093ce:	1419      	asrs	r1, r3, #16
 80093d0:	1869      	adds	r1, r5, r1
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	140f      	asrs	r7, r1, #16
 80093d6:	0409      	lsls	r1, r1, #16
 80093d8:	4319      	orrs	r1, r3
 80093da:	4663      	mov	r3, ip
 80093dc:	c302      	stmia	r3!, {r1}
 80093de:	469c      	mov	ip, r3
 80093e0:	9b03      	ldr	r3, [sp, #12]
 80093e2:	42a3      	cmp	r3, r4
 80093e4:	d8e8      	bhi.n	80093b8 <__mdiff+0x88>
 80093e6:	0031      	movs	r1, r6
 80093e8:	9c03      	ldr	r4, [sp, #12]
 80093ea:	3115      	adds	r1, #21
 80093ec:	2304      	movs	r3, #4
 80093ee:	428c      	cmp	r4, r1
 80093f0:	d304      	bcc.n	80093fc <__mdiff+0xcc>
 80093f2:	1ba3      	subs	r3, r4, r6
 80093f4:	3b15      	subs	r3, #21
 80093f6:	089b      	lsrs	r3, r3, #2
 80093f8:	3301      	adds	r3, #1
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	9901      	ldr	r1, [sp, #4]
 80093fe:	18cd      	adds	r5, r1, r3
 8009400:	9905      	ldr	r1, [sp, #20]
 8009402:	002e      	movs	r6, r5
 8009404:	18cb      	adds	r3, r1, r3
 8009406:	469c      	mov	ip, r3
 8009408:	9902      	ldr	r1, [sp, #8]
 800940a:	428e      	cmp	r6, r1
 800940c:	d310      	bcc.n	8009430 <__mdiff+0x100>
 800940e:	9e02      	ldr	r6, [sp, #8]
 8009410:	1ee9      	subs	r1, r5, #3
 8009412:	2400      	movs	r4, #0
 8009414:	428e      	cmp	r6, r1
 8009416:	d304      	bcc.n	8009422 <__mdiff+0xf2>
 8009418:	0031      	movs	r1, r6
 800941a:	3103      	adds	r1, #3
 800941c:	1b49      	subs	r1, r1, r5
 800941e:	0889      	lsrs	r1, r1, #2
 8009420:	008c      	lsls	r4, r1, #2
 8009422:	191b      	adds	r3, r3, r4
 8009424:	3b04      	subs	r3, #4
 8009426:	6819      	ldr	r1, [r3, #0]
 8009428:	2900      	cmp	r1, #0
 800942a:	d00f      	beq.n	800944c <__mdiff+0x11c>
 800942c:	6110      	str	r0, [r2, #16]
 800942e:	e798      	b.n	8009362 <__mdiff+0x32>
 8009430:	ce02      	ldmia	r6!, {r1}
 8009432:	b28c      	uxth	r4, r1
 8009434:	19e4      	adds	r4, r4, r7
 8009436:	0c0f      	lsrs	r7, r1, #16
 8009438:	1421      	asrs	r1, r4, #16
 800943a:	1879      	adds	r1, r7, r1
 800943c:	b2a4      	uxth	r4, r4
 800943e:	140f      	asrs	r7, r1, #16
 8009440:	0409      	lsls	r1, r1, #16
 8009442:	4321      	orrs	r1, r4
 8009444:	4664      	mov	r4, ip
 8009446:	c402      	stmia	r4!, {r1}
 8009448:	46a4      	mov	ip, r4
 800944a:	e7dd      	b.n	8009408 <__mdiff+0xd8>
 800944c:	3801      	subs	r0, #1
 800944e:	e7e9      	b.n	8009424 <__mdiff+0xf4>
 8009450:	0800a260 	.word	0x0800a260
 8009454:	0800a271 	.word	0x0800a271
 8009458:	00000237 	.word	0x00000237
 800945c:	00000245 	.word	0x00000245

08009460 <__d2b>:
 8009460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009462:	2101      	movs	r1, #1
 8009464:	0014      	movs	r4, r2
 8009466:	001d      	movs	r5, r3
 8009468:	9f08      	ldr	r7, [sp, #32]
 800946a:	f7ff fcbf 	bl	8008dec <_Balloc>
 800946e:	1e06      	subs	r6, r0, #0
 8009470:	d105      	bne.n	800947e <__d2b+0x1e>
 8009472:	0032      	movs	r2, r6
 8009474:	4b24      	ldr	r3, [pc, #144]	; (8009508 <__d2b+0xa8>)
 8009476:	4825      	ldr	r0, [pc, #148]	; (800950c <__d2b+0xac>)
 8009478:	4925      	ldr	r1, [pc, #148]	; (8009510 <__d2b+0xb0>)
 800947a:	f000 fa97 	bl	80099ac <__assert_func>
 800947e:	032b      	lsls	r3, r5, #12
 8009480:	006d      	lsls	r5, r5, #1
 8009482:	0b1b      	lsrs	r3, r3, #12
 8009484:	0d6d      	lsrs	r5, r5, #21
 8009486:	d125      	bne.n	80094d4 <__d2b+0x74>
 8009488:	9301      	str	r3, [sp, #4]
 800948a:	2c00      	cmp	r4, #0
 800948c:	d028      	beq.n	80094e0 <__d2b+0x80>
 800948e:	4668      	mov	r0, sp
 8009490:	9400      	str	r4, [sp, #0]
 8009492:	f7ff fd71 	bl	8008f78 <__lo0bits>
 8009496:	9b01      	ldr	r3, [sp, #4]
 8009498:	9900      	ldr	r1, [sp, #0]
 800949a:	2800      	cmp	r0, #0
 800949c:	d01e      	beq.n	80094dc <__d2b+0x7c>
 800949e:	2220      	movs	r2, #32
 80094a0:	001c      	movs	r4, r3
 80094a2:	1a12      	subs	r2, r2, r0
 80094a4:	4094      	lsls	r4, r2
 80094a6:	0022      	movs	r2, r4
 80094a8:	40c3      	lsrs	r3, r0
 80094aa:	430a      	orrs	r2, r1
 80094ac:	6172      	str	r2, [r6, #20]
 80094ae:	9301      	str	r3, [sp, #4]
 80094b0:	9c01      	ldr	r4, [sp, #4]
 80094b2:	61b4      	str	r4, [r6, #24]
 80094b4:	1e63      	subs	r3, r4, #1
 80094b6:	419c      	sbcs	r4, r3
 80094b8:	3401      	adds	r4, #1
 80094ba:	6134      	str	r4, [r6, #16]
 80094bc:	2d00      	cmp	r5, #0
 80094be:	d017      	beq.n	80094f0 <__d2b+0x90>
 80094c0:	2435      	movs	r4, #53	; 0x35
 80094c2:	4b14      	ldr	r3, [pc, #80]	; (8009514 <__d2b+0xb4>)
 80094c4:	18ed      	adds	r5, r5, r3
 80094c6:	182d      	adds	r5, r5, r0
 80094c8:	603d      	str	r5, [r7, #0]
 80094ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094cc:	1a24      	subs	r4, r4, r0
 80094ce:	601c      	str	r4, [r3, #0]
 80094d0:	0030      	movs	r0, r6
 80094d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80094d4:	2280      	movs	r2, #128	; 0x80
 80094d6:	0352      	lsls	r2, r2, #13
 80094d8:	4313      	orrs	r3, r2
 80094da:	e7d5      	b.n	8009488 <__d2b+0x28>
 80094dc:	6171      	str	r1, [r6, #20]
 80094de:	e7e7      	b.n	80094b0 <__d2b+0x50>
 80094e0:	a801      	add	r0, sp, #4
 80094e2:	f7ff fd49 	bl	8008f78 <__lo0bits>
 80094e6:	9b01      	ldr	r3, [sp, #4]
 80094e8:	2401      	movs	r4, #1
 80094ea:	6173      	str	r3, [r6, #20]
 80094ec:	3020      	adds	r0, #32
 80094ee:	e7e4      	b.n	80094ba <__d2b+0x5a>
 80094f0:	4b09      	ldr	r3, [pc, #36]	; (8009518 <__d2b+0xb8>)
 80094f2:	18c0      	adds	r0, r0, r3
 80094f4:	4b09      	ldr	r3, [pc, #36]	; (800951c <__d2b+0xbc>)
 80094f6:	6038      	str	r0, [r7, #0]
 80094f8:	18e3      	adds	r3, r4, r3
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	18f3      	adds	r3, r6, r3
 80094fe:	6958      	ldr	r0, [r3, #20]
 8009500:	f7ff fd20 	bl	8008f44 <__hi0bits>
 8009504:	0164      	lsls	r4, r4, #5
 8009506:	e7e0      	b.n	80094ca <__d2b+0x6a>
 8009508:	0800a260 	.word	0x0800a260
 800950c:	0800a271 	.word	0x0800a271
 8009510:	0000030f 	.word	0x0000030f
 8009514:	fffffbcd 	.word	0xfffffbcd
 8009518:	fffffbce 	.word	0xfffffbce
 800951c:	3fffffff 	.word	0x3fffffff

08009520 <__ssputs_r>:
 8009520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009522:	b085      	sub	sp, #20
 8009524:	9301      	str	r3, [sp, #4]
 8009526:	9203      	str	r2, [sp, #12]
 8009528:	688e      	ldr	r6, [r1, #8]
 800952a:	9a01      	ldr	r2, [sp, #4]
 800952c:	0007      	movs	r7, r0
 800952e:	000c      	movs	r4, r1
 8009530:	680b      	ldr	r3, [r1, #0]
 8009532:	4296      	cmp	r6, r2
 8009534:	d831      	bhi.n	800959a <__ssputs_r+0x7a>
 8009536:	898a      	ldrh	r2, [r1, #12]
 8009538:	2190      	movs	r1, #144	; 0x90
 800953a:	00c9      	lsls	r1, r1, #3
 800953c:	420a      	tst	r2, r1
 800953e:	d029      	beq.n	8009594 <__ssputs_r+0x74>
 8009540:	2003      	movs	r0, #3
 8009542:	6921      	ldr	r1, [r4, #16]
 8009544:	1a5b      	subs	r3, r3, r1
 8009546:	9302      	str	r3, [sp, #8]
 8009548:	6963      	ldr	r3, [r4, #20]
 800954a:	4343      	muls	r3, r0
 800954c:	0fdd      	lsrs	r5, r3, #31
 800954e:	18ed      	adds	r5, r5, r3
 8009550:	9b01      	ldr	r3, [sp, #4]
 8009552:	9802      	ldr	r0, [sp, #8]
 8009554:	3301      	adds	r3, #1
 8009556:	181b      	adds	r3, r3, r0
 8009558:	106d      	asrs	r5, r5, #1
 800955a:	42ab      	cmp	r3, r5
 800955c:	d900      	bls.n	8009560 <__ssputs_r+0x40>
 800955e:	001d      	movs	r5, r3
 8009560:	0552      	lsls	r2, r2, #21
 8009562:	d529      	bpl.n	80095b8 <__ssputs_r+0x98>
 8009564:	0029      	movs	r1, r5
 8009566:	0038      	movs	r0, r7
 8009568:	f7ff fbae 	bl	8008cc8 <_malloc_r>
 800956c:	1e06      	subs	r6, r0, #0
 800956e:	d02d      	beq.n	80095cc <__ssputs_r+0xac>
 8009570:	9a02      	ldr	r2, [sp, #8]
 8009572:	6921      	ldr	r1, [r4, #16]
 8009574:	f000 fa10 	bl	8009998 <memcpy>
 8009578:	89a2      	ldrh	r2, [r4, #12]
 800957a:	4b19      	ldr	r3, [pc, #100]	; (80095e0 <__ssputs_r+0xc0>)
 800957c:	401a      	ands	r2, r3
 800957e:	2380      	movs	r3, #128	; 0x80
 8009580:	4313      	orrs	r3, r2
 8009582:	81a3      	strh	r3, [r4, #12]
 8009584:	9b02      	ldr	r3, [sp, #8]
 8009586:	6126      	str	r6, [r4, #16]
 8009588:	18f6      	adds	r6, r6, r3
 800958a:	6026      	str	r6, [r4, #0]
 800958c:	6165      	str	r5, [r4, #20]
 800958e:	9e01      	ldr	r6, [sp, #4]
 8009590:	1aed      	subs	r5, r5, r3
 8009592:	60a5      	str	r5, [r4, #8]
 8009594:	9b01      	ldr	r3, [sp, #4]
 8009596:	429e      	cmp	r6, r3
 8009598:	d900      	bls.n	800959c <__ssputs_r+0x7c>
 800959a:	9e01      	ldr	r6, [sp, #4]
 800959c:	0032      	movs	r2, r6
 800959e:	9903      	ldr	r1, [sp, #12]
 80095a0:	6820      	ldr	r0, [r4, #0]
 80095a2:	f000 f9d4 	bl	800994e <memmove>
 80095a6:	2000      	movs	r0, #0
 80095a8:	68a3      	ldr	r3, [r4, #8]
 80095aa:	1b9b      	subs	r3, r3, r6
 80095ac:	60a3      	str	r3, [r4, #8]
 80095ae:	6823      	ldr	r3, [r4, #0]
 80095b0:	199b      	adds	r3, r3, r6
 80095b2:	6023      	str	r3, [r4, #0]
 80095b4:	b005      	add	sp, #20
 80095b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095b8:	002a      	movs	r2, r5
 80095ba:	0038      	movs	r0, r7
 80095bc:	f000 fa53 	bl	8009a66 <_realloc_r>
 80095c0:	1e06      	subs	r6, r0, #0
 80095c2:	d1df      	bne.n	8009584 <__ssputs_r+0x64>
 80095c4:	0038      	movs	r0, r7
 80095c6:	6921      	ldr	r1, [r4, #16]
 80095c8:	f7ff fb08 	bl	8008bdc <_free_r>
 80095cc:	230c      	movs	r3, #12
 80095ce:	2001      	movs	r0, #1
 80095d0:	603b      	str	r3, [r7, #0]
 80095d2:	89a2      	ldrh	r2, [r4, #12]
 80095d4:	3334      	adds	r3, #52	; 0x34
 80095d6:	4313      	orrs	r3, r2
 80095d8:	81a3      	strh	r3, [r4, #12]
 80095da:	4240      	negs	r0, r0
 80095dc:	e7ea      	b.n	80095b4 <__ssputs_r+0x94>
 80095de:	46c0      	nop			; (mov r8, r8)
 80095e0:	fffffb7f 	.word	0xfffffb7f

080095e4 <_svfiprintf_r>:
 80095e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095e6:	b0a1      	sub	sp, #132	; 0x84
 80095e8:	9003      	str	r0, [sp, #12]
 80095ea:	001d      	movs	r5, r3
 80095ec:	898b      	ldrh	r3, [r1, #12]
 80095ee:	000f      	movs	r7, r1
 80095f0:	0016      	movs	r6, r2
 80095f2:	061b      	lsls	r3, r3, #24
 80095f4:	d511      	bpl.n	800961a <_svfiprintf_r+0x36>
 80095f6:	690b      	ldr	r3, [r1, #16]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10e      	bne.n	800961a <_svfiprintf_r+0x36>
 80095fc:	2140      	movs	r1, #64	; 0x40
 80095fe:	f7ff fb63 	bl	8008cc8 <_malloc_r>
 8009602:	6038      	str	r0, [r7, #0]
 8009604:	6138      	str	r0, [r7, #16]
 8009606:	2800      	cmp	r0, #0
 8009608:	d105      	bne.n	8009616 <_svfiprintf_r+0x32>
 800960a:	230c      	movs	r3, #12
 800960c:	9a03      	ldr	r2, [sp, #12]
 800960e:	3801      	subs	r0, #1
 8009610:	6013      	str	r3, [r2, #0]
 8009612:	b021      	add	sp, #132	; 0x84
 8009614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009616:	2340      	movs	r3, #64	; 0x40
 8009618:	617b      	str	r3, [r7, #20]
 800961a:	2300      	movs	r3, #0
 800961c:	ac08      	add	r4, sp, #32
 800961e:	6163      	str	r3, [r4, #20]
 8009620:	3320      	adds	r3, #32
 8009622:	7663      	strb	r3, [r4, #25]
 8009624:	3310      	adds	r3, #16
 8009626:	76a3      	strb	r3, [r4, #26]
 8009628:	9507      	str	r5, [sp, #28]
 800962a:	0035      	movs	r5, r6
 800962c:	782b      	ldrb	r3, [r5, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <_svfiprintf_r+0x52>
 8009632:	2b25      	cmp	r3, #37	; 0x25
 8009634:	d148      	bne.n	80096c8 <_svfiprintf_r+0xe4>
 8009636:	1bab      	subs	r3, r5, r6
 8009638:	9305      	str	r3, [sp, #20]
 800963a:	42b5      	cmp	r5, r6
 800963c:	d00b      	beq.n	8009656 <_svfiprintf_r+0x72>
 800963e:	0032      	movs	r2, r6
 8009640:	0039      	movs	r1, r7
 8009642:	9803      	ldr	r0, [sp, #12]
 8009644:	f7ff ff6c 	bl	8009520 <__ssputs_r>
 8009648:	3001      	adds	r0, #1
 800964a:	d100      	bne.n	800964e <_svfiprintf_r+0x6a>
 800964c:	e0af      	b.n	80097ae <_svfiprintf_r+0x1ca>
 800964e:	6963      	ldr	r3, [r4, #20]
 8009650:	9a05      	ldr	r2, [sp, #20]
 8009652:	189b      	adds	r3, r3, r2
 8009654:	6163      	str	r3, [r4, #20]
 8009656:	782b      	ldrb	r3, [r5, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d100      	bne.n	800965e <_svfiprintf_r+0x7a>
 800965c:	e0a7      	b.n	80097ae <_svfiprintf_r+0x1ca>
 800965e:	2201      	movs	r2, #1
 8009660:	2300      	movs	r3, #0
 8009662:	4252      	negs	r2, r2
 8009664:	6062      	str	r2, [r4, #4]
 8009666:	a904      	add	r1, sp, #16
 8009668:	3254      	adds	r2, #84	; 0x54
 800966a:	1852      	adds	r2, r2, r1
 800966c:	1c6e      	adds	r6, r5, #1
 800966e:	6023      	str	r3, [r4, #0]
 8009670:	60e3      	str	r3, [r4, #12]
 8009672:	60a3      	str	r3, [r4, #8]
 8009674:	7013      	strb	r3, [r2, #0]
 8009676:	65a3      	str	r3, [r4, #88]	; 0x58
 8009678:	4b55      	ldr	r3, [pc, #340]	; (80097d0 <_svfiprintf_r+0x1ec>)
 800967a:	2205      	movs	r2, #5
 800967c:	0018      	movs	r0, r3
 800967e:	7831      	ldrb	r1, [r6, #0]
 8009680:	9305      	str	r3, [sp, #20]
 8009682:	f7fe fc03 	bl	8007e8c <memchr>
 8009686:	1c75      	adds	r5, r6, #1
 8009688:	2800      	cmp	r0, #0
 800968a:	d11f      	bne.n	80096cc <_svfiprintf_r+0xe8>
 800968c:	6822      	ldr	r2, [r4, #0]
 800968e:	06d3      	lsls	r3, r2, #27
 8009690:	d504      	bpl.n	800969c <_svfiprintf_r+0xb8>
 8009692:	2353      	movs	r3, #83	; 0x53
 8009694:	a904      	add	r1, sp, #16
 8009696:	185b      	adds	r3, r3, r1
 8009698:	2120      	movs	r1, #32
 800969a:	7019      	strb	r1, [r3, #0]
 800969c:	0713      	lsls	r3, r2, #28
 800969e:	d504      	bpl.n	80096aa <_svfiprintf_r+0xc6>
 80096a0:	2353      	movs	r3, #83	; 0x53
 80096a2:	a904      	add	r1, sp, #16
 80096a4:	185b      	adds	r3, r3, r1
 80096a6:	212b      	movs	r1, #43	; 0x2b
 80096a8:	7019      	strb	r1, [r3, #0]
 80096aa:	7833      	ldrb	r3, [r6, #0]
 80096ac:	2b2a      	cmp	r3, #42	; 0x2a
 80096ae:	d016      	beq.n	80096de <_svfiprintf_r+0xfa>
 80096b0:	0035      	movs	r5, r6
 80096b2:	2100      	movs	r1, #0
 80096b4:	200a      	movs	r0, #10
 80096b6:	68e3      	ldr	r3, [r4, #12]
 80096b8:	782a      	ldrb	r2, [r5, #0]
 80096ba:	1c6e      	adds	r6, r5, #1
 80096bc:	3a30      	subs	r2, #48	; 0x30
 80096be:	2a09      	cmp	r2, #9
 80096c0:	d94e      	bls.n	8009760 <_svfiprintf_r+0x17c>
 80096c2:	2900      	cmp	r1, #0
 80096c4:	d111      	bne.n	80096ea <_svfiprintf_r+0x106>
 80096c6:	e017      	b.n	80096f8 <_svfiprintf_r+0x114>
 80096c8:	3501      	adds	r5, #1
 80096ca:	e7af      	b.n	800962c <_svfiprintf_r+0x48>
 80096cc:	9b05      	ldr	r3, [sp, #20]
 80096ce:	6822      	ldr	r2, [r4, #0]
 80096d0:	1ac0      	subs	r0, r0, r3
 80096d2:	2301      	movs	r3, #1
 80096d4:	4083      	lsls	r3, r0
 80096d6:	4313      	orrs	r3, r2
 80096d8:	002e      	movs	r6, r5
 80096da:	6023      	str	r3, [r4, #0]
 80096dc:	e7cc      	b.n	8009678 <_svfiprintf_r+0x94>
 80096de:	9b07      	ldr	r3, [sp, #28]
 80096e0:	1d19      	adds	r1, r3, #4
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	9107      	str	r1, [sp, #28]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	db01      	blt.n	80096ee <_svfiprintf_r+0x10a>
 80096ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80096ec:	e004      	b.n	80096f8 <_svfiprintf_r+0x114>
 80096ee:	425b      	negs	r3, r3
 80096f0:	60e3      	str	r3, [r4, #12]
 80096f2:	2302      	movs	r3, #2
 80096f4:	4313      	orrs	r3, r2
 80096f6:	6023      	str	r3, [r4, #0]
 80096f8:	782b      	ldrb	r3, [r5, #0]
 80096fa:	2b2e      	cmp	r3, #46	; 0x2e
 80096fc:	d10a      	bne.n	8009714 <_svfiprintf_r+0x130>
 80096fe:	786b      	ldrb	r3, [r5, #1]
 8009700:	2b2a      	cmp	r3, #42	; 0x2a
 8009702:	d135      	bne.n	8009770 <_svfiprintf_r+0x18c>
 8009704:	9b07      	ldr	r3, [sp, #28]
 8009706:	3502      	adds	r5, #2
 8009708:	1d1a      	adds	r2, r3, #4
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	9207      	str	r2, [sp, #28]
 800970e:	2b00      	cmp	r3, #0
 8009710:	db2b      	blt.n	800976a <_svfiprintf_r+0x186>
 8009712:	9309      	str	r3, [sp, #36]	; 0x24
 8009714:	4e2f      	ldr	r6, [pc, #188]	; (80097d4 <_svfiprintf_r+0x1f0>)
 8009716:	2203      	movs	r2, #3
 8009718:	0030      	movs	r0, r6
 800971a:	7829      	ldrb	r1, [r5, #0]
 800971c:	f7fe fbb6 	bl	8007e8c <memchr>
 8009720:	2800      	cmp	r0, #0
 8009722:	d006      	beq.n	8009732 <_svfiprintf_r+0x14e>
 8009724:	2340      	movs	r3, #64	; 0x40
 8009726:	1b80      	subs	r0, r0, r6
 8009728:	4083      	lsls	r3, r0
 800972a:	6822      	ldr	r2, [r4, #0]
 800972c:	3501      	adds	r5, #1
 800972e:	4313      	orrs	r3, r2
 8009730:	6023      	str	r3, [r4, #0]
 8009732:	7829      	ldrb	r1, [r5, #0]
 8009734:	2206      	movs	r2, #6
 8009736:	4828      	ldr	r0, [pc, #160]	; (80097d8 <_svfiprintf_r+0x1f4>)
 8009738:	1c6e      	adds	r6, r5, #1
 800973a:	7621      	strb	r1, [r4, #24]
 800973c:	f7fe fba6 	bl	8007e8c <memchr>
 8009740:	2800      	cmp	r0, #0
 8009742:	d03c      	beq.n	80097be <_svfiprintf_r+0x1da>
 8009744:	4b25      	ldr	r3, [pc, #148]	; (80097dc <_svfiprintf_r+0x1f8>)
 8009746:	2b00      	cmp	r3, #0
 8009748:	d125      	bne.n	8009796 <_svfiprintf_r+0x1b2>
 800974a:	2207      	movs	r2, #7
 800974c:	9b07      	ldr	r3, [sp, #28]
 800974e:	3307      	adds	r3, #7
 8009750:	4393      	bics	r3, r2
 8009752:	3308      	adds	r3, #8
 8009754:	9307      	str	r3, [sp, #28]
 8009756:	6963      	ldr	r3, [r4, #20]
 8009758:	9a04      	ldr	r2, [sp, #16]
 800975a:	189b      	adds	r3, r3, r2
 800975c:	6163      	str	r3, [r4, #20]
 800975e:	e764      	b.n	800962a <_svfiprintf_r+0x46>
 8009760:	4343      	muls	r3, r0
 8009762:	0035      	movs	r5, r6
 8009764:	2101      	movs	r1, #1
 8009766:	189b      	adds	r3, r3, r2
 8009768:	e7a6      	b.n	80096b8 <_svfiprintf_r+0xd4>
 800976a:	2301      	movs	r3, #1
 800976c:	425b      	negs	r3, r3
 800976e:	e7d0      	b.n	8009712 <_svfiprintf_r+0x12e>
 8009770:	2300      	movs	r3, #0
 8009772:	200a      	movs	r0, #10
 8009774:	001a      	movs	r2, r3
 8009776:	3501      	adds	r5, #1
 8009778:	6063      	str	r3, [r4, #4]
 800977a:	7829      	ldrb	r1, [r5, #0]
 800977c:	1c6e      	adds	r6, r5, #1
 800977e:	3930      	subs	r1, #48	; 0x30
 8009780:	2909      	cmp	r1, #9
 8009782:	d903      	bls.n	800978c <_svfiprintf_r+0x1a8>
 8009784:	2b00      	cmp	r3, #0
 8009786:	d0c5      	beq.n	8009714 <_svfiprintf_r+0x130>
 8009788:	9209      	str	r2, [sp, #36]	; 0x24
 800978a:	e7c3      	b.n	8009714 <_svfiprintf_r+0x130>
 800978c:	4342      	muls	r2, r0
 800978e:	0035      	movs	r5, r6
 8009790:	2301      	movs	r3, #1
 8009792:	1852      	adds	r2, r2, r1
 8009794:	e7f1      	b.n	800977a <_svfiprintf_r+0x196>
 8009796:	aa07      	add	r2, sp, #28
 8009798:	9200      	str	r2, [sp, #0]
 800979a:	0021      	movs	r1, r4
 800979c:	003a      	movs	r2, r7
 800979e:	4b10      	ldr	r3, [pc, #64]	; (80097e0 <_svfiprintf_r+0x1fc>)
 80097a0:	9803      	ldr	r0, [sp, #12]
 80097a2:	f7fd fdf9 	bl	8007398 <_printf_float>
 80097a6:	9004      	str	r0, [sp, #16]
 80097a8:	9b04      	ldr	r3, [sp, #16]
 80097aa:	3301      	adds	r3, #1
 80097ac:	d1d3      	bne.n	8009756 <_svfiprintf_r+0x172>
 80097ae:	89bb      	ldrh	r3, [r7, #12]
 80097b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80097b2:	065b      	lsls	r3, r3, #25
 80097b4:	d400      	bmi.n	80097b8 <_svfiprintf_r+0x1d4>
 80097b6:	e72c      	b.n	8009612 <_svfiprintf_r+0x2e>
 80097b8:	2001      	movs	r0, #1
 80097ba:	4240      	negs	r0, r0
 80097bc:	e729      	b.n	8009612 <_svfiprintf_r+0x2e>
 80097be:	aa07      	add	r2, sp, #28
 80097c0:	9200      	str	r2, [sp, #0]
 80097c2:	0021      	movs	r1, r4
 80097c4:	003a      	movs	r2, r7
 80097c6:	4b06      	ldr	r3, [pc, #24]	; (80097e0 <_svfiprintf_r+0x1fc>)
 80097c8:	9803      	ldr	r0, [sp, #12]
 80097ca:	f7fe f8ab 	bl	8007924 <_printf_i>
 80097ce:	e7ea      	b.n	80097a6 <_svfiprintf_r+0x1c2>
 80097d0:	0800a3cc 	.word	0x0800a3cc
 80097d4:	0800a3d2 	.word	0x0800a3d2
 80097d8:	0800a3d6 	.word	0x0800a3d6
 80097dc:	08007399 	.word	0x08007399
 80097e0:	08009521 	.word	0x08009521

080097e4 <__sflush_r>:
 80097e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097e6:	898b      	ldrh	r3, [r1, #12]
 80097e8:	0005      	movs	r5, r0
 80097ea:	000c      	movs	r4, r1
 80097ec:	071a      	lsls	r2, r3, #28
 80097ee:	d45c      	bmi.n	80098aa <__sflush_r+0xc6>
 80097f0:	684a      	ldr	r2, [r1, #4]
 80097f2:	2a00      	cmp	r2, #0
 80097f4:	dc04      	bgt.n	8009800 <__sflush_r+0x1c>
 80097f6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80097f8:	2a00      	cmp	r2, #0
 80097fa:	dc01      	bgt.n	8009800 <__sflush_r+0x1c>
 80097fc:	2000      	movs	r0, #0
 80097fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009800:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009802:	2f00      	cmp	r7, #0
 8009804:	d0fa      	beq.n	80097fc <__sflush_r+0x18>
 8009806:	2200      	movs	r2, #0
 8009808:	2080      	movs	r0, #128	; 0x80
 800980a:	682e      	ldr	r6, [r5, #0]
 800980c:	602a      	str	r2, [r5, #0]
 800980e:	001a      	movs	r2, r3
 8009810:	0140      	lsls	r0, r0, #5
 8009812:	6a21      	ldr	r1, [r4, #32]
 8009814:	4002      	ands	r2, r0
 8009816:	4203      	tst	r3, r0
 8009818:	d034      	beq.n	8009884 <__sflush_r+0xa0>
 800981a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	075b      	lsls	r3, r3, #29
 8009820:	d506      	bpl.n	8009830 <__sflush_r+0x4c>
 8009822:	6863      	ldr	r3, [r4, #4]
 8009824:	1ac0      	subs	r0, r0, r3
 8009826:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <__sflush_r+0x4c>
 800982c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800982e:	1ac0      	subs	r0, r0, r3
 8009830:	0002      	movs	r2, r0
 8009832:	2300      	movs	r3, #0
 8009834:	0028      	movs	r0, r5
 8009836:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009838:	6a21      	ldr	r1, [r4, #32]
 800983a:	47b8      	blx	r7
 800983c:	89a2      	ldrh	r2, [r4, #12]
 800983e:	1c43      	adds	r3, r0, #1
 8009840:	d106      	bne.n	8009850 <__sflush_r+0x6c>
 8009842:	6829      	ldr	r1, [r5, #0]
 8009844:	291d      	cmp	r1, #29
 8009846:	d82c      	bhi.n	80098a2 <__sflush_r+0xbe>
 8009848:	4b2a      	ldr	r3, [pc, #168]	; (80098f4 <__sflush_r+0x110>)
 800984a:	410b      	asrs	r3, r1
 800984c:	07db      	lsls	r3, r3, #31
 800984e:	d428      	bmi.n	80098a2 <__sflush_r+0xbe>
 8009850:	2300      	movs	r3, #0
 8009852:	6063      	str	r3, [r4, #4]
 8009854:	6923      	ldr	r3, [r4, #16]
 8009856:	6023      	str	r3, [r4, #0]
 8009858:	04d2      	lsls	r2, r2, #19
 800985a:	d505      	bpl.n	8009868 <__sflush_r+0x84>
 800985c:	1c43      	adds	r3, r0, #1
 800985e:	d102      	bne.n	8009866 <__sflush_r+0x82>
 8009860:	682b      	ldr	r3, [r5, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d100      	bne.n	8009868 <__sflush_r+0x84>
 8009866:	6560      	str	r0, [r4, #84]	; 0x54
 8009868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800986a:	602e      	str	r6, [r5, #0]
 800986c:	2900      	cmp	r1, #0
 800986e:	d0c5      	beq.n	80097fc <__sflush_r+0x18>
 8009870:	0023      	movs	r3, r4
 8009872:	3344      	adds	r3, #68	; 0x44
 8009874:	4299      	cmp	r1, r3
 8009876:	d002      	beq.n	800987e <__sflush_r+0x9a>
 8009878:	0028      	movs	r0, r5
 800987a:	f7ff f9af 	bl	8008bdc <_free_r>
 800987e:	2000      	movs	r0, #0
 8009880:	6360      	str	r0, [r4, #52]	; 0x34
 8009882:	e7bc      	b.n	80097fe <__sflush_r+0x1a>
 8009884:	2301      	movs	r3, #1
 8009886:	0028      	movs	r0, r5
 8009888:	47b8      	blx	r7
 800988a:	1c43      	adds	r3, r0, #1
 800988c:	d1c6      	bne.n	800981c <__sflush_r+0x38>
 800988e:	682b      	ldr	r3, [r5, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d0c3      	beq.n	800981c <__sflush_r+0x38>
 8009894:	2b1d      	cmp	r3, #29
 8009896:	d001      	beq.n	800989c <__sflush_r+0xb8>
 8009898:	2b16      	cmp	r3, #22
 800989a:	d101      	bne.n	80098a0 <__sflush_r+0xbc>
 800989c:	602e      	str	r6, [r5, #0]
 800989e:	e7ad      	b.n	80097fc <__sflush_r+0x18>
 80098a0:	89a2      	ldrh	r2, [r4, #12]
 80098a2:	2340      	movs	r3, #64	; 0x40
 80098a4:	4313      	orrs	r3, r2
 80098a6:	81a3      	strh	r3, [r4, #12]
 80098a8:	e7a9      	b.n	80097fe <__sflush_r+0x1a>
 80098aa:	690e      	ldr	r6, [r1, #16]
 80098ac:	2e00      	cmp	r6, #0
 80098ae:	d0a5      	beq.n	80097fc <__sflush_r+0x18>
 80098b0:	680f      	ldr	r7, [r1, #0]
 80098b2:	600e      	str	r6, [r1, #0]
 80098b4:	1bba      	subs	r2, r7, r6
 80098b6:	9201      	str	r2, [sp, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	079b      	lsls	r3, r3, #30
 80098bc:	d100      	bne.n	80098c0 <__sflush_r+0xdc>
 80098be:	694a      	ldr	r2, [r1, #20]
 80098c0:	60a2      	str	r2, [r4, #8]
 80098c2:	9b01      	ldr	r3, [sp, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	dd99      	ble.n	80097fc <__sflush_r+0x18>
 80098c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80098ca:	0032      	movs	r2, r6
 80098cc:	001f      	movs	r7, r3
 80098ce:	0028      	movs	r0, r5
 80098d0:	9b01      	ldr	r3, [sp, #4]
 80098d2:	6a21      	ldr	r1, [r4, #32]
 80098d4:	47b8      	blx	r7
 80098d6:	2800      	cmp	r0, #0
 80098d8:	dc06      	bgt.n	80098e8 <__sflush_r+0x104>
 80098da:	2340      	movs	r3, #64	; 0x40
 80098dc:	2001      	movs	r0, #1
 80098de:	89a2      	ldrh	r2, [r4, #12]
 80098e0:	4240      	negs	r0, r0
 80098e2:	4313      	orrs	r3, r2
 80098e4:	81a3      	strh	r3, [r4, #12]
 80098e6:	e78a      	b.n	80097fe <__sflush_r+0x1a>
 80098e8:	9b01      	ldr	r3, [sp, #4]
 80098ea:	1836      	adds	r6, r6, r0
 80098ec:	1a1b      	subs	r3, r3, r0
 80098ee:	9301      	str	r3, [sp, #4]
 80098f0:	e7e7      	b.n	80098c2 <__sflush_r+0xde>
 80098f2:	46c0      	nop			; (mov r8, r8)
 80098f4:	dfbffffe 	.word	0xdfbffffe

080098f8 <_fflush_r>:
 80098f8:	690b      	ldr	r3, [r1, #16]
 80098fa:	b570      	push	{r4, r5, r6, lr}
 80098fc:	0005      	movs	r5, r0
 80098fe:	000c      	movs	r4, r1
 8009900:	2b00      	cmp	r3, #0
 8009902:	d102      	bne.n	800990a <_fflush_r+0x12>
 8009904:	2500      	movs	r5, #0
 8009906:	0028      	movs	r0, r5
 8009908:	bd70      	pop	{r4, r5, r6, pc}
 800990a:	2800      	cmp	r0, #0
 800990c:	d004      	beq.n	8009918 <_fflush_r+0x20>
 800990e:	6a03      	ldr	r3, [r0, #32]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d101      	bne.n	8009918 <_fflush_r+0x20>
 8009914:	f7fe f994 	bl	8007c40 <__sinit>
 8009918:	220c      	movs	r2, #12
 800991a:	5ea3      	ldrsh	r3, [r4, r2]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d0f1      	beq.n	8009904 <_fflush_r+0xc>
 8009920:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009922:	07d2      	lsls	r2, r2, #31
 8009924:	d404      	bmi.n	8009930 <_fflush_r+0x38>
 8009926:	059b      	lsls	r3, r3, #22
 8009928:	d402      	bmi.n	8009930 <_fflush_r+0x38>
 800992a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800992c:	f7fe faac 	bl	8007e88 <__retarget_lock_acquire_recursive>
 8009930:	0028      	movs	r0, r5
 8009932:	0021      	movs	r1, r4
 8009934:	f7ff ff56 	bl	80097e4 <__sflush_r>
 8009938:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800993a:	0005      	movs	r5, r0
 800993c:	07db      	lsls	r3, r3, #31
 800993e:	d4e2      	bmi.n	8009906 <_fflush_r+0xe>
 8009940:	89a3      	ldrh	r3, [r4, #12]
 8009942:	059b      	lsls	r3, r3, #22
 8009944:	d4df      	bmi.n	8009906 <_fflush_r+0xe>
 8009946:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009948:	f7fe fa9f 	bl	8007e8a <__retarget_lock_release_recursive>
 800994c:	e7db      	b.n	8009906 <_fflush_r+0xe>

0800994e <memmove>:
 800994e:	b510      	push	{r4, lr}
 8009950:	4288      	cmp	r0, r1
 8009952:	d902      	bls.n	800995a <memmove+0xc>
 8009954:	188b      	adds	r3, r1, r2
 8009956:	4298      	cmp	r0, r3
 8009958:	d303      	bcc.n	8009962 <memmove+0x14>
 800995a:	2300      	movs	r3, #0
 800995c:	e007      	b.n	800996e <memmove+0x20>
 800995e:	5c8b      	ldrb	r3, [r1, r2]
 8009960:	5483      	strb	r3, [r0, r2]
 8009962:	3a01      	subs	r2, #1
 8009964:	d2fb      	bcs.n	800995e <memmove+0x10>
 8009966:	bd10      	pop	{r4, pc}
 8009968:	5ccc      	ldrb	r4, [r1, r3]
 800996a:	54c4      	strb	r4, [r0, r3]
 800996c:	3301      	adds	r3, #1
 800996e:	429a      	cmp	r2, r3
 8009970:	d1fa      	bne.n	8009968 <memmove+0x1a>
 8009972:	e7f8      	b.n	8009966 <memmove+0x18>

08009974 <_sbrk_r>:
 8009974:	2300      	movs	r3, #0
 8009976:	b570      	push	{r4, r5, r6, lr}
 8009978:	4d06      	ldr	r5, [pc, #24]	; (8009994 <_sbrk_r+0x20>)
 800997a:	0004      	movs	r4, r0
 800997c:	0008      	movs	r0, r1
 800997e:	602b      	str	r3, [r5, #0]
 8009980:	f7fa f9c6 	bl	8003d10 <_sbrk>
 8009984:	1c43      	adds	r3, r0, #1
 8009986:	d103      	bne.n	8009990 <_sbrk_r+0x1c>
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d000      	beq.n	8009990 <_sbrk_r+0x1c>
 800998e:	6023      	str	r3, [r4, #0]
 8009990:	bd70      	pop	{r4, r5, r6, pc}
 8009992:	46c0      	nop			; (mov r8, r8)
 8009994:	200007e4 	.word	0x200007e4

08009998 <memcpy>:
 8009998:	2300      	movs	r3, #0
 800999a:	b510      	push	{r4, lr}
 800999c:	429a      	cmp	r2, r3
 800999e:	d100      	bne.n	80099a2 <memcpy+0xa>
 80099a0:	bd10      	pop	{r4, pc}
 80099a2:	5ccc      	ldrb	r4, [r1, r3]
 80099a4:	54c4      	strb	r4, [r0, r3]
 80099a6:	3301      	adds	r3, #1
 80099a8:	e7f8      	b.n	800999c <memcpy+0x4>
	...

080099ac <__assert_func>:
 80099ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80099ae:	0014      	movs	r4, r2
 80099b0:	001a      	movs	r2, r3
 80099b2:	4b09      	ldr	r3, [pc, #36]	; (80099d8 <__assert_func+0x2c>)
 80099b4:	0005      	movs	r5, r0
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	000e      	movs	r6, r1
 80099ba:	68d8      	ldr	r0, [r3, #12]
 80099bc:	4b07      	ldr	r3, [pc, #28]	; (80099dc <__assert_func+0x30>)
 80099be:	2c00      	cmp	r4, #0
 80099c0:	d101      	bne.n	80099c6 <__assert_func+0x1a>
 80099c2:	4b07      	ldr	r3, [pc, #28]	; (80099e0 <__assert_func+0x34>)
 80099c4:	001c      	movs	r4, r3
 80099c6:	4907      	ldr	r1, [pc, #28]	; (80099e4 <__assert_func+0x38>)
 80099c8:	9301      	str	r3, [sp, #4]
 80099ca:	9402      	str	r4, [sp, #8]
 80099cc:	002b      	movs	r3, r5
 80099ce:	9600      	str	r6, [sp, #0]
 80099d0:	f000 f886 	bl	8009ae0 <fiprintf>
 80099d4:	f000 f894 	bl	8009b00 <abort>
 80099d8:	20000068 	.word	0x20000068
 80099dc:	0800a3e7 	.word	0x0800a3e7
 80099e0:	0800a422 	.word	0x0800a422
 80099e4:	0800a3f4 	.word	0x0800a3f4

080099e8 <_calloc_r>:
 80099e8:	b570      	push	{r4, r5, r6, lr}
 80099ea:	0c0b      	lsrs	r3, r1, #16
 80099ec:	0c15      	lsrs	r5, r2, #16
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d11e      	bne.n	8009a30 <_calloc_r+0x48>
 80099f2:	2d00      	cmp	r5, #0
 80099f4:	d10c      	bne.n	8009a10 <_calloc_r+0x28>
 80099f6:	b289      	uxth	r1, r1
 80099f8:	b294      	uxth	r4, r2
 80099fa:	434c      	muls	r4, r1
 80099fc:	0021      	movs	r1, r4
 80099fe:	f7ff f963 	bl	8008cc8 <_malloc_r>
 8009a02:	1e05      	subs	r5, r0, #0
 8009a04:	d01b      	beq.n	8009a3e <_calloc_r+0x56>
 8009a06:	0022      	movs	r2, r4
 8009a08:	2100      	movs	r1, #0
 8009a0a:	f7fe f9b9 	bl	8007d80 <memset>
 8009a0e:	e016      	b.n	8009a3e <_calloc_r+0x56>
 8009a10:	1c2b      	adds	r3, r5, #0
 8009a12:	1c0c      	adds	r4, r1, #0
 8009a14:	b289      	uxth	r1, r1
 8009a16:	b292      	uxth	r2, r2
 8009a18:	434a      	muls	r2, r1
 8009a1a:	b2a1      	uxth	r1, r4
 8009a1c:	b29c      	uxth	r4, r3
 8009a1e:	434c      	muls	r4, r1
 8009a20:	0c13      	lsrs	r3, r2, #16
 8009a22:	18e4      	adds	r4, r4, r3
 8009a24:	0c23      	lsrs	r3, r4, #16
 8009a26:	d107      	bne.n	8009a38 <_calloc_r+0x50>
 8009a28:	0424      	lsls	r4, r4, #16
 8009a2a:	b292      	uxth	r2, r2
 8009a2c:	4314      	orrs	r4, r2
 8009a2e:	e7e5      	b.n	80099fc <_calloc_r+0x14>
 8009a30:	2d00      	cmp	r5, #0
 8009a32:	d101      	bne.n	8009a38 <_calloc_r+0x50>
 8009a34:	1c14      	adds	r4, r2, #0
 8009a36:	e7ed      	b.n	8009a14 <_calloc_r+0x2c>
 8009a38:	230c      	movs	r3, #12
 8009a3a:	2500      	movs	r5, #0
 8009a3c:	6003      	str	r3, [r0, #0]
 8009a3e:	0028      	movs	r0, r5
 8009a40:	bd70      	pop	{r4, r5, r6, pc}

08009a42 <__ascii_mbtowc>:
 8009a42:	b082      	sub	sp, #8
 8009a44:	2900      	cmp	r1, #0
 8009a46:	d100      	bne.n	8009a4a <__ascii_mbtowc+0x8>
 8009a48:	a901      	add	r1, sp, #4
 8009a4a:	1e10      	subs	r0, r2, #0
 8009a4c:	d006      	beq.n	8009a5c <__ascii_mbtowc+0x1a>
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d006      	beq.n	8009a60 <__ascii_mbtowc+0x1e>
 8009a52:	7813      	ldrb	r3, [r2, #0]
 8009a54:	600b      	str	r3, [r1, #0]
 8009a56:	7810      	ldrb	r0, [r2, #0]
 8009a58:	1e43      	subs	r3, r0, #1
 8009a5a:	4198      	sbcs	r0, r3
 8009a5c:	b002      	add	sp, #8
 8009a5e:	4770      	bx	lr
 8009a60:	2002      	movs	r0, #2
 8009a62:	4240      	negs	r0, r0
 8009a64:	e7fa      	b.n	8009a5c <__ascii_mbtowc+0x1a>

08009a66 <_realloc_r>:
 8009a66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a68:	0007      	movs	r7, r0
 8009a6a:	000e      	movs	r6, r1
 8009a6c:	0014      	movs	r4, r2
 8009a6e:	2900      	cmp	r1, #0
 8009a70:	d105      	bne.n	8009a7e <_realloc_r+0x18>
 8009a72:	0011      	movs	r1, r2
 8009a74:	f7ff f928 	bl	8008cc8 <_malloc_r>
 8009a78:	0005      	movs	r5, r0
 8009a7a:	0028      	movs	r0, r5
 8009a7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a7e:	2a00      	cmp	r2, #0
 8009a80:	d103      	bne.n	8009a8a <_realloc_r+0x24>
 8009a82:	f7ff f8ab 	bl	8008bdc <_free_r>
 8009a86:	0025      	movs	r5, r4
 8009a88:	e7f7      	b.n	8009a7a <_realloc_r+0x14>
 8009a8a:	f000 f840 	bl	8009b0e <_malloc_usable_size_r>
 8009a8e:	9001      	str	r0, [sp, #4]
 8009a90:	4284      	cmp	r4, r0
 8009a92:	d803      	bhi.n	8009a9c <_realloc_r+0x36>
 8009a94:	0035      	movs	r5, r6
 8009a96:	0843      	lsrs	r3, r0, #1
 8009a98:	42a3      	cmp	r3, r4
 8009a9a:	d3ee      	bcc.n	8009a7a <_realloc_r+0x14>
 8009a9c:	0021      	movs	r1, r4
 8009a9e:	0038      	movs	r0, r7
 8009aa0:	f7ff f912 	bl	8008cc8 <_malloc_r>
 8009aa4:	1e05      	subs	r5, r0, #0
 8009aa6:	d0e8      	beq.n	8009a7a <_realloc_r+0x14>
 8009aa8:	9b01      	ldr	r3, [sp, #4]
 8009aaa:	0022      	movs	r2, r4
 8009aac:	429c      	cmp	r4, r3
 8009aae:	d900      	bls.n	8009ab2 <_realloc_r+0x4c>
 8009ab0:	001a      	movs	r2, r3
 8009ab2:	0031      	movs	r1, r6
 8009ab4:	0028      	movs	r0, r5
 8009ab6:	f7ff ff6f 	bl	8009998 <memcpy>
 8009aba:	0031      	movs	r1, r6
 8009abc:	0038      	movs	r0, r7
 8009abe:	f7ff f88d 	bl	8008bdc <_free_r>
 8009ac2:	e7da      	b.n	8009a7a <_realloc_r+0x14>

08009ac4 <__ascii_wctomb>:
 8009ac4:	0003      	movs	r3, r0
 8009ac6:	1e08      	subs	r0, r1, #0
 8009ac8:	d005      	beq.n	8009ad6 <__ascii_wctomb+0x12>
 8009aca:	2aff      	cmp	r2, #255	; 0xff
 8009acc:	d904      	bls.n	8009ad8 <__ascii_wctomb+0x14>
 8009ace:	228a      	movs	r2, #138	; 0x8a
 8009ad0:	2001      	movs	r0, #1
 8009ad2:	601a      	str	r2, [r3, #0]
 8009ad4:	4240      	negs	r0, r0
 8009ad6:	4770      	bx	lr
 8009ad8:	2001      	movs	r0, #1
 8009ada:	700a      	strb	r2, [r1, #0]
 8009adc:	e7fb      	b.n	8009ad6 <__ascii_wctomb+0x12>
	...

08009ae0 <fiprintf>:
 8009ae0:	b40e      	push	{r1, r2, r3}
 8009ae2:	b517      	push	{r0, r1, r2, r4, lr}
 8009ae4:	4c05      	ldr	r4, [pc, #20]	; (8009afc <fiprintf+0x1c>)
 8009ae6:	ab05      	add	r3, sp, #20
 8009ae8:	cb04      	ldmia	r3!, {r2}
 8009aea:	0001      	movs	r1, r0
 8009aec:	6820      	ldr	r0, [r4, #0]
 8009aee:	9301      	str	r3, [sp, #4]
 8009af0:	f000 f83c 	bl	8009b6c <_vfiprintf_r>
 8009af4:	bc1e      	pop	{r1, r2, r3, r4}
 8009af6:	bc08      	pop	{r3}
 8009af8:	b003      	add	sp, #12
 8009afa:	4718      	bx	r3
 8009afc:	20000068 	.word	0x20000068

08009b00 <abort>:
 8009b00:	2006      	movs	r0, #6
 8009b02:	b510      	push	{r4, lr}
 8009b04:	f000 fa1e 	bl	8009f44 <raise>
 8009b08:	2001      	movs	r0, #1
 8009b0a:	f7fa f88f 	bl	8003c2c <_exit>

08009b0e <_malloc_usable_size_r>:
 8009b0e:	1f0b      	subs	r3, r1, #4
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	1f18      	subs	r0, r3, #4
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	da01      	bge.n	8009b1c <_malloc_usable_size_r+0xe>
 8009b18:	580b      	ldr	r3, [r1, r0]
 8009b1a:	18c0      	adds	r0, r0, r3
 8009b1c:	4770      	bx	lr

08009b1e <__sfputc_r>:
 8009b1e:	6893      	ldr	r3, [r2, #8]
 8009b20:	b510      	push	{r4, lr}
 8009b22:	3b01      	subs	r3, #1
 8009b24:	6093      	str	r3, [r2, #8]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	da04      	bge.n	8009b34 <__sfputc_r+0x16>
 8009b2a:	6994      	ldr	r4, [r2, #24]
 8009b2c:	42a3      	cmp	r3, r4
 8009b2e:	db07      	blt.n	8009b40 <__sfputc_r+0x22>
 8009b30:	290a      	cmp	r1, #10
 8009b32:	d005      	beq.n	8009b40 <__sfputc_r+0x22>
 8009b34:	6813      	ldr	r3, [r2, #0]
 8009b36:	1c58      	adds	r0, r3, #1
 8009b38:	6010      	str	r0, [r2, #0]
 8009b3a:	7019      	strb	r1, [r3, #0]
 8009b3c:	0008      	movs	r0, r1
 8009b3e:	bd10      	pop	{r4, pc}
 8009b40:	f000 f930 	bl	8009da4 <__swbuf_r>
 8009b44:	0001      	movs	r1, r0
 8009b46:	e7f9      	b.n	8009b3c <__sfputc_r+0x1e>

08009b48 <__sfputs_r>:
 8009b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4a:	0006      	movs	r6, r0
 8009b4c:	000f      	movs	r7, r1
 8009b4e:	0014      	movs	r4, r2
 8009b50:	18d5      	adds	r5, r2, r3
 8009b52:	42ac      	cmp	r4, r5
 8009b54:	d101      	bne.n	8009b5a <__sfputs_r+0x12>
 8009b56:	2000      	movs	r0, #0
 8009b58:	e007      	b.n	8009b6a <__sfputs_r+0x22>
 8009b5a:	7821      	ldrb	r1, [r4, #0]
 8009b5c:	003a      	movs	r2, r7
 8009b5e:	0030      	movs	r0, r6
 8009b60:	f7ff ffdd 	bl	8009b1e <__sfputc_r>
 8009b64:	3401      	adds	r4, #1
 8009b66:	1c43      	adds	r3, r0, #1
 8009b68:	d1f3      	bne.n	8009b52 <__sfputs_r+0xa>
 8009b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b6c <_vfiprintf_r>:
 8009b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b6e:	b0a1      	sub	sp, #132	; 0x84
 8009b70:	000f      	movs	r7, r1
 8009b72:	0015      	movs	r5, r2
 8009b74:	001e      	movs	r6, r3
 8009b76:	9003      	str	r0, [sp, #12]
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	d004      	beq.n	8009b86 <_vfiprintf_r+0x1a>
 8009b7c:	6a03      	ldr	r3, [r0, #32]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d101      	bne.n	8009b86 <_vfiprintf_r+0x1a>
 8009b82:	f7fe f85d 	bl	8007c40 <__sinit>
 8009b86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b88:	07db      	lsls	r3, r3, #31
 8009b8a:	d405      	bmi.n	8009b98 <_vfiprintf_r+0x2c>
 8009b8c:	89bb      	ldrh	r3, [r7, #12]
 8009b8e:	059b      	lsls	r3, r3, #22
 8009b90:	d402      	bmi.n	8009b98 <_vfiprintf_r+0x2c>
 8009b92:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009b94:	f7fe f978 	bl	8007e88 <__retarget_lock_acquire_recursive>
 8009b98:	89bb      	ldrh	r3, [r7, #12]
 8009b9a:	071b      	lsls	r3, r3, #28
 8009b9c:	d502      	bpl.n	8009ba4 <_vfiprintf_r+0x38>
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d113      	bne.n	8009bcc <_vfiprintf_r+0x60>
 8009ba4:	0039      	movs	r1, r7
 8009ba6:	9803      	ldr	r0, [sp, #12]
 8009ba8:	f000 f93e 	bl	8009e28 <__swsetup_r>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d00d      	beq.n	8009bcc <_vfiprintf_r+0x60>
 8009bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bb2:	07db      	lsls	r3, r3, #31
 8009bb4:	d503      	bpl.n	8009bbe <_vfiprintf_r+0x52>
 8009bb6:	2001      	movs	r0, #1
 8009bb8:	4240      	negs	r0, r0
 8009bba:	b021      	add	sp, #132	; 0x84
 8009bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bbe:	89bb      	ldrh	r3, [r7, #12]
 8009bc0:	059b      	lsls	r3, r3, #22
 8009bc2:	d4f8      	bmi.n	8009bb6 <_vfiprintf_r+0x4a>
 8009bc4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009bc6:	f7fe f960 	bl	8007e8a <__retarget_lock_release_recursive>
 8009bca:	e7f4      	b.n	8009bb6 <_vfiprintf_r+0x4a>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	ac08      	add	r4, sp, #32
 8009bd0:	6163      	str	r3, [r4, #20]
 8009bd2:	3320      	adds	r3, #32
 8009bd4:	7663      	strb	r3, [r4, #25]
 8009bd6:	3310      	adds	r3, #16
 8009bd8:	76a3      	strb	r3, [r4, #26]
 8009bda:	9607      	str	r6, [sp, #28]
 8009bdc:	002e      	movs	r6, r5
 8009bde:	7833      	ldrb	r3, [r6, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d001      	beq.n	8009be8 <_vfiprintf_r+0x7c>
 8009be4:	2b25      	cmp	r3, #37	; 0x25
 8009be6:	d148      	bne.n	8009c7a <_vfiprintf_r+0x10e>
 8009be8:	1b73      	subs	r3, r6, r5
 8009bea:	9305      	str	r3, [sp, #20]
 8009bec:	42ae      	cmp	r6, r5
 8009bee:	d00b      	beq.n	8009c08 <_vfiprintf_r+0x9c>
 8009bf0:	002a      	movs	r2, r5
 8009bf2:	0039      	movs	r1, r7
 8009bf4:	9803      	ldr	r0, [sp, #12]
 8009bf6:	f7ff ffa7 	bl	8009b48 <__sfputs_r>
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	d100      	bne.n	8009c00 <_vfiprintf_r+0x94>
 8009bfe:	e0af      	b.n	8009d60 <_vfiprintf_r+0x1f4>
 8009c00:	6963      	ldr	r3, [r4, #20]
 8009c02:	9a05      	ldr	r2, [sp, #20]
 8009c04:	189b      	adds	r3, r3, r2
 8009c06:	6163      	str	r3, [r4, #20]
 8009c08:	7833      	ldrb	r3, [r6, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d100      	bne.n	8009c10 <_vfiprintf_r+0xa4>
 8009c0e:	e0a7      	b.n	8009d60 <_vfiprintf_r+0x1f4>
 8009c10:	2201      	movs	r2, #1
 8009c12:	2300      	movs	r3, #0
 8009c14:	4252      	negs	r2, r2
 8009c16:	6062      	str	r2, [r4, #4]
 8009c18:	a904      	add	r1, sp, #16
 8009c1a:	3254      	adds	r2, #84	; 0x54
 8009c1c:	1852      	adds	r2, r2, r1
 8009c1e:	1c75      	adds	r5, r6, #1
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	60e3      	str	r3, [r4, #12]
 8009c24:	60a3      	str	r3, [r4, #8]
 8009c26:	7013      	strb	r3, [r2, #0]
 8009c28:	65a3      	str	r3, [r4, #88]	; 0x58
 8009c2a:	4b59      	ldr	r3, [pc, #356]	; (8009d90 <_vfiprintf_r+0x224>)
 8009c2c:	2205      	movs	r2, #5
 8009c2e:	0018      	movs	r0, r3
 8009c30:	7829      	ldrb	r1, [r5, #0]
 8009c32:	9305      	str	r3, [sp, #20]
 8009c34:	f7fe f92a 	bl	8007e8c <memchr>
 8009c38:	1c6e      	adds	r6, r5, #1
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d11f      	bne.n	8009c7e <_vfiprintf_r+0x112>
 8009c3e:	6822      	ldr	r2, [r4, #0]
 8009c40:	06d3      	lsls	r3, r2, #27
 8009c42:	d504      	bpl.n	8009c4e <_vfiprintf_r+0xe2>
 8009c44:	2353      	movs	r3, #83	; 0x53
 8009c46:	a904      	add	r1, sp, #16
 8009c48:	185b      	adds	r3, r3, r1
 8009c4a:	2120      	movs	r1, #32
 8009c4c:	7019      	strb	r1, [r3, #0]
 8009c4e:	0713      	lsls	r3, r2, #28
 8009c50:	d504      	bpl.n	8009c5c <_vfiprintf_r+0xf0>
 8009c52:	2353      	movs	r3, #83	; 0x53
 8009c54:	a904      	add	r1, sp, #16
 8009c56:	185b      	adds	r3, r3, r1
 8009c58:	212b      	movs	r1, #43	; 0x2b
 8009c5a:	7019      	strb	r1, [r3, #0]
 8009c5c:	782b      	ldrb	r3, [r5, #0]
 8009c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8009c60:	d016      	beq.n	8009c90 <_vfiprintf_r+0x124>
 8009c62:	002e      	movs	r6, r5
 8009c64:	2100      	movs	r1, #0
 8009c66:	200a      	movs	r0, #10
 8009c68:	68e3      	ldr	r3, [r4, #12]
 8009c6a:	7832      	ldrb	r2, [r6, #0]
 8009c6c:	1c75      	adds	r5, r6, #1
 8009c6e:	3a30      	subs	r2, #48	; 0x30
 8009c70:	2a09      	cmp	r2, #9
 8009c72:	d94e      	bls.n	8009d12 <_vfiprintf_r+0x1a6>
 8009c74:	2900      	cmp	r1, #0
 8009c76:	d111      	bne.n	8009c9c <_vfiprintf_r+0x130>
 8009c78:	e017      	b.n	8009caa <_vfiprintf_r+0x13e>
 8009c7a:	3601      	adds	r6, #1
 8009c7c:	e7af      	b.n	8009bde <_vfiprintf_r+0x72>
 8009c7e:	9b05      	ldr	r3, [sp, #20]
 8009c80:	6822      	ldr	r2, [r4, #0]
 8009c82:	1ac0      	subs	r0, r0, r3
 8009c84:	2301      	movs	r3, #1
 8009c86:	4083      	lsls	r3, r0
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	0035      	movs	r5, r6
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	e7cc      	b.n	8009c2a <_vfiprintf_r+0xbe>
 8009c90:	9b07      	ldr	r3, [sp, #28]
 8009c92:	1d19      	adds	r1, r3, #4
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	9107      	str	r1, [sp, #28]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	db01      	blt.n	8009ca0 <_vfiprintf_r+0x134>
 8009c9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c9e:	e004      	b.n	8009caa <_vfiprintf_r+0x13e>
 8009ca0:	425b      	negs	r3, r3
 8009ca2:	60e3      	str	r3, [r4, #12]
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	7833      	ldrb	r3, [r6, #0]
 8009cac:	2b2e      	cmp	r3, #46	; 0x2e
 8009cae:	d10a      	bne.n	8009cc6 <_vfiprintf_r+0x15a>
 8009cb0:	7873      	ldrb	r3, [r6, #1]
 8009cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8009cb4:	d135      	bne.n	8009d22 <_vfiprintf_r+0x1b6>
 8009cb6:	9b07      	ldr	r3, [sp, #28]
 8009cb8:	3602      	adds	r6, #2
 8009cba:	1d1a      	adds	r2, r3, #4
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	9207      	str	r2, [sp, #28]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	db2b      	blt.n	8009d1c <_vfiprintf_r+0x1b0>
 8009cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc6:	4d33      	ldr	r5, [pc, #204]	; (8009d94 <_vfiprintf_r+0x228>)
 8009cc8:	2203      	movs	r2, #3
 8009cca:	0028      	movs	r0, r5
 8009ccc:	7831      	ldrb	r1, [r6, #0]
 8009cce:	f7fe f8dd 	bl	8007e8c <memchr>
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d006      	beq.n	8009ce4 <_vfiprintf_r+0x178>
 8009cd6:	2340      	movs	r3, #64	; 0x40
 8009cd8:	1b40      	subs	r0, r0, r5
 8009cda:	4083      	lsls	r3, r0
 8009cdc:	6822      	ldr	r2, [r4, #0]
 8009cde:	3601      	adds	r6, #1
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	6023      	str	r3, [r4, #0]
 8009ce4:	7831      	ldrb	r1, [r6, #0]
 8009ce6:	2206      	movs	r2, #6
 8009ce8:	482b      	ldr	r0, [pc, #172]	; (8009d98 <_vfiprintf_r+0x22c>)
 8009cea:	1c75      	adds	r5, r6, #1
 8009cec:	7621      	strb	r1, [r4, #24]
 8009cee:	f7fe f8cd 	bl	8007e8c <memchr>
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d043      	beq.n	8009d7e <_vfiprintf_r+0x212>
 8009cf6:	4b29      	ldr	r3, [pc, #164]	; (8009d9c <_vfiprintf_r+0x230>)
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d125      	bne.n	8009d48 <_vfiprintf_r+0x1dc>
 8009cfc:	2207      	movs	r2, #7
 8009cfe:	9b07      	ldr	r3, [sp, #28]
 8009d00:	3307      	adds	r3, #7
 8009d02:	4393      	bics	r3, r2
 8009d04:	3308      	adds	r3, #8
 8009d06:	9307      	str	r3, [sp, #28]
 8009d08:	6963      	ldr	r3, [r4, #20]
 8009d0a:	9a04      	ldr	r2, [sp, #16]
 8009d0c:	189b      	adds	r3, r3, r2
 8009d0e:	6163      	str	r3, [r4, #20]
 8009d10:	e764      	b.n	8009bdc <_vfiprintf_r+0x70>
 8009d12:	4343      	muls	r3, r0
 8009d14:	002e      	movs	r6, r5
 8009d16:	2101      	movs	r1, #1
 8009d18:	189b      	adds	r3, r3, r2
 8009d1a:	e7a6      	b.n	8009c6a <_vfiprintf_r+0xfe>
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	425b      	negs	r3, r3
 8009d20:	e7d0      	b.n	8009cc4 <_vfiprintf_r+0x158>
 8009d22:	2300      	movs	r3, #0
 8009d24:	200a      	movs	r0, #10
 8009d26:	001a      	movs	r2, r3
 8009d28:	3601      	adds	r6, #1
 8009d2a:	6063      	str	r3, [r4, #4]
 8009d2c:	7831      	ldrb	r1, [r6, #0]
 8009d2e:	1c75      	adds	r5, r6, #1
 8009d30:	3930      	subs	r1, #48	; 0x30
 8009d32:	2909      	cmp	r1, #9
 8009d34:	d903      	bls.n	8009d3e <_vfiprintf_r+0x1d2>
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d0c5      	beq.n	8009cc6 <_vfiprintf_r+0x15a>
 8009d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d3c:	e7c3      	b.n	8009cc6 <_vfiprintf_r+0x15a>
 8009d3e:	4342      	muls	r2, r0
 8009d40:	002e      	movs	r6, r5
 8009d42:	2301      	movs	r3, #1
 8009d44:	1852      	adds	r2, r2, r1
 8009d46:	e7f1      	b.n	8009d2c <_vfiprintf_r+0x1c0>
 8009d48:	aa07      	add	r2, sp, #28
 8009d4a:	9200      	str	r2, [sp, #0]
 8009d4c:	0021      	movs	r1, r4
 8009d4e:	003a      	movs	r2, r7
 8009d50:	4b13      	ldr	r3, [pc, #76]	; (8009da0 <_vfiprintf_r+0x234>)
 8009d52:	9803      	ldr	r0, [sp, #12]
 8009d54:	f7fd fb20 	bl	8007398 <_printf_float>
 8009d58:	9004      	str	r0, [sp, #16]
 8009d5a:	9b04      	ldr	r3, [sp, #16]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	d1d3      	bne.n	8009d08 <_vfiprintf_r+0x19c>
 8009d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d62:	07db      	lsls	r3, r3, #31
 8009d64:	d405      	bmi.n	8009d72 <_vfiprintf_r+0x206>
 8009d66:	89bb      	ldrh	r3, [r7, #12]
 8009d68:	059b      	lsls	r3, r3, #22
 8009d6a:	d402      	bmi.n	8009d72 <_vfiprintf_r+0x206>
 8009d6c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009d6e:	f7fe f88c 	bl	8007e8a <__retarget_lock_release_recursive>
 8009d72:	89bb      	ldrh	r3, [r7, #12]
 8009d74:	065b      	lsls	r3, r3, #25
 8009d76:	d500      	bpl.n	8009d7a <_vfiprintf_r+0x20e>
 8009d78:	e71d      	b.n	8009bb6 <_vfiprintf_r+0x4a>
 8009d7a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009d7c:	e71d      	b.n	8009bba <_vfiprintf_r+0x4e>
 8009d7e:	aa07      	add	r2, sp, #28
 8009d80:	9200      	str	r2, [sp, #0]
 8009d82:	0021      	movs	r1, r4
 8009d84:	003a      	movs	r2, r7
 8009d86:	4b06      	ldr	r3, [pc, #24]	; (8009da0 <_vfiprintf_r+0x234>)
 8009d88:	9803      	ldr	r0, [sp, #12]
 8009d8a:	f7fd fdcb 	bl	8007924 <_printf_i>
 8009d8e:	e7e3      	b.n	8009d58 <_vfiprintf_r+0x1ec>
 8009d90:	0800a3cc 	.word	0x0800a3cc
 8009d94:	0800a3d2 	.word	0x0800a3d2
 8009d98:	0800a3d6 	.word	0x0800a3d6
 8009d9c:	08007399 	.word	0x08007399
 8009da0:	08009b49 	.word	0x08009b49

08009da4 <__swbuf_r>:
 8009da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da6:	0006      	movs	r6, r0
 8009da8:	000d      	movs	r5, r1
 8009daa:	0014      	movs	r4, r2
 8009dac:	2800      	cmp	r0, #0
 8009dae:	d004      	beq.n	8009dba <__swbuf_r+0x16>
 8009db0:	6a03      	ldr	r3, [r0, #32]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d101      	bne.n	8009dba <__swbuf_r+0x16>
 8009db6:	f7fd ff43 	bl	8007c40 <__sinit>
 8009dba:	69a3      	ldr	r3, [r4, #24]
 8009dbc:	60a3      	str	r3, [r4, #8]
 8009dbe:	89a3      	ldrh	r3, [r4, #12]
 8009dc0:	071b      	lsls	r3, r3, #28
 8009dc2:	d528      	bpl.n	8009e16 <__swbuf_r+0x72>
 8009dc4:	6923      	ldr	r3, [r4, #16]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d025      	beq.n	8009e16 <__swbuf_r+0x72>
 8009dca:	6923      	ldr	r3, [r4, #16]
 8009dcc:	6820      	ldr	r0, [r4, #0]
 8009dce:	b2ef      	uxtb	r7, r5
 8009dd0:	1ac0      	subs	r0, r0, r3
 8009dd2:	6963      	ldr	r3, [r4, #20]
 8009dd4:	b2ed      	uxtb	r5, r5
 8009dd6:	4283      	cmp	r3, r0
 8009dd8:	dc05      	bgt.n	8009de6 <__swbuf_r+0x42>
 8009dda:	0021      	movs	r1, r4
 8009ddc:	0030      	movs	r0, r6
 8009dde:	f7ff fd8b 	bl	80098f8 <_fflush_r>
 8009de2:	2800      	cmp	r0, #0
 8009de4:	d11d      	bne.n	8009e22 <__swbuf_r+0x7e>
 8009de6:	68a3      	ldr	r3, [r4, #8]
 8009de8:	3001      	adds	r0, #1
 8009dea:	3b01      	subs	r3, #1
 8009dec:	60a3      	str	r3, [r4, #8]
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	1c5a      	adds	r2, r3, #1
 8009df2:	6022      	str	r2, [r4, #0]
 8009df4:	701f      	strb	r7, [r3, #0]
 8009df6:	6963      	ldr	r3, [r4, #20]
 8009df8:	4283      	cmp	r3, r0
 8009dfa:	d004      	beq.n	8009e06 <__swbuf_r+0x62>
 8009dfc:	89a3      	ldrh	r3, [r4, #12]
 8009dfe:	07db      	lsls	r3, r3, #31
 8009e00:	d507      	bpl.n	8009e12 <__swbuf_r+0x6e>
 8009e02:	2d0a      	cmp	r5, #10
 8009e04:	d105      	bne.n	8009e12 <__swbuf_r+0x6e>
 8009e06:	0021      	movs	r1, r4
 8009e08:	0030      	movs	r0, r6
 8009e0a:	f7ff fd75 	bl	80098f8 <_fflush_r>
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	d107      	bne.n	8009e22 <__swbuf_r+0x7e>
 8009e12:	0028      	movs	r0, r5
 8009e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e16:	0021      	movs	r1, r4
 8009e18:	0030      	movs	r0, r6
 8009e1a:	f000 f805 	bl	8009e28 <__swsetup_r>
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	d0d3      	beq.n	8009dca <__swbuf_r+0x26>
 8009e22:	2501      	movs	r5, #1
 8009e24:	426d      	negs	r5, r5
 8009e26:	e7f4      	b.n	8009e12 <__swbuf_r+0x6e>

08009e28 <__swsetup_r>:
 8009e28:	4b30      	ldr	r3, [pc, #192]	; (8009eec <__swsetup_r+0xc4>)
 8009e2a:	b570      	push	{r4, r5, r6, lr}
 8009e2c:	0005      	movs	r5, r0
 8009e2e:	6818      	ldr	r0, [r3, #0]
 8009e30:	000c      	movs	r4, r1
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d004      	beq.n	8009e40 <__swsetup_r+0x18>
 8009e36:	6a03      	ldr	r3, [r0, #32]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d101      	bne.n	8009e40 <__swsetup_r+0x18>
 8009e3c:	f7fd ff00 	bl	8007c40 <__sinit>
 8009e40:	230c      	movs	r3, #12
 8009e42:	5ee2      	ldrsh	r2, [r4, r3]
 8009e44:	b293      	uxth	r3, r2
 8009e46:	0711      	lsls	r1, r2, #28
 8009e48:	d423      	bmi.n	8009e92 <__swsetup_r+0x6a>
 8009e4a:	06d9      	lsls	r1, r3, #27
 8009e4c:	d407      	bmi.n	8009e5e <__swsetup_r+0x36>
 8009e4e:	2309      	movs	r3, #9
 8009e50:	2001      	movs	r0, #1
 8009e52:	602b      	str	r3, [r5, #0]
 8009e54:	3337      	adds	r3, #55	; 0x37
 8009e56:	4313      	orrs	r3, r2
 8009e58:	81a3      	strh	r3, [r4, #12]
 8009e5a:	4240      	negs	r0, r0
 8009e5c:	bd70      	pop	{r4, r5, r6, pc}
 8009e5e:	075b      	lsls	r3, r3, #29
 8009e60:	d513      	bpl.n	8009e8a <__swsetup_r+0x62>
 8009e62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e64:	2900      	cmp	r1, #0
 8009e66:	d008      	beq.n	8009e7a <__swsetup_r+0x52>
 8009e68:	0023      	movs	r3, r4
 8009e6a:	3344      	adds	r3, #68	; 0x44
 8009e6c:	4299      	cmp	r1, r3
 8009e6e:	d002      	beq.n	8009e76 <__swsetup_r+0x4e>
 8009e70:	0028      	movs	r0, r5
 8009e72:	f7fe feb3 	bl	8008bdc <_free_r>
 8009e76:	2300      	movs	r3, #0
 8009e78:	6363      	str	r3, [r4, #52]	; 0x34
 8009e7a:	2224      	movs	r2, #36	; 0x24
 8009e7c:	89a3      	ldrh	r3, [r4, #12]
 8009e7e:	4393      	bics	r3, r2
 8009e80:	81a3      	strh	r3, [r4, #12]
 8009e82:	2300      	movs	r3, #0
 8009e84:	6063      	str	r3, [r4, #4]
 8009e86:	6923      	ldr	r3, [r4, #16]
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	2308      	movs	r3, #8
 8009e8c:	89a2      	ldrh	r2, [r4, #12]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	81a3      	strh	r3, [r4, #12]
 8009e92:	6923      	ldr	r3, [r4, #16]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10b      	bne.n	8009eb0 <__swsetup_r+0x88>
 8009e98:	21a0      	movs	r1, #160	; 0xa0
 8009e9a:	2280      	movs	r2, #128	; 0x80
 8009e9c:	89a3      	ldrh	r3, [r4, #12]
 8009e9e:	0089      	lsls	r1, r1, #2
 8009ea0:	0092      	lsls	r2, r2, #2
 8009ea2:	400b      	ands	r3, r1
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d003      	beq.n	8009eb0 <__swsetup_r+0x88>
 8009ea8:	0021      	movs	r1, r4
 8009eaa:	0028      	movs	r0, r5
 8009eac:	f000 f892 	bl	8009fd4 <__smakebuf_r>
 8009eb0:	220c      	movs	r2, #12
 8009eb2:	5ea3      	ldrsh	r3, [r4, r2]
 8009eb4:	2001      	movs	r0, #1
 8009eb6:	001a      	movs	r2, r3
 8009eb8:	b299      	uxth	r1, r3
 8009eba:	4002      	ands	r2, r0
 8009ebc:	4203      	tst	r3, r0
 8009ebe:	d00f      	beq.n	8009ee0 <__swsetup_r+0xb8>
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	60a2      	str	r2, [r4, #8]
 8009ec4:	6962      	ldr	r2, [r4, #20]
 8009ec6:	4252      	negs	r2, r2
 8009ec8:	61a2      	str	r2, [r4, #24]
 8009eca:	2000      	movs	r0, #0
 8009ecc:	6922      	ldr	r2, [r4, #16]
 8009ece:	4282      	cmp	r2, r0
 8009ed0:	d1c4      	bne.n	8009e5c <__swsetup_r+0x34>
 8009ed2:	0609      	lsls	r1, r1, #24
 8009ed4:	d5c2      	bpl.n	8009e5c <__swsetup_r+0x34>
 8009ed6:	2240      	movs	r2, #64	; 0x40
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	81a3      	strh	r3, [r4, #12]
 8009edc:	3801      	subs	r0, #1
 8009ede:	e7bd      	b.n	8009e5c <__swsetup_r+0x34>
 8009ee0:	0788      	lsls	r0, r1, #30
 8009ee2:	d400      	bmi.n	8009ee6 <__swsetup_r+0xbe>
 8009ee4:	6962      	ldr	r2, [r4, #20]
 8009ee6:	60a2      	str	r2, [r4, #8]
 8009ee8:	e7ef      	b.n	8009eca <__swsetup_r+0xa2>
 8009eea:	46c0      	nop			; (mov r8, r8)
 8009eec:	20000068 	.word	0x20000068

08009ef0 <_raise_r>:
 8009ef0:	b570      	push	{r4, r5, r6, lr}
 8009ef2:	0004      	movs	r4, r0
 8009ef4:	000d      	movs	r5, r1
 8009ef6:	291f      	cmp	r1, #31
 8009ef8:	d904      	bls.n	8009f04 <_raise_r+0x14>
 8009efa:	2316      	movs	r3, #22
 8009efc:	6003      	str	r3, [r0, #0]
 8009efe:	2001      	movs	r0, #1
 8009f00:	4240      	negs	r0, r0
 8009f02:	bd70      	pop	{r4, r5, r6, pc}
 8009f04:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d004      	beq.n	8009f14 <_raise_r+0x24>
 8009f0a:	008a      	lsls	r2, r1, #2
 8009f0c:	189b      	adds	r3, r3, r2
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	2a00      	cmp	r2, #0
 8009f12:	d108      	bne.n	8009f26 <_raise_r+0x36>
 8009f14:	0020      	movs	r0, r4
 8009f16:	f000 f831 	bl	8009f7c <_getpid_r>
 8009f1a:	002a      	movs	r2, r5
 8009f1c:	0001      	movs	r1, r0
 8009f1e:	0020      	movs	r0, r4
 8009f20:	f000 f81a 	bl	8009f58 <_kill_r>
 8009f24:	e7ed      	b.n	8009f02 <_raise_r+0x12>
 8009f26:	2000      	movs	r0, #0
 8009f28:	2a01      	cmp	r2, #1
 8009f2a:	d0ea      	beq.n	8009f02 <_raise_r+0x12>
 8009f2c:	1c51      	adds	r1, r2, #1
 8009f2e:	d103      	bne.n	8009f38 <_raise_r+0x48>
 8009f30:	2316      	movs	r3, #22
 8009f32:	3001      	adds	r0, #1
 8009f34:	6023      	str	r3, [r4, #0]
 8009f36:	e7e4      	b.n	8009f02 <_raise_r+0x12>
 8009f38:	2400      	movs	r4, #0
 8009f3a:	0028      	movs	r0, r5
 8009f3c:	601c      	str	r4, [r3, #0]
 8009f3e:	4790      	blx	r2
 8009f40:	0020      	movs	r0, r4
 8009f42:	e7de      	b.n	8009f02 <_raise_r+0x12>

08009f44 <raise>:
 8009f44:	b510      	push	{r4, lr}
 8009f46:	4b03      	ldr	r3, [pc, #12]	; (8009f54 <raise+0x10>)
 8009f48:	0001      	movs	r1, r0
 8009f4a:	6818      	ldr	r0, [r3, #0]
 8009f4c:	f7ff ffd0 	bl	8009ef0 <_raise_r>
 8009f50:	bd10      	pop	{r4, pc}
 8009f52:	46c0      	nop			; (mov r8, r8)
 8009f54:	20000068 	.word	0x20000068

08009f58 <_kill_r>:
 8009f58:	2300      	movs	r3, #0
 8009f5a:	b570      	push	{r4, r5, r6, lr}
 8009f5c:	4d06      	ldr	r5, [pc, #24]	; (8009f78 <_kill_r+0x20>)
 8009f5e:	0004      	movs	r4, r0
 8009f60:	0008      	movs	r0, r1
 8009f62:	0011      	movs	r1, r2
 8009f64:	602b      	str	r3, [r5, #0]
 8009f66:	f7f9 fe51 	bl	8003c0c <_kill>
 8009f6a:	1c43      	adds	r3, r0, #1
 8009f6c:	d103      	bne.n	8009f76 <_kill_r+0x1e>
 8009f6e:	682b      	ldr	r3, [r5, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d000      	beq.n	8009f76 <_kill_r+0x1e>
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	bd70      	pop	{r4, r5, r6, pc}
 8009f78:	200007e4 	.word	0x200007e4

08009f7c <_getpid_r>:
 8009f7c:	b510      	push	{r4, lr}
 8009f7e:	f7f9 fe3f 	bl	8003c00 <_getpid>
 8009f82:	bd10      	pop	{r4, pc}

08009f84 <__swhatbuf_r>:
 8009f84:	b570      	push	{r4, r5, r6, lr}
 8009f86:	000e      	movs	r6, r1
 8009f88:	001d      	movs	r5, r3
 8009f8a:	230e      	movs	r3, #14
 8009f8c:	5ec9      	ldrsh	r1, [r1, r3]
 8009f8e:	0014      	movs	r4, r2
 8009f90:	b096      	sub	sp, #88	; 0x58
 8009f92:	2900      	cmp	r1, #0
 8009f94:	da0c      	bge.n	8009fb0 <__swhatbuf_r+0x2c>
 8009f96:	89b2      	ldrh	r2, [r6, #12]
 8009f98:	2380      	movs	r3, #128	; 0x80
 8009f9a:	0011      	movs	r1, r2
 8009f9c:	4019      	ands	r1, r3
 8009f9e:	421a      	tst	r2, r3
 8009fa0:	d013      	beq.n	8009fca <__swhatbuf_r+0x46>
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	3b40      	subs	r3, #64	; 0x40
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	6029      	str	r1, [r5, #0]
 8009faa:	6023      	str	r3, [r4, #0]
 8009fac:	b016      	add	sp, #88	; 0x58
 8009fae:	bd70      	pop	{r4, r5, r6, pc}
 8009fb0:	466a      	mov	r2, sp
 8009fb2:	f000 f84d 	bl	800a050 <_fstat_r>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	dbed      	blt.n	8009f96 <__swhatbuf_r+0x12>
 8009fba:	23f0      	movs	r3, #240	; 0xf0
 8009fbc:	9901      	ldr	r1, [sp, #4]
 8009fbe:	021b      	lsls	r3, r3, #8
 8009fc0:	4019      	ands	r1, r3
 8009fc2:	4b03      	ldr	r3, [pc, #12]	; (8009fd0 <__swhatbuf_r+0x4c>)
 8009fc4:	18c9      	adds	r1, r1, r3
 8009fc6:	424b      	negs	r3, r1
 8009fc8:	4159      	adcs	r1, r3
 8009fca:	2380      	movs	r3, #128	; 0x80
 8009fcc:	00db      	lsls	r3, r3, #3
 8009fce:	e7ea      	b.n	8009fa6 <__swhatbuf_r+0x22>
 8009fd0:	ffffe000 	.word	0xffffe000

08009fd4 <__smakebuf_r>:
 8009fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fd6:	2602      	movs	r6, #2
 8009fd8:	898b      	ldrh	r3, [r1, #12]
 8009fda:	0005      	movs	r5, r0
 8009fdc:	000c      	movs	r4, r1
 8009fde:	4233      	tst	r3, r6
 8009fe0:	d006      	beq.n	8009ff0 <__smakebuf_r+0x1c>
 8009fe2:	0023      	movs	r3, r4
 8009fe4:	3347      	adds	r3, #71	; 0x47
 8009fe6:	6023      	str	r3, [r4, #0]
 8009fe8:	6123      	str	r3, [r4, #16]
 8009fea:	2301      	movs	r3, #1
 8009fec:	6163      	str	r3, [r4, #20]
 8009fee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009ff0:	466a      	mov	r2, sp
 8009ff2:	ab01      	add	r3, sp, #4
 8009ff4:	f7ff ffc6 	bl	8009f84 <__swhatbuf_r>
 8009ff8:	9900      	ldr	r1, [sp, #0]
 8009ffa:	0007      	movs	r7, r0
 8009ffc:	0028      	movs	r0, r5
 8009ffe:	f7fe fe63 	bl	8008cc8 <_malloc_r>
 800a002:	2800      	cmp	r0, #0
 800a004:	d108      	bne.n	800a018 <__smakebuf_r+0x44>
 800a006:	220c      	movs	r2, #12
 800a008:	5ea3      	ldrsh	r3, [r4, r2]
 800a00a:	059a      	lsls	r2, r3, #22
 800a00c:	d4ef      	bmi.n	8009fee <__smakebuf_r+0x1a>
 800a00e:	2203      	movs	r2, #3
 800a010:	4393      	bics	r3, r2
 800a012:	431e      	orrs	r6, r3
 800a014:	81a6      	strh	r6, [r4, #12]
 800a016:	e7e4      	b.n	8009fe2 <__smakebuf_r+0xe>
 800a018:	2380      	movs	r3, #128	; 0x80
 800a01a:	89a2      	ldrh	r2, [r4, #12]
 800a01c:	6020      	str	r0, [r4, #0]
 800a01e:	4313      	orrs	r3, r2
 800a020:	81a3      	strh	r3, [r4, #12]
 800a022:	9b00      	ldr	r3, [sp, #0]
 800a024:	6120      	str	r0, [r4, #16]
 800a026:	6163      	str	r3, [r4, #20]
 800a028:	9b01      	ldr	r3, [sp, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00c      	beq.n	800a048 <__smakebuf_r+0x74>
 800a02e:	0028      	movs	r0, r5
 800a030:	230e      	movs	r3, #14
 800a032:	5ee1      	ldrsh	r1, [r4, r3]
 800a034:	f000 f81e 	bl	800a074 <_isatty_r>
 800a038:	2800      	cmp	r0, #0
 800a03a:	d005      	beq.n	800a048 <__smakebuf_r+0x74>
 800a03c:	2303      	movs	r3, #3
 800a03e:	89a2      	ldrh	r2, [r4, #12]
 800a040:	439a      	bics	r2, r3
 800a042:	3b02      	subs	r3, #2
 800a044:	4313      	orrs	r3, r2
 800a046:	81a3      	strh	r3, [r4, #12]
 800a048:	89a3      	ldrh	r3, [r4, #12]
 800a04a:	433b      	orrs	r3, r7
 800a04c:	81a3      	strh	r3, [r4, #12]
 800a04e:	e7ce      	b.n	8009fee <__smakebuf_r+0x1a>

0800a050 <_fstat_r>:
 800a050:	2300      	movs	r3, #0
 800a052:	b570      	push	{r4, r5, r6, lr}
 800a054:	4d06      	ldr	r5, [pc, #24]	; (800a070 <_fstat_r+0x20>)
 800a056:	0004      	movs	r4, r0
 800a058:	0008      	movs	r0, r1
 800a05a:	0011      	movs	r1, r2
 800a05c:	602b      	str	r3, [r5, #0]
 800a05e:	f7f9 fe34 	bl	8003cca <_fstat>
 800a062:	1c43      	adds	r3, r0, #1
 800a064:	d103      	bne.n	800a06e <_fstat_r+0x1e>
 800a066:	682b      	ldr	r3, [r5, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d000      	beq.n	800a06e <_fstat_r+0x1e>
 800a06c:	6023      	str	r3, [r4, #0]
 800a06e:	bd70      	pop	{r4, r5, r6, pc}
 800a070:	200007e4 	.word	0x200007e4

0800a074 <_isatty_r>:
 800a074:	2300      	movs	r3, #0
 800a076:	b570      	push	{r4, r5, r6, lr}
 800a078:	4d06      	ldr	r5, [pc, #24]	; (800a094 <_isatty_r+0x20>)
 800a07a:	0004      	movs	r4, r0
 800a07c:	0008      	movs	r0, r1
 800a07e:	602b      	str	r3, [r5, #0]
 800a080:	f7f9 fe31 	bl	8003ce6 <_isatty>
 800a084:	1c43      	adds	r3, r0, #1
 800a086:	d103      	bne.n	800a090 <_isatty_r+0x1c>
 800a088:	682b      	ldr	r3, [r5, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d000      	beq.n	800a090 <_isatty_r+0x1c>
 800a08e:	6023      	str	r3, [r4, #0]
 800a090:	bd70      	pop	{r4, r5, r6, pc}
 800a092:	46c0      	nop			; (mov r8, r8)
 800a094:	200007e4 	.word	0x200007e4

0800a098 <_init>:
 800a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09a:	46c0      	nop			; (mov r8, r8)
 800a09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a09e:	bc08      	pop	{r3}
 800a0a0:	469e      	mov	lr, r3
 800a0a2:	4770      	bx	lr

0800a0a4 <_fini>:
 800a0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a6:	46c0      	nop			; (mov r8, r8)
 800a0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0aa:	bc08      	pop	{r3}
 800a0ac:	469e      	mov	lr, r3
 800a0ae:	4770      	bx	lr
