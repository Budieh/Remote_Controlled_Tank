
Tank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006734  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080067f4  080067f4  000167f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006968  08006968  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006968  08006968  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006968  08006968  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006968  08006968  00016968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800696c  0800696c  0001696c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  20000060  080069d0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  080069d0  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ceff  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001baf  00000000  00000000  0002cfca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  0002eb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000980  00000000  00000000  0002f780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010f79  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e642  00000000  00000000  00041079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000692a2  00000000  00000000  0004f6bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000321c  00000000  00000000  000b8960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000bbb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080067dc 	.word	0x080067dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	080067dc 	.word	0x080067dc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_f2uiz>:
 8000244:	219e      	movs	r1, #158	; 0x9e
 8000246:	b510      	push	{r4, lr}
 8000248:	05c9      	lsls	r1, r1, #23
 800024a:	1c04      	adds	r4, r0, #0
 800024c:	f000 fea4 	bl	8000f98 <__aeabi_fcmpge>
 8000250:	2800      	cmp	r0, #0
 8000252:	d103      	bne.n	800025c <__aeabi_f2uiz+0x18>
 8000254:	1c20      	adds	r0, r4, #0
 8000256:	f000 fdb5 	bl	8000dc4 <__aeabi_f2iz>
 800025a:	bd10      	pop	{r4, pc}
 800025c:	219e      	movs	r1, #158	; 0x9e
 800025e:	1c20      	adds	r0, r4, #0
 8000260:	05c9      	lsls	r1, r1, #23
 8000262:	f000 fc0f 	bl	8000a84 <__aeabi_fsub>
 8000266:	f000 fdad 	bl	8000dc4 <__aeabi_f2iz>
 800026a:	2380      	movs	r3, #128	; 0x80
 800026c:	061b      	lsls	r3, r3, #24
 800026e:	469c      	mov	ip, r3
 8000270:	4460      	add	r0, ip
 8000272:	e7f2      	b.n	800025a <__aeabi_f2uiz+0x16>

08000274 <__aeabi_fadd>:
 8000274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000276:	4647      	mov	r7, r8
 8000278:	46ce      	mov	lr, r9
 800027a:	024a      	lsls	r2, r1, #9
 800027c:	0243      	lsls	r3, r0, #9
 800027e:	0045      	lsls	r5, r0, #1
 8000280:	0fc4      	lsrs	r4, r0, #31
 8000282:	0a50      	lsrs	r0, r2, #9
 8000284:	4680      	mov	r8, r0
 8000286:	0048      	lsls	r0, r1, #1
 8000288:	0a5b      	lsrs	r3, r3, #9
 800028a:	0e00      	lsrs	r0, r0, #24
 800028c:	0992      	lsrs	r2, r2, #6
 800028e:	4694      	mov	ip, r2
 8000290:	b580      	push	{r7, lr}
 8000292:	001e      	movs	r6, r3
 8000294:	4681      	mov	r9, r0
 8000296:	0002      	movs	r2, r0
 8000298:	0e2d      	lsrs	r5, r5, #24
 800029a:	00df      	lsls	r7, r3, #3
 800029c:	0fc9      	lsrs	r1, r1, #31
 800029e:	428c      	cmp	r4, r1
 80002a0:	d024      	beq.n	80002ec <__aeabi_fadd+0x78>
 80002a2:	1a28      	subs	r0, r5, r0
 80002a4:	2800      	cmp	r0, #0
 80002a6:	dd0e      	ble.n	80002c6 <__aeabi_fadd+0x52>
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	d13e      	bne.n	800032a <__aeabi_fadd+0xb6>
 80002ac:	4662      	mov	r2, ip
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d100      	bne.n	80002b4 <__aeabi_fadd+0x40>
 80002b2:	e0fd      	b.n	80004b0 <__aeabi_fadd+0x23c>
 80002b4:	1e42      	subs	r2, r0, #1
 80002b6:	2801      	cmp	r0, #1
 80002b8:	d100      	bne.n	80002bc <__aeabi_fadd+0x48>
 80002ba:	e137      	b.n	800052c <__aeabi_fadd+0x2b8>
 80002bc:	28ff      	cmp	r0, #255	; 0xff
 80002be:	d100      	bne.n	80002c2 <__aeabi_fadd+0x4e>
 80002c0:	e0a9      	b.n	8000416 <__aeabi_fadd+0x1a2>
 80002c2:	0010      	movs	r0, r2
 80002c4:	e039      	b.n	800033a <__aeabi_fadd+0xc6>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	d063      	beq.n	8000392 <__aeabi_fadd+0x11e>
 80002ca:	464b      	mov	r3, r9
 80002cc:	1b52      	subs	r2, r2, r5
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d000      	beq.n	80002d4 <__aeabi_fadd+0x60>
 80002d2:	e0e0      	b.n	8000496 <__aeabi_fadd+0x222>
 80002d4:	2f00      	cmp	r7, #0
 80002d6:	d100      	bne.n	80002da <__aeabi_fadd+0x66>
 80002d8:	e0ce      	b.n	8000478 <__aeabi_fadd+0x204>
 80002da:	1e53      	subs	r3, r2, #1
 80002dc:	2a01      	cmp	r2, #1
 80002de:	d100      	bne.n	80002e2 <__aeabi_fadd+0x6e>
 80002e0:	e155      	b.n	800058e <__aeabi_fadd+0x31a>
 80002e2:	2aff      	cmp	r2, #255	; 0xff
 80002e4:	d100      	bne.n	80002e8 <__aeabi_fadd+0x74>
 80002e6:	e094      	b.n	8000412 <__aeabi_fadd+0x19e>
 80002e8:	001a      	movs	r2, r3
 80002ea:	e0d9      	b.n	80004a0 <__aeabi_fadd+0x22c>
 80002ec:	1a2a      	subs	r2, r5, r0
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	dc00      	bgt.n	80002f4 <__aeabi_fadd+0x80>
 80002f2:	e099      	b.n	8000428 <__aeabi_fadd+0x1b4>
 80002f4:	2800      	cmp	r0, #0
 80002f6:	d062      	beq.n	80003be <__aeabi_fadd+0x14a>
 80002f8:	2dff      	cmp	r5, #255	; 0xff
 80002fa:	d100      	bne.n	80002fe <__aeabi_fadd+0x8a>
 80002fc:	e08b      	b.n	8000416 <__aeabi_fadd+0x1a2>
 80002fe:	2380      	movs	r3, #128	; 0x80
 8000300:	4661      	mov	r1, ip
 8000302:	04db      	lsls	r3, r3, #19
 8000304:	4319      	orrs	r1, r3
 8000306:	468c      	mov	ip, r1
 8000308:	2a1b      	cmp	r2, #27
 800030a:	dc00      	bgt.n	800030e <__aeabi_fadd+0x9a>
 800030c:	e0d2      	b.n	80004b4 <__aeabi_fadd+0x240>
 800030e:	2301      	movs	r3, #1
 8000310:	19db      	adds	r3, r3, r7
 8000312:	015a      	lsls	r2, r3, #5
 8000314:	d56a      	bpl.n	80003ec <__aeabi_fadd+0x178>
 8000316:	3501      	adds	r5, #1
 8000318:	2dff      	cmp	r5, #255	; 0xff
 800031a:	d05b      	beq.n	80003d4 <__aeabi_fadd+0x160>
 800031c:	2201      	movs	r2, #1
 800031e:	49a3      	ldr	r1, [pc, #652]	; (80005ac <__aeabi_fadd+0x338>)
 8000320:	401a      	ands	r2, r3
 8000322:	085b      	lsrs	r3, r3, #1
 8000324:	400b      	ands	r3, r1
 8000326:	4313      	orrs	r3, r2
 8000328:	e01c      	b.n	8000364 <__aeabi_fadd+0xf0>
 800032a:	2dff      	cmp	r5, #255	; 0xff
 800032c:	d100      	bne.n	8000330 <__aeabi_fadd+0xbc>
 800032e:	e072      	b.n	8000416 <__aeabi_fadd+0x1a2>
 8000330:	2380      	movs	r3, #128	; 0x80
 8000332:	4662      	mov	r2, ip
 8000334:	04db      	lsls	r3, r3, #19
 8000336:	431a      	orrs	r2, r3
 8000338:	4694      	mov	ip, r2
 800033a:	281b      	cmp	r0, #27
 800033c:	dc00      	bgt.n	8000340 <__aeabi_fadd+0xcc>
 800033e:	e090      	b.n	8000462 <__aeabi_fadd+0x1ee>
 8000340:	2301      	movs	r3, #1
 8000342:	1afb      	subs	r3, r7, r3
 8000344:	015a      	lsls	r2, r3, #5
 8000346:	d551      	bpl.n	80003ec <__aeabi_fadd+0x178>
 8000348:	019b      	lsls	r3, r3, #6
 800034a:	099e      	lsrs	r6, r3, #6
 800034c:	0030      	movs	r0, r6
 800034e:	f000 fe2d 	bl	8000fac <__clzsi2>
 8000352:	0033      	movs	r3, r6
 8000354:	3805      	subs	r0, #5
 8000356:	4083      	lsls	r3, r0
 8000358:	4285      	cmp	r5, r0
 800035a:	dc00      	bgt.n	800035e <__aeabi_fadd+0xea>
 800035c:	e075      	b.n	800044a <__aeabi_fadd+0x1d6>
 800035e:	4a94      	ldr	r2, [pc, #592]	; (80005b0 <__aeabi_fadd+0x33c>)
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	4013      	ands	r3, r2
 8000364:	075a      	lsls	r2, r3, #29
 8000366:	d004      	beq.n	8000372 <__aeabi_fadd+0xfe>
 8000368:	220f      	movs	r2, #15
 800036a:	401a      	ands	r2, r3
 800036c:	2a04      	cmp	r2, #4
 800036e:	d000      	beq.n	8000372 <__aeabi_fadd+0xfe>
 8000370:	3304      	adds	r3, #4
 8000372:	015a      	lsls	r2, r3, #5
 8000374:	d53c      	bpl.n	80003f0 <__aeabi_fadd+0x17c>
 8000376:	1c68      	adds	r0, r5, #1
 8000378:	2dfe      	cmp	r5, #254	; 0xfe
 800037a:	d02b      	beq.n	80003d4 <__aeabi_fadd+0x160>
 800037c:	019b      	lsls	r3, r3, #6
 800037e:	0a5e      	lsrs	r6, r3, #9
 8000380:	b2c0      	uxtb	r0, r0
 8000382:	05c0      	lsls	r0, r0, #23
 8000384:	4330      	orrs	r0, r6
 8000386:	07e4      	lsls	r4, r4, #31
 8000388:	4320      	orrs	r0, r4
 800038a:	bcc0      	pop	{r6, r7}
 800038c:	46b9      	mov	r9, r7
 800038e:	46b0      	mov	r8, r6
 8000390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000392:	20fe      	movs	r0, #254	; 0xfe
 8000394:	1c6a      	adds	r2, r5, #1
 8000396:	4210      	tst	r0, r2
 8000398:	d172      	bne.n	8000480 <__aeabi_fadd+0x20c>
 800039a:	2d00      	cmp	r5, #0
 800039c:	d000      	beq.n	80003a0 <__aeabi_fadd+0x12c>
 800039e:	e0ae      	b.n	80004fe <__aeabi_fadd+0x28a>
 80003a0:	2f00      	cmp	r7, #0
 80003a2:	d100      	bne.n	80003a6 <__aeabi_fadd+0x132>
 80003a4:	e0ec      	b.n	8000580 <__aeabi_fadd+0x30c>
 80003a6:	4663      	mov	r3, ip
 80003a8:	2000      	movs	r0, #0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d0e9      	beq.n	8000382 <__aeabi_fadd+0x10e>
 80003ae:	1afb      	subs	r3, r7, r3
 80003b0:	015a      	lsls	r2, r3, #5
 80003b2:	d400      	bmi.n	80003b6 <__aeabi_fadd+0x142>
 80003b4:	e0f3      	b.n	800059e <__aeabi_fadd+0x32a>
 80003b6:	4663      	mov	r3, ip
 80003b8:	000c      	movs	r4, r1
 80003ba:	1bdb      	subs	r3, r3, r7
 80003bc:	e7d2      	b.n	8000364 <__aeabi_fadd+0xf0>
 80003be:	4661      	mov	r1, ip
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d05b      	beq.n	800047c <__aeabi_fadd+0x208>
 80003c4:	1e51      	subs	r1, r2, #1
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	d100      	bne.n	80003cc <__aeabi_fadd+0x158>
 80003ca:	e0a7      	b.n	800051c <__aeabi_fadd+0x2a8>
 80003cc:	2aff      	cmp	r2, #255	; 0xff
 80003ce:	d022      	beq.n	8000416 <__aeabi_fadd+0x1a2>
 80003d0:	000a      	movs	r2, r1
 80003d2:	e799      	b.n	8000308 <__aeabi_fadd+0x94>
 80003d4:	20ff      	movs	r0, #255	; 0xff
 80003d6:	2600      	movs	r6, #0
 80003d8:	e7d3      	b.n	8000382 <__aeabi_fadd+0x10e>
 80003da:	21fe      	movs	r1, #254	; 0xfe
 80003dc:	1c6a      	adds	r2, r5, #1
 80003de:	4211      	tst	r1, r2
 80003e0:	d073      	beq.n	80004ca <__aeabi_fadd+0x256>
 80003e2:	2aff      	cmp	r2, #255	; 0xff
 80003e4:	d0f6      	beq.n	80003d4 <__aeabi_fadd+0x160>
 80003e6:	0015      	movs	r5, r2
 80003e8:	4467      	add	r7, ip
 80003ea:	087b      	lsrs	r3, r7, #1
 80003ec:	075a      	lsls	r2, r3, #29
 80003ee:	d1bb      	bne.n	8000368 <__aeabi_fadd+0xf4>
 80003f0:	08db      	lsrs	r3, r3, #3
 80003f2:	2dff      	cmp	r5, #255	; 0xff
 80003f4:	d00f      	beq.n	8000416 <__aeabi_fadd+0x1a2>
 80003f6:	025b      	lsls	r3, r3, #9
 80003f8:	0a5e      	lsrs	r6, r3, #9
 80003fa:	b2e8      	uxtb	r0, r5
 80003fc:	e7c1      	b.n	8000382 <__aeabi_fadd+0x10e>
 80003fe:	4662      	mov	r2, ip
 8000400:	2a00      	cmp	r2, #0
 8000402:	d008      	beq.n	8000416 <__aeabi_fadd+0x1a2>
 8000404:	2280      	movs	r2, #128	; 0x80
 8000406:	03d2      	lsls	r2, r2, #15
 8000408:	4213      	tst	r3, r2
 800040a:	d004      	beq.n	8000416 <__aeabi_fadd+0x1a2>
 800040c:	4640      	mov	r0, r8
 800040e:	4210      	tst	r0, r2
 8000410:	d101      	bne.n	8000416 <__aeabi_fadd+0x1a2>
 8000412:	000c      	movs	r4, r1
 8000414:	4643      	mov	r3, r8
 8000416:	2b00      	cmp	r3, #0
 8000418:	d0dc      	beq.n	80003d4 <__aeabi_fadd+0x160>
 800041a:	2680      	movs	r6, #128	; 0x80
 800041c:	03f6      	lsls	r6, r6, #15
 800041e:	431e      	orrs	r6, r3
 8000420:	0276      	lsls	r6, r6, #9
 8000422:	20ff      	movs	r0, #255	; 0xff
 8000424:	0a76      	lsrs	r6, r6, #9
 8000426:	e7ac      	b.n	8000382 <__aeabi_fadd+0x10e>
 8000428:	2a00      	cmp	r2, #0
 800042a:	d0d6      	beq.n	80003da <__aeabi_fadd+0x166>
 800042c:	1b42      	subs	r2, r0, r5
 800042e:	2d00      	cmp	r5, #0
 8000430:	d05c      	beq.n	80004ec <__aeabi_fadd+0x278>
 8000432:	28ff      	cmp	r0, #255	; 0xff
 8000434:	d0ee      	beq.n	8000414 <__aeabi_fadd+0x1a0>
 8000436:	2380      	movs	r3, #128	; 0x80
 8000438:	04db      	lsls	r3, r3, #19
 800043a:	431f      	orrs	r7, r3
 800043c:	2a1b      	cmp	r2, #27
 800043e:	dc00      	bgt.n	8000442 <__aeabi_fadd+0x1ce>
 8000440:	e082      	b.n	8000548 <__aeabi_fadd+0x2d4>
 8000442:	2301      	movs	r3, #1
 8000444:	464d      	mov	r5, r9
 8000446:	4463      	add	r3, ip
 8000448:	e763      	b.n	8000312 <__aeabi_fadd+0x9e>
 800044a:	2220      	movs	r2, #32
 800044c:	1b40      	subs	r0, r0, r5
 800044e:	3001      	adds	r0, #1
 8000450:	1a12      	subs	r2, r2, r0
 8000452:	0019      	movs	r1, r3
 8000454:	4093      	lsls	r3, r2
 8000456:	40c1      	lsrs	r1, r0
 8000458:	1e5a      	subs	r2, r3, #1
 800045a:	4193      	sbcs	r3, r2
 800045c:	2500      	movs	r5, #0
 800045e:	430b      	orrs	r3, r1
 8000460:	e780      	b.n	8000364 <__aeabi_fadd+0xf0>
 8000462:	2320      	movs	r3, #32
 8000464:	4661      	mov	r1, ip
 8000466:	1a1b      	subs	r3, r3, r0
 8000468:	4099      	lsls	r1, r3
 800046a:	4662      	mov	r2, ip
 800046c:	000b      	movs	r3, r1
 800046e:	40c2      	lsrs	r2, r0
 8000470:	1e59      	subs	r1, r3, #1
 8000472:	418b      	sbcs	r3, r1
 8000474:	4313      	orrs	r3, r2
 8000476:	e764      	b.n	8000342 <__aeabi_fadd+0xce>
 8000478:	000c      	movs	r4, r1
 800047a:	4643      	mov	r3, r8
 800047c:	0015      	movs	r5, r2
 800047e:	e7b8      	b.n	80003f2 <__aeabi_fadd+0x17e>
 8000480:	4663      	mov	r3, ip
 8000482:	1afe      	subs	r6, r7, r3
 8000484:	0173      	lsls	r3, r6, #5
 8000486:	d445      	bmi.n	8000514 <__aeabi_fadd+0x2a0>
 8000488:	2e00      	cmp	r6, #0
 800048a:	d000      	beq.n	800048e <__aeabi_fadd+0x21a>
 800048c:	e75e      	b.n	800034c <__aeabi_fadd+0xd8>
 800048e:	2400      	movs	r4, #0
 8000490:	2000      	movs	r0, #0
 8000492:	2600      	movs	r6, #0
 8000494:	e775      	b.n	8000382 <__aeabi_fadd+0x10e>
 8000496:	2bff      	cmp	r3, #255	; 0xff
 8000498:	d0bb      	beq.n	8000412 <__aeabi_fadd+0x19e>
 800049a:	2380      	movs	r3, #128	; 0x80
 800049c:	04db      	lsls	r3, r3, #19
 800049e:	431f      	orrs	r7, r3
 80004a0:	2a1b      	cmp	r2, #27
 80004a2:	dd47      	ble.n	8000534 <__aeabi_fadd+0x2c0>
 80004a4:	2301      	movs	r3, #1
 80004a6:	4662      	mov	r2, ip
 80004a8:	000c      	movs	r4, r1
 80004aa:	464d      	mov	r5, r9
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	e749      	b.n	8000344 <__aeabi_fadd+0xd0>
 80004b0:	0005      	movs	r5, r0
 80004b2:	e79e      	b.n	80003f2 <__aeabi_fadd+0x17e>
 80004b4:	4661      	mov	r1, ip
 80004b6:	2320      	movs	r3, #32
 80004b8:	40d1      	lsrs	r1, r2
 80004ba:	1a9b      	subs	r3, r3, r2
 80004bc:	4662      	mov	r2, ip
 80004be:	409a      	lsls	r2, r3
 80004c0:	0013      	movs	r3, r2
 80004c2:	1e5a      	subs	r2, r3, #1
 80004c4:	4193      	sbcs	r3, r2
 80004c6:	430b      	orrs	r3, r1
 80004c8:	e722      	b.n	8000310 <__aeabi_fadd+0x9c>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	d146      	bne.n	800055c <__aeabi_fadd+0x2e8>
 80004ce:	2f00      	cmp	r7, #0
 80004d0:	d062      	beq.n	8000598 <__aeabi_fadd+0x324>
 80004d2:	4663      	mov	r3, ip
 80004d4:	2000      	movs	r0, #0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d100      	bne.n	80004dc <__aeabi_fadd+0x268>
 80004da:	e752      	b.n	8000382 <__aeabi_fadd+0x10e>
 80004dc:	003b      	movs	r3, r7
 80004de:	4463      	add	r3, ip
 80004e0:	015a      	lsls	r2, r3, #5
 80004e2:	d583      	bpl.n	80003ec <__aeabi_fadd+0x178>
 80004e4:	4a32      	ldr	r2, [pc, #200]	; (80005b0 <__aeabi_fadd+0x33c>)
 80004e6:	3501      	adds	r5, #1
 80004e8:	4013      	ands	r3, r2
 80004ea:	e77f      	b.n	80003ec <__aeabi_fadd+0x178>
 80004ec:	2f00      	cmp	r7, #0
 80004ee:	d0c4      	beq.n	800047a <__aeabi_fadd+0x206>
 80004f0:	1e53      	subs	r3, r2, #1
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	d012      	beq.n	800051c <__aeabi_fadd+0x2a8>
 80004f6:	2aff      	cmp	r2, #255	; 0xff
 80004f8:	d08c      	beq.n	8000414 <__aeabi_fadd+0x1a0>
 80004fa:	001a      	movs	r2, r3
 80004fc:	e79e      	b.n	800043c <__aeabi_fadd+0x1c8>
 80004fe:	2f00      	cmp	r7, #0
 8000500:	d000      	beq.n	8000504 <__aeabi_fadd+0x290>
 8000502:	e77c      	b.n	80003fe <__aeabi_fadd+0x18a>
 8000504:	4663      	mov	r3, ip
 8000506:	2b00      	cmp	r3, #0
 8000508:	d183      	bne.n	8000412 <__aeabi_fadd+0x19e>
 800050a:	2680      	movs	r6, #128	; 0x80
 800050c:	2400      	movs	r4, #0
 800050e:	20ff      	movs	r0, #255	; 0xff
 8000510:	03f6      	lsls	r6, r6, #15
 8000512:	e736      	b.n	8000382 <__aeabi_fadd+0x10e>
 8000514:	4663      	mov	r3, ip
 8000516:	000c      	movs	r4, r1
 8000518:	1bde      	subs	r6, r3, r7
 800051a:	e717      	b.n	800034c <__aeabi_fadd+0xd8>
 800051c:	003b      	movs	r3, r7
 800051e:	4463      	add	r3, ip
 8000520:	2501      	movs	r5, #1
 8000522:	015a      	lsls	r2, r3, #5
 8000524:	d400      	bmi.n	8000528 <__aeabi_fadd+0x2b4>
 8000526:	e761      	b.n	80003ec <__aeabi_fadd+0x178>
 8000528:	2502      	movs	r5, #2
 800052a:	e6f7      	b.n	800031c <__aeabi_fadd+0xa8>
 800052c:	4663      	mov	r3, ip
 800052e:	2501      	movs	r5, #1
 8000530:	1afb      	subs	r3, r7, r3
 8000532:	e707      	b.n	8000344 <__aeabi_fadd+0xd0>
 8000534:	2320      	movs	r3, #32
 8000536:	1a9b      	subs	r3, r3, r2
 8000538:	0038      	movs	r0, r7
 800053a:	409f      	lsls	r7, r3
 800053c:	003b      	movs	r3, r7
 800053e:	40d0      	lsrs	r0, r2
 8000540:	1e5a      	subs	r2, r3, #1
 8000542:	4193      	sbcs	r3, r2
 8000544:	4303      	orrs	r3, r0
 8000546:	e7ae      	b.n	80004a6 <__aeabi_fadd+0x232>
 8000548:	2320      	movs	r3, #32
 800054a:	1a9b      	subs	r3, r3, r2
 800054c:	0039      	movs	r1, r7
 800054e:	409f      	lsls	r7, r3
 8000550:	003b      	movs	r3, r7
 8000552:	40d1      	lsrs	r1, r2
 8000554:	1e5a      	subs	r2, r3, #1
 8000556:	4193      	sbcs	r3, r2
 8000558:	430b      	orrs	r3, r1
 800055a:	e773      	b.n	8000444 <__aeabi_fadd+0x1d0>
 800055c:	2f00      	cmp	r7, #0
 800055e:	d100      	bne.n	8000562 <__aeabi_fadd+0x2ee>
 8000560:	e758      	b.n	8000414 <__aeabi_fadd+0x1a0>
 8000562:	4662      	mov	r2, ip
 8000564:	2a00      	cmp	r2, #0
 8000566:	d100      	bne.n	800056a <__aeabi_fadd+0x2f6>
 8000568:	e755      	b.n	8000416 <__aeabi_fadd+0x1a2>
 800056a:	2280      	movs	r2, #128	; 0x80
 800056c:	03d2      	lsls	r2, r2, #15
 800056e:	4213      	tst	r3, r2
 8000570:	d100      	bne.n	8000574 <__aeabi_fadd+0x300>
 8000572:	e750      	b.n	8000416 <__aeabi_fadd+0x1a2>
 8000574:	4641      	mov	r1, r8
 8000576:	4211      	tst	r1, r2
 8000578:	d000      	beq.n	800057c <__aeabi_fadd+0x308>
 800057a:	e74c      	b.n	8000416 <__aeabi_fadd+0x1a2>
 800057c:	4643      	mov	r3, r8
 800057e:	e74a      	b.n	8000416 <__aeabi_fadd+0x1a2>
 8000580:	4663      	mov	r3, ip
 8000582:	2b00      	cmp	r3, #0
 8000584:	d083      	beq.n	800048e <__aeabi_fadd+0x21a>
 8000586:	000c      	movs	r4, r1
 8000588:	4646      	mov	r6, r8
 800058a:	2000      	movs	r0, #0
 800058c:	e6f9      	b.n	8000382 <__aeabi_fadd+0x10e>
 800058e:	4663      	mov	r3, ip
 8000590:	000c      	movs	r4, r1
 8000592:	1bdb      	subs	r3, r3, r7
 8000594:	3501      	adds	r5, #1
 8000596:	e6d5      	b.n	8000344 <__aeabi_fadd+0xd0>
 8000598:	4646      	mov	r6, r8
 800059a:	2000      	movs	r0, #0
 800059c:	e6f1      	b.n	8000382 <__aeabi_fadd+0x10e>
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d000      	beq.n	80005a4 <__aeabi_fadd+0x330>
 80005a2:	e723      	b.n	80003ec <__aeabi_fadd+0x178>
 80005a4:	2400      	movs	r4, #0
 80005a6:	2600      	movs	r6, #0
 80005a8:	e6eb      	b.n	8000382 <__aeabi_fadd+0x10e>
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	7dffffff 	.word	0x7dffffff
 80005b0:	fbffffff 	.word	0xfbffffff

080005b4 <__aeabi_fdiv>:
 80005b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b6:	464f      	mov	r7, r9
 80005b8:	4646      	mov	r6, r8
 80005ba:	46d6      	mov	lr, sl
 80005bc:	0245      	lsls	r5, r0, #9
 80005be:	b5c0      	push	{r6, r7, lr}
 80005c0:	0047      	lsls	r7, r0, #1
 80005c2:	1c0c      	adds	r4, r1, #0
 80005c4:	0a6d      	lsrs	r5, r5, #9
 80005c6:	0e3f      	lsrs	r7, r7, #24
 80005c8:	0fc6      	lsrs	r6, r0, #31
 80005ca:	2f00      	cmp	r7, #0
 80005cc:	d100      	bne.n	80005d0 <__aeabi_fdiv+0x1c>
 80005ce:	e06f      	b.n	80006b0 <__aeabi_fdiv+0xfc>
 80005d0:	2fff      	cmp	r7, #255	; 0xff
 80005d2:	d100      	bne.n	80005d6 <__aeabi_fdiv+0x22>
 80005d4:	e074      	b.n	80006c0 <__aeabi_fdiv+0x10c>
 80005d6:	2300      	movs	r3, #0
 80005d8:	2280      	movs	r2, #128	; 0x80
 80005da:	4699      	mov	r9, r3
 80005dc:	469a      	mov	sl, r3
 80005de:	00ed      	lsls	r5, r5, #3
 80005e0:	04d2      	lsls	r2, r2, #19
 80005e2:	4315      	orrs	r5, r2
 80005e4:	3f7f      	subs	r7, #127	; 0x7f
 80005e6:	0263      	lsls	r3, r4, #9
 80005e8:	0a5b      	lsrs	r3, r3, #9
 80005ea:	4698      	mov	r8, r3
 80005ec:	0063      	lsls	r3, r4, #1
 80005ee:	0e1b      	lsrs	r3, r3, #24
 80005f0:	0fe4      	lsrs	r4, r4, #31
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d04d      	beq.n	8000692 <__aeabi_fdiv+0xde>
 80005f6:	2bff      	cmp	r3, #255	; 0xff
 80005f8:	d045      	beq.n	8000686 <__aeabi_fdiv+0xd2>
 80005fa:	4642      	mov	r2, r8
 80005fc:	2180      	movs	r1, #128	; 0x80
 80005fe:	00d2      	lsls	r2, r2, #3
 8000600:	04c9      	lsls	r1, r1, #19
 8000602:	4311      	orrs	r1, r2
 8000604:	4688      	mov	r8, r1
 8000606:	2200      	movs	r2, #0
 8000608:	3b7f      	subs	r3, #127	; 0x7f
 800060a:	0031      	movs	r1, r6
 800060c:	1aff      	subs	r7, r7, r3
 800060e:	464b      	mov	r3, r9
 8000610:	4061      	eors	r1, r4
 8000612:	b2c9      	uxtb	r1, r1
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d900      	bls.n	800061a <__aeabi_fdiv+0x66>
 8000618:	e0b8      	b.n	800078c <__aeabi_fdiv+0x1d8>
 800061a:	4870      	ldr	r0, [pc, #448]	; (80007dc <__aeabi_fdiv+0x228>)
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	58c3      	ldr	r3, [r0, r3]
 8000620:	469f      	mov	pc, r3
 8000622:	2300      	movs	r3, #0
 8000624:	4698      	mov	r8, r3
 8000626:	0026      	movs	r6, r4
 8000628:	4645      	mov	r5, r8
 800062a:	4692      	mov	sl, r2
 800062c:	4653      	mov	r3, sl
 800062e:	2b02      	cmp	r3, #2
 8000630:	d100      	bne.n	8000634 <__aeabi_fdiv+0x80>
 8000632:	e08d      	b.n	8000750 <__aeabi_fdiv+0x19c>
 8000634:	2b03      	cmp	r3, #3
 8000636:	d100      	bne.n	800063a <__aeabi_fdiv+0x86>
 8000638:	e0a1      	b.n	800077e <__aeabi_fdiv+0x1ca>
 800063a:	2b01      	cmp	r3, #1
 800063c:	d018      	beq.n	8000670 <__aeabi_fdiv+0xbc>
 800063e:	003b      	movs	r3, r7
 8000640:	337f      	adds	r3, #127	; 0x7f
 8000642:	2b00      	cmp	r3, #0
 8000644:	dd6d      	ble.n	8000722 <__aeabi_fdiv+0x16e>
 8000646:	076a      	lsls	r2, r5, #29
 8000648:	d004      	beq.n	8000654 <__aeabi_fdiv+0xa0>
 800064a:	220f      	movs	r2, #15
 800064c:	402a      	ands	r2, r5
 800064e:	2a04      	cmp	r2, #4
 8000650:	d000      	beq.n	8000654 <__aeabi_fdiv+0xa0>
 8000652:	3504      	adds	r5, #4
 8000654:	012a      	lsls	r2, r5, #4
 8000656:	d503      	bpl.n	8000660 <__aeabi_fdiv+0xac>
 8000658:	4b61      	ldr	r3, [pc, #388]	; (80007e0 <__aeabi_fdiv+0x22c>)
 800065a:	401d      	ands	r5, r3
 800065c:	003b      	movs	r3, r7
 800065e:	3380      	adds	r3, #128	; 0x80
 8000660:	2bfe      	cmp	r3, #254	; 0xfe
 8000662:	dd00      	ble.n	8000666 <__aeabi_fdiv+0xb2>
 8000664:	e074      	b.n	8000750 <__aeabi_fdiv+0x19c>
 8000666:	01aa      	lsls	r2, r5, #6
 8000668:	0a52      	lsrs	r2, r2, #9
 800066a:	b2d8      	uxtb	r0, r3
 800066c:	e002      	b.n	8000674 <__aeabi_fdiv+0xc0>
 800066e:	000e      	movs	r6, r1
 8000670:	2000      	movs	r0, #0
 8000672:	2200      	movs	r2, #0
 8000674:	05c0      	lsls	r0, r0, #23
 8000676:	07f6      	lsls	r6, r6, #31
 8000678:	4310      	orrs	r0, r2
 800067a:	4330      	orrs	r0, r6
 800067c:	bce0      	pop	{r5, r6, r7}
 800067e:	46ba      	mov	sl, r7
 8000680:	46b1      	mov	r9, r6
 8000682:	46a8      	mov	r8, r5
 8000684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000686:	4643      	mov	r3, r8
 8000688:	2b00      	cmp	r3, #0
 800068a:	d13f      	bne.n	800070c <__aeabi_fdiv+0x158>
 800068c:	2202      	movs	r2, #2
 800068e:	3fff      	subs	r7, #255	; 0xff
 8000690:	e003      	b.n	800069a <__aeabi_fdiv+0xe6>
 8000692:	4643      	mov	r3, r8
 8000694:	2b00      	cmp	r3, #0
 8000696:	d12d      	bne.n	80006f4 <__aeabi_fdiv+0x140>
 8000698:	2201      	movs	r2, #1
 800069a:	0031      	movs	r1, r6
 800069c:	464b      	mov	r3, r9
 800069e:	4061      	eors	r1, r4
 80006a0:	b2c9      	uxtb	r1, r1
 80006a2:	4313      	orrs	r3, r2
 80006a4:	2b0f      	cmp	r3, #15
 80006a6:	d838      	bhi.n	800071a <__aeabi_fdiv+0x166>
 80006a8:	484e      	ldr	r0, [pc, #312]	; (80007e4 <__aeabi_fdiv+0x230>)
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	58c3      	ldr	r3, [r0, r3]
 80006ae:	469f      	mov	pc, r3
 80006b0:	2d00      	cmp	r5, #0
 80006b2:	d113      	bne.n	80006dc <__aeabi_fdiv+0x128>
 80006b4:	2304      	movs	r3, #4
 80006b6:	4699      	mov	r9, r3
 80006b8:	3b03      	subs	r3, #3
 80006ba:	2700      	movs	r7, #0
 80006bc:	469a      	mov	sl, r3
 80006be:	e792      	b.n	80005e6 <__aeabi_fdiv+0x32>
 80006c0:	2d00      	cmp	r5, #0
 80006c2:	d105      	bne.n	80006d0 <__aeabi_fdiv+0x11c>
 80006c4:	2308      	movs	r3, #8
 80006c6:	4699      	mov	r9, r3
 80006c8:	3b06      	subs	r3, #6
 80006ca:	27ff      	movs	r7, #255	; 0xff
 80006cc:	469a      	mov	sl, r3
 80006ce:	e78a      	b.n	80005e6 <__aeabi_fdiv+0x32>
 80006d0:	230c      	movs	r3, #12
 80006d2:	4699      	mov	r9, r3
 80006d4:	3b09      	subs	r3, #9
 80006d6:	27ff      	movs	r7, #255	; 0xff
 80006d8:	469a      	mov	sl, r3
 80006da:	e784      	b.n	80005e6 <__aeabi_fdiv+0x32>
 80006dc:	0028      	movs	r0, r5
 80006de:	f000 fc65 	bl	8000fac <__clzsi2>
 80006e2:	2776      	movs	r7, #118	; 0x76
 80006e4:	1f43      	subs	r3, r0, #5
 80006e6:	409d      	lsls	r5, r3
 80006e8:	2300      	movs	r3, #0
 80006ea:	427f      	negs	r7, r7
 80006ec:	4699      	mov	r9, r3
 80006ee:	469a      	mov	sl, r3
 80006f0:	1a3f      	subs	r7, r7, r0
 80006f2:	e778      	b.n	80005e6 <__aeabi_fdiv+0x32>
 80006f4:	4640      	mov	r0, r8
 80006f6:	f000 fc59 	bl	8000fac <__clzsi2>
 80006fa:	4642      	mov	r2, r8
 80006fc:	1f43      	subs	r3, r0, #5
 80006fe:	409a      	lsls	r2, r3
 8000700:	2376      	movs	r3, #118	; 0x76
 8000702:	425b      	negs	r3, r3
 8000704:	4690      	mov	r8, r2
 8000706:	1a1b      	subs	r3, r3, r0
 8000708:	2200      	movs	r2, #0
 800070a:	e77e      	b.n	800060a <__aeabi_fdiv+0x56>
 800070c:	2303      	movs	r3, #3
 800070e:	464a      	mov	r2, r9
 8000710:	431a      	orrs	r2, r3
 8000712:	4691      	mov	r9, r2
 8000714:	33fc      	adds	r3, #252	; 0xfc
 8000716:	2203      	movs	r2, #3
 8000718:	e777      	b.n	800060a <__aeabi_fdiv+0x56>
 800071a:	000e      	movs	r6, r1
 800071c:	20ff      	movs	r0, #255	; 0xff
 800071e:	2200      	movs	r2, #0
 8000720:	e7a8      	b.n	8000674 <__aeabi_fdiv+0xc0>
 8000722:	2201      	movs	r2, #1
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	2b1b      	cmp	r3, #27
 8000728:	dca2      	bgt.n	8000670 <__aeabi_fdiv+0xbc>
 800072a:	379e      	adds	r7, #158	; 0x9e
 800072c:	002a      	movs	r2, r5
 800072e:	40bd      	lsls	r5, r7
 8000730:	40da      	lsrs	r2, r3
 8000732:	1e6b      	subs	r3, r5, #1
 8000734:	419d      	sbcs	r5, r3
 8000736:	4315      	orrs	r5, r2
 8000738:	076a      	lsls	r2, r5, #29
 800073a:	d004      	beq.n	8000746 <__aeabi_fdiv+0x192>
 800073c:	220f      	movs	r2, #15
 800073e:	402a      	ands	r2, r5
 8000740:	2a04      	cmp	r2, #4
 8000742:	d000      	beq.n	8000746 <__aeabi_fdiv+0x192>
 8000744:	3504      	adds	r5, #4
 8000746:	016a      	lsls	r2, r5, #5
 8000748:	d544      	bpl.n	80007d4 <__aeabi_fdiv+0x220>
 800074a:	2001      	movs	r0, #1
 800074c:	2200      	movs	r2, #0
 800074e:	e791      	b.n	8000674 <__aeabi_fdiv+0xc0>
 8000750:	20ff      	movs	r0, #255	; 0xff
 8000752:	2200      	movs	r2, #0
 8000754:	e78e      	b.n	8000674 <__aeabi_fdiv+0xc0>
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	2600      	movs	r6, #0
 800075a:	20ff      	movs	r0, #255	; 0xff
 800075c:	03d2      	lsls	r2, r2, #15
 800075e:	e789      	b.n	8000674 <__aeabi_fdiv+0xc0>
 8000760:	2300      	movs	r3, #0
 8000762:	4698      	mov	r8, r3
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	03d2      	lsls	r2, r2, #15
 8000768:	4215      	tst	r5, r2
 800076a:	d008      	beq.n	800077e <__aeabi_fdiv+0x1ca>
 800076c:	4643      	mov	r3, r8
 800076e:	4213      	tst	r3, r2
 8000770:	d105      	bne.n	800077e <__aeabi_fdiv+0x1ca>
 8000772:	431a      	orrs	r2, r3
 8000774:	0252      	lsls	r2, r2, #9
 8000776:	0026      	movs	r6, r4
 8000778:	20ff      	movs	r0, #255	; 0xff
 800077a:	0a52      	lsrs	r2, r2, #9
 800077c:	e77a      	b.n	8000674 <__aeabi_fdiv+0xc0>
 800077e:	2280      	movs	r2, #128	; 0x80
 8000780:	03d2      	lsls	r2, r2, #15
 8000782:	432a      	orrs	r2, r5
 8000784:	0252      	lsls	r2, r2, #9
 8000786:	20ff      	movs	r0, #255	; 0xff
 8000788:	0a52      	lsrs	r2, r2, #9
 800078a:	e773      	b.n	8000674 <__aeabi_fdiv+0xc0>
 800078c:	4642      	mov	r2, r8
 800078e:	016b      	lsls	r3, r5, #5
 8000790:	0155      	lsls	r5, r2, #5
 8000792:	42ab      	cmp	r3, r5
 8000794:	d21a      	bcs.n	80007cc <__aeabi_fdiv+0x218>
 8000796:	201b      	movs	r0, #27
 8000798:	2200      	movs	r2, #0
 800079a:	3f01      	subs	r7, #1
 800079c:	2601      	movs	r6, #1
 800079e:	001c      	movs	r4, r3
 80007a0:	0052      	lsls	r2, r2, #1
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	2c00      	cmp	r4, #0
 80007a6:	db01      	blt.n	80007ac <__aeabi_fdiv+0x1f8>
 80007a8:	429d      	cmp	r5, r3
 80007aa:	d801      	bhi.n	80007b0 <__aeabi_fdiv+0x1fc>
 80007ac:	1b5b      	subs	r3, r3, r5
 80007ae:	4332      	orrs	r2, r6
 80007b0:	3801      	subs	r0, #1
 80007b2:	2800      	cmp	r0, #0
 80007b4:	d1f3      	bne.n	800079e <__aeabi_fdiv+0x1ea>
 80007b6:	1e58      	subs	r0, r3, #1
 80007b8:	4183      	sbcs	r3, r0
 80007ba:	4313      	orrs	r3, r2
 80007bc:	001d      	movs	r5, r3
 80007be:	003b      	movs	r3, r7
 80007c0:	337f      	adds	r3, #127	; 0x7f
 80007c2:	000e      	movs	r6, r1
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	dd00      	ble.n	80007ca <__aeabi_fdiv+0x216>
 80007c8:	e73d      	b.n	8000646 <__aeabi_fdiv+0x92>
 80007ca:	e7aa      	b.n	8000722 <__aeabi_fdiv+0x16e>
 80007cc:	201a      	movs	r0, #26
 80007ce:	2201      	movs	r2, #1
 80007d0:	1b5b      	subs	r3, r3, r5
 80007d2:	e7e3      	b.n	800079c <__aeabi_fdiv+0x1e8>
 80007d4:	01aa      	lsls	r2, r5, #6
 80007d6:	2000      	movs	r0, #0
 80007d8:	0a52      	lsrs	r2, r2, #9
 80007da:	e74b      	b.n	8000674 <__aeabi_fdiv+0xc0>
 80007dc:	08006834 	.word	0x08006834
 80007e0:	f7ffffff 	.word	0xf7ffffff
 80007e4:	08006874 	.word	0x08006874

080007e8 <__aeabi_fmul>:
 80007e8:	0243      	lsls	r3, r0, #9
 80007ea:	0a5b      	lsrs	r3, r3, #9
 80007ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ee:	464f      	mov	r7, r9
 80007f0:	4646      	mov	r6, r8
 80007f2:	4699      	mov	r9, r3
 80007f4:	46d6      	mov	lr, sl
 80007f6:	0fc3      	lsrs	r3, r0, #31
 80007f8:	0045      	lsls	r5, r0, #1
 80007fa:	4698      	mov	r8, r3
 80007fc:	b5c0      	push	{r6, r7, lr}
 80007fe:	464b      	mov	r3, r9
 8000800:	1c0f      	adds	r7, r1, #0
 8000802:	0e2d      	lsrs	r5, r5, #24
 8000804:	d100      	bne.n	8000808 <__aeabi_fmul+0x20>
 8000806:	e0cb      	b.n	80009a0 <__aeabi_fmul+0x1b8>
 8000808:	2dff      	cmp	r5, #255	; 0xff
 800080a:	d100      	bne.n	800080e <__aeabi_fmul+0x26>
 800080c:	e0cf      	b.n	80009ae <__aeabi_fmul+0x1c6>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	04d2      	lsls	r2, r2, #19
 8000814:	431a      	orrs	r2, r3
 8000816:	2300      	movs	r3, #0
 8000818:	4691      	mov	r9, r2
 800081a:	2600      	movs	r6, #0
 800081c:	469a      	mov	sl, r3
 800081e:	3d7f      	subs	r5, #127	; 0x7f
 8000820:	027c      	lsls	r4, r7, #9
 8000822:	007b      	lsls	r3, r7, #1
 8000824:	0a64      	lsrs	r4, r4, #9
 8000826:	0e1b      	lsrs	r3, r3, #24
 8000828:	0fff      	lsrs	r7, r7, #31
 800082a:	2b00      	cmp	r3, #0
 800082c:	d100      	bne.n	8000830 <__aeabi_fmul+0x48>
 800082e:	e0a9      	b.n	8000984 <__aeabi_fmul+0x19c>
 8000830:	2bff      	cmp	r3, #255	; 0xff
 8000832:	d011      	beq.n	8000858 <__aeabi_fmul+0x70>
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	00e4      	lsls	r4, r4, #3
 8000838:	04d2      	lsls	r2, r2, #19
 800083a:	4314      	orrs	r4, r2
 800083c:	4642      	mov	r2, r8
 800083e:	3b7f      	subs	r3, #127	; 0x7f
 8000840:	195b      	adds	r3, r3, r5
 8000842:	407a      	eors	r2, r7
 8000844:	2000      	movs	r0, #0
 8000846:	b2d2      	uxtb	r2, r2
 8000848:	1c5d      	adds	r5, r3, #1
 800084a:	2e0a      	cmp	r6, #10
 800084c:	dd13      	ble.n	8000876 <__aeabi_fmul+0x8e>
 800084e:	003a      	movs	r2, r7
 8000850:	2e0b      	cmp	r6, #11
 8000852:	d047      	beq.n	80008e4 <__aeabi_fmul+0xfc>
 8000854:	4647      	mov	r7, r8
 8000856:	e03f      	b.n	80008d8 <__aeabi_fmul+0xf0>
 8000858:	002b      	movs	r3, r5
 800085a:	33ff      	adds	r3, #255	; 0xff
 800085c:	2c00      	cmp	r4, #0
 800085e:	d11e      	bne.n	800089e <__aeabi_fmul+0xb6>
 8000860:	2202      	movs	r2, #2
 8000862:	4316      	orrs	r6, r2
 8000864:	4642      	mov	r2, r8
 8000866:	3501      	adds	r5, #1
 8000868:	407a      	eors	r2, r7
 800086a:	b2d2      	uxtb	r2, r2
 800086c:	35ff      	adds	r5, #255	; 0xff
 800086e:	2e0a      	cmp	r6, #10
 8000870:	dd00      	ble.n	8000874 <__aeabi_fmul+0x8c>
 8000872:	e0e4      	b.n	8000a3e <__aeabi_fmul+0x256>
 8000874:	2002      	movs	r0, #2
 8000876:	2e02      	cmp	r6, #2
 8000878:	dc1c      	bgt.n	80008b4 <__aeabi_fmul+0xcc>
 800087a:	3e01      	subs	r6, #1
 800087c:	2e01      	cmp	r6, #1
 800087e:	d842      	bhi.n	8000906 <__aeabi_fmul+0x11e>
 8000880:	2802      	cmp	r0, #2
 8000882:	d03d      	beq.n	8000900 <__aeabi_fmul+0x118>
 8000884:	2801      	cmp	r0, #1
 8000886:	d166      	bne.n	8000956 <__aeabi_fmul+0x16e>
 8000888:	2000      	movs	r0, #0
 800088a:	2100      	movs	r1, #0
 800088c:	05c0      	lsls	r0, r0, #23
 800088e:	4308      	orrs	r0, r1
 8000890:	07d2      	lsls	r2, r2, #31
 8000892:	4310      	orrs	r0, r2
 8000894:	bce0      	pop	{r5, r6, r7}
 8000896:	46ba      	mov	sl, r7
 8000898:	46b1      	mov	r9, r6
 800089a:	46a8      	mov	r8, r5
 800089c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800089e:	2203      	movs	r2, #3
 80008a0:	4316      	orrs	r6, r2
 80008a2:	4642      	mov	r2, r8
 80008a4:	3501      	adds	r5, #1
 80008a6:	407a      	eors	r2, r7
 80008a8:	b2d2      	uxtb	r2, r2
 80008aa:	35ff      	adds	r5, #255	; 0xff
 80008ac:	2e0a      	cmp	r6, #10
 80008ae:	dd00      	ble.n	80008b2 <__aeabi_fmul+0xca>
 80008b0:	e0e4      	b.n	8000a7c <__aeabi_fmul+0x294>
 80008b2:	2003      	movs	r0, #3
 80008b4:	2101      	movs	r1, #1
 80008b6:	40b1      	lsls	r1, r6
 80008b8:	26a6      	movs	r6, #166	; 0xa6
 80008ba:	00f6      	lsls	r6, r6, #3
 80008bc:	4231      	tst	r1, r6
 80008be:	d10a      	bne.n	80008d6 <__aeabi_fmul+0xee>
 80008c0:	2690      	movs	r6, #144	; 0x90
 80008c2:	00b6      	lsls	r6, r6, #2
 80008c4:	4231      	tst	r1, r6
 80008c6:	d116      	bne.n	80008f6 <__aeabi_fmul+0x10e>
 80008c8:	3eb9      	subs	r6, #185	; 0xb9
 80008ca:	3eff      	subs	r6, #255	; 0xff
 80008cc:	420e      	tst	r6, r1
 80008ce:	d01a      	beq.n	8000906 <__aeabi_fmul+0x11e>
 80008d0:	46a1      	mov	r9, r4
 80008d2:	4682      	mov	sl, r0
 80008d4:	e000      	b.n	80008d8 <__aeabi_fmul+0xf0>
 80008d6:	0017      	movs	r7, r2
 80008d8:	4653      	mov	r3, sl
 80008da:	003a      	movs	r2, r7
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d00f      	beq.n	8000900 <__aeabi_fmul+0x118>
 80008e0:	464c      	mov	r4, r9
 80008e2:	4650      	mov	r0, sl
 80008e4:	2803      	cmp	r0, #3
 80008e6:	d1cd      	bne.n	8000884 <__aeabi_fmul+0x9c>
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	03c9      	lsls	r1, r1, #15
 80008ec:	4321      	orrs	r1, r4
 80008ee:	0249      	lsls	r1, r1, #9
 80008f0:	20ff      	movs	r0, #255	; 0xff
 80008f2:	0a49      	lsrs	r1, r1, #9
 80008f4:	e7ca      	b.n	800088c <__aeabi_fmul+0xa4>
 80008f6:	2180      	movs	r1, #128	; 0x80
 80008f8:	2200      	movs	r2, #0
 80008fa:	20ff      	movs	r0, #255	; 0xff
 80008fc:	03c9      	lsls	r1, r1, #15
 80008fe:	e7c5      	b.n	800088c <__aeabi_fmul+0xa4>
 8000900:	20ff      	movs	r0, #255	; 0xff
 8000902:	2100      	movs	r1, #0
 8000904:	e7c2      	b.n	800088c <__aeabi_fmul+0xa4>
 8000906:	0c20      	lsrs	r0, r4, #16
 8000908:	4649      	mov	r1, r9
 800090a:	0424      	lsls	r4, r4, #16
 800090c:	0c24      	lsrs	r4, r4, #16
 800090e:	0027      	movs	r7, r4
 8000910:	0c0e      	lsrs	r6, r1, #16
 8000912:	0409      	lsls	r1, r1, #16
 8000914:	0c09      	lsrs	r1, r1, #16
 8000916:	4374      	muls	r4, r6
 8000918:	434f      	muls	r7, r1
 800091a:	4346      	muls	r6, r0
 800091c:	4348      	muls	r0, r1
 800091e:	0c39      	lsrs	r1, r7, #16
 8000920:	1900      	adds	r0, r0, r4
 8000922:	1809      	adds	r1, r1, r0
 8000924:	428c      	cmp	r4, r1
 8000926:	d903      	bls.n	8000930 <__aeabi_fmul+0x148>
 8000928:	2080      	movs	r0, #128	; 0x80
 800092a:	0240      	lsls	r0, r0, #9
 800092c:	4684      	mov	ip, r0
 800092e:	4466      	add	r6, ip
 8000930:	043f      	lsls	r7, r7, #16
 8000932:	0408      	lsls	r0, r1, #16
 8000934:	0c3f      	lsrs	r7, r7, #16
 8000936:	19c0      	adds	r0, r0, r7
 8000938:	0184      	lsls	r4, r0, #6
 800093a:	1e67      	subs	r7, r4, #1
 800093c:	41bc      	sbcs	r4, r7
 800093e:	0c09      	lsrs	r1, r1, #16
 8000940:	0e80      	lsrs	r0, r0, #26
 8000942:	1989      	adds	r1, r1, r6
 8000944:	4304      	orrs	r4, r0
 8000946:	0189      	lsls	r1, r1, #6
 8000948:	430c      	orrs	r4, r1
 800094a:	0109      	lsls	r1, r1, #4
 800094c:	d571      	bpl.n	8000a32 <__aeabi_fmul+0x24a>
 800094e:	2301      	movs	r3, #1
 8000950:	0861      	lsrs	r1, r4, #1
 8000952:	401c      	ands	r4, r3
 8000954:	430c      	orrs	r4, r1
 8000956:	002b      	movs	r3, r5
 8000958:	337f      	adds	r3, #127	; 0x7f
 800095a:	2b00      	cmp	r3, #0
 800095c:	dd51      	ble.n	8000a02 <__aeabi_fmul+0x21a>
 800095e:	0761      	lsls	r1, r4, #29
 8000960:	d004      	beq.n	800096c <__aeabi_fmul+0x184>
 8000962:	210f      	movs	r1, #15
 8000964:	4021      	ands	r1, r4
 8000966:	2904      	cmp	r1, #4
 8000968:	d000      	beq.n	800096c <__aeabi_fmul+0x184>
 800096a:	3404      	adds	r4, #4
 800096c:	0121      	lsls	r1, r4, #4
 800096e:	d503      	bpl.n	8000978 <__aeabi_fmul+0x190>
 8000970:	4b43      	ldr	r3, [pc, #268]	; (8000a80 <__aeabi_fmul+0x298>)
 8000972:	401c      	ands	r4, r3
 8000974:	002b      	movs	r3, r5
 8000976:	3380      	adds	r3, #128	; 0x80
 8000978:	2bfe      	cmp	r3, #254	; 0xfe
 800097a:	dcc1      	bgt.n	8000900 <__aeabi_fmul+0x118>
 800097c:	01a1      	lsls	r1, r4, #6
 800097e:	0a49      	lsrs	r1, r1, #9
 8000980:	b2d8      	uxtb	r0, r3
 8000982:	e783      	b.n	800088c <__aeabi_fmul+0xa4>
 8000984:	2c00      	cmp	r4, #0
 8000986:	d12c      	bne.n	80009e2 <__aeabi_fmul+0x1fa>
 8000988:	2301      	movs	r3, #1
 800098a:	4642      	mov	r2, r8
 800098c:	431e      	orrs	r6, r3
 800098e:	002b      	movs	r3, r5
 8000990:	407a      	eors	r2, r7
 8000992:	2001      	movs	r0, #1
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	1c5d      	adds	r5, r3, #1
 8000998:	2e0a      	cmp	r6, #10
 800099a:	dd00      	ble.n	800099e <__aeabi_fmul+0x1b6>
 800099c:	e757      	b.n	800084e <__aeabi_fmul+0x66>
 800099e:	e76a      	b.n	8000876 <__aeabi_fmul+0x8e>
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d110      	bne.n	80009c6 <__aeabi_fmul+0x1de>
 80009a4:	2301      	movs	r3, #1
 80009a6:	2604      	movs	r6, #4
 80009a8:	2500      	movs	r5, #0
 80009aa:	469a      	mov	sl, r3
 80009ac:	e738      	b.n	8000820 <__aeabi_fmul+0x38>
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d104      	bne.n	80009bc <__aeabi_fmul+0x1d4>
 80009b2:	2302      	movs	r3, #2
 80009b4:	2608      	movs	r6, #8
 80009b6:	25ff      	movs	r5, #255	; 0xff
 80009b8:	469a      	mov	sl, r3
 80009ba:	e731      	b.n	8000820 <__aeabi_fmul+0x38>
 80009bc:	2303      	movs	r3, #3
 80009be:	260c      	movs	r6, #12
 80009c0:	25ff      	movs	r5, #255	; 0xff
 80009c2:	469a      	mov	sl, r3
 80009c4:	e72c      	b.n	8000820 <__aeabi_fmul+0x38>
 80009c6:	4648      	mov	r0, r9
 80009c8:	f000 faf0 	bl	8000fac <__clzsi2>
 80009cc:	464a      	mov	r2, r9
 80009ce:	1f43      	subs	r3, r0, #5
 80009d0:	2576      	movs	r5, #118	; 0x76
 80009d2:	409a      	lsls	r2, r3
 80009d4:	2300      	movs	r3, #0
 80009d6:	426d      	negs	r5, r5
 80009d8:	4691      	mov	r9, r2
 80009da:	2600      	movs	r6, #0
 80009dc:	469a      	mov	sl, r3
 80009de:	1a2d      	subs	r5, r5, r0
 80009e0:	e71e      	b.n	8000820 <__aeabi_fmul+0x38>
 80009e2:	0020      	movs	r0, r4
 80009e4:	f000 fae2 	bl	8000fac <__clzsi2>
 80009e8:	4642      	mov	r2, r8
 80009ea:	1f43      	subs	r3, r0, #5
 80009ec:	409c      	lsls	r4, r3
 80009ee:	1a2b      	subs	r3, r5, r0
 80009f0:	3b76      	subs	r3, #118	; 0x76
 80009f2:	407a      	eors	r2, r7
 80009f4:	2000      	movs	r0, #0
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	1c5d      	adds	r5, r3, #1
 80009fa:	2e0a      	cmp	r6, #10
 80009fc:	dd00      	ble.n	8000a00 <__aeabi_fmul+0x218>
 80009fe:	e726      	b.n	800084e <__aeabi_fmul+0x66>
 8000a00:	e739      	b.n	8000876 <__aeabi_fmul+0x8e>
 8000a02:	2101      	movs	r1, #1
 8000a04:	1acb      	subs	r3, r1, r3
 8000a06:	2b1b      	cmp	r3, #27
 8000a08:	dd00      	ble.n	8000a0c <__aeabi_fmul+0x224>
 8000a0a:	e73d      	b.n	8000888 <__aeabi_fmul+0xa0>
 8000a0c:	359e      	adds	r5, #158	; 0x9e
 8000a0e:	0021      	movs	r1, r4
 8000a10:	40ac      	lsls	r4, r5
 8000a12:	40d9      	lsrs	r1, r3
 8000a14:	1e63      	subs	r3, r4, #1
 8000a16:	419c      	sbcs	r4, r3
 8000a18:	4321      	orrs	r1, r4
 8000a1a:	074b      	lsls	r3, r1, #29
 8000a1c:	d004      	beq.n	8000a28 <__aeabi_fmul+0x240>
 8000a1e:	230f      	movs	r3, #15
 8000a20:	400b      	ands	r3, r1
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	d000      	beq.n	8000a28 <__aeabi_fmul+0x240>
 8000a26:	3104      	adds	r1, #4
 8000a28:	014b      	lsls	r3, r1, #5
 8000a2a:	d504      	bpl.n	8000a36 <__aeabi_fmul+0x24e>
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	2100      	movs	r1, #0
 8000a30:	e72c      	b.n	800088c <__aeabi_fmul+0xa4>
 8000a32:	001d      	movs	r5, r3
 8000a34:	e78f      	b.n	8000956 <__aeabi_fmul+0x16e>
 8000a36:	0189      	lsls	r1, r1, #6
 8000a38:	2000      	movs	r0, #0
 8000a3a:	0a49      	lsrs	r1, r1, #9
 8000a3c:	e726      	b.n	800088c <__aeabi_fmul+0xa4>
 8000a3e:	2302      	movs	r3, #2
 8000a40:	2e0f      	cmp	r6, #15
 8000a42:	d10c      	bne.n	8000a5e <__aeabi_fmul+0x276>
 8000a44:	2180      	movs	r1, #128	; 0x80
 8000a46:	464b      	mov	r3, r9
 8000a48:	03c9      	lsls	r1, r1, #15
 8000a4a:	420b      	tst	r3, r1
 8000a4c:	d00d      	beq.n	8000a6a <__aeabi_fmul+0x282>
 8000a4e:	420c      	tst	r4, r1
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_fmul+0x282>
 8000a52:	4321      	orrs	r1, r4
 8000a54:	0249      	lsls	r1, r1, #9
 8000a56:	003a      	movs	r2, r7
 8000a58:	20ff      	movs	r0, #255	; 0xff
 8000a5a:	0a49      	lsrs	r1, r1, #9
 8000a5c:	e716      	b.n	800088c <__aeabi_fmul+0xa4>
 8000a5e:	2e0b      	cmp	r6, #11
 8000a60:	d000      	beq.n	8000a64 <__aeabi_fmul+0x27c>
 8000a62:	e6f7      	b.n	8000854 <__aeabi_fmul+0x6c>
 8000a64:	46a1      	mov	r9, r4
 8000a66:	469a      	mov	sl, r3
 8000a68:	e736      	b.n	80008d8 <__aeabi_fmul+0xf0>
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	464b      	mov	r3, r9
 8000a6e:	03c9      	lsls	r1, r1, #15
 8000a70:	4319      	orrs	r1, r3
 8000a72:	0249      	lsls	r1, r1, #9
 8000a74:	4642      	mov	r2, r8
 8000a76:	20ff      	movs	r0, #255	; 0xff
 8000a78:	0a49      	lsrs	r1, r1, #9
 8000a7a:	e707      	b.n	800088c <__aeabi_fmul+0xa4>
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	e7df      	b.n	8000a40 <__aeabi_fmul+0x258>
 8000a80:	f7ffffff 	.word	0xf7ffffff

08000a84 <__aeabi_fsub>:
 8000a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a86:	46c6      	mov	lr, r8
 8000a88:	0243      	lsls	r3, r0, #9
 8000a8a:	0a5b      	lsrs	r3, r3, #9
 8000a8c:	0045      	lsls	r5, r0, #1
 8000a8e:	00da      	lsls	r2, r3, #3
 8000a90:	0fc4      	lsrs	r4, r0, #31
 8000a92:	0248      	lsls	r0, r1, #9
 8000a94:	004f      	lsls	r7, r1, #1
 8000a96:	4694      	mov	ip, r2
 8000a98:	0a42      	lsrs	r2, r0, #9
 8000a9a:	001e      	movs	r6, r3
 8000a9c:	4690      	mov	r8, r2
 8000a9e:	b500      	push	{lr}
 8000aa0:	0e2d      	lsrs	r5, r5, #24
 8000aa2:	0e3f      	lsrs	r7, r7, #24
 8000aa4:	0fc9      	lsrs	r1, r1, #31
 8000aa6:	0980      	lsrs	r0, r0, #6
 8000aa8:	2fff      	cmp	r7, #255	; 0xff
 8000aaa:	d059      	beq.n	8000b60 <__aeabi_fsub+0xdc>
 8000aac:	2201      	movs	r2, #1
 8000aae:	4051      	eors	r1, r2
 8000ab0:	428c      	cmp	r4, r1
 8000ab2:	d039      	beq.n	8000b28 <__aeabi_fsub+0xa4>
 8000ab4:	1bea      	subs	r2, r5, r7
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	dd58      	ble.n	8000b6c <__aeabi_fsub+0xe8>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d068      	beq.n	8000b90 <__aeabi_fsub+0x10c>
 8000abe:	2dff      	cmp	r5, #255	; 0xff
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_fsub+0x40>
 8000ac2:	e0d1      	b.n	8000c68 <__aeabi_fsub+0x1e4>
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	04db      	lsls	r3, r3, #19
 8000ac8:	4318      	orrs	r0, r3
 8000aca:	2a1b      	cmp	r2, #27
 8000acc:	dc00      	bgt.n	8000ad0 <__aeabi_fsub+0x4c>
 8000ace:	e0e3      	b.n	8000c98 <__aeabi_fsub+0x214>
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	4662      	mov	r2, ip
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	015a      	lsls	r2, r3, #5
 8000ad8:	d400      	bmi.n	8000adc <__aeabi_fsub+0x58>
 8000ada:	e0ac      	b.n	8000c36 <__aeabi_fsub+0x1b2>
 8000adc:	019b      	lsls	r3, r3, #6
 8000ade:	099e      	lsrs	r6, r3, #6
 8000ae0:	0030      	movs	r0, r6
 8000ae2:	f000 fa63 	bl	8000fac <__clzsi2>
 8000ae6:	0033      	movs	r3, r6
 8000ae8:	3805      	subs	r0, #5
 8000aea:	4083      	lsls	r3, r0
 8000aec:	4285      	cmp	r5, r0
 8000aee:	dc00      	bgt.n	8000af2 <__aeabi_fsub+0x6e>
 8000af0:	e0c6      	b.n	8000c80 <__aeabi_fsub+0x1fc>
 8000af2:	4ab2      	ldr	r2, [pc, #712]	; (8000dbc <__aeabi_fsub+0x338>)
 8000af4:	1a2d      	subs	r5, r5, r0
 8000af6:	4013      	ands	r3, r2
 8000af8:	075a      	lsls	r2, r3, #29
 8000afa:	d004      	beq.n	8000b06 <__aeabi_fsub+0x82>
 8000afc:	220f      	movs	r2, #15
 8000afe:	401a      	ands	r2, r3
 8000b00:	2a04      	cmp	r2, #4
 8000b02:	d000      	beq.n	8000b06 <__aeabi_fsub+0x82>
 8000b04:	3304      	adds	r3, #4
 8000b06:	015a      	lsls	r2, r3, #5
 8000b08:	d400      	bmi.n	8000b0c <__aeabi_fsub+0x88>
 8000b0a:	e097      	b.n	8000c3c <__aeabi_fsub+0x1b8>
 8000b0c:	1c6a      	adds	r2, r5, #1
 8000b0e:	2dfe      	cmp	r5, #254	; 0xfe
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fsub+0x90>
 8000b12:	e084      	b.n	8000c1e <__aeabi_fsub+0x19a>
 8000b14:	019b      	lsls	r3, r3, #6
 8000b16:	0a5e      	lsrs	r6, r3, #9
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	05d0      	lsls	r0, r2, #23
 8000b1c:	4330      	orrs	r0, r6
 8000b1e:	07e4      	lsls	r4, r4, #31
 8000b20:	4320      	orrs	r0, r4
 8000b22:	bc80      	pop	{r7}
 8000b24:	46b8      	mov	r8, r7
 8000b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b28:	1bea      	subs	r2, r5, r7
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	dd41      	ble.n	8000bb2 <__aeabi_fsub+0x12e>
 8000b2e:	2f00      	cmp	r7, #0
 8000b30:	d06b      	beq.n	8000c0a <__aeabi_fsub+0x186>
 8000b32:	2dff      	cmp	r5, #255	; 0xff
 8000b34:	d100      	bne.n	8000b38 <__aeabi_fsub+0xb4>
 8000b36:	e097      	b.n	8000c68 <__aeabi_fsub+0x1e4>
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	04db      	lsls	r3, r3, #19
 8000b3c:	4318      	orrs	r0, r3
 8000b3e:	2a1b      	cmp	r2, #27
 8000b40:	dc00      	bgt.n	8000b44 <__aeabi_fsub+0xc0>
 8000b42:	e0cc      	b.n	8000cde <__aeabi_fsub+0x25a>
 8000b44:	2301      	movs	r3, #1
 8000b46:	4463      	add	r3, ip
 8000b48:	015a      	lsls	r2, r3, #5
 8000b4a:	d574      	bpl.n	8000c36 <__aeabi_fsub+0x1b2>
 8000b4c:	3501      	adds	r5, #1
 8000b4e:	2dff      	cmp	r5, #255	; 0xff
 8000b50:	d065      	beq.n	8000c1e <__aeabi_fsub+0x19a>
 8000b52:	2201      	movs	r2, #1
 8000b54:	499a      	ldr	r1, [pc, #616]	; (8000dc0 <__aeabi_fsub+0x33c>)
 8000b56:	401a      	ands	r2, r3
 8000b58:	085b      	lsrs	r3, r3, #1
 8000b5a:	400b      	ands	r3, r1
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	e7cb      	b.n	8000af8 <__aeabi_fsub+0x74>
 8000b60:	2800      	cmp	r0, #0
 8000b62:	d01f      	beq.n	8000ba4 <__aeabi_fsub+0x120>
 8000b64:	428c      	cmp	r4, r1
 8000b66:	d022      	beq.n	8000bae <__aeabi_fsub+0x12a>
 8000b68:	002a      	movs	r2, r5
 8000b6a:	3aff      	subs	r2, #255	; 0xff
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	d035      	beq.n	8000bdc <__aeabi_fsub+0x158>
 8000b70:	1b7a      	subs	r2, r7, r5
 8000b72:	2d00      	cmp	r5, #0
 8000b74:	d000      	beq.n	8000b78 <__aeabi_fsub+0xf4>
 8000b76:	e099      	b.n	8000cac <__aeabi_fsub+0x228>
 8000b78:	4663      	mov	r3, ip
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_fsub+0xfc>
 8000b7e:	e0dd      	b.n	8000d3c <__aeabi_fsub+0x2b8>
 8000b80:	1e53      	subs	r3, r2, #1
 8000b82:	2a01      	cmp	r2, #1
 8000b84:	d100      	bne.n	8000b88 <__aeabi_fsub+0x104>
 8000b86:	e105      	b.n	8000d94 <__aeabi_fsub+0x310>
 8000b88:	2aff      	cmp	r2, #255	; 0xff
 8000b8a:	d06b      	beq.n	8000c64 <__aeabi_fsub+0x1e0>
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	e094      	b.n	8000cba <__aeabi_fsub+0x236>
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d073      	beq.n	8000c7c <__aeabi_fsub+0x1f8>
 8000b94:	1e51      	subs	r1, r2, #1
 8000b96:	2a01      	cmp	r2, #1
 8000b98:	d100      	bne.n	8000b9c <__aeabi_fsub+0x118>
 8000b9a:	e0df      	b.n	8000d5c <__aeabi_fsub+0x2d8>
 8000b9c:	2aff      	cmp	r2, #255	; 0xff
 8000b9e:	d063      	beq.n	8000c68 <__aeabi_fsub+0x1e4>
 8000ba0:	000a      	movs	r2, r1
 8000ba2:	e792      	b.n	8000aca <__aeabi_fsub+0x46>
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4051      	eors	r1, r2
 8000ba8:	42a1      	cmp	r1, r4
 8000baa:	d000      	beq.n	8000bae <__aeabi_fsub+0x12a>
 8000bac:	e782      	b.n	8000ab4 <__aeabi_fsub+0x30>
 8000bae:	002a      	movs	r2, r5
 8000bb0:	3aff      	subs	r2, #255	; 0xff
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	d036      	beq.n	8000c24 <__aeabi_fsub+0x1a0>
 8000bb6:	1b7a      	subs	r2, r7, r5
 8000bb8:	2d00      	cmp	r5, #0
 8000bba:	d100      	bne.n	8000bbe <__aeabi_fsub+0x13a>
 8000bbc:	e0aa      	b.n	8000d14 <__aeabi_fsub+0x290>
 8000bbe:	2fff      	cmp	r7, #255	; 0xff
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_fsub+0x140>
 8000bc2:	e0da      	b.n	8000d7a <__aeabi_fsub+0x2f6>
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	4661      	mov	r1, ip
 8000bc8:	04db      	lsls	r3, r3, #19
 8000bca:	4319      	orrs	r1, r3
 8000bcc:	468c      	mov	ip, r1
 8000bce:	2a1b      	cmp	r2, #27
 8000bd0:	dc00      	bgt.n	8000bd4 <__aeabi_fsub+0x150>
 8000bd2:	e0d4      	b.n	8000d7e <__aeabi_fsub+0x2fa>
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	003d      	movs	r5, r7
 8000bd8:	181b      	adds	r3, r3, r0
 8000bda:	e7b5      	b.n	8000b48 <__aeabi_fsub+0xc4>
 8000bdc:	27fe      	movs	r7, #254	; 0xfe
 8000bde:	1c6a      	adds	r2, r5, #1
 8000be0:	4217      	tst	r7, r2
 8000be2:	d171      	bne.n	8000cc8 <__aeabi_fsub+0x244>
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d000      	beq.n	8000bea <__aeabi_fsub+0x166>
 8000be8:	e09e      	b.n	8000d28 <__aeabi_fsub+0x2a4>
 8000bea:	4663      	mov	r3, ip
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_fsub+0x16e>
 8000bf0:	e0d5      	b.n	8000d9e <__aeabi_fsub+0x31a>
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2800      	cmp	r0, #0
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_fsub+0x176>
 8000bf8:	e78f      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000bfa:	1a1b      	subs	r3, r3, r0
 8000bfc:	015e      	lsls	r6, r3, #5
 8000bfe:	d400      	bmi.n	8000c02 <__aeabi_fsub+0x17e>
 8000c00:	e0d6      	b.n	8000db0 <__aeabi_fsub+0x32c>
 8000c02:	4663      	mov	r3, ip
 8000c04:	000c      	movs	r4, r1
 8000c06:	1ac3      	subs	r3, r0, r3
 8000c08:	e776      	b.n	8000af8 <__aeabi_fsub+0x74>
 8000c0a:	2800      	cmp	r0, #0
 8000c0c:	d036      	beq.n	8000c7c <__aeabi_fsub+0x1f8>
 8000c0e:	1e51      	subs	r1, r2, #1
 8000c10:	2a01      	cmp	r2, #1
 8000c12:	d100      	bne.n	8000c16 <__aeabi_fsub+0x192>
 8000c14:	e09a      	b.n	8000d4c <__aeabi_fsub+0x2c8>
 8000c16:	2aff      	cmp	r2, #255	; 0xff
 8000c18:	d026      	beq.n	8000c68 <__aeabi_fsub+0x1e4>
 8000c1a:	000a      	movs	r2, r1
 8000c1c:	e78f      	b.n	8000b3e <__aeabi_fsub+0xba>
 8000c1e:	22ff      	movs	r2, #255	; 0xff
 8000c20:	2600      	movs	r6, #0
 8000c22:	e77a      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000c24:	27fe      	movs	r7, #254	; 0xfe
 8000c26:	1c6a      	adds	r2, r5, #1
 8000c28:	4217      	tst	r7, r2
 8000c2a:	d062      	beq.n	8000cf2 <__aeabi_fsub+0x26e>
 8000c2c:	2aff      	cmp	r2, #255	; 0xff
 8000c2e:	d0f6      	beq.n	8000c1e <__aeabi_fsub+0x19a>
 8000c30:	0015      	movs	r5, r2
 8000c32:	4460      	add	r0, ip
 8000c34:	0843      	lsrs	r3, r0, #1
 8000c36:	075a      	lsls	r2, r3, #29
 8000c38:	d000      	beq.n	8000c3c <__aeabi_fsub+0x1b8>
 8000c3a:	e75f      	b.n	8000afc <__aeabi_fsub+0x78>
 8000c3c:	08db      	lsrs	r3, r3, #3
 8000c3e:	2dff      	cmp	r5, #255	; 0xff
 8000c40:	d012      	beq.n	8000c68 <__aeabi_fsub+0x1e4>
 8000c42:	025b      	lsls	r3, r3, #9
 8000c44:	0a5e      	lsrs	r6, r3, #9
 8000c46:	b2ea      	uxtb	r2, r5
 8000c48:	e767      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000c4a:	4662      	mov	r2, ip
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_fsub+0x1ce>
 8000c50:	e093      	b.n	8000d7a <__aeabi_fsub+0x2f6>
 8000c52:	2800      	cmp	r0, #0
 8000c54:	d008      	beq.n	8000c68 <__aeabi_fsub+0x1e4>
 8000c56:	2280      	movs	r2, #128	; 0x80
 8000c58:	03d2      	lsls	r2, r2, #15
 8000c5a:	4213      	tst	r3, r2
 8000c5c:	d004      	beq.n	8000c68 <__aeabi_fsub+0x1e4>
 8000c5e:	4640      	mov	r0, r8
 8000c60:	4210      	tst	r0, r2
 8000c62:	d101      	bne.n	8000c68 <__aeabi_fsub+0x1e4>
 8000c64:	000c      	movs	r4, r1
 8000c66:	4643      	mov	r3, r8
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d0d8      	beq.n	8000c1e <__aeabi_fsub+0x19a>
 8000c6c:	2680      	movs	r6, #128	; 0x80
 8000c6e:	03f6      	lsls	r6, r6, #15
 8000c70:	431e      	orrs	r6, r3
 8000c72:	0276      	lsls	r6, r6, #9
 8000c74:	22ff      	movs	r2, #255	; 0xff
 8000c76:	0a76      	lsrs	r6, r6, #9
 8000c78:	e74f      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	0015      	movs	r5, r2
 8000c7e:	e7de      	b.n	8000c3e <__aeabi_fsub+0x1ba>
 8000c80:	2220      	movs	r2, #32
 8000c82:	1b40      	subs	r0, r0, r5
 8000c84:	3001      	adds	r0, #1
 8000c86:	1a12      	subs	r2, r2, r0
 8000c88:	0019      	movs	r1, r3
 8000c8a:	4093      	lsls	r3, r2
 8000c8c:	40c1      	lsrs	r1, r0
 8000c8e:	1e5a      	subs	r2, r3, #1
 8000c90:	4193      	sbcs	r3, r2
 8000c92:	2500      	movs	r5, #0
 8000c94:	430b      	orrs	r3, r1
 8000c96:	e72f      	b.n	8000af8 <__aeabi_fsub+0x74>
 8000c98:	2320      	movs	r3, #32
 8000c9a:	1a9b      	subs	r3, r3, r2
 8000c9c:	0001      	movs	r1, r0
 8000c9e:	4098      	lsls	r0, r3
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	40d1      	lsrs	r1, r2
 8000ca4:	1e5a      	subs	r2, r3, #1
 8000ca6:	4193      	sbcs	r3, r2
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	e712      	b.n	8000ad2 <__aeabi_fsub+0x4e>
 8000cac:	2fff      	cmp	r7, #255	; 0xff
 8000cae:	d0d9      	beq.n	8000c64 <__aeabi_fsub+0x1e0>
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	4664      	mov	r4, ip
 8000cb4:	04db      	lsls	r3, r3, #19
 8000cb6:	431c      	orrs	r4, r3
 8000cb8:	46a4      	mov	ip, r4
 8000cba:	2a1b      	cmp	r2, #27
 8000cbc:	dd52      	ble.n	8000d64 <__aeabi_fsub+0x2e0>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	000c      	movs	r4, r1
 8000cc2:	003d      	movs	r5, r7
 8000cc4:	1ac3      	subs	r3, r0, r3
 8000cc6:	e706      	b.n	8000ad6 <__aeabi_fsub+0x52>
 8000cc8:	4663      	mov	r3, ip
 8000cca:	1a1e      	subs	r6, r3, r0
 8000ccc:	0173      	lsls	r3, r6, #5
 8000cce:	d439      	bmi.n	8000d44 <__aeabi_fsub+0x2c0>
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d000      	beq.n	8000cd6 <__aeabi_fsub+0x252>
 8000cd4:	e704      	b.n	8000ae0 <__aeabi_fsub+0x5c>
 8000cd6:	2400      	movs	r4, #0
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2600      	movs	r6, #0
 8000cdc:	e71d      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000cde:	2320      	movs	r3, #32
 8000ce0:	1a9b      	subs	r3, r3, r2
 8000ce2:	0001      	movs	r1, r0
 8000ce4:	4098      	lsls	r0, r3
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	40d1      	lsrs	r1, r2
 8000cea:	1e5a      	subs	r2, r3, #1
 8000cec:	4193      	sbcs	r3, r2
 8000cee:	430b      	orrs	r3, r1
 8000cf0:	e729      	b.n	8000b46 <__aeabi_fsub+0xc2>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	d1a9      	bne.n	8000c4a <__aeabi_fsub+0x1c6>
 8000cf6:	4663      	mov	r3, ip
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d056      	beq.n	8000daa <__aeabi_fsub+0x326>
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	d100      	bne.n	8000d04 <__aeabi_fsub+0x280>
 8000d02:	e70a      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000d04:	0003      	movs	r3, r0
 8000d06:	4463      	add	r3, ip
 8000d08:	015a      	lsls	r2, r3, #5
 8000d0a:	d594      	bpl.n	8000c36 <__aeabi_fsub+0x1b2>
 8000d0c:	4a2b      	ldr	r2, [pc, #172]	; (8000dbc <__aeabi_fsub+0x338>)
 8000d0e:	3501      	adds	r5, #1
 8000d10:	4013      	ands	r3, r2
 8000d12:	e790      	b.n	8000c36 <__aeabi_fsub+0x1b2>
 8000d14:	4663      	mov	r3, ip
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0af      	beq.n	8000c7a <__aeabi_fsub+0x1f6>
 8000d1a:	1e53      	subs	r3, r2, #1
 8000d1c:	2a01      	cmp	r2, #1
 8000d1e:	d015      	beq.n	8000d4c <__aeabi_fsub+0x2c8>
 8000d20:	2aff      	cmp	r2, #255	; 0xff
 8000d22:	d02a      	beq.n	8000d7a <__aeabi_fsub+0x2f6>
 8000d24:	001a      	movs	r2, r3
 8000d26:	e752      	b.n	8000bce <__aeabi_fsub+0x14a>
 8000d28:	4662      	mov	r2, ip
 8000d2a:	2a00      	cmp	r2, #0
 8000d2c:	d191      	bne.n	8000c52 <__aeabi_fsub+0x1ce>
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	d198      	bne.n	8000c64 <__aeabi_fsub+0x1e0>
 8000d32:	2680      	movs	r6, #128	; 0x80
 8000d34:	2400      	movs	r4, #0
 8000d36:	22ff      	movs	r2, #255	; 0xff
 8000d38:	03f6      	lsls	r6, r6, #15
 8000d3a:	e6ee      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000d3c:	000c      	movs	r4, r1
 8000d3e:	4643      	mov	r3, r8
 8000d40:	0015      	movs	r5, r2
 8000d42:	e77c      	b.n	8000c3e <__aeabi_fsub+0x1ba>
 8000d44:	4663      	mov	r3, ip
 8000d46:	000c      	movs	r4, r1
 8000d48:	1ac6      	subs	r6, r0, r3
 8000d4a:	e6c9      	b.n	8000ae0 <__aeabi_fsub+0x5c>
 8000d4c:	0003      	movs	r3, r0
 8000d4e:	4463      	add	r3, ip
 8000d50:	2501      	movs	r5, #1
 8000d52:	015a      	lsls	r2, r3, #5
 8000d54:	d400      	bmi.n	8000d58 <__aeabi_fsub+0x2d4>
 8000d56:	e76e      	b.n	8000c36 <__aeabi_fsub+0x1b2>
 8000d58:	2502      	movs	r5, #2
 8000d5a:	e6fa      	b.n	8000b52 <__aeabi_fsub+0xce>
 8000d5c:	4663      	mov	r3, ip
 8000d5e:	2501      	movs	r5, #1
 8000d60:	1a1b      	subs	r3, r3, r0
 8000d62:	e6b8      	b.n	8000ad6 <__aeabi_fsub+0x52>
 8000d64:	4664      	mov	r4, ip
 8000d66:	2320      	movs	r3, #32
 8000d68:	40d4      	lsrs	r4, r2
 8000d6a:	1a9b      	subs	r3, r3, r2
 8000d6c:	4662      	mov	r2, ip
 8000d6e:	409a      	lsls	r2, r3
 8000d70:	0013      	movs	r3, r2
 8000d72:	1e5a      	subs	r2, r3, #1
 8000d74:	4193      	sbcs	r3, r2
 8000d76:	4323      	orrs	r3, r4
 8000d78:	e7a2      	b.n	8000cc0 <__aeabi_fsub+0x23c>
 8000d7a:	4643      	mov	r3, r8
 8000d7c:	e774      	b.n	8000c68 <__aeabi_fsub+0x1e4>
 8000d7e:	4661      	mov	r1, ip
 8000d80:	2320      	movs	r3, #32
 8000d82:	40d1      	lsrs	r1, r2
 8000d84:	1a9b      	subs	r3, r3, r2
 8000d86:	4662      	mov	r2, ip
 8000d88:	409a      	lsls	r2, r3
 8000d8a:	0013      	movs	r3, r2
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	4193      	sbcs	r3, r2
 8000d90:	430b      	orrs	r3, r1
 8000d92:	e720      	b.n	8000bd6 <__aeabi_fsub+0x152>
 8000d94:	4663      	mov	r3, ip
 8000d96:	000c      	movs	r4, r1
 8000d98:	2501      	movs	r5, #1
 8000d9a:	1ac3      	subs	r3, r0, r3
 8000d9c:	e69b      	b.n	8000ad6 <__aeabi_fsub+0x52>
 8000d9e:	2800      	cmp	r0, #0
 8000da0:	d099      	beq.n	8000cd6 <__aeabi_fsub+0x252>
 8000da2:	000c      	movs	r4, r1
 8000da4:	4646      	mov	r6, r8
 8000da6:	2200      	movs	r2, #0
 8000da8:	e6b7      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000daa:	4646      	mov	r6, r8
 8000dac:	2200      	movs	r2, #0
 8000dae:	e6b4      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d000      	beq.n	8000db6 <__aeabi_fsub+0x332>
 8000db4:	e73f      	b.n	8000c36 <__aeabi_fsub+0x1b2>
 8000db6:	2400      	movs	r4, #0
 8000db8:	2600      	movs	r6, #0
 8000dba:	e6ae      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000dbc:	fbffffff 	.word	0xfbffffff
 8000dc0:	7dffffff 	.word	0x7dffffff

08000dc4 <__aeabi_f2iz>:
 8000dc4:	0241      	lsls	r1, r0, #9
 8000dc6:	0042      	lsls	r2, r0, #1
 8000dc8:	0fc3      	lsrs	r3, r0, #31
 8000dca:	0a49      	lsrs	r1, r1, #9
 8000dcc:	2000      	movs	r0, #0
 8000dce:	0e12      	lsrs	r2, r2, #24
 8000dd0:	2a7e      	cmp	r2, #126	; 0x7e
 8000dd2:	dd03      	ble.n	8000ddc <__aeabi_f2iz+0x18>
 8000dd4:	2a9d      	cmp	r2, #157	; 0x9d
 8000dd6:	dd02      	ble.n	8000dde <__aeabi_f2iz+0x1a>
 8000dd8:	4a09      	ldr	r2, [pc, #36]	; (8000e00 <__aeabi_f2iz+0x3c>)
 8000dda:	1898      	adds	r0, r3, r2
 8000ddc:	4770      	bx	lr
 8000dde:	2080      	movs	r0, #128	; 0x80
 8000de0:	0400      	lsls	r0, r0, #16
 8000de2:	4301      	orrs	r1, r0
 8000de4:	2a95      	cmp	r2, #149	; 0x95
 8000de6:	dc07      	bgt.n	8000df8 <__aeabi_f2iz+0x34>
 8000de8:	2096      	movs	r0, #150	; 0x96
 8000dea:	1a82      	subs	r2, r0, r2
 8000dec:	40d1      	lsrs	r1, r2
 8000dee:	4248      	negs	r0, r1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1f3      	bne.n	8000ddc <__aeabi_f2iz+0x18>
 8000df4:	0008      	movs	r0, r1
 8000df6:	e7f1      	b.n	8000ddc <__aeabi_f2iz+0x18>
 8000df8:	3a96      	subs	r2, #150	; 0x96
 8000dfa:	4091      	lsls	r1, r2
 8000dfc:	e7f7      	b.n	8000dee <__aeabi_f2iz+0x2a>
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	7fffffff 	.word	0x7fffffff

08000e04 <__aeabi_i2f>:
 8000e04:	b570      	push	{r4, r5, r6, lr}
 8000e06:	2800      	cmp	r0, #0
 8000e08:	d013      	beq.n	8000e32 <__aeabi_i2f+0x2e>
 8000e0a:	17c3      	asrs	r3, r0, #31
 8000e0c:	18c5      	adds	r5, r0, r3
 8000e0e:	405d      	eors	r5, r3
 8000e10:	0fc4      	lsrs	r4, r0, #31
 8000e12:	0028      	movs	r0, r5
 8000e14:	f000 f8ca 	bl	8000fac <__clzsi2>
 8000e18:	239e      	movs	r3, #158	; 0x9e
 8000e1a:	0001      	movs	r1, r0
 8000e1c:	1a1b      	subs	r3, r3, r0
 8000e1e:	2b96      	cmp	r3, #150	; 0x96
 8000e20:	dc0f      	bgt.n	8000e42 <__aeabi_i2f+0x3e>
 8000e22:	2808      	cmp	r0, #8
 8000e24:	d031      	beq.n	8000e8a <__aeabi_i2f+0x86>
 8000e26:	3908      	subs	r1, #8
 8000e28:	408d      	lsls	r5, r1
 8000e2a:	026d      	lsls	r5, r5, #9
 8000e2c:	0a6d      	lsrs	r5, r5, #9
 8000e2e:	b2d8      	uxtb	r0, r3
 8000e30:	e002      	b.n	8000e38 <__aeabi_i2f+0x34>
 8000e32:	2400      	movs	r4, #0
 8000e34:	2000      	movs	r0, #0
 8000e36:	2500      	movs	r5, #0
 8000e38:	05c0      	lsls	r0, r0, #23
 8000e3a:	4328      	orrs	r0, r5
 8000e3c:	07e4      	lsls	r4, r4, #31
 8000e3e:	4320      	orrs	r0, r4
 8000e40:	bd70      	pop	{r4, r5, r6, pc}
 8000e42:	2b99      	cmp	r3, #153	; 0x99
 8000e44:	dd0c      	ble.n	8000e60 <__aeabi_i2f+0x5c>
 8000e46:	2205      	movs	r2, #5
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	0028      	movs	r0, r5
 8000e4c:	40d0      	lsrs	r0, r2
 8000e4e:	0002      	movs	r2, r0
 8000e50:	0008      	movs	r0, r1
 8000e52:	301b      	adds	r0, #27
 8000e54:	4085      	lsls	r5, r0
 8000e56:	0028      	movs	r0, r5
 8000e58:	1e45      	subs	r5, r0, #1
 8000e5a:	41a8      	sbcs	r0, r5
 8000e5c:	4302      	orrs	r2, r0
 8000e5e:	0015      	movs	r5, r2
 8000e60:	2905      	cmp	r1, #5
 8000e62:	dc16      	bgt.n	8000e92 <__aeabi_i2f+0x8e>
 8000e64:	002a      	movs	r2, r5
 8000e66:	480f      	ldr	r0, [pc, #60]	; (8000ea4 <__aeabi_i2f+0xa0>)
 8000e68:	4002      	ands	r2, r0
 8000e6a:	076e      	lsls	r6, r5, #29
 8000e6c:	d009      	beq.n	8000e82 <__aeabi_i2f+0x7e>
 8000e6e:	260f      	movs	r6, #15
 8000e70:	4035      	ands	r5, r6
 8000e72:	2d04      	cmp	r5, #4
 8000e74:	d005      	beq.n	8000e82 <__aeabi_i2f+0x7e>
 8000e76:	3204      	adds	r2, #4
 8000e78:	0155      	lsls	r5, r2, #5
 8000e7a:	d502      	bpl.n	8000e82 <__aeabi_i2f+0x7e>
 8000e7c:	239f      	movs	r3, #159	; 0x9f
 8000e7e:	4002      	ands	r2, r0
 8000e80:	1a5b      	subs	r3, r3, r1
 8000e82:	0192      	lsls	r2, r2, #6
 8000e84:	0a55      	lsrs	r5, r2, #9
 8000e86:	b2d8      	uxtb	r0, r3
 8000e88:	e7d6      	b.n	8000e38 <__aeabi_i2f+0x34>
 8000e8a:	026d      	lsls	r5, r5, #9
 8000e8c:	2096      	movs	r0, #150	; 0x96
 8000e8e:	0a6d      	lsrs	r5, r5, #9
 8000e90:	e7d2      	b.n	8000e38 <__aeabi_i2f+0x34>
 8000e92:	1f4a      	subs	r2, r1, #5
 8000e94:	4095      	lsls	r5, r2
 8000e96:	002a      	movs	r2, r5
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <__aeabi_i2f+0xa0>)
 8000e9a:	4002      	ands	r2, r0
 8000e9c:	076e      	lsls	r6, r5, #29
 8000e9e:	d0f0      	beq.n	8000e82 <__aeabi_i2f+0x7e>
 8000ea0:	e7e5      	b.n	8000e6e <__aeabi_i2f+0x6a>
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	fbffffff 	.word	0xfbffffff

08000ea8 <__aeabi_ui2f>:
 8000ea8:	b570      	push	{r4, r5, r6, lr}
 8000eaa:	1e04      	subs	r4, r0, #0
 8000eac:	d00e      	beq.n	8000ecc <__aeabi_ui2f+0x24>
 8000eae:	f000 f87d 	bl	8000fac <__clzsi2>
 8000eb2:	239e      	movs	r3, #158	; 0x9e
 8000eb4:	0001      	movs	r1, r0
 8000eb6:	1a1b      	subs	r3, r3, r0
 8000eb8:	2b96      	cmp	r3, #150	; 0x96
 8000eba:	dc0c      	bgt.n	8000ed6 <__aeabi_ui2f+0x2e>
 8000ebc:	2808      	cmp	r0, #8
 8000ebe:	d02c      	beq.n	8000f1a <__aeabi_ui2f+0x72>
 8000ec0:	3908      	subs	r1, #8
 8000ec2:	408c      	lsls	r4, r1
 8000ec4:	0264      	lsls	r4, r4, #9
 8000ec6:	0a64      	lsrs	r4, r4, #9
 8000ec8:	b2d8      	uxtb	r0, r3
 8000eca:	e001      	b.n	8000ed0 <__aeabi_ui2f+0x28>
 8000ecc:	2000      	movs	r0, #0
 8000ece:	2400      	movs	r4, #0
 8000ed0:	05c0      	lsls	r0, r0, #23
 8000ed2:	4320      	orrs	r0, r4
 8000ed4:	bd70      	pop	{r4, r5, r6, pc}
 8000ed6:	2b99      	cmp	r3, #153	; 0x99
 8000ed8:	dd0a      	ble.n	8000ef0 <__aeabi_ui2f+0x48>
 8000eda:	0002      	movs	r2, r0
 8000edc:	0020      	movs	r0, r4
 8000ede:	321b      	adds	r2, #27
 8000ee0:	4090      	lsls	r0, r2
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	1e50      	subs	r0, r2, #1
 8000ee6:	4182      	sbcs	r2, r0
 8000ee8:	2005      	movs	r0, #5
 8000eea:	1a40      	subs	r0, r0, r1
 8000eec:	40c4      	lsrs	r4, r0
 8000eee:	4314      	orrs	r4, r2
 8000ef0:	2905      	cmp	r1, #5
 8000ef2:	dc16      	bgt.n	8000f22 <__aeabi_ui2f+0x7a>
 8000ef4:	0022      	movs	r2, r4
 8000ef6:	480f      	ldr	r0, [pc, #60]	; (8000f34 <__aeabi_ui2f+0x8c>)
 8000ef8:	4002      	ands	r2, r0
 8000efa:	0765      	lsls	r5, r4, #29
 8000efc:	d009      	beq.n	8000f12 <__aeabi_ui2f+0x6a>
 8000efe:	250f      	movs	r5, #15
 8000f00:	402c      	ands	r4, r5
 8000f02:	2c04      	cmp	r4, #4
 8000f04:	d005      	beq.n	8000f12 <__aeabi_ui2f+0x6a>
 8000f06:	3204      	adds	r2, #4
 8000f08:	0154      	lsls	r4, r2, #5
 8000f0a:	d502      	bpl.n	8000f12 <__aeabi_ui2f+0x6a>
 8000f0c:	239f      	movs	r3, #159	; 0x9f
 8000f0e:	4002      	ands	r2, r0
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	0192      	lsls	r2, r2, #6
 8000f14:	0a54      	lsrs	r4, r2, #9
 8000f16:	b2d8      	uxtb	r0, r3
 8000f18:	e7da      	b.n	8000ed0 <__aeabi_ui2f+0x28>
 8000f1a:	0264      	lsls	r4, r4, #9
 8000f1c:	2096      	movs	r0, #150	; 0x96
 8000f1e:	0a64      	lsrs	r4, r4, #9
 8000f20:	e7d6      	b.n	8000ed0 <__aeabi_ui2f+0x28>
 8000f22:	1f4a      	subs	r2, r1, #5
 8000f24:	4094      	lsls	r4, r2
 8000f26:	0022      	movs	r2, r4
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <__aeabi_ui2f+0x8c>)
 8000f2a:	4002      	ands	r2, r0
 8000f2c:	0765      	lsls	r5, r4, #29
 8000f2e:	d0f0      	beq.n	8000f12 <__aeabi_ui2f+0x6a>
 8000f30:	e7e5      	b.n	8000efe <__aeabi_ui2f+0x56>
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	fbffffff 	.word	0xfbffffff

08000f38 <__aeabi_cfrcmple>:
 8000f38:	4684      	mov	ip, r0
 8000f3a:	0008      	movs	r0, r1
 8000f3c:	4661      	mov	r1, ip
 8000f3e:	e7ff      	b.n	8000f40 <__aeabi_cfcmpeq>

08000f40 <__aeabi_cfcmpeq>:
 8000f40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000f42:	f000 f8bd 	bl	80010c0 <__lesf2>
 8000f46:	2800      	cmp	r0, #0
 8000f48:	d401      	bmi.n	8000f4e <__aeabi_cfcmpeq+0xe>
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	42c8      	cmn	r0, r1
 8000f4e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000f50 <__aeabi_fcmpeq>:
 8000f50:	b510      	push	{r4, lr}
 8000f52:	f000 f849 	bl	8000fe8 <__eqsf2>
 8000f56:	4240      	negs	r0, r0
 8000f58:	3001      	adds	r0, #1
 8000f5a:	bd10      	pop	{r4, pc}

08000f5c <__aeabi_fcmplt>:
 8000f5c:	b510      	push	{r4, lr}
 8000f5e:	f000 f8af 	bl	80010c0 <__lesf2>
 8000f62:	2800      	cmp	r0, #0
 8000f64:	db01      	blt.n	8000f6a <__aeabi_fcmplt+0xe>
 8000f66:	2000      	movs	r0, #0
 8000f68:	bd10      	pop	{r4, pc}
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	bd10      	pop	{r4, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)

08000f70 <__aeabi_fcmple>:
 8000f70:	b510      	push	{r4, lr}
 8000f72:	f000 f8a5 	bl	80010c0 <__lesf2>
 8000f76:	2800      	cmp	r0, #0
 8000f78:	dd01      	ble.n	8000f7e <__aeabi_fcmple+0xe>
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	bd10      	pop	{r4, pc}
 8000f7e:	2001      	movs	r0, #1
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)

08000f84 <__aeabi_fcmpgt>:
 8000f84:	b510      	push	{r4, lr}
 8000f86:	f000 f855 	bl	8001034 <__gesf2>
 8000f8a:	2800      	cmp	r0, #0
 8000f8c:	dc01      	bgt.n	8000f92 <__aeabi_fcmpgt+0xe>
 8000f8e:	2000      	movs	r0, #0
 8000f90:	bd10      	pop	{r4, pc}
 8000f92:	2001      	movs	r0, #1
 8000f94:	bd10      	pop	{r4, pc}
 8000f96:	46c0      	nop			; (mov r8, r8)

08000f98 <__aeabi_fcmpge>:
 8000f98:	b510      	push	{r4, lr}
 8000f9a:	f000 f84b 	bl	8001034 <__gesf2>
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	da01      	bge.n	8000fa6 <__aeabi_fcmpge+0xe>
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	bd10      	pop	{r4, pc}
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	bd10      	pop	{r4, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)

08000fac <__clzsi2>:
 8000fac:	211c      	movs	r1, #28
 8000fae:	2301      	movs	r3, #1
 8000fb0:	041b      	lsls	r3, r3, #16
 8000fb2:	4298      	cmp	r0, r3
 8000fb4:	d301      	bcc.n	8000fba <__clzsi2+0xe>
 8000fb6:	0c00      	lsrs	r0, r0, #16
 8000fb8:	3910      	subs	r1, #16
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	4298      	cmp	r0, r3
 8000fbe:	d301      	bcc.n	8000fc4 <__clzsi2+0x18>
 8000fc0:	0a00      	lsrs	r0, r0, #8
 8000fc2:	3908      	subs	r1, #8
 8000fc4:	091b      	lsrs	r3, r3, #4
 8000fc6:	4298      	cmp	r0, r3
 8000fc8:	d301      	bcc.n	8000fce <__clzsi2+0x22>
 8000fca:	0900      	lsrs	r0, r0, #4
 8000fcc:	3904      	subs	r1, #4
 8000fce:	a202      	add	r2, pc, #8	; (adr r2, 8000fd8 <__clzsi2+0x2c>)
 8000fd0:	5c10      	ldrb	r0, [r2, r0]
 8000fd2:	1840      	adds	r0, r0, r1
 8000fd4:	4770      	bx	lr
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	02020304 	.word	0x02020304
 8000fdc:	01010101 	.word	0x01010101
	...

08000fe8 <__eqsf2>:
 8000fe8:	b570      	push	{r4, r5, r6, lr}
 8000fea:	0042      	lsls	r2, r0, #1
 8000fec:	0245      	lsls	r5, r0, #9
 8000fee:	024e      	lsls	r6, r1, #9
 8000ff0:	004c      	lsls	r4, r1, #1
 8000ff2:	0fc3      	lsrs	r3, r0, #31
 8000ff4:	0a6d      	lsrs	r5, r5, #9
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	0e12      	lsrs	r2, r2, #24
 8000ffa:	0a76      	lsrs	r6, r6, #9
 8000ffc:	0e24      	lsrs	r4, r4, #24
 8000ffe:	0fc9      	lsrs	r1, r1, #31
 8001000:	2aff      	cmp	r2, #255	; 0xff
 8001002:	d006      	beq.n	8001012 <__eqsf2+0x2a>
 8001004:	2cff      	cmp	r4, #255	; 0xff
 8001006:	d003      	beq.n	8001010 <__eqsf2+0x28>
 8001008:	42a2      	cmp	r2, r4
 800100a:	d101      	bne.n	8001010 <__eqsf2+0x28>
 800100c:	42b5      	cmp	r5, r6
 800100e:	d006      	beq.n	800101e <__eqsf2+0x36>
 8001010:	bd70      	pop	{r4, r5, r6, pc}
 8001012:	2d00      	cmp	r5, #0
 8001014:	d1fc      	bne.n	8001010 <__eqsf2+0x28>
 8001016:	2cff      	cmp	r4, #255	; 0xff
 8001018:	d1fa      	bne.n	8001010 <__eqsf2+0x28>
 800101a:	2e00      	cmp	r6, #0
 800101c:	d1f8      	bne.n	8001010 <__eqsf2+0x28>
 800101e:	428b      	cmp	r3, r1
 8001020:	d006      	beq.n	8001030 <__eqsf2+0x48>
 8001022:	2001      	movs	r0, #1
 8001024:	2a00      	cmp	r2, #0
 8001026:	d1f3      	bne.n	8001010 <__eqsf2+0x28>
 8001028:	0028      	movs	r0, r5
 800102a:	1e43      	subs	r3, r0, #1
 800102c:	4198      	sbcs	r0, r3
 800102e:	e7ef      	b.n	8001010 <__eqsf2+0x28>
 8001030:	2000      	movs	r0, #0
 8001032:	e7ed      	b.n	8001010 <__eqsf2+0x28>

08001034 <__gesf2>:
 8001034:	b570      	push	{r4, r5, r6, lr}
 8001036:	0042      	lsls	r2, r0, #1
 8001038:	0245      	lsls	r5, r0, #9
 800103a:	024e      	lsls	r6, r1, #9
 800103c:	004c      	lsls	r4, r1, #1
 800103e:	0fc3      	lsrs	r3, r0, #31
 8001040:	0a6d      	lsrs	r5, r5, #9
 8001042:	0e12      	lsrs	r2, r2, #24
 8001044:	0a76      	lsrs	r6, r6, #9
 8001046:	0e24      	lsrs	r4, r4, #24
 8001048:	0fc8      	lsrs	r0, r1, #31
 800104a:	2aff      	cmp	r2, #255	; 0xff
 800104c:	d01b      	beq.n	8001086 <__gesf2+0x52>
 800104e:	2cff      	cmp	r4, #255	; 0xff
 8001050:	d00e      	beq.n	8001070 <__gesf2+0x3c>
 8001052:	2a00      	cmp	r2, #0
 8001054:	d11b      	bne.n	800108e <__gesf2+0x5a>
 8001056:	2c00      	cmp	r4, #0
 8001058:	d101      	bne.n	800105e <__gesf2+0x2a>
 800105a:	2e00      	cmp	r6, #0
 800105c:	d01c      	beq.n	8001098 <__gesf2+0x64>
 800105e:	2d00      	cmp	r5, #0
 8001060:	d00c      	beq.n	800107c <__gesf2+0x48>
 8001062:	4283      	cmp	r3, r0
 8001064:	d01c      	beq.n	80010a0 <__gesf2+0x6c>
 8001066:	2102      	movs	r1, #2
 8001068:	1e58      	subs	r0, r3, #1
 800106a:	4008      	ands	r0, r1
 800106c:	3801      	subs	r0, #1
 800106e:	bd70      	pop	{r4, r5, r6, pc}
 8001070:	2e00      	cmp	r6, #0
 8001072:	d122      	bne.n	80010ba <__gesf2+0x86>
 8001074:	2a00      	cmp	r2, #0
 8001076:	d1f4      	bne.n	8001062 <__gesf2+0x2e>
 8001078:	2d00      	cmp	r5, #0
 800107a:	d1f2      	bne.n	8001062 <__gesf2+0x2e>
 800107c:	2800      	cmp	r0, #0
 800107e:	d1f6      	bne.n	800106e <__gesf2+0x3a>
 8001080:	2001      	movs	r0, #1
 8001082:	4240      	negs	r0, r0
 8001084:	e7f3      	b.n	800106e <__gesf2+0x3a>
 8001086:	2d00      	cmp	r5, #0
 8001088:	d117      	bne.n	80010ba <__gesf2+0x86>
 800108a:	2cff      	cmp	r4, #255	; 0xff
 800108c:	d0f0      	beq.n	8001070 <__gesf2+0x3c>
 800108e:	2c00      	cmp	r4, #0
 8001090:	d1e7      	bne.n	8001062 <__gesf2+0x2e>
 8001092:	2e00      	cmp	r6, #0
 8001094:	d1e5      	bne.n	8001062 <__gesf2+0x2e>
 8001096:	e7e6      	b.n	8001066 <__gesf2+0x32>
 8001098:	2000      	movs	r0, #0
 800109a:	2d00      	cmp	r5, #0
 800109c:	d0e7      	beq.n	800106e <__gesf2+0x3a>
 800109e:	e7e2      	b.n	8001066 <__gesf2+0x32>
 80010a0:	42a2      	cmp	r2, r4
 80010a2:	dc05      	bgt.n	80010b0 <__gesf2+0x7c>
 80010a4:	dbea      	blt.n	800107c <__gesf2+0x48>
 80010a6:	42b5      	cmp	r5, r6
 80010a8:	d802      	bhi.n	80010b0 <__gesf2+0x7c>
 80010aa:	d3e7      	bcc.n	800107c <__gesf2+0x48>
 80010ac:	2000      	movs	r0, #0
 80010ae:	e7de      	b.n	800106e <__gesf2+0x3a>
 80010b0:	4243      	negs	r3, r0
 80010b2:	4158      	adcs	r0, r3
 80010b4:	0040      	lsls	r0, r0, #1
 80010b6:	3801      	subs	r0, #1
 80010b8:	e7d9      	b.n	800106e <__gesf2+0x3a>
 80010ba:	2002      	movs	r0, #2
 80010bc:	4240      	negs	r0, r0
 80010be:	e7d6      	b.n	800106e <__gesf2+0x3a>

080010c0 <__lesf2>:
 80010c0:	b570      	push	{r4, r5, r6, lr}
 80010c2:	0042      	lsls	r2, r0, #1
 80010c4:	0245      	lsls	r5, r0, #9
 80010c6:	024e      	lsls	r6, r1, #9
 80010c8:	004c      	lsls	r4, r1, #1
 80010ca:	0fc3      	lsrs	r3, r0, #31
 80010cc:	0a6d      	lsrs	r5, r5, #9
 80010ce:	0e12      	lsrs	r2, r2, #24
 80010d0:	0a76      	lsrs	r6, r6, #9
 80010d2:	0e24      	lsrs	r4, r4, #24
 80010d4:	0fc8      	lsrs	r0, r1, #31
 80010d6:	2aff      	cmp	r2, #255	; 0xff
 80010d8:	d00b      	beq.n	80010f2 <__lesf2+0x32>
 80010da:	2cff      	cmp	r4, #255	; 0xff
 80010dc:	d00d      	beq.n	80010fa <__lesf2+0x3a>
 80010de:	2a00      	cmp	r2, #0
 80010e0:	d11f      	bne.n	8001122 <__lesf2+0x62>
 80010e2:	2c00      	cmp	r4, #0
 80010e4:	d116      	bne.n	8001114 <__lesf2+0x54>
 80010e6:	2e00      	cmp	r6, #0
 80010e8:	d114      	bne.n	8001114 <__lesf2+0x54>
 80010ea:	2000      	movs	r0, #0
 80010ec:	2d00      	cmp	r5, #0
 80010ee:	d010      	beq.n	8001112 <__lesf2+0x52>
 80010f0:	e009      	b.n	8001106 <__lesf2+0x46>
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	d10c      	bne.n	8001110 <__lesf2+0x50>
 80010f6:	2cff      	cmp	r4, #255	; 0xff
 80010f8:	d113      	bne.n	8001122 <__lesf2+0x62>
 80010fa:	2e00      	cmp	r6, #0
 80010fc:	d108      	bne.n	8001110 <__lesf2+0x50>
 80010fe:	2a00      	cmp	r2, #0
 8001100:	d008      	beq.n	8001114 <__lesf2+0x54>
 8001102:	4283      	cmp	r3, r0
 8001104:	d012      	beq.n	800112c <__lesf2+0x6c>
 8001106:	2102      	movs	r1, #2
 8001108:	1e58      	subs	r0, r3, #1
 800110a:	4008      	ands	r0, r1
 800110c:	3801      	subs	r0, #1
 800110e:	e000      	b.n	8001112 <__lesf2+0x52>
 8001110:	2002      	movs	r0, #2
 8001112:	bd70      	pop	{r4, r5, r6, pc}
 8001114:	2d00      	cmp	r5, #0
 8001116:	d1f4      	bne.n	8001102 <__lesf2+0x42>
 8001118:	2800      	cmp	r0, #0
 800111a:	d1fa      	bne.n	8001112 <__lesf2+0x52>
 800111c:	2001      	movs	r0, #1
 800111e:	4240      	negs	r0, r0
 8001120:	e7f7      	b.n	8001112 <__lesf2+0x52>
 8001122:	2c00      	cmp	r4, #0
 8001124:	d1ed      	bne.n	8001102 <__lesf2+0x42>
 8001126:	2e00      	cmp	r6, #0
 8001128:	d1eb      	bne.n	8001102 <__lesf2+0x42>
 800112a:	e7ec      	b.n	8001106 <__lesf2+0x46>
 800112c:	42a2      	cmp	r2, r4
 800112e:	dc05      	bgt.n	800113c <__lesf2+0x7c>
 8001130:	dbf2      	blt.n	8001118 <__lesf2+0x58>
 8001132:	42b5      	cmp	r5, r6
 8001134:	d802      	bhi.n	800113c <__lesf2+0x7c>
 8001136:	d3ef      	bcc.n	8001118 <__lesf2+0x58>
 8001138:	2000      	movs	r0, #0
 800113a:	e7ea      	b.n	8001112 <__lesf2+0x52>
 800113c:	4243      	negs	r3, r0
 800113e:	4158      	adcs	r0, r3
 8001140:	0040      	lsls	r0, r0, #1
 8001142:	3801      	subs	r0, #1
 8001144:	e7e5      	b.n	8001112 <__lesf2+0x52>
 8001146:	46c0      	nop			; (mov r8, r8)

08001148 <HAL_TIM_PeriodElapsedCallback>:
float command_prev_motor1;
float command_prev_motor2;

// callback function that gets called when a full sampling period has passed
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	// timer 6 is the timer used for sampling the sensor readings
	if(htim->Instance == TIM6)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a77      	ldr	r2, [pc, #476]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d000      	beq.n	800115c <HAL_TIM_PeriodElapsedCallback+0x14>
 800115a:	e0e7      	b.n	800132c <HAL_TIM_PeriodElapsedCallback+0x1e4>
	{

		// the counter stores the number of rising-edge and falling-edge transitions
		// performed by Channel 1 and Channel 2 during a full rotation of the motor shaft
		count_motor1 = __HAL_TIM_GET_COUNTER(&htim1);
 800115c:	4b76      	ldr	r3, [pc, #472]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	b29a      	uxth	r2, r3
 8001164:	4b75      	ldr	r3, [pc, #468]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001166:	801a      	strh	r2, [r3, #0]
		count_motor2 = __HAL_TIM_GET_COUNTER(&htim3);
 8001168:	4b75      	ldr	r3, [pc, #468]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b74      	ldr	r3, [pc, #464]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001172:	801a      	strh	r2, [r3, #0]

		// variable that stores the difference between current count and previous count
        int32_t diff_motor1 = (((int32_t)count_motor1) - ((int32_t)count_prev_motor1)) * direction_1;
 8001174:	4b71      	ldr	r3, [pc, #452]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	001a      	movs	r2, r3
 800117a:	4b73      	ldr	r3, [pc, #460]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	4a72      	ldr	r2, [pc, #456]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001182:	7812      	ldrb	r2, [r2, #0]
 8001184:	b252      	sxtb	r2, r2
 8001186:	4353      	muls	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
        int32_t diff_motor2 = (((int32_t)count_motor2) - ((int32_t)count_prev_motor2)) * direction_2;
 800118a:	4b6e      	ldr	r3, [pc, #440]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	001a      	movs	r2, r3
 8001190:	4b6f      	ldr	r3, [pc, #444]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	4a6f      	ldr	r2, [pc, #444]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001198:	7812      	ldrb	r2, [r2, #0]
 800119a:	b252      	sxtb	r2, r2
 800119c:	4353      	muls	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]

        // if the difference is negative it means that the timer 3 counter performed an overflow
		if( diff_motor1 < 0 ) diff_motor1 += 0x0000FFFF;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	da04      	bge.n	80011b0 <HAL_TIM_PeriodElapsedCallback+0x68>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4a6b      	ldr	r2, [pc, #428]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80011aa:	4694      	mov	ip, r2
 80011ac:	4463      	add	r3, ip
 80011ae:	60fb      	str	r3, [r7, #12]
		if( diff_motor2 < 0 ) diff_motor2 += 0x0000FFFF;
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	da04      	bge.n	80011c0 <HAL_TIM_PeriodElapsedCallback+0x78>
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	4a67      	ldr	r2, [pc, #412]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80011ba:	4694      	mov	ip, r2
 80011bc:	4463      	add	r3, ip
 80011be:	60bb      	str	r3, [r7, #8]

	    // calculate current speed ( measured in RPM )
	    speed_motor1 = counts_to_rpm * diff_motor1;
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f7ff fe1f 	bl	8000e04 <__aeabi_i2f>
 80011c6:	1c03      	adds	r3, r0, #0
 80011c8:	4964      	ldr	r1, [pc, #400]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x214>)
 80011ca:	1c18      	adds	r0, r3, #0
 80011cc:	f7ff fb0c 	bl	80007e8 <__aeabi_fmul>
 80011d0:	1c03      	adds	r3, r0, #0
 80011d2:	1c1a      	adds	r2, r3, #0
 80011d4:	4b62      	ldr	r3, [pc, #392]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80011d6:	601a      	str	r2, [r3, #0]
	    speed_motor2 = counts_to_rpm * diff_motor2;
 80011d8:	68b8      	ldr	r0, [r7, #8]
 80011da:	f7ff fe13 	bl	8000e04 <__aeabi_i2f>
 80011de:	1c03      	adds	r3, r0, #0
 80011e0:	495e      	ldr	r1, [pc, #376]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x214>)
 80011e2:	1c18      	adds	r0, r3, #0
 80011e4:	f7ff fb00 	bl	80007e8 <__aeabi_fmul>
 80011e8:	1c03      	adds	r3, r0, #0
 80011ea:	1c1a      	adds	r2, r3, #0
 80011ec:	4b5d      	ldr	r3, [pc, #372]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80011ee:	601a      	str	r2, [r3, #0]

	    // calculate the current error between the set and actual speed
	    error_curr_motor1 = set_speed_motor1 - speed_motor1;
 80011f0:	4b5d      	ldr	r3, [pc, #372]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b5a      	ldr	r3, [pc, #360]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	1c19      	adds	r1, r3, #0
 80011fa:	1c10      	adds	r0, r2, #0
 80011fc:	f7ff fc42 	bl	8000a84 <__aeabi_fsub>
 8001200:	1c03      	adds	r3, r0, #0
 8001202:	1c1a      	adds	r2, r3, #0
 8001204:	4b59      	ldr	r3, [pc, #356]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001206:	601a      	str	r2, [r3, #0]
	    error_curr_motor2 = set_speed_motor2 - speed_motor2;
 8001208:	4b59      	ldr	r3, [pc, #356]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b55      	ldr	r3, [pc, #340]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	1c19      	adds	r1, r3, #0
 8001212:	1c10      	adds	r0, r2, #0
 8001214:	f7ff fc36 	bl	8000a84 <__aeabi_fsub>
 8001218:	1c03      	adds	r3, r0, #0
 800121a:	1c1a      	adds	r2, r3, #0
 800121c:	4b55      	ldr	r3, [pc, #340]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800121e:	601a      	str	r2, [r3, #0]

	    // calculate the value of the command ( in RPM )
	    command_curr_motor1 = command_prev_motor1 + current_gain * error_curr_motor1 + previous_gain * error_prev_motor1;
 8001220:	4b52      	ldr	r3, [pc, #328]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4954      	ldr	r1, [pc, #336]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001226:	1c18      	adds	r0, r3, #0
 8001228:	f7ff fade 	bl	80007e8 <__aeabi_fmul>
 800122c:	1c03      	adds	r3, r0, #0
 800122e:	1c1a      	adds	r2, r3, #0
 8001230:	4b52      	ldr	r3, [pc, #328]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	1c19      	adds	r1, r3, #0
 8001236:	1c10      	adds	r0, r2, #0
 8001238:	f7ff f81c 	bl	8000274 <__aeabi_fadd>
 800123c:	1c03      	adds	r3, r0, #0
 800123e:	1c1c      	adds	r4, r3, #0
 8001240:	4b4f      	ldr	r3, [pc, #316]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	494f      	ldr	r1, [pc, #316]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001246:	1c18      	adds	r0, r3, #0
 8001248:	f7ff face 	bl	80007e8 <__aeabi_fmul>
 800124c:	1c03      	adds	r3, r0, #0
 800124e:	1c19      	adds	r1, r3, #0
 8001250:	1c20      	adds	r0, r4, #0
 8001252:	f7ff f80f 	bl	8000274 <__aeabi_fadd>
 8001256:	1c03      	adds	r3, r0, #0
 8001258:	1c1a      	adds	r2, r3, #0
 800125a:	4b4b      	ldr	r3, [pc, #300]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800125c:	601a      	str	r2, [r3, #0]
	    command_curr_motor2 = command_prev_motor2 + current_gain * error_curr_motor2 + previous_gain * error_prev_motor2;
 800125e:	4b45      	ldr	r3, [pc, #276]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4945      	ldr	r1, [pc, #276]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001264:	1c18      	adds	r0, r3, #0
 8001266:	f7ff fabf 	bl	80007e8 <__aeabi_fmul>
 800126a:	1c03      	adds	r3, r0, #0
 800126c:	1c1a      	adds	r2, r3, #0
 800126e:	4b47      	ldr	r3, [pc, #284]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	1c19      	adds	r1, r3, #0
 8001274:	1c10      	adds	r0, r2, #0
 8001276:	f7fe fffd 	bl	8000274 <__aeabi_fadd>
 800127a:	1c03      	adds	r3, r0, #0
 800127c:	1c1c      	adds	r4, r3, #0
 800127e:	4b44      	ldr	r3, [pc, #272]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4940      	ldr	r1, [pc, #256]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001284:	1c18      	adds	r0, r3, #0
 8001286:	f7ff faaf 	bl	80007e8 <__aeabi_fmul>
 800128a:	1c03      	adds	r3, r0, #0
 800128c:	1c19      	adds	r1, r3, #0
 800128e:	1c20      	adds	r0, r4, #0
 8001290:	f7fe fff0 	bl	8000274 <__aeabi_fadd>
 8001294:	1c03      	adds	r3, r0, #0
 8001296:	1c1a      	adds	r2, r3, #0
 8001298:	4b3e      	ldr	r3, [pc, #248]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800129a:	601a      	str	r2, [r3, #0]

	    // convert the command to duty cycle value and write it in the register that stores said value
	    * PWM_Duty_Value_Register_Motor1 =  (uint16_t)(30 * ((command_curr_motor1 - offset) / slope));
 800129c:	4b3a      	ldr	r3, [pc, #232]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	493d      	ldr	r1, [pc, #244]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80012a2:	1c18      	adds	r0, r3, #0
 80012a4:	f7fe ffe6 	bl	8000274 <__aeabi_fadd>
 80012a8:	1c03      	adds	r3, r0, #0
 80012aa:	493c      	ldr	r1, [pc, #240]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80012ac:	1c18      	adds	r0, r3, #0
 80012ae:	f7ff f981 	bl	80005b4 <__aeabi_fdiv>
 80012b2:	1c03      	adds	r3, r0, #0
 80012b4:	493a      	ldr	r1, [pc, #232]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80012b6:	1c18      	adds	r0, r3, #0
 80012b8:	f7ff fa96 	bl	80007e8 <__aeabi_fmul>
 80012bc:	1c03      	adds	r3, r0, #0
 80012be:	4c39      	ldr	r4, [pc, #228]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80012c0:	1c18      	adds	r0, r3, #0
 80012c2:	f7fe ffbf 	bl	8000244 <__aeabi_f2uiz>
 80012c6:	0003      	movs	r3, r0
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	8023      	strh	r3, [r4, #0]
	    * PWM_Duty_Value_Register_Motor2 =  (uint16_t)(30 * ((command_curr_motor2 - offset) / slope));
 80012cc:	4b31      	ldr	r3, [pc, #196]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4931      	ldr	r1, [pc, #196]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80012d2:	1c18      	adds	r0, r3, #0
 80012d4:	f7fe ffce 	bl	8000274 <__aeabi_fadd>
 80012d8:	1c03      	adds	r3, r0, #0
 80012da:	4930      	ldr	r1, [pc, #192]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80012dc:	1c18      	adds	r0, r3, #0
 80012de:	f7ff f969 	bl	80005b4 <__aeabi_fdiv>
 80012e2:	1c03      	adds	r3, r0, #0
 80012e4:	492e      	ldr	r1, [pc, #184]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80012e6:	1c18      	adds	r0, r3, #0
 80012e8:	f7ff fa7e 	bl	80007e8 <__aeabi_fmul>
 80012ec:	1c03      	adds	r3, r0, #0
 80012ee:	4c2e      	ldr	r4, [pc, #184]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80012f0:	1c18      	adds	r0, r3, #0
 80012f2:	f7fe ffa7 	bl	8000244 <__aeabi_f2uiz>
 80012f6:	0003      	movs	r3, r0
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	8023      	strh	r3, [r4, #0]

	    // update the value of error_prev
	    error_prev_motor1 = error_curr_motor1;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x224>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001302:	601a      	str	r2, [r3, #0]
	    error_prev_motor2 = error_curr_motor2;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b21      	ldr	r3, [pc, #132]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800130a:	601a      	str	r2, [r3, #0]

	    // update the value of command_prev
	    command_prev_motor1 = command_curr_motor1;
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001312:	601a      	str	r2, [r3, #0]
	    command_prev_motor2 = command_curr_motor2;
 8001314:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b1c      	ldr	r3, [pc, #112]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800131a:	601a      	str	r2, [r3, #0]

	    // update count_prev variable with the value of count
	    count_prev_motor1 = count_motor1;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800131e:	881a      	ldrh	r2, [r3, #0]
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001322:	801a      	strh	r2, [r3, #0]
	    count_prev_motor2 = count_motor2;
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001326:	881a      	ldrh	r2, [r3, #0]
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800132a:	801a      	strh	r2, [r3, #0]
	}
}
 800132c:	46c0      	nop			; (mov r8, r8)
 800132e:	46bd      	mov	sp, r7
 8001330:	b005      	add	sp, #20
 8001332:	bd90      	pop	{r4, r7, pc}
 8001334:	40001000 	.word	0x40001000
 8001338:	2000007c 	.word	0x2000007c
 800133c:	200003a6 	.word	0x200003a6
 8001340:	200000c4 	.word	0x200000c4
 8001344:	200003a8 	.word	0x200003a8
 8001348:	200003aa 	.word	0x200003aa
 800134c:	20000000 	.word	0x20000000
 8001350:	200003ac 	.word	0x200003ac
 8001354:	20000001 	.word	0x20000001
 8001358:	0000ffff 	.word	0x0000ffff
 800135c:	3f124925 	.word	0x3f124925
 8001360:	200003b0 	.word	0x200003b0
 8001364:	200003b4 	.word	0x200003b4
 8001368:	200003b8 	.word	0x200003b8
 800136c:	200003c8 	.word	0x200003c8
 8001370:	200003bc 	.word	0x200003bc
 8001374:	200003cc 	.word	0x200003cc
 8001378:	3f3db22d 	.word	0x3f3db22d
 800137c:	200003d8 	.word	0x200003d8
 8001380:	200003c0 	.word	0x200003c0
 8001384:	bf23404f 	.word	0xbf23404f
 8001388:	200003d0 	.word	0x200003d0
 800138c:	200003dc 	.word	0x200003dc
 8001390:	200003c4 	.word	0x200003c4
 8001394:	200003d4 	.word	0x200003d4
 8001398:	421ca474 	.word	0x421ca474
 800139c:	3fa597f6 	.word	0x3fa597f6
 80013a0:	41f00000 	.word	0x41f00000
 80013a4:	40002034 	.word	0x40002034
 80013a8:	40014834 	.word	0x40014834

080013ac <HAL_GPIO_EXTI_Callback>:

//Callback for the GPIO Interrupt
//Executed when the user button is pressed, sending basic commands to the wireless device to check its functionality
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	0002      	movs	r2, r0
 80013b4:	1dbb      	adds	r3, r7, #6
 80013b6:	801a      	strh	r2, [r3, #0]
  // User Button ( blue ) is set on the 13th pin of port C
  if(GPIO_Pin == GPIO_PIN_13)
 80013b8:	1dbb      	adds	r3, r7, #6
 80013ba:	881a      	ldrh	r2, [r3, #0]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	019b      	lsls	r3, r3, #6
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d15d      	bne.n	8001480 <HAL_GPIO_EXTI_Callback+0xd4>
  {
	    // switch clause used for cycling through messages for the wireless device
        switch(message_nr)
 80013c4:	4b30      	ldr	r3, [pc, #192]	; (8001488 <HAL_GPIO_EXTI_Callback+0xdc>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d031      	beq.n	8001430 <HAL_GPIO_EXTI_Callback+0x84>
 80013cc:	dc4b      	bgt.n	8001466 <HAL_GPIO_EXTI_Callback+0xba>
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <HAL_GPIO_EXTI_Callback+0x2c>
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d016      	beq.n	8001404 <HAL_GPIO_EXTI_Callback+0x58>
 80013d6:	e046      	b.n	8001466 <HAL_GPIO_EXTI_Callback+0xba>
        {
        		case 0:
        		// Test Message, should return OK if everything functions well
                sprintf(Bluetooth_TX_Buffer,"AT\r\n");
 80013d8:	4a2c      	ldr	r2, [pc, #176]	; (800148c <HAL_GPIO_EXTI_Callback+0xe0>)
 80013da:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <HAL_GPIO_EXTI_Callback+0xe4>)
 80013dc:	0011      	movs	r1, r2
 80013de:	0018      	movs	r0, r3
 80013e0:	f004 fd56 	bl	8005e90 <siprintf>
	            if(HAL_UART_Transmit_IT(&huart3,Bluetooth_TX_Buffer,strlen(Bluetooth_TX_Buffer)) != HAL_OK)
 80013e4:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <HAL_GPIO_EXTI_Callback+0xe4>)
 80013e6:	0018      	movs	r0, r3
 80013e8:	f7fe fe8e 	bl	8000108 <strlen>
 80013ec:	0003      	movs	r3, r0
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4927      	ldr	r1, [pc, #156]	; (8001490 <HAL_GPIO_EXTI_Callback+0xe4>)
 80013f2:	4b28      	ldr	r3, [pc, #160]	; (8001494 <HAL_GPIO_EXTI_Callback+0xe8>)
 80013f4:	0018      	movs	r0, r3
 80013f6:	f003 faa9 	bl	800494c <HAL_UART_Transmit_IT>
 80013fa:	1e03      	subs	r3, r0, #0
 80013fc:	d02e      	beq.n	800145c <HAL_GPIO_EXTI_Callback+0xb0>
	            {
	               Error_Handler();
 80013fe:	f000 ff43 	bl	8002288 <Error_Handler>
	            }
	            break;
 8001402:	e02b      	b.n	800145c <HAL_GPIO_EXTI_Callback+0xb0>

        		case 1:
        		// Message that returns the name of the wireless device
        		sprintf(Bluetooth_TX_Buffer,"AT+NAME\r\n");
 8001404:	4a24      	ldr	r2, [pc, #144]	; (8001498 <HAL_GPIO_EXTI_Callback+0xec>)
 8001406:	4b22      	ldr	r3, [pc, #136]	; (8001490 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001408:	0011      	movs	r1, r2
 800140a:	0018      	movs	r0, r3
 800140c:	f004 fd40 	bl	8005e90 <siprintf>
                if(HAL_UART_Transmit_IT(&huart3,Bluetooth_TX_Buffer,strlen(Bluetooth_TX_Buffer)) != HAL_OK)
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001412:	0018      	movs	r0, r3
 8001414:	f7fe fe78 	bl	8000108 <strlen>
 8001418:	0003      	movs	r3, r0
 800141a:	b29a      	uxth	r2, r3
 800141c:	491c      	ldr	r1, [pc, #112]	; (8001490 <HAL_GPIO_EXTI_Callback+0xe4>)
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001420:	0018      	movs	r0, r3
 8001422:	f003 fa93 	bl	800494c <HAL_UART_Transmit_IT>
 8001426:	1e03      	subs	r3, r0, #0
 8001428:	d01a      	beq.n	8001460 <HAL_GPIO_EXTI_Callback+0xb4>
                {
                   Error_Handler();
 800142a:	f000 ff2d 	bl	8002288 <Error_Handler>
   	            }
                break;
 800142e:	e017      	b.n	8001460 <HAL_GPIO_EXTI_Callback+0xb4>

        		case 2:
        		// Message that returns the pin code of the wireless device
        		sprintf(Bluetooth_TX_Buffer,"AT+PIN\r\n");
 8001430:	4a1a      	ldr	r2, [pc, #104]	; (800149c <HAL_GPIO_EXTI_Callback+0xf0>)
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001434:	0011      	movs	r1, r2
 8001436:	0018      	movs	r0, r3
 8001438:	f004 fd2a 	bl	8005e90 <siprintf>
        	    if(HAL_UART_Transmit_IT(&huart3,Bluetooth_TX_Buffer,strlen(Bluetooth_TX_Buffer)) != HAL_OK)
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <HAL_GPIO_EXTI_Callback+0xe4>)
 800143e:	0018      	movs	r0, r3
 8001440:	f7fe fe62 	bl	8000108 <strlen>
 8001444:	0003      	movs	r3, r0
 8001446:	b29a      	uxth	r2, r3
 8001448:	4911      	ldr	r1, [pc, #68]	; (8001490 <HAL_GPIO_EXTI_Callback+0xe4>)
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_GPIO_EXTI_Callback+0xe8>)
 800144c:	0018      	movs	r0, r3
 800144e:	f003 fa7d 	bl	800494c <HAL_UART_Transmit_IT>
 8001452:	1e03      	subs	r3, r0, #0
 8001454:	d006      	beq.n	8001464 <HAL_GPIO_EXTI_Callback+0xb8>
        		{
        		   Error_Handler();
 8001456:	f000 ff17 	bl	8002288 <Error_Handler>
        		}
        	    break;
 800145a:	e003      	b.n	8001464 <HAL_GPIO_EXTI_Callback+0xb8>
	            break;
 800145c:	46c0      	nop			; (mov r8, r8)
 800145e:	e002      	b.n	8001466 <HAL_GPIO_EXTI_Callback+0xba>
                break;
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	e000      	b.n	8001466 <HAL_GPIO_EXTI_Callback+0xba>
        	    break;
 8001464:	46c0      	nop			; (mov r8, r8)
        }
        // increment the message counter, reset to 0 when it reaches value 3
        message_nr += 1;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001470:	701a      	strb	r2, [r3, #0]
        if(message_nr == 3)
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d102      	bne.n	8001480 <HAL_GPIO_EXTI_Callback+0xd4>
        	message_nr = 0;
 800147a:	4b03      	ldr	r3, [pc, #12]	; (8001488 <HAL_GPIO_EXTI_Callback+0xdc>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
  }
}
 8001480:	46c0      	nop			; (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	b002      	add	sp, #8
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200003a4 	.word	0x200003a4
 800148c:	080067f4 	.word	0x080067f4
 8001490:	20000398 	.word	0x20000398
 8001494:	200002b4 	.word	0x200002b4
 8001498:	080067fc 	.word	0x080067fc
 800149c:	08006808 	.word	0x08006808

080014a0 <HAL_UART_RxCpltCallback>:

// callback for completion of message reception through UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	// message received through UART2
	if(huart->Instance == USART2)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4ace      	ldr	r2, [pc, #824]	; (80017e8 <HAL_UART_RxCpltCallback+0x348>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d139      	bne.n	8001526 <HAL_UART_RxCpltCallback+0x86>
  	{
	       // data is being received one byte at a time ( the length of the message is unknown ), so we
	       // we consider a message as completed if it ends with the '\n' character
		   if(*(RX_Buffer + RX_Buffer_Index - 1) == '\n')
 80014b2:	4bce      	ldr	r3, [pc, #824]	; (80017ec <HAL_UART_RxCpltCallback+0x34c>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	1e5a      	subs	r2, r3, #1
 80014b8:	4bcd      	ldr	r3, [pc, #820]	; (80017f0 <HAL_UART_RxCpltCallback+0x350>)
 80014ba:	18d3      	adds	r3, r2, r3
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b0a      	cmp	r3, #10
 80014c0:	d11d      	bne.n	80014fe <HAL_UART_RxCpltCallback+0x5e>
		   {
		      // setting TX_Semaphore so that a the message containing the number of messages sent through
		      // UART2 is sent to the terminal only after a full message is received
			   TX_Semaphore = 1;
 80014c2:	4bcc      	ldr	r3, [pc, #816]	; (80017f4 <HAL_UART_RxCpltCallback+0x354>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]

		      // send the received message to the wireless device
		      if(HAL_UART_Transmit_IT(&huart3,RX_Buffer,RX_Buffer_Index) != HAL_OK)
 80014c8:	4bc8      	ldr	r3, [pc, #800]	; (80017ec <HAL_UART_RxCpltCallback+0x34c>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	49c8      	ldr	r1, [pc, #800]	; (80017f0 <HAL_UART_RxCpltCallback+0x350>)
 80014d0:	4bc9      	ldr	r3, [pc, #804]	; (80017f8 <HAL_UART_RxCpltCallback+0x358>)
 80014d2:	0018      	movs	r0, r3
 80014d4:	f003 fa3a 	bl	800494c <HAL_UART_Transmit_IT>
 80014d8:	1e03      	subs	r3, r0, #0
 80014da:	d001      	beq.n	80014e0 <HAL_UART_RxCpltCallback+0x40>
		      {
		         Error_Handler();
 80014dc:	f000 fed4 	bl	8002288 <Error_Handler>
	          }

		      // loop-back the received message so that we can check its integrity
		      if(HAL_UART_Transmit_IT(&huart2,RX_Buffer,RX_Buffer_Index) != HAL_OK)
 80014e0:	4bc2      	ldr	r3, [pc, #776]	; (80017ec <HAL_UART_RxCpltCallback+0x34c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	49c2      	ldr	r1, [pc, #776]	; (80017f0 <HAL_UART_RxCpltCallback+0x350>)
 80014e8:	4bc4      	ldr	r3, [pc, #784]	; (80017fc <HAL_UART_RxCpltCallback+0x35c>)
 80014ea:	0018      	movs	r0, r3
 80014ec:	f003 fa2e 	bl	800494c <HAL_UART_Transmit_IT>
 80014f0:	1e03      	subs	r3, r0, #0
 80014f2:	d001      	beq.n	80014f8 <HAL_UART_RxCpltCallback+0x58>
              {
		         Error_Handler();
 80014f4:	f000 fec8 	bl	8002288 <Error_Handler>
		      }

		      // reset the buffer index for the buffer containing the received message to 0
		      RX_Buffer_Index = 0;
 80014f8:	4bbc      	ldr	r3, [pc, #752]	; (80017ec <HAL_UART_RxCpltCallback+0x34c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]

	       }

		   // restart data reception
           if(HAL_UART_Receive_IT(&huart2,RX_Buffer + (RX_Buffer_Index ++),1) != HAL_OK)
 80014fe:	4bbb      	ldr	r3, [pc, #748]	; (80017ec <HAL_UART_RxCpltCallback+0x34c>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	b2d1      	uxtb	r1, r2
 8001506:	4ab9      	ldr	r2, [pc, #740]	; (80017ec <HAL_UART_RxCpltCallback+0x34c>)
 8001508:	7011      	strb	r1, [r2, #0]
 800150a:	001a      	movs	r2, r3
 800150c:	4bb8      	ldr	r3, [pc, #736]	; (80017f0 <HAL_UART_RxCpltCallback+0x350>)
 800150e:	18d1      	adds	r1, r2, r3
 8001510:	4bba      	ldr	r3, [pc, #744]	; (80017fc <HAL_UART_RxCpltCallback+0x35c>)
 8001512:	2201      	movs	r2, #1
 8001514:	0018      	movs	r0, r3
 8001516:	f003 fa89 	bl	8004a2c <HAL_UART_Receive_IT>
 800151a:	1e03      	subs	r3, r0, #0
 800151c:	d100      	bne.n	8001520 <HAL_UART_RxCpltCallback+0x80>
 800151e:	e23a      	b.n	8001996 <HAL_UART_RxCpltCallback+0x4f6>
		   {
	          Error_Handler();
 8001520:	f000 feb2 	bl	8002288 <Error_Handler>
		         Error_Handler();
			  }
		   }

	}
}
 8001524:	e237      	b.n	8001996 <HAL_UART_RxCpltCallback+0x4f6>
	else if(huart->Instance == USART3)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4ab5      	ldr	r2, [pc, #724]	; (8001800 <HAL_UART_RxCpltCallback+0x360>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d000      	beq.n	8001532 <HAL_UART_RxCpltCallback+0x92>
 8001530:	e231      	b.n	8001996 <HAL_UART_RxCpltCallback+0x4f6>
		   switch(*(Bluetooth_RX_Buffer + Bluetooth_RX_Buffer_Index - 1))
 8001532:	4bb4      	ldr	r3, [pc, #720]	; (8001804 <HAL_UART_RxCpltCallback+0x364>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	1e5a      	subs	r2, r3, #1
 8001538:	4bb3      	ldr	r3, [pc, #716]	; (8001808 <HAL_UART_RxCpltCallback+0x368>)
 800153a:	18d3      	adds	r3, r2, r3
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b6d      	cmp	r3, #109	; 0x6d
 8001540:	d033      	beq.n	80015aa <HAL_UART_RxCpltCallback+0x10a>
 8001542:	dd00      	ble.n	8001546 <HAL_UART_RxCpltCallback+0xa6>
 8001544:	e204      	b.n	8001950 <HAL_UART_RxCpltCallback+0x4b0>
 8001546:	2b0a      	cmp	r3, #10
 8001548:	d002      	beq.n	8001550 <HAL_UART_RxCpltCallback+0xb0>
 800154a:	2b25      	cmp	r3, #37	; 0x25
 800154c:	d010      	beq.n	8001570 <HAL_UART_RxCpltCallback+0xd0>
 800154e:	e1ff      	b.n	8001950 <HAL_UART_RxCpltCallback+0x4b0>
              if(HAL_UART_Transmit_IT(&huart2,Bluetooth_RX_Buffer,Bluetooth_RX_Buffer_Index) != HAL_OK)
 8001550:	4bac      	ldr	r3, [pc, #688]	; (8001804 <HAL_UART_RxCpltCallback+0x364>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b29a      	uxth	r2, r3
 8001556:	49ac      	ldr	r1, [pc, #688]	; (8001808 <HAL_UART_RxCpltCallback+0x368>)
 8001558:	4ba8      	ldr	r3, [pc, #672]	; (80017fc <HAL_UART_RxCpltCallback+0x35c>)
 800155a:	0018      	movs	r0, r3
 800155c:	f003 f9f6 	bl	800494c <HAL_UART_Transmit_IT>
 8001560:	1e03      	subs	r3, r0, #0
 8001562:	d001      	beq.n	8001568 <HAL_UART_RxCpltCallback+0xc8>
		         Error_Handler();
 8001564:	f000 fe90 	bl	8002288 <Error_Handler>
		      Bluetooth_RX_Buffer_Index = 0;
 8001568:	4ba6      	ldr	r3, [pc, #664]	; (8001804 <HAL_UART_RxCpltCallback+0x364>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
		   break;
 800156e:	e1ef      	b.n	8001950 <HAL_UART_RxCpltCallback+0x4b0>
			   * PWM_Duty_Value_Register_Turret = ( 10 * ((uint16_t)Bluetooth_RX_Buffer[0]) + ((uint16_t)Bluetooth_RX_Buffer[1]) - 528 ) * 96 + 1200;
 8001570:	4ba5      	ldr	r3, [pc, #660]	; (8001808 <HAL_UART_RxCpltCallback+0x368>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	001a      	movs	r2, r3
 8001576:	0013      	movs	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	189b      	adds	r3, r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	001a      	movs	r2, r3
 8001580:	4ba1      	ldr	r3, [pc, #644]	; (8001808 <HAL_UART_RxCpltCallback+0x368>)
 8001582:	785b      	ldrb	r3, [r3, #1]
 8001584:	18d3      	adds	r3, r2, r3
 8001586:	4aa1      	ldr	r2, [pc, #644]	; (800180c <HAL_UART_RxCpltCallback+0x36c>)
 8001588:	4694      	mov	ip, r2
 800158a:	4463      	add	r3, ip
 800158c:	b29b      	uxth	r3, r3
 800158e:	2260      	movs	r2, #96	; 0x60
 8001590:	4353      	muls	r3, r2
 8001592:	b29b      	uxth	r3, r3
 8001594:	4a9e      	ldr	r2, [pc, #632]	; (8001810 <HAL_UART_RxCpltCallback+0x370>)
 8001596:	2196      	movs	r1, #150	; 0x96
 8001598:	00c9      	lsls	r1, r1, #3
 800159a:	468c      	mov	ip, r1
 800159c:	4463      	add	r3, ip
 800159e:	b29b      	uxth	r3, r3
 80015a0:	8013      	strh	r3, [r2, #0]
			   Bluetooth_RX_Buffer_Index = 0;
 80015a2:	4b98      	ldr	r3, [pc, #608]	; (8001804 <HAL_UART_RxCpltCallback+0x364>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
		   break;
 80015a8:	e1d2      	b.n	8001950 <HAL_UART_RxCpltCallback+0x4b0>
			   uint16_t msg_to_duty = 10 * ((uint16_t)Bluetooth_RX_Buffer[0]) + ((uint16_t)Bluetooth_RX_Buffer[1]) - 528;
 80015aa:	4b97      	ldr	r3, [pc, #604]	; (8001808 <HAL_UART_RxCpltCallback+0x368>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	1c1a      	adds	r2, r3, #0
 80015b2:	0092      	lsls	r2, r2, #2
 80015b4:	18d3      	adds	r3, r2, r3
 80015b6:	18db      	adds	r3, r3, r3
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	4b93      	ldr	r3, [pc, #588]	; (8001808 <HAL_UART_RxCpltCallback+0x368>)
 80015bc:	785b      	ldrb	r3, [r3, #1]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	18d3      	adds	r3, r2, r3
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	210e      	movs	r1, #14
 80015c6:	187b      	adds	r3, r7, r1
 80015c8:	4890      	ldr	r0, [pc, #576]	; (800180c <HAL_UART_RxCpltCallback+0x36c>)
 80015ca:	4684      	mov	ip, r0
 80015cc:	4462      	add	r2, ip
 80015ce:	801a      	strh	r2, [r3, #0]
			   if(msg_to_duty >= 38 && msg_to_duty <= 74)
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	2b25      	cmp	r3, #37	; 0x25
 80015d6:	d800      	bhi.n	80015da <HAL_UART_RxCpltCallback+0x13a>
 80015d8:	e194      	b.n	8001904 <HAL_UART_RxCpltCallback+0x464>
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	2b4a      	cmp	r3, #74	; 0x4a
 80015e0:	d900      	bls.n	80015e4 <HAL_UART_RxCpltCallback+0x144>
 80015e2:	e18f      	b.n	8001904 <HAL_UART_RxCpltCallback+0x464>
				  * PWM_Duty_Value_Register_Motor1 = 0;
 80015e4:	4b8b      	ldr	r3, [pc, #556]	; (8001814 <HAL_UART_RxCpltCallback+0x374>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	801a      	strh	r2, [r3, #0]
				  set_speed_motor1 = 0;
 80015ea:	4b8b      	ldr	r3, [pc, #556]	; (8001818 <HAL_UART_RxCpltCallback+0x378>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
				  * PWM_Duty_Value_Register_Motor2 = 0;
 80015f0:	4b8a      	ldr	r3, [pc, #552]	; (800181c <HAL_UART_RxCpltCallback+0x37c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	801a      	strh	r2, [r3, #0]
			      set_speed_motor2 = 0;
 80015f6:	4b8a      	ldr	r3, [pc, #552]	; (8001820 <HAL_UART_RxCpltCallback+0x380>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
			      switch(Bluetooth_RX_Buffer[2])
 80015fc:	4b82      	ldr	r3, [pc, #520]	; (8001808 <HAL_UART_RxCpltCallback+0x368>)
 80015fe:	789b      	ldrb	r3, [r3, #2]
 8001600:	3b62      	subs	r3, #98	; 0x62
 8001602:	2b11      	cmp	r3, #17
 8001604:	d900      	bls.n	8001608 <HAL_UART_RxCpltCallback+0x168>
 8001606:	e19e      	b.n	8001946 <HAL_UART_RxCpltCallback+0x4a6>
 8001608:	009a      	lsls	r2, r3, #2
 800160a:	4b86      	ldr	r3, [pc, #536]	; (8001824 <HAL_UART_RxCpltCallback+0x384>)
 800160c:	18d3      	adds	r3, r2, r3
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	469f      	mov	pc, r3
			        	 direction_1 = 1;
 8001612:	4b85      	ldr	r3, [pc, #532]	; (8001828 <HAL_UART_RxCpltCallback+0x388>)
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
			        	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	01db      	lsls	r3, r3, #7
 800161c:	4883      	ldr	r0, [pc, #524]	; (800182c <HAL_UART_RxCpltCallback+0x38c>)
 800161e:	2200      	movs	r2, #0
 8001620:	0019      	movs	r1, r3
 8001622:	f001 fc57 	bl	8002ed4 <HAL_GPIO_WritePin>
			        	 * PWM_Duty_Value_Register_Motor1 = msg_to_duty * scale_to_period;
 8001626:	4a7b      	ldr	r2, [pc, #492]	; (8001814 <HAL_UART_RxCpltCallback+0x374>)
 8001628:	240e      	movs	r4, #14
 800162a:	193b      	adds	r3, r7, r4
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	1c19      	adds	r1, r3, #0
 8001630:	0109      	lsls	r1, r1, #4
 8001632:	1acb      	subs	r3, r1, r3
 8001634:	18db      	adds	r3, r3, r3
 8001636:	b29b      	uxth	r3, r3
 8001638:	8013      	strh	r3, [r2, #0]
			        	 set_speed_motor1 = ((float)( msg_to_duty )) * slope + offset;
 800163a:	193b      	adds	r3, r7, r4
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	0018      	movs	r0, r3
 8001640:	f7ff fc32 	bl	8000ea8 <__aeabi_ui2f>
 8001644:	1c03      	adds	r3, r0, #0
 8001646:	497a      	ldr	r1, [pc, #488]	; (8001830 <HAL_UART_RxCpltCallback+0x390>)
 8001648:	1c18      	adds	r0, r3, #0
 800164a:	f7ff f8cd 	bl	80007e8 <__aeabi_fmul>
 800164e:	1c03      	adds	r3, r0, #0
 8001650:	4978      	ldr	r1, [pc, #480]	; (8001834 <HAL_UART_RxCpltCallback+0x394>)
 8001652:	1c18      	adds	r0, r3, #0
 8001654:	f7ff fa16 	bl	8000a84 <__aeabi_fsub>
 8001658:	1c03      	adds	r3, r0, #0
 800165a:	1c1a      	adds	r2, r3, #0
 800165c:	4b6e      	ldr	r3, [pc, #440]	; (8001818 <HAL_UART_RxCpltCallback+0x378>)
 800165e:	601a      	str	r2, [r3, #0]
			        	 direction_2 = 1;
 8001660:	4b75      	ldr	r3, [pc, #468]	; (8001838 <HAL_UART_RxCpltCallback+0x398>)
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
			        	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	4870      	ldr	r0, [pc, #448]	; (800182c <HAL_UART_RxCpltCallback+0x38c>)
 800166c:	2200      	movs	r2, #0
 800166e:	0019      	movs	r1, r3
 8001670:	f001 fc30 	bl	8002ed4 <HAL_GPIO_WritePin>
			        	 * PWM_Duty_Value_Register_Motor2 = msg_to_duty * scale_to_period;
 8001674:	4a69      	ldr	r2, [pc, #420]	; (800181c <HAL_UART_RxCpltCallback+0x37c>)
 8001676:	193b      	adds	r3, r7, r4
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	1c19      	adds	r1, r3, #0
 800167c:	0109      	lsls	r1, r1, #4
 800167e:	1acb      	subs	r3, r1, r3
 8001680:	18db      	adds	r3, r3, r3
 8001682:	b29b      	uxth	r3, r3
 8001684:	8013      	strh	r3, [r2, #0]
			        	 set_speed_motor2 = ((float)( msg_to_duty )) * slope + offset;
 8001686:	193b      	adds	r3, r7, r4
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	0018      	movs	r0, r3
 800168c:	f7ff fc0c 	bl	8000ea8 <__aeabi_ui2f>
 8001690:	1c03      	adds	r3, r0, #0
 8001692:	4967      	ldr	r1, [pc, #412]	; (8001830 <HAL_UART_RxCpltCallback+0x390>)
 8001694:	1c18      	adds	r0, r3, #0
 8001696:	f7ff f8a7 	bl	80007e8 <__aeabi_fmul>
 800169a:	1c03      	adds	r3, r0, #0
 800169c:	4965      	ldr	r1, [pc, #404]	; (8001834 <HAL_UART_RxCpltCallback+0x394>)
 800169e:	1c18      	adds	r0, r3, #0
 80016a0:	f7ff f9f0 	bl	8000a84 <__aeabi_fsub>
 80016a4:	1c03      	adds	r3, r0, #0
 80016a6:	1c1a      	adds	r2, r3, #0
 80016a8:	4b5d      	ldr	r3, [pc, #372]	; (8001820 <HAL_UART_RxCpltCallback+0x380>)
 80016aa:	601a      	str	r2, [r3, #0]
			         break;
 80016ac:	e129      	b.n	8001902 <HAL_UART_RxCpltCallback+0x462>
			      	     direction_1 = -1;
 80016ae:	4b5e      	ldr	r3, [pc, #376]	; (8001828 <HAL_UART_RxCpltCallback+0x388>)
 80016b0:	22ff      	movs	r2, #255	; 0xff
 80016b2:	701a      	strb	r2, [r3, #0]
			      	     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	01db      	lsls	r3, r3, #7
 80016b8:	485c      	ldr	r0, [pc, #368]	; (800182c <HAL_UART_RxCpltCallback+0x38c>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	0019      	movs	r1, r3
 80016be:	f001 fc09 	bl	8002ed4 <HAL_GPIO_WritePin>
			      	     * PWM_Duty_Value_Register_Motor1 = msg_to_duty * scale_to_period;
 80016c2:	4a54      	ldr	r2, [pc, #336]	; (8001814 <HAL_UART_RxCpltCallback+0x374>)
 80016c4:	240e      	movs	r4, #14
 80016c6:	193b      	adds	r3, r7, r4
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	1c19      	adds	r1, r3, #0
 80016cc:	0109      	lsls	r1, r1, #4
 80016ce:	1acb      	subs	r3, r1, r3
 80016d0:	18db      	adds	r3, r3, r3
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	8013      	strh	r3, [r2, #0]
			      	     set_speed_motor1 = ((float)( msg_to_duty )) * slope + offset;
 80016d6:	193b      	adds	r3, r7, r4
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	0018      	movs	r0, r3
 80016dc:	f7ff fbe4 	bl	8000ea8 <__aeabi_ui2f>
 80016e0:	1c03      	adds	r3, r0, #0
 80016e2:	4953      	ldr	r1, [pc, #332]	; (8001830 <HAL_UART_RxCpltCallback+0x390>)
 80016e4:	1c18      	adds	r0, r3, #0
 80016e6:	f7ff f87f 	bl	80007e8 <__aeabi_fmul>
 80016ea:	1c03      	adds	r3, r0, #0
 80016ec:	4951      	ldr	r1, [pc, #324]	; (8001834 <HAL_UART_RxCpltCallback+0x394>)
 80016ee:	1c18      	adds	r0, r3, #0
 80016f0:	f7ff f9c8 	bl	8000a84 <__aeabi_fsub>
 80016f4:	1c03      	adds	r3, r0, #0
 80016f6:	1c1a      	adds	r2, r3, #0
 80016f8:	4b47      	ldr	r3, [pc, #284]	; (8001818 <HAL_UART_RxCpltCallback+0x378>)
 80016fa:	601a      	str	r2, [r3, #0]
			      	     direction_2 = -1;
 80016fc:	4b4e      	ldr	r3, [pc, #312]	; (8001838 <HAL_UART_RxCpltCallback+0x398>)
 80016fe:	22ff      	movs	r2, #255	; 0xff
 8001700:	701a      	strb	r2, [r3, #0]
			      	     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	4849      	ldr	r0, [pc, #292]	; (800182c <HAL_UART_RxCpltCallback+0x38c>)
 8001708:	2201      	movs	r2, #1
 800170a:	0019      	movs	r1, r3
 800170c:	f001 fbe2 	bl	8002ed4 <HAL_GPIO_WritePin>
			      	     * PWM_Duty_Value_Register_Motor2 = msg_to_duty * scale_to_period;
 8001710:	4a42      	ldr	r2, [pc, #264]	; (800181c <HAL_UART_RxCpltCallback+0x37c>)
 8001712:	193b      	adds	r3, r7, r4
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	1c19      	adds	r1, r3, #0
 8001718:	0109      	lsls	r1, r1, #4
 800171a:	1acb      	subs	r3, r1, r3
 800171c:	18db      	adds	r3, r3, r3
 800171e:	b29b      	uxth	r3, r3
 8001720:	8013      	strh	r3, [r2, #0]
			      	     set_speed_motor2 = ((float)( msg_to_duty )) * slope + offset;
 8001722:	193b      	adds	r3, r7, r4
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	0018      	movs	r0, r3
 8001728:	f7ff fbbe 	bl	8000ea8 <__aeabi_ui2f>
 800172c:	1c03      	adds	r3, r0, #0
 800172e:	4940      	ldr	r1, [pc, #256]	; (8001830 <HAL_UART_RxCpltCallback+0x390>)
 8001730:	1c18      	adds	r0, r3, #0
 8001732:	f7ff f859 	bl	80007e8 <__aeabi_fmul>
 8001736:	1c03      	adds	r3, r0, #0
 8001738:	493e      	ldr	r1, [pc, #248]	; (8001834 <HAL_UART_RxCpltCallback+0x394>)
 800173a:	1c18      	adds	r0, r3, #0
 800173c:	f7ff f9a2 	bl	8000a84 <__aeabi_fsub>
 8001740:	1c03      	adds	r3, r0, #0
 8001742:	1c1a      	adds	r2, r3, #0
 8001744:	4b36      	ldr	r3, [pc, #216]	; (8001820 <HAL_UART_RxCpltCallback+0x380>)
 8001746:	601a      	str	r2, [r3, #0]
			      	 break;
 8001748:	e0db      	b.n	8001902 <HAL_UART_RxCpltCallback+0x462>
			        	 direction_1 = -1;
 800174a:	4b37      	ldr	r3, [pc, #220]	; (8001828 <HAL_UART_RxCpltCallback+0x388>)
 800174c:	22ff      	movs	r2, #255	; 0xff
 800174e:	701a      	strb	r2, [r3, #0]
			        	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	01db      	lsls	r3, r3, #7
 8001754:	4835      	ldr	r0, [pc, #212]	; (800182c <HAL_UART_RxCpltCallback+0x38c>)
 8001756:	2201      	movs	r2, #1
 8001758:	0019      	movs	r1, r3
 800175a:	f001 fbbb 	bl	8002ed4 <HAL_GPIO_WritePin>
			             * PWM_Duty_Value_Register_Motor1 = msg_to_duty * scale_to_period;
 800175e:	4a2d      	ldr	r2, [pc, #180]	; (8001814 <HAL_UART_RxCpltCallback+0x374>)
 8001760:	240e      	movs	r4, #14
 8001762:	193b      	adds	r3, r7, r4
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	1c19      	adds	r1, r3, #0
 8001768:	0109      	lsls	r1, r1, #4
 800176a:	1acb      	subs	r3, r1, r3
 800176c:	18db      	adds	r3, r3, r3
 800176e:	b29b      	uxth	r3, r3
 8001770:	8013      	strh	r3, [r2, #0]
			        	 set_speed_motor1 = ((float)( msg_to_duty )) * slope + offset;
 8001772:	193b      	adds	r3, r7, r4
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	0018      	movs	r0, r3
 8001778:	f7ff fb96 	bl	8000ea8 <__aeabi_ui2f>
 800177c:	1c03      	adds	r3, r0, #0
 800177e:	492c      	ldr	r1, [pc, #176]	; (8001830 <HAL_UART_RxCpltCallback+0x390>)
 8001780:	1c18      	adds	r0, r3, #0
 8001782:	f7ff f831 	bl	80007e8 <__aeabi_fmul>
 8001786:	1c03      	adds	r3, r0, #0
 8001788:	492a      	ldr	r1, [pc, #168]	; (8001834 <HAL_UART_RxCpltCallback+0x394>)
 800178a:	1c18      	adds	r0, r3, #0
 800178c:	f7ff f97a 	bl	8000a84 <__aeabi_fsub>
 8001790:	1c03      	adds	r3, r0, #0
 8001792:	1c1a      	adds	r2, r3, #0
 8001794:	4b20      	ldr	r3, [pc, #128]	; (8001818 <HAL_UART_RxCpltCallback+0x378>)
 8001796:	601a      	str	r2, [r3, #0]
			        	 direction_2 = 1;
 8001798:	4b27      	ldr	r3, [pc, #156]	; (8001838 <HAL_UART_RxCpltCallback+0x398>)
 800179a:	2201      	movs	r2, #1
 800179c:	701a      	strb	r2, [r3, #0]
			        	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	4822      	ldr	r0, [pc, #136]	; (800182c <HAL_UART_RxCpltCallback+0x38c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	0019      	movs	r1, r3
 80017a8:	f001 fb94 	bl	8002ed4 <HAL_GPIO_WritePin>
			        	 * PWM_Duty_Value_Register_Motor2 = msg_to_duty * scale_to_period;
 80017ac:	4a1b      	ldr	r2, [pc, #108]	; (800181c <HAL_UART_RxCpltCallback+0x37c>)
 80017ae:	193b      	adds	r3, r7, r4
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	1c19      	adds	r1, r3, #0
 80017b4:	0109      	lsls	r1, r1, #4
 80017b6:	1acb      	subs	r3, r1, r3
 80017b8:	18db      	adds	r3, r3, r3
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	8013      	strh	r3, [r2, #0]
			        	 set_speed_motor2 = ((float)( msg_to_duty )) * slope + offset;
 80017be:	193b      	adds	r3, r7, r4
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	0018      	movs	r0, r3
 80017c4:	f7ff fb70 	bl	8000ea8 <__aeabi_ui2f>
 80017c8:	1c03      	adds	r3, r0, #0
 80017ca:	4919      	ldr	r1, [pc, #100]	; (8001830 <HAL_UART_RxCpltCallback+0x390>)
 80017cc:	1c18      	adds	r0, r3, #0
 80017ce:	f7ff f80b 	bl	80007e8 <__aeabi_fmul>
 80017d2:	1c03      	adds	r3, r0, #0
 80017d4:	4917      	ldr	r1, [pc, #92]	; (8001834 <HAL_UART_RxCpltCallback+0x394>)
 80017d6:	1c18      	adds	r0, r3, #0
 80017d8:	f7ff f954 	bl	8000a84 <__aeabi_fsub>
 80017dc:	1c03      	adds	r3, r0, #0
 80017de:	1c1a      	adds	r2, r3, #0
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_UART_RxCpltCallback+0x380>)
 80017e2:	601a      	str	r2, [r3, #0]
	     	         break;
 80017e4:	e08d      	b.n	8001902 <HAL_UART_RxCpltCallback+0x462>
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	40004400 	.word	0x40004400
 80017ec:	20000350 	.word	0x20000350
 80017f0:	2000033c 	.word	0x2000033c
 80017f4:	200003a3 	.word	0x200003a3
 80017f8:	200002b4 	.word	0x200002b4
 80017fc:	2000022c 	.word	0x2000022c
 8001800:	40004800 	.word	0x40004800
 8001804:	20000397 	.word	0x20000397
 8001808:	20000374 	.word	0x20000374
 800180c:	fffffdf0 	.word	0xfffffdf0
 8001810:	40014434 	.word	0x40014434
 8001814:	40002034 	.word	0x40002034
 8001818:	200003b8 	.word	0x200003b8
 800181c:	40014834 	.word	0x40014834
 8001820:	200003bc 	.word	0x200003bc
 8001824:	080068b4 	.word	0x080068b4
 8001828:	20000000 	.word	0x20000000
 800182c:	48000400 	.word	0x48000400
 8001830:	3fa597f6 	.word	0x3fa597f6
 8001834:	421ca474 	.word	0x421ca474
 8001838:	20000001 	.word	0x20000001
	     	        	 direction_1 = 1;
 800183c:	4b58      	ldr	r3, [pc, #352]	; (80019a0 <HAL_UART_RxCpltCallback+0x500>)
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
	     	        	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	01db      	lsls	r3, r3, #7
 8001846:	4857      	ldr	r0, [pc, #348]	; (80019a4 <HAL_UART_RxCpltCallback+0x504>)
 8001848:	2200      	movs	r2, #0
 800184a:	0019      	movs	r1, r3
 800184c:	f001 fb42 	bl	8002ed4 <HAL_GPIO_WritePin>
	     	             * PWM_Duty_Value_Register_Motor1 = msg_to_duty * scale_to_period;
 8001850:	4a55      	ldr	r2, [pc, #340]	; (80019a8 <HAL_UART_RxCpltCallback+0x508>)
 8001852:	240e      	movs	r4, #14
 8001854:	193b      	adds	r3, r7, r4
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	1c19      	adds	r1, r3, #0
 800185a:	0109      	lsls	r1, r1, #4
 800185c:	1acb      	subs	r3, r1, r3
 800185e:	18db      	adds	r3, r3, r3
 8001860:	b29b      	uxth	r3, r3
 8001862:	8013      	strh	r3, [r2, #0]
	     	             set_speed_motor1 = ((float)( msg_to_duty )) * slope + offset;
 8001864:	193b      	adds	r3, r7, r4
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	0018      	movs	r0, r3
 800186a:	f7ff fb1d 	bl	8000ea8 <__aeabi_ui2f>
 800186e:	1c03      	adds	r3, r0, #0
 8001870:	494e      	ldr	r1, [pc, #312]	; (80019ac <HAL_UART_RxCpltCallback+0x50c>)
 8001872:	1c18      	adds	r0, r3, #0
 8001874:	f7fe ffb8 	bl	80007e8 <__aeabi_fmul>
 8001878:	1c03      	adds	r3, r0, #0
 800187a:	494d      	ldr	r1, [pc, #308]	; (80019b0 <HAL_UART_RxCpltCallback+0x510>)
 800187c:	1c18      	adds	r0, r3, #0
 800187e:	f7ff f901 	bl	8000a84 <__aeabi_fsub>
 8001882:	1c03      	adds	r3, r0, #0
 8001884:	1c1a      	adds	r2, r3, #0
 8001886:	4b4b      	ldr	r3, [pc, #300]	; (80019b4 <HAL_UART_RxCpltCallback+0x514>)
 8001888:	601a      	str	r2, [r3, #0]
	     	             direction_2 = -1;
 800188a:	4b4b      	ldr	r3, [pc, #300]	; (80019b8 <HAL_UART_RxCpltCallback+0x518>)
 800188c:	22ff      	movs	r2, #255	; 0xff
 800188e:	701a      	strb	r2, [r3, #0]
	     	             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	4843      	ldr	r0, [pc, #268]	; (80019a4 <HAL_UART_RxCpltCallback+0x504>)
 8001896:	2201      	movs	r2, #1
 8001898:	0019      	movs	r1, r3
 800189a:	f001 fb1b 	bl	8002ed4 <HAL_GPIO_WritePin>
	     	        	 * PWM_Duty_Value_Register_Motor2 = msg_to_duty * scale_to_period;
 800189e:	4a47      	ldr	r2, [pc, #284]	; (80019bc <HAL_UART_RxCpltCallback+0x51c>)
 80018a0:	193b      	adds	r3, r7, r4
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	1c19      	adds	r1, r3, #0
 80018a6:	0109      	lsls	r1, r1, #4
 80018a8:	1acb      	subs	r3, r1, r3
 80018aa:	18db      	adds	r3, r3, r3
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	8013      	strh	r3, [r2, #0]
	     	        	 set_speed_motor2 = ((float)( msg_to_duty )) * slope + offset;
 80018b0:	193b      	adds	r3, r7, r4
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7ff faf7 	bl	8000ea8 <__aeabi_ui2f>
 80018ba:	1c03      	adds	r3, r0, #0
 80018bc:	493b      	ldr	r1, [pc, #236]	; (80019ac <HAL_UART_RxCpltCallback+0x50c>)
 80018be:	1c18      	adds	r0, r3, #0
 80018c0:	f7fe ff92 	bl	80007e8 <__aeabi_fmul>
 80018c4:	1c03      	adds	r3, r0, #0
 80018c6:	493a      	ldr	r1, [pc, #232]	; (80019b0 <HAL_UART_RxCpltCallback+0x510>)
 80018c8:	1c18      	adds	r0, r3, #0
 80018ca:	f7ff f8db 	bl	8000a84 <__aeabi_fsub>
 80018ce:	1c03      	adds	r3, r0, #0
 80018d0:	1c1a      	adds	r2, r3, #0
 80018d2:	4b3b      	ldr	r3, [pc, #236]	; (80019c0 <HAL_UART_RxCpltCallback+0x520>)
 80018d4:	601a      	str	r2, [r3, #0]
	     	         break;
 80018d6:	e014      	b.n	8001902 <HAL_UART_RxCpltCallback+0x462>
	     	        	 direction_1 = 1;
 80018d8:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <HAL_UART_RxCpltCallback+0x500>)
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
	     	        	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	01db      	lsls	r3, r3, #7
 80018e2:	4830      	ldr	r0, [pc, #192]	; (80019a4 <HAL_UART_RxCpltCallback+0x504>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	0019      	movs	r1, r3
 80018e8:	f001 faf4 	bl	8002ed4 <HAL_GPIO_WritePin>
	     	        	 direction_2 = 1;
 80018ec:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <HAL_UART_RxCpltCallback+0x518>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
	     	        	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	482b      	ldr	r0, [pc, #172]	; (80019a4 <HAL_UART_RxCpltCallback+0x504>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	0019      	movs	r1, r3
 80018fc:	f001 faea 	bl	8002ed4 <HAL_GPIO_WritePin>
	     	         break;
 8001900:	46c0      	nop			; (mov r8, r8)
			      switch(Bluetooth_RX_Buffer[2])
 8001902:	e020      	b.n	8001946 <HAL_UART_RxCpltCallback+0x4a6>
				  direction_1 = 1;
 8001904:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <HAL_UART_RxCpltCallback+0x500>)
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	01db      	lsls	r3, r3, #7
 800190e:	4825      	ldr	r0, [pc, #148]	; (80019a4 <HAL_UART_RxCpltCallback+0x504>)
 8001910:	2200      	movs	r2, #0
 8001912:	0019      	movs	r1, r3
 8001914:	f001 fade 	bl	8002ed4 <HAL_GPIO_WritePin>
				  * PWM_Duty_Value_Register_Motor1 = 0;
 8001918:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <HAL_UART_RxCpltCallback+0x508>)
 800191a:	2200      	movs	r2, #0
 800191c:	801a      	strh	r2, [r3, #0]
		          set_speed_motor1 = 0;
 800191e:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <HAL_UART_RxCpltCallback+0x514>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
			      direction_2 = 1;
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_UART_RxCpltCallback+0x518>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
			      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	481d      	ldr	r0, [pc, #116]	; (80019a4 <HAL_UART_RxCpltCallback+0x504>)
 8001930:	2200      	movs	r2, #0
 8001932:	0019      	movs	r1, r3
 8001934:	f001 face 	bl	8002ed4 <HAL_GPIO_WritePin>
			      * PWM_Duty_Value_Register_Motor2 = 0;
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_UART_RxCpltCallback+0x51c>)
 800193a:	2200      	movs	r2, #0
 800193c:	801a      	strh	r2, [r3, #0]
			      set_speed_motor2 = 0;
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_UART_RxCpltCallback+0x520>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	e000      	b.n	8001948 <HAL_UART_RxCpltCallback+0x4a8>
			      switch(Bluetooth_RX_Buffer[2])
 8001946:	46c0      	nop			; (mov r8, r8)
	       Bluetooth_RX_Buffer_Index = 0;
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HAL_UART_RxCpltCallback+0x524>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
		   break;
 800194e:	46c0      	nop			; (mov r8, r8)
		   if(HAL_UART_Receive_IT(&huart3,Bluetooth_RX_Buffer + (Bluetooth_RX_Buffer_Index ++),1) != HAL_OK)
 8001950:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <HAL_UART_RxCpltCallback+0x524>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	b2d1      	uxtb	r1, r2
 8001958:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <HAL_UART_RxCpltCallback+0x524>)
 800195a:	7011      	strb	r1, [r2, #0]
 800195c:	001a      	movs	r2, r3
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <HAL_UART_RxCpltCallback+0x528>)
 8001960:	18d1      	adds	r1, r2, r3
 8001962:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <HAL_UART_RxCpltCallback+0x52c>)
 8001964:	2201      	movs	r2, #1
 8001966:	0018      	movs	r0, r3
 8001968:	f003 f860 	bl	8004a2c <HAL_UART_Receive_IT>
 800196c:	1e03      	subs	r3, r0, #0
 800196e:	d001      	beq.n	8001974 <HAL_UART_RxCpltCallback+0x4d4>
		      Error_Handler();
 8001970:	f000 fc8a 	bl	8002288 <Error_Handler>
		   if(Bluetooth_RX_Buffer_Index >= 35)
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_UART_RxCpltCallback+0x524>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b22      	cmp	r3, #34	; 0x22
 800197a:	d90c      	bls.n	8001996 <HAL_UART_RxCpltCallback+0x4f6>
			  Bluetooth_RX_Buffer_Index = 0;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_UART_RxCpltCallback+0x524>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
			  if(HAL_UART_Transmit_IT(&huart2,Bluetooth_RX_Buffer,35) != HAL_OK)
 8001982:	4911      	ldr	r1, [pc, #68]	; (80019c8 <HAL_UART_RxCpltCallback+0x528>)
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_UART_RxCpltCallback+0x530>)
 8001986:	2223      	movs	r2, #35	; 0x23
 8001988:	0018      	movs	r0, r3
 800198a:	f002 ffdf 	bl	800494c <HAL_UART_Transmit_IT>
 800198e:	1e03      	subs	r3, r0, #0
 8001990:	d001      	beq.n	8001996 <HAL_UART_RxCpltCallback+0x4f6>
		         Error_Handler();
 8001992:	f000 fc79 	bl	8002288 <Error_Handler>
}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	46bd      	mov	sp, r7
 800199a:	b005      	add	sp, #20
 800199c:	bd90      	pop	{r4, r7, pc}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	20000000 	.word	0x20000000
 80019a4:	48000400 	.word	0x48000400
 80019a8:	40002034 	.word	0x40002034
 80019ac:	3fa597f6 	.word	0x3fa597f6
 80019b0:	421ca474 	.word	0x421ca474
 80019b4:	200003b8 	.word	0x200003b8
 80019b8:	20000001 	.word	0x20000001
 80019bc:	40014834 	.word	0x40014834
 80019c0:	200003bc 	.word	0x200003bc
 80019c4:	20000397 	.word	0x20000397
 80019c8:	20000374 	.word	0x20000374
 80019cc:	200002b4 	.word	0x200002b4
 80019d0:	2000022c 	.word	0x2000022c

080019d4 <HAL_UART_TxCpltCallback>:

// callback for completion of message transmission through UART
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	// message sent through UART2
	if(huart->Instance == USART2)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a15      	ldr	r2, [pc, #84]	; (8001a38 <HAL_UART_TxCpltCallback+0x64>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d123      	bne.n	8001a2e <HAL_UART_TxCpltCallback+0x5a>
	{
	       // only send the message containing the number of sent messages if the semaphore is
	       // set, so that we know a completed message has been received
	       if(TX_Semaphore == 1)
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <HAL_UART_TxCpltCallback+0x68>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d11f      	bne.n	8001a2e <HAL_UART_TxCpltCallback+0x5a>
	       {
	    	  // writing the message containing the number of sent messages in the buffer used
	    	  // for data transmission
		      sprintf(TX_Buffer,"\n\rSent messages number :%d\r\n",++nr_sent_messages);
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <HAL_UART_TxCpltCallback+0x6c>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	3301      	adds	r3, #1
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_UART_TxCpltCallback+0x6c>)
 80019f8:	701a      	strb	r2, [r3, #0]
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_UART_TxCpltCallback+0x6c>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	001a      	movs	r2, r3
 8001a00:	4910      	ldr	r1, [pc, #64]	; (8001a44 <HAL_UART_TxCpltCallback+0x70>)
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_UART_TxCpltCallback+0x74>)
 8001a04:	0018      	movs	r0, r3
 8001a06:	f004 fa43 	bl	8005e90 <siprintf>

		      //sending the message to the terminal
		      if(HAL_UART_Transmit_IT(&huart2,TX_Buffer,strlen(TX_Buffer)) != HAL_OK)
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_UART_TxCpltCallback+0x74>)
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7fe fb7b 	bl	8000108 <strlen>
 8001a12:	0003      	movs	r3, r0
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	490c      	ldr	r1, [pc, #48]	; (8001a48 <HAL_UART_TxCpltCallback+0x74>)
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <HAL_UART_TxCpltCallback+0x78>)
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f002 ff96 	bl	800494c <HAL_UART_Transmit_IT>
 8001a20:	1e03      	subs	r3, r0, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_UART_TxCpltCallback+0x54>
		      {
		 	     Error_Handler();
 8001a24:	f000 fc30 	bl	8002288 <Error_Handler>
	          }

		      // reseting TX_Semaphore so that no more data is sent to the terminal until another
		      // full message is received
		      TX_Semaphore = 0;
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <HAL_UART_TxCpltCallback+0x68>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
	else if(huart->Instance == USART3)
	{
       // nothing implemented here yet, might be used for expansion in the future
	}

}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b002      	add	sp, #8
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	40004400 	.word	0x40004400
 8001a3c:	200003a3 	.word	0x200003a3
 8001a40:	200003a2 	.word	0x200003a2
 8001a44:	08006814 	.word	0x08006814
 8001a48:	20000354 	.word	0x20000354
 8001a4c:	2000022c 	.word	0x2000022c

08001a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a54:	f000 ff0e 	bl	8002874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a58:	f000 f884 	bl	8001b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a5c:	f000 fb78 	bl	8002150 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a60:	f000 fb16 	bl	8002090 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001a64:	f000 fb44 	bl	80020f0 <MX_USART3_UART_Init>
  MX_TIM16_Init();
 8001a68:	f000 fa06 	bl	8001e78 <MX_TIM16_Init>
  MX_TIM6_Init();
 8001a6c:	f000 f992 	bl	8001d94 <MX_TIM6_Init>
  MX_TIM1_Init();
 8001a70:	f000 f8c4 	bl	8001bfc <MX_TIM1_Init>
  MX_TIM3_Init();
 8001a74:	f000 f92a 	bl	8001ccc <MX_TIM3_Init>
  MX_TIM14_Init();
 8001a78:	f000 f9ae 	bl	8001dd8 <MX_TIM14_Init>
  MX_TIM17_Init();
 8001a7c:	f000 fa82 	bl	8001f84 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  // Start receiving data through UART2 ( Terminal ) in interrupt mode
  if(HAL_UART_Receive_IT(&huart2,RX_Buffer + (RX_Buffer_Index ++) ,1) != HAL_OK)
 8001a80:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <main+0xe4>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	b2d1      	uxtb	r1, r2
 8001a88:	4a2a      	ldr	r2, [pc, #168]	; (8001b34 <main+0xe4>)
 8001a8a:	7011      	strb	r1, [r2, #0]
 8001a8c:	001a      	movs	r2, r3
 8001a8e:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <main+0xe8>)
 8001a90:	18d1      	adds	r1, r2, r3
 8001a92:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <main+0xec>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	0018      	movs	r0, r3
 8001a98:	f002 ffc8 	bl	8004a2c <HAL_UART_Receive_IT>
 8001a9c:	1e03      	subs	r3, r0, #0
 8001a9e:	d001      	beq.n	8001aa4 <main+0x54>
  {
	  Error_Handler();
 8001aa0:	f000 fbf2 	bl	8002288 <Error_Handler>
  }

  // Start receiving data through UART3 ( wireless device ) in interrupt mode
  if(HAL_UART_Receive_IT(&huart3,Bluetooth_RX_Buffer + (Bluetooth_RX_Buffer_Index ++),1) != HAL_OK)
 8001aa4:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <main+0xf0>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	b2d1      	uxtb	r1, r2
 8001aac:	4a24      	ldr	r2, [pc, #144]	; (8001b40 <main+0xf0>)
 8001aae:	7011      	strb	r1, [r2, #0]
 8001ab0:	001a      	movs	r2, r3
 8001ab2:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <main+0xf4>)
 8001ab4:	18d1      	adds	r1, r2, r3
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <main+0xf8>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	0018      	movs	r0, r3
 8001abc:	f002 ffb6 	bl	8004a2c <HAL_UART_Receive_IT>
 8001ac0:	1e03      	subs	r3, r0, #0
 8001ac2:	d001      	beq.n	8001ac8 <main+0x78>
  {
  	  Error_Handler();
 8001ac4:	f000 fbe0 	bl	8002288 <Error_Handler>
  }

  // Starting Timer16 in PWM mode to control the servo-motor moving the turret
  if(HAL_TIM_PWM_Start(&htim16,TIM_CHANNEL_1) != HAL_OK)
 8001ac8:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <main+0xfc>)
 8001aca:	2100      	movs	r1, #0
 8001acc:	0018      	movs	r0, r3
 8001ace:	f001 ff93 	bl	80039f8 <HAL_TIM_PWM_Start>
 8001ad2:	1e03      	subs	r3, r0, #0
 8001ad4:	d001      	beq.n	8001ada <main+0x8a>
  {
	  Error_Handler();
 8001ad6:	f000 fbd7 	bl	8002288 <Error_Handler>
  }

  // starting Timer14 in PWM mode to control motor1
  if(HAL_TIM_PWM_Start(&htim14,TIM_CHANNEL_1) != HAL_OK)
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <main+0x100>)
 8001adc:	2100      	movs	r1, #0
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f001 ff8a 	bl	80039f8 <HAL_TIM_PWM_Start>
 8001ae4:	1e03      	subs	r3, r0, #0
 8001ae6:	d001      	beq.n	8001aec <main+0x9c>
  {
	  Error_Handler();
 8001ae8:	f000 fbce 	bl	8002288 <Error_Handler>
  }

  // starting Timer17 in PWM mode to control motor2
  if(HAL_TIM_PWM_Start(&htim17,TIM_CHANNEL_1) != HAL_OK)
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <main+0x104>)
 8001aee:	2100      	movs	r1, #0
 8001af0:	0018      	movs	r0, r3
 8001af2:	f001 ff81 	bl	80039f8 <HAL_TIM_PWM_Start>
 8001af6:	1e03      	subs	r3, r0, #0
 8001af8:	d001      	beq.n	8001afe <main+0xae>
  {
	  Error_Handler();
 8001afa:	f000 fbc5 	bl	8002288 <Error_Handler>
  }

  // starting Timer3 in encoder mode for motor1
  if(HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL) != HAL_OK)
 8001afe:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <main+0x108>)
 8001b00:	213c      	movs	r1, #60	; 0x3c
 8001b02:	0018      	movs	r0, r3
 8001b04:	f002 f8d2 	bl	8003cac <HAL_TIM_Encoder_Start>
 8001b08:	1e03      	subs	r3, r0, #0
 8001b0a:	d001      	beq.n	8001b10 <main+0xc0>
  {
	  Error_Handler();
 8001b0c:	f000 fbbc 	bl	8002288 <Error_Handler>
  }

  // starting Timer1 in encoder mode for motor2
  if(HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL) != HAL_OK)
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <main+0x10c>)
 8001b12:	213c      	movs	r1, #60	; 0x3c
 8001b14:	0018      	movs	r0, r3
 8001b16:	f002 f8c9 	bl	8003cac <HAL_TIM_Encoder_Start>
 8001b1a:	1e03      	subs	r3, r0, #0
 8001b1c:	d001      	beq.n	8001b22 <main+0xd2>
  {
	  Error_Handler();
 8001b1e:	f000 fbb3 	bl	8002288 <Error_Handler>
  }

  // starting Timer 6 in normal mode to be used as a sampling clock

  if(HAL_TIM_Base_Start_IT(&htim6) != HAL_OK)
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <main+0x110>)
 8001b24:	0018      	movs	r0, r3
 8001b26:	f001 fec3 	bl	80038b0 <HAL_TIM_Base_Start_IT>
 8001b2a:	1e03      	subs	r3, r0, #0
 8001b2c:	d001      	beq.n	8001b32 <main+0xe2>
   {
 	  Error_Handler();
 8001b2e:	f000 fbab 	bl	8002288 <Error_Handler>
   }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <main+0xe2>
 8001b34:	20000350 	.word	0x20000350
 8001b38:	2000033c 	.word	0x2000033c
 8001b3c:	2000022c 	.word	0x2000022c
 8001b40:	20000397 	.word	0x20000397
 8001b44:	20000374 	.word	0x20000374
 8001b48:	200002b4 	.word	0x200002b4
 8001b4c:	2000019c 	.word	0x2000019c
 8001b50:	20000154 	.word	0x20000154
 8001b54:	200001e4 	.word	0x200001e4
 8001b58:	200000c4 	.word	0x200000c4
 8001b5c:	2000007c 	.word	0x2000007c
 8001b60:	2000010c 	.word	0x2000010c

08001b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b091      	sub	sp, #68	; 0x44
 8001b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6a:	2410      	movs	r4, #16
 8001b6c:	193b      	adds	r3, r7, r4
 8001b6e:	0018      	movs	r0, r3
 8001b70:	2330      	movs	r3, #48	; 0x30
 8001b72:	001a      	movs	r2, r3
 8001b74:	2100      	movs	r1, #0
 8001b76:	f004 f9ab 	bl	8005ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b7a:	003b      	movs	r3, r7
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	2310      	movs	r3, #16
 8001b80:	001a      	movs	r2, r3
 8001b82:	2100      	movs	r1, #0
 8001b84:	f004 f9a4 	bl	8005ed0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b88:	0021      	movs	r1, r4
 8001b8a:	187b      	adds	r3, r7, r1
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	2201      	movs	r2, #1
 8001b94:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b96:	187b      	adds	r3, r7, r1
 8001b98:	2210      	movs	r2, #16
 8001b9a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b9c:	187b      	adds	r3, r7, r1
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ba2:	187b      	adds	r3, r7, r1
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	0212      	lsls	r2, r2, #8
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001baa:	187b      	adds	r3, r7, r1
 8001bac:	2280      	movs	r2, #128	; 0x80
 8001bae:	0352      	lsls	r2, r2, #13
 8001bb0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001bb2:	187b      	adds	r3, r7, r1
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f001 f9c4 	bl	8002f48 <HAL_RCC_OscConfig>
 8001bc0:	1e03      	subs	r3, r0, #0
 8001bc2:	d001      	beq.n	8001bc8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001bc4:	f000 fb60 	bl	8002288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc8:	003b      	movs	r3, r7
 8001bca:	2207      	movs	r2, #7
 8001bcc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bce:	003b      	movs	r3, r7
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd4:	003b      	movs	r3, r7
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bda:	003b      	movs	r3, r7
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001be0:	003b      	movs	r3, r7
 8001be2:	2101      	movs	r1, #1
 8001be4:	0018      	movs	r0, r3
 8001be6:	f001 fccd 	bl	8003584 <HAL_RCC_ClockConfig>
 8001bea:	1e03      	subs	r3, r0, #0
 8001bec:	d001      	beq.n	8001bf2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001bee:	f000 fb4b 	bl	8002288 <Error_Handler>
  }
}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	b011      	add	sp, #68	; 0x44
 8001bf8:	bd90      	pop	{r4, r7, pc}
	...

08001bfc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b08d      	sub	sp, #52	; 0x34
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c02:	240c      	movs	r4, #12
 8001c04:	193b      	adds	r3, r7, r4
 8001c06:	0018      	movs	r0, r3
 8001c08:	2324      	movs	r3, #36	; 0x24
 8001c0a:	001a      	movs	r2, r3
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	f004 f95f 	bl	8005ed0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	0018      	movs	r0, r3
 8001c16:	2308      	movs	r3, #8
 8001c18:	001a      	movs	r2, r3
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	f004 f958 	bl	8005ed0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c20:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <MX_TIM1_Init+0xc4>)
 8001c22:	4a28      	ldr	r2, [pc, #160]	; (8001cc4 <MX_TIM1_Init+0xc8>)
 8001c24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c26:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <MX_TIM1_Init+0xc4>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2c:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <MX_TIM1_Init+0xc4>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <MX_TIM1_Init+0xc4>)
 8001c34:	4a24      	ldr	r2, [pc, #144]	; (8001cc8 <MX_TIM1_Init+0xcc>)
 8001c36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c38:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <MX_TIM1_Init+0xc4>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c3e:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <MX_TIM1_Init+0xc4>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c44:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <MX_TIM1_Init+0xc4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c4a:	0021      	movs	r1, r4
 8001c4c:	187b      	adds	r3, r7, r1
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c52:	187b      	adds	r3, r7, r1
 8001c54:	2200      	movs	r2, #0
 8001c56:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c5e:	187b      	adds	r3, r7, r1
 8001c60:	2200      	movs	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8001c64:	187b      	adds	r3, r7, r1
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c6a:	187b      	adds	r3, r7, r1
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c70:	187b      	adds	r3, r7, r1
 8001c72:	2201      	movs	r2, #1
 8001c74:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c76:	187b      	adds	r3, r7, r1
 8001c78:	2200      	movs	r2, #0
 8001c7a:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8001c7c:	187b      	adds	r3, r7, r1
 8001c7e:	2200      	movs	r2, #0
 8001c80:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001c82:	187a      	adds	r2, r7, r1
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <MX_TIM1_Init+0xc4>)
 8001c86:	0011      	movs	r1, r2
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f001 ff67 	bl	8003b5c <HAL_TIM_Encoder_Init>
 8001c8e:	1e03      	subs	r3, r0, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001c92:	f000 faf9 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ca2:	1d3a      	adds	r2, r7, #4
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <MX_TIM1_Init+0xc4>)
 8001ca6:	0011      	movs	r1, r2
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f002 fd35 	bl	8004718 <HAL_TIMEx_MasterConfigSynchronization>
 8001cae:	1e03      	subs	r3, r0, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8001cb2:	f000 fae9 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b00d      	add	sp, #52	; 0x34
 8001cbc:	bd90      	pop	{r4, r7, pc}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	2000007c 	.word	0x2000007c
 8001cc4:	40012c00 	.word	0x40012c00
 8001cc8:	0000ffff 	.word	0x0000ffff

08001ccc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ccc:	b590      	push	{r4, r7, lr}
 8001cce:	b08d      	sub	sp, #52	; 0x34
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cd2:	240c      	movs	r4, #12
 8001cd4:	193b      	adds	r3, r7, r4
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	2324      	movs	r3, #36	; 0x24
 8001cda:	001a      	movs	r2, r3
 8001cdc:	2100      	movs	r1, #0
 8001cde:	f004 f8f7 	bl	8005ed0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	2308      	movs	r3, #8
 8001ce8:	001a      	movs	r2, r3
 8001cea:	2100      	movs	r1, #0
 8001cec:	f004 f8f0 	bl	8005ed0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cf0:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <MX_TIM3_Init+0xbc>)
 8001cf2:	4a26      	ldr	r2, [pc, #152]	; (8001d8c <MX_TIM3_Init+0xc0>)
 8001cf4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cf6:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <MX_TIM3_Init+0xbc>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfc:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <MX_TIM3_Init+0xbc>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d02:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <MX_TIM3_Init+0xbc>)
 8001d04:	4a22      	ldr	r2, [pc, #136]	; (8001d90 <MX_TIM3_Init+0xc4>)
 8001d06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d08:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <MX_TIM3_Init+0xbc>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <MX_TIM3_Init+0xbc>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d14:	0021      	movs	r1, r4
 8001d16:	187b      	adds	r3, r7, r1
 8001d18:	2201      	movs	r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	2200      	movs	r2, #0
 8001d20:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d22:	187b      	adds	r3, r7, r1
 8001d24:	2201      	movs	r2, #1
 8001d26:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d28:	187b      	adds	r3, r7, r1
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8001d2e:	187b      	adds	r3, r7, r1
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d34:	187b      	adds	r3, r7, r1
 8001d36:	2200      	movs	r2, #0
 8001d38:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d3a:	187b      	adds	r3, r7, r1
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d40:	187b      	adds	r3, r7, r1
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8001d46:	187b      	adds	r3, r7, r1
 8001d48:	2200      	movs	r2, #0
 8001d4a:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d4c:	187a      	adds	r2, r7, r1
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <MX_TIM3_Init+0xbc>)
 8001d50:	0011      	movs	r1, r2
 8001d52:	0018      	movs	r0, r3
 8001d54:	f001 ff02 	bl	8003b5c <HAL_TIM_Encoder_Init>
 8001d58:	1e03      	subs	r3, r0, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001d5c:	f000 fa94 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	2200      	movs	r2, #0
 8001d6a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d6c:	1d3a      	adds	r2, r7, #4
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <MX_TIM3_Init+0xbc>)
 8001d70:	0011      	movs	r1, r2
 8001d72:	0018      	movs	r0, r3
 8001d74:	f002 fcd0 	bl	8004718 <HAL_TIMEx_MasterConfigSynchronization>
 8001d78:	1e03      	subs	r3, r0, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001d7c:	f000 fa84 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d80:	46c0      	nop			; (mov r8, r8)
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b00d      	add	sp, #52	; 0x34
 8001d86:	bd90      	pop	{r4, r7, pc}
 8001d88:	200000c4 	.word	0x200000c4
 8001d8c:	40000400 	.word	0x40000400
 8001d90:	0000ffff 	.word	0x0000ffff

08001d94 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <MX_TIM6_Init+0x38>)
 8001d9a:	4a0d      	ldr	r2, [pc, #52]	; (8001dd0 <MX_TIM6_Init+0x3c>)
 8001d9c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = sampling_period - 1;
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <MX_TIM6_Init+0x38>)
 8001da0:	2231      	movs	r2, #49	; 0x31
 8001da2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <MX_TIM6_Init+0x38>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 48000;
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <MX_TIM6_Init+0x38>)
 8001dac:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <MX_TIM6_Init+0x40>)
 8001dae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <MX_TIM6_Init+0x38>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <MX_TIM6_Init+0x38>)
 8001db8:	0018      	movs	r0, r3
 8001dba:	f001 fd29 	bl	8003810 <HAL_TIM_Base_Init>
 8001dbe:	1e03      	subs	r3, r0, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8001dc2:	f000 fa61 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	2000010c 	.word	0x2000010c
 8001dd0:	40001000 	.word	0x40001000
 8001dd4:	0000bb80 	.word	0x0000bb80

08001dd8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dde:	1d3b      	adds	r3, r7, #4
 8001de0:	0018      	movs	r0, r3
 8001de2:	231c      	movs	r3, #28
 8001de4:	001a      	movs	r2, r3
 8001de6:	2100      	movs	r1, #0
 8001de8:	f004 f872 	bl	8005ed0 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001dec:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <MX_TIM14_Init+0x94>)
 8001dee:	4a20      	ldr	r2, [pc, #128]	; (8001e70 <MX_TIM14_Init+0x98>)
 8001df0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001df2:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <MX_TIM14_Init+0x94>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df8:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <MX_TIM14_Init+0x94>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 3000;
 8001dfe:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <MX_TIM14_Init+0x94>)
 8001e00:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <MX_TIM14_Init+0x9c>)
 8001e02:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <MX_TIM14_Init+0x94>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0a:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <MX_TIM14_Init+0x94>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001e10:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <MX_TIM14_Init+0x94>)
 8001e12:	0018      	movs	r0, r3
 8001e14:	f001 fcfc 	bl	8003810 <HAL_TIM_Base_Init>
 8001e18:	1e03      	subs	r3, r0, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001e1c:	f000 fa34 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <MX_TIM14_Init+0x94>)
 8001e22:	0018      	movs	r0, r3
 8001e24:	f001 fd90 	bl	8003948 <HAL_TIM_PWM_Init>
 8001e28:	1e03      	subs	r3, r0, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001e2c:	f000 fa2c 	bl	8002288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	2260      	movs	r2, #96	; 0x60
 8001e34:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	2200      	movs	r2, #0
 8001e3a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e48:	1d39      	adds	r1, r7, #4
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <MX_TIM14_Init+0x94>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f002 f8e6 	bl	8004020 <HAL_TIM_PWM_ConfigChannel>
 8001e54:	1e03      	subs	r3, r0, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001e58:	f000 fa16 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <MX_TIM14_Init+0x94>)
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f000 fb2a 	bl	80024b8 <HAL_TIM_MspPostInit>

}
 8001e64:	46c0      	nop			; (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b008      	add	sp, #32
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000154 	.word	0x20000154
 8001e70:	40002000 	.word	0x40002000
 8001e74:	00000bb8 	.word	0x00000bb8

08001e78 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b090      	sub	sp, #64	; 0x40
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e7e:	2324      	movs	r3, #36	; 0x24
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	0018      	movs	r0, r3
 8001e84:	231c      	movs	r3, #28
 8001e86:	001a      	movs	r2, r3
 8001e88:	2100      	movs	r1, #0
 8001e8a:	f004 f821 	bl	8005ed0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	0018      	movs	r0, r3
 8001e92:	2320      	movs	r3, #32
 8001e94:	001a      	movs	r2, r3
 8001e96:	2100      	movs	r1, #0
 8001e98:	f004 f81a 	bl	8005ed0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001e9c:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <MX_TIM16_Init+0x100>)
 8001e9e:	4a37      	ldr	r2, [pc, #220]	; (8001f7c <MX_TIM16_Init+0x104>)
 8001ea0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 19;
 8001ea2:	4b35      	ldr	r3, [pc, #212]	; (8001f78 <MX_TIM16_Init+0x100>)
 8001ea4:	2213      	movs	r2, #19
 8001ea6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea8:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <MX_TIM16_Init+0x100>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 48000;
 8001eae:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <MX_TIM16_Init+0x100>)
 8001eb0:	4a33      	ldr	r2, [pc, #204]	; (8001f80 <MX_TIM16_Init+0x108>)
 8001eb2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb4:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <MX_TIM16_Init+0x100>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001eba:	4b2f      	ldr	r3, [pc, #188]	; (8001f78 <MX_TIM16_Init+0x100>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec0:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <MX_TIM16_Init+0x100>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001ec6:	4b2c      	ldr	r3, [pc, #176]	; (8001f78 <MX_TIM16_Init+0x100>)
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f001 fca1 	bl	8003810 <HAL_TIM_Base_Init>
 8001ece:	1e03      	subs	r3, r0, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001ed2:	f000 f9d9 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001ed6:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <MX_TIM16_Init+0x100>)
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f001 fd35 	bl	8003948 <HAL_TIM_PWM_Init>
 8001ede:	1e03      	subs	r3, r0, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8001ee2:	f000 f9d1 	bl	8002288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee6:	2124      	movs	r1, #36	; 0x24
 8001ee8:	187b      	adds	r3, r7, r1
 8001eea:	2260      	movs	r2, #96	; 0x60
 8001eec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001eee:	187b      	adds	r3, r7, r1
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef4:	187b      	adds	r3, r7, r1
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001efa:	187b      	adds	r3, r7, r1
 8001efc:	2200      	movs	r2, #0
 8001efe:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f06:	187b      	adds	r3, r7, r1
 8001f08:	2200      	movs	r2, #0
 8001f0a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	2200      	movs	r2, #0
 8001f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f12:	1879      	adds	r1, r7, r1
 8001f14:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <MX_TIM16_Init+0x100>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f002 f881 	bl	8004020 <HAL_TIM_PWM_ConfigChannel>
 8001f1e:	1e03      	subs	r3, r0, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8001f22:	f000 f9b1 	bl	8002288 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	2200      	movs	r2, #0
 8001f30:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	0192      	lsls	r2, r2, #6
 8001f4a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001f52:	1d3a      	adds	r2, r7, #4
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <MX_TIM16_Init+0x100>)
 8001f56:	0011      	movs	r1, r2
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f002 fc35 	bl	80047c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f5e:	1e03      	subs	r3, r0, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 8001f62:	f000 f991 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001f66:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <MX_TIM16_Init+0x100>)
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f000 faa5 	bl	80024b8 <HAL_TIM_MspPostInit>

}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	46bd      	mov	sp, r7
 8001f72:	b010      	add	sp, #64	; 0x40
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	2000019c 	.word	0x2000019c
 8001f7c:	40014400 	.word	0x40014400
 8001f80:	0000bb80 	.word	0x0000bb80

08001f84 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b090      	sub	sp, #64	; 0x40
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f8a:	2324      	movs	r3, #36	; 0x24
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	0018      	movs	r0, r3
 8001f90:	231c      	movs	r3, #28
 8001f92:	001a      	movs	r2, r3
 8001f94:	2100      	movs	r1, #0
 8001f96:	f003 ff9b 	bl	8005ed0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	2320      	movs	r3, #32
 8001fa0:	001a      	movs	r2, r3
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	f003 ff94 	bl	8005ed0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001fa8:	4b36      	ldr	r3, [pc, #216]	; (8002084 <MX_TIM17_Init+0x100>)
 8001faa:	4a37      	ldr	r2, [pc, #220]	; (8002088 <MX_TIM17_Init+0x104>)
 8001fac:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001fae:	4b35      	ldr	r3, [pc, #212]	; (8002084 <MX_TIM17_Init+0x100>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb4:	4b33      	ldr	r3, [pc, #204]	; (8002084 <MX_TIM17_Init+0x100>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 3000;
 8001fba:	4b32      	ldr	r3, [pc, #200]	; (8002084 <MX_TIM17_Init+0x100>)
 8001fbc:	4a33      	ldr	r2, [pc, #204]	; (800208c <MX_TIM17_Init+0x108>)
 8001fbe:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc0:	4b30      	ldr	r3, [pc, #192]	; (8002084 <MX_TIM17_Init+0x100>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001fc6:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <MX_TIM17_Init+0x100>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <MX_TIM17_Init+0x100>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001fd2:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <MX_TIM17_Init+0x100>)
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f001 fc1b 	bl	8003810 <HAL_TIM_Base_Init>
 8001fda:	1e03      	subs	r3, r0, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8001fde:	f000 f953 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001fe2:	4b28      	ldr	r3, [pc, #160]	; (8002084 <MX_TIM17_Init+0x100>)
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f001 fcaf 	bl	8003948 <HAL_TIM_PWM_Init>
 8001fea:	1e03      	subs	r3, r0, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8001fee:	f000 f94b 	bl	8002288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ff2:	2124      	movs	r1, #36	; 0x24
 8001ff4:	187b      	adds	r3, r7, r1
 8001ff6:	2260      	movs	r2, #96	; 0x60
 8001ff8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001ffa:	187b      	adds	r3, r7, r1
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002000:	187b      	adds	r3, r7, r1
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002006:	187b      	adds	r3, r7, r1
 8002008:	2200      	movs	r2, #0
 800200a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800200c:	187b      	adds	r3, r7, r1
 800200e:	2200      	movs	r2, #0
 8002010:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002012:	187b      	adds	r3, r7, r1
 8002014:	2200      	movs	r2, #0
 8002016:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002018:	187b      	adds	r3, r7, r1
 800201a:	2200      	movs	r2, #0
 800201c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800201e:	1879      	adds	r1, r7, r1
 8002020:	4b18      	ldr	r3, [pc, #96]	; (8002084 <MX_TIM17_Init+0x100>)
 8002022:	2200      	movs	r2, #0
 8002024:	0018      	movs	r0, r3
 8002026:	f001 fffb 	bl	8004020 <HAL_TIM_PWM_ConfigChannel>
 800202a:	1e03      	subs	r3, r0, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 800202e:	f000 f92b 	bl	8002288 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	2200      	movs	r2, #0
 800203c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	2200      	movs	r2, #0
 8002048:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	2280      	movs	r2, #128	; 0x80
 8002054:	0192      	lsls	r2, r2, #6
 8002056:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800205e:	1d3a      	adds	r2, r7, #4
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <MX_TIM17_Init+0x100>)
 8002062:	0011      	movs	r1, r2
 8002064:	0018      	movs	r0, r3
 8002066:	f002 fbaf 	bl	80047c8 <HAL_TIMEx_ConfigBreakDeadTime>
 800206a:	1e03      	subs	r3, r0, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM17_Init+0xee>
  {
    Error_Handler();
 800206e:	f000 f90b 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002072:	4b04      	ldr	r3, [pc, #16]	; (8002084 <MX_TIM17_Init+0x100>)
 8002074:	0018      	movs	r0, r3
 8002076:	f000 fa1f 	bl	80024b8 <HAL_TIM_MspPostInit>

}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	46bd      	mov	sp, r7
 800207e:	b010      	add	sp, #64	; 0x40
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	200001e4 	.word	0x200001e4
 8002088:	40014800 	.word	0x40014800
 800208c:	00000bb8 	.word	0x00000bb8

08002090 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002094:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 8002096:	4a15      	ldr	r2, [pc, #84]	; (80020ec <MX_USART2_UART_Init+0x5c>)
 8002098:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800209a:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 800209c:	22e1      	movs	r2, #225	; 0xe1
 800209e:	0252      	lsls	r2, r2, #9
 80020a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020a8:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 80020b6:	220c      	movs	r2, #12
 80020b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <MX_USART2_UART_Init+0x58>)
 80020d4:	0018      	movs	r0, r3
 80020d6:	f002 fbe5 	bl	80048a4 <HAL_UART_Init>
 80020da:	1e03      	subs	r3, r0, #0
 80020dc:	d001      	beq.n	80020e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80020de:	f000 f8d3 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	2000022c 	.word	0x2000022c
 80020ec:	40004400 	.word	0x40004400

080020f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <MX_USART3_UART_Init+0x58>)
 80020f6:	4a15      	ldr	r2, [pc, #84]	; (800214c <MX_USART3_UART_Init+0x5c>)
 80020f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80020fa:	4b13      	ldr	r3, [pc, #76]	; (8002148 <MX_USART3_UART_Init+0x58>)
 80020fc:	2296      	movs	r2, #150	; 0x96
 80020fe:	0212      	lsls	r2, r2, #8
 8002100:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002102:	4b11      	ldr	r3, [pc, #68]	; (8002148 <MX_USART3_UART_Init+0x58>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <MX_USART3_UART_Init+0x58>)
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <MX_USART3_UART_Init+0x58>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <MX_USART3_UART_Init+0x58>)
 8002116:	220c      	movs	r2, #12
 8002118:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <MX_USART3_UART_Init+0x58>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <MX_USART3_UART_Init+0x58>)
 8002122:	2200      	movs	r2, #0
 8002124:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <MX_USART3_UART_Init+0x58>)
 8002128:	2200      	movs	r2, #0
 800212a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <MX_USART3_UART_Init+0x58>)
 800212e:	2200      	movs	r2, #0
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <MX_USART3_UART_Init+0x58>)
 8002134:	0018      	movs	r0, r3
 8002136:	f002 fbb5 	bl	80048a4 <HAL_UART_Init>
 800213a:	1e03      	subs	r3, r0, #0
 800213c:	d001      	beq.n	8002142 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800213e:	f000 f8a3 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	200002b4 	.word	0x200002b4
 800214c:	40004800 	.word	0x40004800

08002150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b08b      	sub	sp, #44	; 0x2c
 8002154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002156:	2414      	movs	r4, #20
 8002158:	193b      	adds	r3, r7, r4
 800215a:	0018      	movs	r0, r3
 800215c:	2314      	movs	r3, #20
 800215e:	001a      	movs	r2, r3
 8002160:	2100      	movs	r1, #0
 8002162:	f003 feb5 	bl	8005ed0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002166:	4b45      	ldr	r3, [pc, #276]	; (800227c <MX_GPIO_Init+0x12c>)
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	4b44      	ldr	r3, [pc, #272]	; (800227c <MX_GPIO_Init+0x12c>)
 800216c:	2180      	movs	r1, #128	; 0x80
 800216e:	0309      	lsls	r1, r1, #12
 8002170:	430a      	orrs	r2, r1
 8002172:	615a      	str	r2, [r3, #20]
 8002174:	4b41      	ldr	r3, [pc, #260]	; (800227c <MX_GPIO_Init+0x12c>)
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	031b      	lsls	r3, r3, #12
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002182:	4b3e      	ldr	r3, [pc, #248]	; (800227c <MX_GPIO_Init+0x12c>)
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	4b3d      	ldr	r3, [pc, #244]	; (800227c <MX_GPIO_Init+0x12c>)
 8002188:	2180      	movs	r1, #128	; 0x80
 800218a:	03c9      	lsls	r1, r1, #15
 800218c:	430a      	orrs	r2, r1
 800218e:	615a      	str	r2, [r3, #20]
 8002190:	4b3a      	ldr	r3, [pc, #232]	; (800227c <MX_GPIO_Init+0x12c>)
 8002192:	695a      	ldr	r2, [r3, #20]
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	03db      	lsls	r3, r3, #15
 8002198:	4013      	ands	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	4b37      	ldr	r3, [pc, #220]	; (800227c <MX_GPIO_Init+0x12c>)
 80021a0:	695a      	ldr	r2, [r3, #20]
 80021a2:	4b36      	ldr	r3, [pc, #216]	; (800227c <MX_GPIO_Init+0x12c>)
 80021a4:	2180      	movs	r1, #128	; 0x80
 80021a6:	0289      	lsls	r1, r1, #10
 80021a8:	430a      	orrs	r2, r1
 80021aa:	615a      	str	r2, [r3, #20]
 80021ac:	4b33      	ldr	r3, [pc, #204]	; (800227c <MX_GPIO_Init+0x12c>)
 80021ae:	695a      	ldr	r2, [r3, #20]
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	029b      	lsls	r3, r3, #10
 80021b4:	4013      	ands	r3, r2
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	4b30      	ldr	r3, [pc, #192]	; (800227c <MX_GPIO_Init+0x12c>)
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	4b2f      	ldr	r3, [pc, #188]	; (800227c <MX_GPIO_Init+0x12c>)
 80021c0:	2180      	movs	r1, #128	; 0x80
 80021c2:	02c9      	lsls	r1, r1, #11
 80021c4:	430a      	orrs	r2, r1
 80021c6:	615a      	str	r2, [r3, #20]
 80021c8:	4b2c      	ldr	r3, [pc, #176]	; (800227c <MX_GPIO_Init+0x12c>)
 80021ca:	695a      	ldr	r2, [r3, #20]
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	02db      	lsls	r3, r3, #11
 80021d0:	4013      	ands	r3, r2
 80021d2:	607b      	str	r3, [r7, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021d6:	2390      	movs	r3, #144	; 0x90
 80021d8:	05db      	lsls	r3, r3, #23
 80021da:	2200      	movs	r2, #0
 80021dc:	2120      	movs	r1, #32
 80021de:	0018      	movs	r0, r3
 80021e0:	f000 fe78 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80021e4:	23c0      	movs	r3, #192	; 0xc0
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	4825      	ldr	r0, [pc, #148]	; (8002280 <MX_GPIO_Init+0x130>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	0019      	movs	r1, r3
 80021ee:	f000 fe71 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021f2:	193b      	adds	r3, r7, r4
 80021f4:	2280      	movs	r2, #128	; 0x80
 80021f6:	0192      	lsls	r2, r2, #6
 80021f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021fa:	193b      	adds	r3, r7, r4
 80021fc:	2284      	movs	r2, #132	; 0x84
 80021fe:	0392      	lsls	r2, r2, #14
 8002200:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	193b      	adds	r3, r7, r4
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002208:	193b      	adds	r3, r7, r4
 800220a:	4a1e      	ldr	r2, [pc, #120]	; (8002284 <MX_GPIO_Init+0x134>)
 800220c:	0019      	movs	r1, r3
 800220e:	0010      	movs	r0, r2
 8002210:	f000 fcf0 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002214:	193b      	adds	r3, r7, r4
 8002216:	2220      	movs	r2, #32
 8002218:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221a:	193b      	adds	r3, r7, r4
 800221c:	2201      	movs	r2, #1
 800221e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	193b      	adds	r3, r7, r4
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	193b      	adds	r3, r7, r4
 8002228:	2200      	movs	r2, #0
 800222a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800222c:	193a      	adds	r2, r7, r4
 800222e:	2390      	movs	r3, #144	; 0x90
 8002230:	05db      	lsls	r3, r3, #23
 8002232:	0011      	movs	r1, r2
 8002234:	0018      	movs	r0, r3
 8002236:	f000 fcdd 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800223a:	0021      	movs	r1, r4
 800223c:	187b      	adds	r3, r7, r1
 800223e:	22c0      	movs	r2, #192	; 0xc0
 8002240:	0212      	lsls	r2, r2, #8
 8002242:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002244:	187b      	adds	r3, r7, r1
 8002246:	2201      	movs	r2, #1
 8002248:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	187b      	adds	r3, r7, r1
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	187b      	adds	r3, r7, r1
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002256:	187b      	adds	r3, r7, r1
 8002258:	4a09      	ldr	r2, [pc, #36]	; (8002280 <MX_GPIO_Init+0x130>)
 800225a:	0019      	movs	r1, r3
 800225c:	0010      	movs	r0, r2
 800225e:	f000 fcc9 	bl	8002bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2100      	movs	r1, #0
 8002266:	2007      	movs	r0, #7
 8002268:	f000 fc14 	bl	8002a94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800226c:	2007      	movs	r0, #7
 800226e:	f000 fc26 	bl	8002abe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	46bd      	mov	sp, r7
 8002276:	b00b      	add	sp, #44	; 0x2c
 8002278:	bd90      	pop	{r4, r7, pc}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	40021000 	.word	0x40021000
 8002280:	48000400 	.word	0x48000400
 8002284:	48000800 	.word	0x48000800

08002288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800228c:	b672      	cpsid	i
}
 800228e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002290:	e7fe      	b.n	8002290 <Error_Handler+0x8>
	...

08002294 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <HAL_MspInit+0x44>)
 800229c:	699a      	ldr	r2, [r3, #24]
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_MspInit+0x44>)
 80022a0:	2101      	movs	r1, #1
 80022a2:	430a      	orrs	r2, r1
 80022a4:	619a      	str	r2, [r3, #24]
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <HAL_MspInit+0x44>)
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2201      	movs	r2, #1
 80022ac:	4013      	ands	r3, r2
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_MspInit+0x44>)
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <HAL_MspInit+0x44>)
 80022b8:	2180      	movs	r1, #128	; 0x80
 80022ba:	0549      	lsls	r1, r1, #21
 80022bc:	430a      	orrs	r2, r1
 80022be:	61da      	str	r2, [r3, #28]
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <HAL_MspInit+0x44>)
 80022c2:	69da      	ldr	r2, [r3, #28]
 80022c4:	2380      	movs	r3, #128	; 0x80
 80022c6:	055b      	lsls	r3, r3, #21
 80022c8:	4013      	ands	r3, r2
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b002      	add	sp, #8
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	40021000 	.word	0x40021000

080022dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b08d      	sub	sp, #52	; 0x34
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	241c      	movs	r4, #28
 80022e6:	193b      	adds	r3, r7, r4
 80022e8:	0018      	movs	r0, r3
 80022ea:	2314      	movs	r3, #20
 80022ec:	001a      	movs	r2, r3
 80022ee:	2100      	movs	r1, #0
 80022f0:	f003 fdee 	bl	8005ed0 <memset>
  if(htim_encoder->Instance==TIM1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a38      	ldr	r2, [pc, #224]	; (80023dc <HAL_TIM_Encoder_MspInit+0x100>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d134      	bne.n	8002368 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022fe:	4b38      	ldr	r3, [pc, #224]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x104>)
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	4b37      	ldr	r3, [pc, #220]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x104>)
 8002304:	2180      	movs	r1, #128	; 0x80
 8002306:	0109      	lsls	r1, r1, #4
 8002308:	430a      	orrs	r2, r1
 800230a:	619a      	str	r2, [r3, #24]
 800230c:	4b34      	ldr	r3, [pc, #208]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x104>)
 800230e:	699a      	ldr	r2, [r3, #24]
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	4b31      	ldr	r3, [pc, #196]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x104>)
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x104>)
 8002320:	2180      	movs	r1, #128	; 0x80
 8002322:	0289      	lsls	r1, r1, #10
 8002324:	430a      	orrs	r2, r1
 8002326:	615a      	str	r2, [r3, #20]
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x104>)
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	029b      	lsls	r3, r3, #10
 8002330:	4013      	ands	r3, r2
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002336:	193b      	adds	r3, r7, r4
 8002338:	22c0      	movs	r2, #192	; 0xc0
 800233a:	0092      	lsls	r2, r2, #2
 800233c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	0021      	movs	r1, r4
 8002340:	187b      	adds	r3, r7, r1
 8002342:	2202      	movs	r2, #2
 8002344:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	187b      	adds	r3, r7, r1
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	187b      	adds	r3, r7, r1
 800234e:	2200      	movs	r2, #0
 8002350:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002352:	187b      	adds	r3, r7, r1
 8002354:	2202      	movs	r2, #2
 8002356:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002358:	187a      	adds	r2, r7, r1
 800235a:	2390      	movs	r3, #144	; 0x90
 800235c:	05db      	lsls	r3, r3, #23
 800235e:	0011      	movs	r1, r2
 8002360:	0018      	movs	r0, r3
 8002362:	f000 fc47 	bl	8002bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002366:	e035      	b.n	80023d4 <HAL_TIM_Encoder_MspInit+0xf8>
  else if(htim_encoder->Instance==TIM3)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <HAL_TIM_Encoder_MspInit+0x108>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d130      	bne.n	80023d4 <HAL_TIM_Encoder_MspInit+0xf8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002372:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x104>)
 8002374:	69da      	ldr	r2, [r3, #28]
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x104>)
 8002378:	2102      	movs	r1, #2
 800237a:	430a      	orrs	r2, r1
 800237c:	61da      	str	r2, [r3, #28]
 800237e:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x104>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	2202      	movs	r2, #2
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x104>)
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x104>)
 8002390:	2180      	movs	r1, #128	; 0x80
 8002392:	0289      	lsls	r1, r1, #10
 8002394:	430a      	orrs	r2, r1
 8002396:	615a      	str	r2, [r3, #20]
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x104>)
 800239a:	695a      	ldr	r2, [r3, #20]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	029b      	lsls	r3, r3, #10
 80023a0:	4013      	ands	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023a6:	211c      	movs	r1, #28
 80023a8:	187b      	adds	r3, r7, r1
 80023aa:	22c0      	movs	r2, #192	; 0xc0
 80023ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	187b      	adds	r3, r7, r1
 80023b0:	2202      	movs	r2, #2
 80023b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	187b      	adds	r3, r7, r1
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ba:	187b      	adds	r3, r7, r1
 80023bc:	2200      	movs	r2, #0
 80023be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80023c0:	187b      	adds	r3, r7, r1
 80023c2:	2201      	movs	r2, #1
 80023c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c6:	187a      	adds	r2, r7, r1
 80023c8:	2390      	movs	r3, #144	; 0x90
 80023ca:	05db      	lsls	r3, r3, #23
 80023cc:	0011      	movs	r1, r2
 80023ce:	0018      	movs	r0, r3
 80023d0:	f000 fc10 	bl	8002bf4 <HAL_GPIO_Init>
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b00d      	add	sp, #52	; 0x34
 80023da:	bd90      	pop	{r4, r7, pc}
 80023dc:	40012c00 	.word	0x40012c00
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40000400 	.word	0x40000400

080023e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a2b      	ldr	r2, [pc, #172]	; (80024a4 <HAL_TIM_Base_MspInit+0xbc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d114      	bne.n	8002424 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023fa:	4b2b      	ldr	r3, [pc, #172]	; (80024a8 <HAL_TIM_Base_MspInit+0xc0>)
 80023fc:	69da      	ldr	r2, [r3, #28]
 80023fe:	4b2a      	ldr	r3, [pc, #168]	; (80024a8 <HAL_TIM_Base_MspInit+0xc0>)
 8002400:	2110      	movs	r1, #16
 8002402:	430a      	orrs	r2, r1
 8002404:	61da      	str	r2, [r3, #28]
 8002406:	4b28      	ldr	r3, [pc, #160]	; (80024a8 <HAL_TIM_Base_MspInit+0xc0>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	2210      	movs	r2, #16
 800240c:	4013      	ands	r3, r2
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2101      	movs	r1, #1
 8002416:	2011      	movs	r0, #17
 8002418:	f000 fb3c 	bl	8002a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800241c:	2011      	movs	r0, #17
 800241e:	f000 fb4e 	bl	8002abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002422:	e03a      	b.n	800249a <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM14)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a20      	ldr	r2, [pc, #128]	; (80024ac <HAL_TIM_Base_MspInit+0xc4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d10e      	bne.n	800244c <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800242e:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <HAL_TIM_Base_MspInit+0xc0>)
 8002430:	69da      	ldr	r2, [r3, #28]
 8002432:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <HAL_TIM_Base_MspInit+0xc0>)
 8002434:	2180      	movs	r1, #128	; 0x80
 8002436:	0049      	lsls	r1, r1, #1
 8002438:	430a      	orrs	r2, r1
 800243a:	61da      	str	r2, [r3, #28]
 800243c:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <HAL_TIM_Base_MspInit+0xc0>)
 800243e:	69da      	ldr	r2, [r3, #28]
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	693b      	ldr	r3, [r7, #16]
}
 800244a:	e026      	b.n	800249a <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM16)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a17      	ldr	r2, [pc, #92]	; (80024b0 <HAL_TIM_Base_MspInit+0xc8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d10e      	bne.n	8002474 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002456:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <HAL_TIM_Base_MspInit+0xc0>)
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <HAL_TIM_Base_MspInit+0xc0>)
 800245c:	2180      	movs	r1, #128	; 0x80
 800245e:	0289      	lsls	r1, r1, #10
 8002460:	430a      	orrs	r2, r1
 8002462:	619a      	str	r2, [r3, #24]
 8002464:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <HAL_TIM_Base_MspInit+0xc0>)
 8002466:	699a      	ldr	r2, [r3, #24]
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	029b      	lsls	r3, r3, #10
 800246c:	4013      	ands	r3, r2
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
}
 8002472:	e012      	b.n	800249a <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM17)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <HAL_TIM_Base_MspInit+0xcc>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d10d      	bne.n	800249a <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800247e:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <HAL_TIM_Base_MspInit+0xc0>)
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_TIM_Base_MspInit+0xc0>)
 8002484:	2180      	movs	r1, #128	; 0x80
 8002486:	02c9      	lsls	r1, r1, #11
 8002488:	430a      	orrs	r2, r1
 800248a:	619a      	str	r2, [r3, #24]
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_TIM_Base_MspInit+0xc0>)
 800248e:	699a      	ldr	r2, [r3, #24]
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	02db      	lsls	r3, r3, #11
 8002494:	4013      	ands	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b006      	add	sp, #24
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	40001000 	.word	0x40001000
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40002000 	.word	0x40002000
 80024b0:	40014400 	.word	0x40014400
 80024b4:	40014800 	.word	0x40014800

080024b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b08b      	sub	sp, #44	; 0x2c
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	2414      	movs	r4, #20
 80024c2:	193b      	adds	r3, r7, r4
 80024c4:	0018      	movs	r0, r3
 80024c6:	2314      	movs	r3, #20
 80024c8:	001a      	movs	r2, r3
 80024ca:	2100      	movs	r1, #0
 80024cc:	f003 fd00 	bl	8005ed0 <memset>
  if(htim->Instance==TIM14)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a40      	ldr	r2, [pc, #256]	; (80025d8 <HAL_TIM_MspPostInit+0x120>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d125      	bne.n	8002526 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024da:	4b40      	ldr	r3, [pc, #256]	; (80025dc <HAL_TIM_MspPostInit+0x124>)
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	4b3f      	ldr	r3, [pc, #252]	; (80025dc <HAL_TIM_MspPostInit+0x124>)
 80024e0:	2180      	movs	r1, #128	; 0x80
 80024e2:	0289      	lsls	r1, r1, #10
 80024e4:	430a      	orrs	r2, r1
 80024e6:	615a      	str	r2, [r3, #20]
 80024e8:	4b3c      	ldr	r3, [pc, #240]	; (80025dc <HAL_TIM_MspPostInit+0x124>)
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	029b      	lsls	r3, r3, #10
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
    /**TIM14 GPIO Configuration
    PA4     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024f6:	0021      	movs	r1, r4
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	2210      	movs	r2, #16
 80024fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2202      	movs	r2, #2
 8002502:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	187b      	adds	r3, r7, r1
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250a:	187b      	adds	r3, r7, r1
 800250c:	2200      	movs	r2, #0
 800250e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8002510:	187b      	adds	r3, r7, r1
 8002512:	2204      	movs	r2, #4
 8002514:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002516:	187a      	adds	r2, r7, r1
 8002518:	2390      	movs	r3, #144	; 0x90
 800251a:	05db      	lsls	r3, r3, #23
 800251c:	0011      	movs	r1, r2
 800251e:	0018      	movs	r0, r3
 8002520:	f000 fb68 	bl	8002bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002524:	e054      	b.n	80025d0 <HAL_TIM_MspPostInit+0x118>
  else if(htim->Instance==TIM16)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a2d      	ldr	r2, [pc, #180]	; (80025e0 <HAL_TIM_MspPostInit+0x128>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d125      	bne.n	800257c <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002530:	4b2a      	ldr	r3, [pc, #168]	; (80025dc <HAL_TIM_MspPostInit+0x124>)
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	4b29      	ldr	r3, [pc, #164]	; (80025dc <HAL_TIM_MspPostInit+0x124>)
 8002536:	2180      	movs	r1, #128	; 0x80
 8002538:	02c9      	lsls	r1, r1, #11
 800253a:	430a      	orrs	r2, r1
 800253c:	615a      	str	r2, [r3, #20]
 800253e:	4b27      	ldr	r3, [pc, #156]	; (80025dc <HAL_TIM_MspPostInit+0x124>)
 8002540:	695a      	ldr	r2, [r3, #20]
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	02db      	lsls	r3, r3, #11
 8002546:	4013      	ands	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800254c:	2114      	movs	r1, #20
 800254e:	187b      	adds	r3, r7, r1
 8002550:	2280      	movs	r2, #128	; 0x80
 8002552:	0052      	lsls	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002556:	187b      	adds	r3, r7, r1
 8002558:	2202      	movs	r2, #2
 800255a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	187b      	adds	r3, r7, r1
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	187b      	adds	r3, r7, r1
 8002564:	2200      	movs	r2, #0
 8002566:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8002568:	187b      	adds	r3, r7, r1
 800256a:	2202      	movs	r2, #2
 800256c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256e:	187b      	adds	r3, r7, r1
 8002570:	4a1c      	ldr	r2, [pc, #112]	; (80025e4 <HAL_TIM_MspPostInit+0x12c>)
 8002572:	0019      	movs	r1, r3
 8002574:	0010      	movs	r0, r2
 8002576:	f000 fb3d 	bl	8002bf4 <HAL_GPIO_Init>
}
 800257a:	e029      	b.n	80025d0 <HAL_TIM_MspPostInit+0x118>
  else if(htim->Instance==TIM17)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a19      	ldr	r2, [pc, #100]	; (80025e8 <HAL_TIM_MspPostInit+0x130>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d124      	bne.n	80025d0 <HAL_TIM_MspPostInit+0x118>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <HAL_TIM_MspPostInit+0x124>)
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	4b14      	ldr	r3, [pc, #80]	; (80025dc <HAL_TIM_MspPostInit+0x124>)
 800258c:	2180      	movs	r1, #128	; 0x80
 800258e:	02c9      	lsls	r1, r1, #11
 8002590:	430a      	orrs	r2, r1
 8002592:	615a      	str	r2, [r3, #20]
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <HAL_TIM_MspPostInit+0x124>)
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	02db      	lsls	r3, r3, #11
 800259c:	4013      	ands	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025a2:	2114      	movs	r1, #20
 80025a4:	187b      	adds	r3, r7, r1
 80025a6:	2280      	movs	r2, #128	; 0x80
 80025a8:	0092      	lsls	r2, r2, #2
 80025aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	187b      	adds	r3, r7, r1
 80025ae:	2202      	movs	r2, #2
 80025b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	187b      	adds	r3, r7, r1
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b8:	187b      	adds	r3, r7, r1
 80025ba:	2200      	movs	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 80025be:	187b      	adds	r3, r7, r1
 80025c0:	2202      	movs	r2, #2
 80025c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	4a07      	ldr	r2, [pc, #28]	; (80025e4 <HAL_TIM_MspPostInit+0x12c>)
 80025c8:	0019      	movs	r1, r3
 80025ca:	0010      	movs	r0, r2
 80025cc:	f000 fb12 	bl	8002bf4 <HAL_GPIO_Init>
}
 80025d0:	46c0      	nop			; (mov r8, r8)
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b00b      	add	sp, #44	; 0x2c
 80025d6:	bd90      	pop	{r4, r7, pc}
 80025d8:	40002000 	.word	0x40002000
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40014400 	.word	0x40014400
 80025e4:	48000400 	.word	0x48000400
 80025e8:	40014800 	.word	0x40014800

080025ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b08d      	sub	sp, #52	; 0x34
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	241c      	movs	r4, #28
 80025f6:	193b      	adds	r3, r7, r4
 80025f8:	0018      	movs	r0, r3
 80025fa:	2314      	movs	r3, #20
 80025fc:	001a      	movs	r2, r3
 80025fe:	2100      	movs	r1, #0
 8002600:	f003 fc66 	bl	8005ed0 <memset>
  if(huart->Instance==USART2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a40      	ldr	r2, [pc, #256]	; (800270c <HAL_UART_MspInit+0x120>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d13b      	bne.n	8002686 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800260e:	4b40      	ldr	r3, [pc, #256]	; (8002710 <HAL_UART_MspInit+0x124>)
 8002610:	69da      	ldr	r2, [r3, #28]
 8002612:	4b3f      	ldr	r3, [pc, #252]	; (8002710 <HAL_UART_MspInit+0x124>)
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	0289      	lsls	r1, r1, #10
 8002618:	430a      	orrs	r2, r1
 800261a:	61da      	str	r2, [r3, #28]
 800261c:	4b3c      	ldr	r3, [pc, #240]	; (8002710 <HAL_UART_MspInit+0x124>)
 800261e:	69da      	ldr	r2, [r3, #28]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	029b      	lsls	r3, r3, #10
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	4b39      	ldr	r3, [pc, #228]	; (8002710 <HAL_UART_MspInit+0x124>)
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	4b38      	ldr	r3, [pc, #224]	; (8002710 <HAL_UART_MspInit+0x124>)
 8002630:	2180      	movs	r1, #128	; 0x80
 8002632:	0289      	lsls	r1, r1, #10
 8002634:	430a      	orrs	r2, r1
 8002636:	615a      	str	r2, [r3, #20]
 8002638:	4b35      	ldr	r3, [pc, #212]	; (8002710 <HAL_UART_MspInit+0x124>)
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	029b      	lsls	r3, r3, #10
 8002640:	4013      	ands	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002646:	0021      	movs	r1, r4
 8002648:	187b      	adds	r3, r7, r1
 800264a:	220c      	movs	r2, #12
 800264c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	187b      	adds	r3, r7, r1
 8002650:	2202      	movs	r2, #2
 8002652:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	187b      	adds	r3, r7, r1
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800265a:	187b      	adds	r3, r7, r1
 800265c:	2203      	movs	r2, #3
 800265e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002660:	187b      	adds	r3, r7, r1
 8002662:	2201      	movs	r2, #1
 8002664:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002666:	187a      	adds	r2, r7, r1
 8002668:	2390      	movs	r3, #144	; 0x90
 800266a:	05db      	lsls	r3, r3, #23
 800266c:	0011      	movs	r1, r2
 800266e:	0018      	movs	r0, r3
 8002670:	f000 fac0 	bl	8002bf4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002674:	2200      	movs	r2, #0
 8002676:	2100      	movs	r1, #0
 8002678:	201c      	movs	r0, #28
 800267a:	f000 fa0b 	bl	8002a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800267e:	201c      	movs	r0, #28
 8002680:	f000 fa1d 	bl	8002abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002684:	e03e      	b.n	8002704 <HAL_UART_MspInit+0x118>
  else if(huart->Instance==USART3)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a22      	ldr	r2, [pc, #136]	; (8002714 <HAL_UART_MspInit+0x128>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d139      	bne.n	8002704 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002690:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <HAL_UART_MspInit+0x124>)
 8002692:	69da      	ldr	r2, [r3, #28]
 8002694:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <HAL_UART_MspInit+0x124>)
 8002696:	2180      	movs	r1, #128	; 0x80
 8002698:	02c9      	lsls	r1, r1, #11
 800269a:	430a      	orrs	r2, r1
 800269c:	61da      	str	r2, [r3, #28]
 800269e:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <HAL_UART_MspInit+0x124>)
 80026a0:	69da      	ldr	r2, [r3, #28]
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	02db      	lsls	r3, r3, #11
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ac:	4b18      	ldr	r3, [pc, #96]	; (8002710 <HAL_UART_MspInit+0x124>)
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	4b17      	ldr	r3, [pc, #92]	; (8002710 <HAL_UART_MspInit+0x124>)
 80026b2:	2180      	movs	r1, #128	; 0x80
 80026b4:	0309      	lsls	r1, r1, #12
 80026b6:	430a      	orrs	r2, r1
 80026b8:	615a      	str	r2, [r3, #20]
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <HAL_UART_MspInit+0x124>)
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	031b      	lsls	r3, r3, #12
 80026c2:	4013      	ands	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80026c8:	211c      	movs	r1, #28
 80026ca:	187b      	adds	r3, r7, r1
 80026cc:	2230      	movs	r2, #48	; 0x30
 80026ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	187b      	adds	r3, r7, r1
 80026d2:	2202      	movs	r2, #2
 80026d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	187b      	adds	r3, r7, r1
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026dc:	187b      	adds	r3, r7, r1
 80026de:	2203      	movs	r2, #3
 80026e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 80026e2:	187b      	adds	r3, r7, r1
 80026e4:	2201      	movs	r2, #1
 80026e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e8:	187b      	adds	r3, r7, r1
 80026ea:	4a0b      	ldr	r2, [pc, #44]	; (8002718 <HAL_UART_MspInit+0x12c>)
 80026ec:	0019      	movs	r1, r3
 80026ee:	0010      	movs	r0, r2
 80026f0:	f000 fa80 	bl	8002bf4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 80026f4:	2200      	movs	r2, #0
 80026f6:	2100      	movs	r1, #0
 80026f8:	201d      	movs	r0, #29
 80026fa:	f000 f9cb 	bl	8002a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80026fe:	201d      	movs	r0, #29
 8002700:	f000 f9dd 	bl	8002abe <HAL_NVIC_EnableIRQ>
}
 8002704:	46c0      	nop			; (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	b00d      	add	sp, #52	; 0x34
 800270a:	bd90      	pop	{r4, r7, pc}
 800270c:	40004400 	.word	0x40004400
 8002710:	40021000 	.word	0x40021000
 8002714:	40004800 	.word	0x40004800
 8002718:	48000800 	.word	0x48000800

0800271c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002720:	e7fe      	b.n	8002720 <NMI_Handler+0x4>

08002722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002726:	e7fe      	b.n	8002726 <HardFault_Handler+0x4>

08002728 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800272c:	46c0      	nop			; (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002740:	f000 f8e0 	bl	8002904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002744:	46c0      	nop			; (mov r8, r8)
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	019b      	lsls	r3, r3, #6
 8002752:	0018      	movs	r0, r3
 8002754:	f000 fbdc 	bl	8002f10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <TIM6_IRQHandler+0x14>)
 8002766:	0018      	movs	r0, r3
 8002768:	f001 fb44 	bl	8003df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	2000010c 	.word	0x2000010c

08002778 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800277c:	4b03      	ldr	r3, [pc, #12]	; (800278c <USART2_IRQHandler+0x14>)
 800277e:	0018      	movs	r0, r3
 8002780:	f002 f9ac 	bl	8004adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	2000022c 	.word	0x2000022c

08002790 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002794:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <USART3_4_IRQHandler+0x14>)
 8002796:	0018      	movs	r0, r3
 8002798:	f002 f9a0 	bl	8004adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 800279c:	46c0      	nop			; (mov r8, r8)
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	200002b4 	.word	0x200002b4

080027a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027b0:	4a14      	ldr	r2, [pc, #80]	; (8002804 <_sbrk+0x5c>)
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <_sbrk+0x60>)
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <_sbrk+0x64>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d102      	bne.n	80027ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <_sbrk+0x64>)
 80027c6:	4a12      	ldr	r2, [pc, #72]	; (8002810 <_sbrk+0x68>)
 80027c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <_sbrk+0x64>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	18d3      	adds	r3, r2, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d207      	bcs.n	80027e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027d8:	f003 fb82 	bl	8005ee0 <__errno>
 80027dc:	0003      	movs	r3, r0
 80027de:	220c      	movs	r2, #12
 80027e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027e2:	2301      	movs	r3, #1
 80027e4:	425b      	negs	r3, r3
 80027e6:	e009      	b.n	80027fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <_sbrk+0x64>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ee:	4b07      	ldr	r3, [pc, #28]	; (800280c <_sbrk+0x64>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	18d2      	adds	r2, r2, r3
 80027f6:	4b05      	ldr	r3, [pc, #20]	; (800280c <_sbrk+0x64>)
 80027f8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80027fa:	68fb      	ldr	r3, [r7, #12]
}
 80027fc:	0018      	movs	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	b006      	add	sp, #24
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20004000 	.word	0x20004000
 8002808:	00000400 	.word	0x00000400
 800280c:	200003e0 	.word	0x200003e0
 8002810:	20000530 	.word	0x20000530

08002814 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002818:	46c0      	nop			; (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002820:	480d      	ldr	r0, [pc, #52]	; (8002858 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002822:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002824:	f7ff fff6 	bl	8002814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002828:	480c      	ldr	r0, [pc, #48]	; (800285c <LoopForever+0x6>)
  ldr r1, =_edata
 800282a:	490d      	ldr	r1, [pc, #52]	; (8002860 <LoopForever+0xa>)
  ldr r2, =_sidata
 800282c:	4a0d      	ldr	r2, [pc, #52]	; (8002864 <LoopForever+0xe>)
  movs r3, #0
 800282e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002830:	e002      	b.n	8002838 <LoopCopyDataInit>

08002832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002836:	3304      	adds	r3, #4

08002838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800283a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800283c:	d3f9      	bcc.n	8002832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002840:	4c0a      	ldr	r4, [pc, #40]	; (800286c <LoopForever+0x16>)
  movs r3, #0
 8002842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002844:	e001      	b.n	800284a <LoopFillZerobss>

08002846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002848:	3204      	adds	r2, #4

0800284a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800284a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800284c:	d3fb      	bcc.n	8002846 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800284e:	f003 fb4d 	bl	8005eec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002852:	f7ff f8fd 	bl	8001a50 <main>

08002856 <LoopForever>:

LoopForever:
    b LoopForever
 8002856:	e7fe      	b.n	8002856 <LoopForever>
  ldr   r0, =_estack
 8002858:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800285c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002860:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002864:	08006970 	.word	0x08006970
  ldr r2, =_sbss
 8002868:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800286c:	20000530 	.word	0x20000530

08002870 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002870:	e7fe      	b.n	8002870 <ADC1_IRQHandler>
	...

08002874 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002878:	4b07      	ldr	r3, [pc, #28]	; (8002898 <HAL_Init+0x24>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_Init+0x24>)
 800287e:	2110      	movs	r1, #16
 8002880:	430a      	orrs	r2, r1
 8002882:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002884:	2000      	movs	r0, #0
 8002886:	f000 f809 	bl	800289c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800288a:	f7ff fd03 	bl	8002294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	0018      	movs	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	40022000 	.word	0x40022000

0800289c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a4:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <HAL_InitTick+0x5c>)
 80028a6:	681c      	ldr	r4, [r3, #0]
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <HAL_InitTick+0x60>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	0019      	movs	r1, r3
 80028ae:	23fa      	movs	r3, #250	; 0xfa
 80028b0:	0098      	lsls	r0, r3, #2
 80028b2:	f7fd fc3b 	bl	800012c <__udivsi3>
 80028b6:	0003      	movs	r3, r0
 80028b8:	0019      	movs	r1, r3
 80028ba:	0020      	movs	r0, r4
 80028bc:	f7fd fc36 	bl	800012c <__udivsi3>
 80028c0:	0003      	movs	r3, r0
 80028c2:	0018      	movs	r0, r3
 80028c4:	f000 f90b 	bl	8002ade <HAL_SYSTICK_Config>
 80028c8:	1e03      	subs	r3, r0, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e00f      	b.n	80028f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d80b      	bhi.n	80028ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	2301      	movs	r3, #1
 80028da:	425b      	negs	r3, r3
 80028dc:	2200      	movs	r2, #0
 80028de:	0018      	movs	r0, r3
 80028e0:	f000 f8d8 	bl	8002a94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_InitTick+0x64>)
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e000      	b.n	80028f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
}
 80028f0:	0018      	movs	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b003      	add	sp, #12
 80028f6:	bd90      	pop	{r4, r7, pc}
 80028f8:	20000004 	.word	0x20000004
 80028fc:	2000000c 	.word	0x2000000c
 8002900:	20000008 	.word	0x20000008

08002904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_IncTick+0x1c>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	001a      	movs	r2, r3
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_IncTick+0x20>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	18d2      	adds	r2, r2, r3
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <HAL_IncTick+0x20>)
 8002916:	601a      	str	r2, [r3, #0]
}
 8002918:	46c0      	nop			; (mov r8, r8)
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	2000000c 	.word	0x2000000c
 8002924:	200003e4 	.word	0x200003e4

08002928 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  return uwTick;
 800292c:	4b02      	ldr	r3, [pc, #8]	; (8002938 <HAL_GetTick+0x10>)
 800292e:	681b      	ldr	r3, [r3, #0]
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	200003e4 	.word	0x200003e4

0800293c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	0002      	movs	r2, r0
 8002944:	1dfb      	adds	r3, r7, #7
 8002946:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002948:	1dfb      	adds	r3, r7, #7
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b7f      	cmp	r3, #127	; 0x7f
 800294e:	d809      	bhi.n	8002964 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002950:	1dfb      	adds	r3, r7, #7
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	001a      	movs	r2, r3
 8002956:	231f      	movs	r3, #31
 8002958:	401a      	ands	r2, r3
 800295a:	4b04      	ldr	r3, [pc, #16]	; (800296c <__NVIC_EnableIRQ+0x30>)
 800295c:	2101      	movs	r1, #1
 800295e:	4091      	lsls	r1, r2
 8002960:	000a      	movs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]
  }
}
 8002964:	46c0      	nop			; (mov r8, r8)
 8002966:	46bd      	mov	sp, r7
 8002968:	b002      	add	sp, #8
 800296a:	bd80      	pop	{r7, pc}
 800296c:	e000e100 	.word	0xe000e100

08002970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002970:	b590      	push	{r4, r7, lr}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	0002      	movs	r2, r0
 8002978:	6039      	str	r1, [r7, #0]
 800297a:	1dfb      	adds	r3, r7, #7
 800297c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800297e:	1dfb      	adds	r3, r7, #7
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b7f      	cmp	r3, #127	; 0x7f
 8002984:	d828      	bhi.n	80029d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002986:	4a2f      	ldr	r2, [pc, #188]	; (8002a44 <__NVIC_SetPriority+0xd4>)
 8002988:	1dfb      	adds	r3, r7, #7
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	b25b      	sxtb	r3, r3
 800298e:	089b      	lsrs	r3, r3, #2
 8002990:	33c0      	adds	r3, #192	; 0xc0
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	589b      	ldr	r3, [r3, r2]
 8002996:	1dfa      	adds	r2, r7, #7
 8002998:	7812      	ldrb	r2, [r2, #0]
 800299a:	0011      	movs	r1, r2
 800299c:	2203      	movs	r2, #3
 800299e:	400a      	ands	r2, r1
 80029a0:	00d2      	lsls	r2, r2, #3
 80029a2:	21ff      	movs	r1, #255	; 0xff
 80029a4:	4091      	lsls	r1, r2
 80029a6:	000a      	movs	r2, r1
 80029a8:	43d2      	mvns	r2, r2
 80029aa:	401a      	ands	r2, r3
 80029ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	019b      	lsls	r3, r3, #6
 80029b2:	22ff      	movs	r2, #255	; 0xff
 80029b4:	401a      	ands	r2, r3
 80029b6:	1dfb      	adds	r3, r7, #7
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	0018      	movs	r0, r3
 80029bc:	2303      	movs	r3, #3
 80029be:	4003      	ands	r3, r0
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029c4:	481f      	ldr	r0, [pc, #124]	; (8002a44 <__NVIC_SetPriority+0xd4>)
 80029c6:	1dfb      	adds	r3, r7, #7
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	b25b      	sxtb	r3, r3
 80029cc:	089b      	lsrs	r3, r3, #2
 80029ce:	430a      	orrs	r2, r1
 80029d0:	33c0      	adds	r3, #192	; 0xc0
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80029d6:	e031      	b.n	8002a3c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029d8:	4a1b      	ldr	r2, [pc, #108]	; (8002a48 <__NVIC_SetPriority+0xd8>)
 80029da:	1dfb      	adds	r3, r7, #7
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	0019      	movs	r1, r3
 80029e0:	230f      	movs	r3, #15
 80029e2:	400b      	ands	r3, r1
 80029e4:	3b08      	subs	r3, #8
 80029e6:	089b      	lsrs	r3, r3, #2
 80029e8:	3306      	adds	r3, #6
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	18d3      	adds	r3, r2, r3
 80029ee:	3304      	adds	r3, #4
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	1dfa      	adds	r2, r7, #7
 80029f4:	7812      	ldrb	r2, [r2, #0]
 80029f6:	0011      	movs	r1, r2
 80029f8:	2203      	movs	r2, #3
 80029fa:	400a      	ands	r2, r1
 80029fc:	00d2      	lsls	r2, r2, #3
 80029fe:	21ff      	movs	r1, #255	; 0xff
 8002a00:	4091      	lsls	r1, r2
 8002a02:	000a      	movs	r2, r1
 8002a04:	43d2      	mvns	r2, r2
 8002a06:	401a      	ands	r2, r3
 8002a08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	019b      	lsls	r3, r3, #6
 8002a0e:	22ff      	movs	r2, #255	; 0xff
 8002a10:	401a      	ands	r2, r3
 8002a12:	1dfb      	adds	r3, r7, #7
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	0018      	movs	r0, r3
 8002a18:	2303      	movs	r3, #3
 8002a1a:	4003      	ands	r3, r0
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a20:	4809      	ldr	r0, [pc, #36]	; (8002a48 <__NVIC_SetPriority+0xd8>)
 8002a22:	1dfb      	adds	r3, r7, #7
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	001c      	movs	r4, r3
 8002a28:	230f      	movs	r3, #15
 8002a2a:	4023      	ands	r3, r4
 8002a2c:	3b08      	subs	r3, #8
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	430a      	orrs	r2, r1
 8002a32:	3306      	adds	r3, #6
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	18c3      	adds	r3, r0, r3
 8002a38:	3304      	adds	r3, #4
 8002a3a:	601a      	str	r2, [r3, #0]
}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b003      	add	sp, #12
 8002a42:	bd90      	pop	{r4, r7, pc}
 8002a44:	e000e100 	.word	0xe000e100
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	1e5a      	subs	r2, r3, #1
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	045b      	lsls	r3, r3, #17
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d301      	bcc.n	8002a64 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a60:	2301      	movs	r3, #1
 8002a62:	e010      	b.n	8002a86 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a64:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <SysTick_Config+0x44>)
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	3a01      	subs	r2, #1
 8002a6a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	425b      	negs	r3, r3
 8002a70:	2103      	movs	r1, #3
 8002a72:	0018      	movs	r0, r3
 8002a74:	f7ff ff7c 	bl	8002970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <SysTick_Config+0x44>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a7e:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <SysTick_Config+0x44>)
 8002a80:	2207      	movs	r2, #7
 8002a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	0018      	movs	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b002      	add	sp, #8
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	e000e010 	.word	0xe000e010

08002a94 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	210f      	movs	r1, #15
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	1c02      	adds	r2, r0, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	187b      	adds	r3, r7, r1
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b25b      	sxtb	r3, r3
 8002aae:	0011      	movs	r1, r2
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f7ff ff5d 	bl	8002970 <__NVIC_SetPriority>
}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b004      	add	sp, #16
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	1dfb      	adds	r3, r7, #7
 8002ac8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aca:	1dfb      	adds	r3, r7, #7
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	b25b      	sxtb	r3, r3
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f7ff ff33 	bl	800293c <__NVIC_EnableIRQ>
}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b002      	add	sp, #8
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f7ff ffaf 	bl	8002a4c <SysTick_Config>
 8002aee:	0003      	movs	r3, r0
}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b002      	add	sp, #8
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2221      	movs	r2, #33	; 0x21
 8002b04:	5c9b      	ldrb	r3, [r3, r2]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d008      	beq.n	8002b1e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2204      	movs	r2, #4
 8002b10:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2220      	movs	r2, #32
 8002b16:	2100      	movs	r1, #0
 8002b18:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e020      	b.n	8002b60 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	210e      	movs	r1, #14
 8002b2a:	438a      	bics	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2101      	movs	r1, #1
 8002b3a:	438a      	bics	r2, r1
 8002b3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	2101      	movs	r1, #1
 8002b48:	4091      	lsls	r1, r2
 8002b4a:	000a      	movs	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2221      	movs	r2, #33	; 0x21
 8002b52:	2101      	movs	r1, #1
 8002b54:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	0018      	movs	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b002      	add	sp, #8
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b70:	210f      	movs	r1, #15
 8002b72:	187b      	adds	r3, r7, r1
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2221      	movs	r2, #33	; 0x21
 8002b7c:	5c9b      	ldrb	r3, [r3, r2]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d006      	beq.n	8002b92 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2204      	movs	r2, #4
 8002b88:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002b8a:	187b      	adds	r3, r7, r1
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]
 8002b90:	e028      	b.n	8002be4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	210e      	movs	r1, #14
 8002b9e:	438a      	bics	r2, r1
 8002ba0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2101      	movs	r1, #1
 8002bae:	438a      	bics	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	2101      	movs	r1, #1
 8002bbc:	4091      	lsls	r1, r2
 8002bbe:	000a      	movs	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2221      	movs	r2, #33	; 0x21
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	2100      	movs	r1, #0
 8002bd0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d004      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	0010      	movs	r0, r2
 8002be2:	4798      	blx	r3
    }
  }
  return status;
 8002be4:	230f      	movs	r3, #15
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	781b      	ldrb	r3, [r3, #0]
}
 8002bea:	0018      	movs	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b004      	add	sp, #16
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c02:	e14f      	b.n	8002ea4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2101      	movs	r1, #1
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4091      	lsls	r1, r2
 8002c0e:	000a      	movs	r2, r1
 8002c10:	4013      	ands	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d100      	bne.n	8002c1c <HAL_GPIO_Init+0x28>
 8002c1a:	e140      	b.n	8002e9e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2203      	movs	r2, #3
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d005      	beq.n	8002c34 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d130      	bne.n	8002c96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	2203      	movs	r2, #3
 8002c40:	409a      	lsls	r2, r3
 8002c42:	0013      	movs	r3, r2
 8002c44:	43da      	mvns	r2, r3
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	409a      	lsls	r2, r3
 8002c56:	0013      	movs	r3, r2
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	0013      	movs	r3, r2
 8002c72:	43da      	mvns	r2, r3
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	2201      	movs	r2, #1
 8002c82:	401a      	ands	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	409a      	lsls	r2, r3
 8002c88:	0013      	movs	r3, r2
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d017      	beq.n	8002cd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	2203      	movs	r2, #3
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	0013      	movs	r3, r2
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	0013      	movs	r3, r2
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d123      	bne.n	8002d26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	08da      	lsrs	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3208      	adds	r2, #8
 8002ce6:	0092      	lsls	r2, r2, #2
 8002ce8:	58d3      	ldr	r3, [r2, r3]
 8002cea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2207      	movs	r2, #7
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	220f      	movs	r2, #15
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	0013      	movs	r3, r2
 8002cfa:	43da      	mvns	r2, r3
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2107      	movs	r1, #7
 8002d0a:	400b      	ands	r3, r1
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	0013      	movs	r3, r2
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	08da      	lsrs	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3208      	adds	r2, #8
 8002d20:	0092      	lsls	r2, r2, #2
 8002d22:	6939      	ldr	r1, [r7, #16]
 8002d24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2203      	movs	r2, #3
 8002d32:	409a      	lsls	r2, r3
 8002d34:	0013      	movs	r3, r2
 8002d36:	43da      	mvns	r2, r3
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2203      	movs	r2, #3
 8002d44:	401a      	ands	r2, r3
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	0013      	movs	r3, r2
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	23c0      	movs	r3, #192	; 0xc0
 8002d60:	029b      	lsls	r3, r3, #10
 8002d62:	4013      	ands	r3, r2
 8002d64:	d100      	bne.n	8002d68 <HAL_GPIO_Init+0x174>
 8002d66:	e09a      	b.n	8002e9e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d68:	4b54      	ldr	r3, [pc, #336]	; (8002ebc <HAL_GPIO_Init+0x2c8>)
 8002d6a:	699a      	ldr	r2, [r3, #24]
 8002d6c:	4b53      	ldr	r3, [pc, #332]	; (8002ebc <HAL_GPIO_Init+0x2c8>)
 8002d6e:	2101      	movs	r1, #1
 8002d70:	430a      	orrs	r2, r1
 8002d72:	619a      	str	r2, [r3, #24]
 8002d74:	4b51      	ldr	r3, [pc, #324]	; (8002ebc <HAL_GPIO_Init+0x2c8>)
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d80:	4a4f      	ldr	r2, [pc, #316]	; (8002ec0 <HAL_GPIO_Init+0x2cc>)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	089b      	lsrs	r3, r3, #2
 8002d86:	3302      	adds	r3, #2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	589b      	ldr	r3, [r3, r2]
 8002d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2203      	movs	r2, #3
 8002d92:	4013      	ands	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	220f      	movs	r2, #15
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	0013      	movs	r3, r2
 8002d9c:	43da      	mvns	r2, r3
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	2390      	movs	r3, #144	; 0x90
 8002da8:	05db      	lsls	r3, r3, #23
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d013      	beq.n	8002dd6 <HAL_GPIO_Init+0x1e2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a44      	ldr	r2, [pc, #272]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00d      	beq.n	8002dd2 <HAL_GPIO_Init+0x1de>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a43      	ldr	r2, [pc, #268]	; (8002ec8 <HAL_GPIO_Init+0x2d4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d007      	beq.n	8002dce <HAL_GPIO_Init+0x1da>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a42      	ldr	r2, [pc, #264]	; (8002ecc <HAL_GPIO_Init+0x2d8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d101      	bne.n	8002dca <HAL_GPIO_Init+0x1d6>
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e006      	b.n	8002dd8 <HAL_GPIO_Init+0x1e4>
 8002dca:	2305      	movs	r3, #5
 8002dcc:	e004      	b.n	8002dd8 <HAL_GPIO_Init+0x1e4>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e002      	b.n	8002dd8 <HAL_GPIO_Init+0x1e4>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <HAL_GPIO_Init+0x1e4>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	2103      	movs	r1, #3
 8002ddc:	400a      	ands	r2, r1
 8002dde:	0092      	lsls	r2, r2, #2
 8002de0:	4093      	lsls	r3, r2
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002de8:	4935      	ldr	r1, [pc, #212]	; (8002ec0 <HAL_GPIO_Init+0x2cc>)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	089b      	lsrs	r3, r3, #2
 8002dee:	3302      	adds	r3, #2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002df6:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <HAL_GPIO_Init+0x2dc>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4013      	ands	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	035b      	lsls	r3, r3, #13
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ed0 <HAL_GPIO_Init+0x2dc>)
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002e20:	4b2b      	ldr	r3, [pc, #172]	; (8002ed0 <HAL_GPIO_Init+0x2dc>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	43da      	mvns	r2, r3
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	039b      	lsls	r3, r3, #14
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e44:	4b22      	ldr	r3, [pc, #136]	; (8002ed0 <HAL_GPIO_Init+0x2dc>)
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002e4a:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <HAL_GPIO_Init+0x2dc>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	43da      	mvns	r2, r3
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4013      	ands	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	029b      	lsls	r3, r3, #10
 8002e62:	4013      	ands	r3, r2
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e6e:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <HAL_GPIO_Init+0x2dc>)
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002e74:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <HAL_GPIO_Init+0x2dc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	43da      	mvns	r2, r3
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	025b      	lsls	r3, r3, #9
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e98:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <HAL_GPIO_Init+0x2dc>)
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	40da      	lsrs	r2, r3
 8002eac:	1e13      	subs	r3, r2, #0
 8002eae:	d000      	beq.n	8002eb2 <HAL_GPIO_Init+0x2be>
 8002eb0:	e6a8      	b.n	8002c04 <HAL_GPIO_Init+0x10>
  } 
}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b006      	add	sp, #24
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40010000 	.word	0x40010000
 8002ec4:	48000400 	.word	0x48000400
 8002ec8:	48000800 	.word	0x48000800
 8002ecc:	48000c00 	.word	0x48000c00
 8002ed0:	40010400 	.word	0x40010400

08002ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	0008      	movs	r0, r1
 8002ede:	0011      	movs	r1, r2
 8002ee0:	1cbb      	adds	r3, r7, #2
 8002ee2:	1c02      	adds	r2, r0, #0
 8002ee4:	801a      	strh	r2, [r3, #0]
 8002ee6:	1c7b      	adds	r3, r7, #1
 8002ee8:	1c0a      	adds	r2, r1, #0
 8002eea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eec:	1c7b      	adds	r3, r7, #1
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d004      	beq.n	8002efe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ef4:	1cbb      	adds	r3, r7, #2
 8002ef6:	881a      	ldrh	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002efc:	e003      	b.n	8002f06 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002efe:	1cbb      	adds	r3, r7, #2
 8002f00:	881a      	ldrh	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b002      	add	sp, #8
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	0002      	movs	r2, r0
 8002f18:	1dbb      	adds	r3, r7, #6
 8002f1a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	1dba      	adds	r2, r7, #6
 8002f22:	8812      	ldrh	r2, [r2, #0]
 8002f24:	4013      	ands	r3, r2
 8002f26:	d008      	beq.n	8002f3a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002f2a:	1dba      	adds	r2, r7, #6
 8002f2c:	8812      	ldrh	r2, [r2, #0]
 8002f2e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f30:	1dbb      	adds	r3, r7, #6
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	0018      	movs	r0, r3
 8002f36:	f7fe fa39 	bl	80013ac <HAL_GPIO_EXTI_Callback>
  }
}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	b002      	add	sp, #8
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	40010400 	.word	0x40010400

08002f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e305      	b.n	8003566 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	4013      	ands	r3, r2
 8002f62:	d100      	bne.n	8002f66 <HAL_RCC_OscConfig+0x1e>
 8002f64:	e08d      	b.n	8003082 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f66:	4bc5      	ldr	r3, [pc, #788]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	220c      	movs	r2, #12
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d00e      	beq.n	8002f90 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f72:	4bc2      	ldr	r3, [pc, #776]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	220c      	movs	r2, #12
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d116      	bne.n	8002fac <HAL_RCC_OscConfig+0x64>
 8002f7e:	4bbf      	ldr	r3, [pc, #764]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	23c0      	movs	r3, #192	; 0xc0
 8002f84:	025b      	lsls	r3, r3, #9
 8002f86:	401a      	ands	r2, r3
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	025b      	lsls	r3, r3, #9
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d10d      	bne.n	8002fac <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f90:	4bba      	ldr	r3, [pc, #744]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	029b      	lsls	r3, r3, #10
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d100      	bne.n	8002f9e <HAL_RCC_OscConfig+0x56>
 8002f9c:	e070      	b.n	8003080 <HAL_RCC_OscConfig+0x138>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d000      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x60>
 8002fa6:	e06b      	b.n	8003080 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e2dc      	b.n	8003566 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d107      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x7c>
 8002fb4:	4bb1      	ldr	r3, [pc, #708]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	4bb0      	ldr	r3, [pc, #704]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8002fba:	2180      	movs	r1, #128	; 0x80
 8002fbc:	0249      	lsls	r1, r1, #9
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	e02f      	b.n	8003024 <HAL_RCC_OscConfig+0xdc>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10c      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x9e>
 8002fcc:	4bab      	ldr	r3, [pc, #684]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4baa      	ldr	r3, [pc, #680]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8002fd2:	49ab      	ldr	r1, [pc, #684]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 8002fd4:	400a      	ands	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	4ba8      	ldr	r3, [pc, #672]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	4ba7      	ldr	r3, [pc, #668]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8002fde:	49a9      	ldr	r1, [pc, #676]	; (8003284 <HAL_RCC_OscConfig+0x33c>)
 8002fe0:	400a      	ands	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	e01e      	b.n	8003024 <HAL_RCC_OscConfig+0xdc>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b05      	cmp	r3, #5
 8002fec:	d10e      	bne.n	800300c <HAL_RCC_OscConfig+0xc4>
 8002fee:	4ba3      	ldr	r3, [pc, #652]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4ba2      	ldr	r3, [pc, #648]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8002ff4:	2180      	movs	r1, #128	; 0x80
 8002ff6:	02c9      	lsls	r1, r1, #11
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	4b9f      	ldr	r3, [pc, #636]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b9e      	ldr	r3, [pc, #632]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8003002:	2180      	movs	r1, #128	; 0x80
 8003004:	0249      	lsls	r1, r1, #9
 8003006:	430a      	orrs	r2, r1
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	e00b      	b.n	8003024 <HAL_RCC_OscConfig+0xdc>
 800300c:	4b9b      	ldr	r3, [pc, #620]	; (800327c <HAL_RCC_OscConfig+0x334>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4b9a      	ldr	r3, [pc, #616]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8003012:	499b      	ldr	r1, [pc, #620]	; (8003280 <HAL_RCC_OscConfig+0x338>)
 8003014:	400a      	ands	r2, r1
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	4b98      	ldr	r3, [pc, #608]	; (800327c <HAL_RCC_OscConfig+0x334>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b97      	ldr	r3, [pc, #604]	; (800327c <HAL_RCC_OscConfig+0x334>)
 800301e:	4999      	ldr	r1, [pc, #612]	; (8003284 <HAL_RCC_OscConfig+0x33c>)
 8003020:	400a      	ands	r2, r1
 8003022:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d014      	beq.n	8003056 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7ff fc7c 	bl	8002928 <HAL_GetTick>
 8003030:	0003      	movs	r3, r0
 8003032:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003036:	f7ff fc77 	bl	8002928 <HAL_GetTick>
 800303a:	0002      	movs	r2, r0
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b64      	cmp	r3, #100	; 0x64
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e28e      	b.n	8003566 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003048:	4b8c      	ldr	r3, [pc, #560]	; (800327c <HAL_RCC_OscConfig+0x334>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	029b      	lsls	r3, r3, #10
 8003050:	4013      	ands	r3, r2
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0xee>
 8003054:	e015      	b.n	8003082 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003056:	f7ff fc67 	bl	8002928 <HAL_GetTick>
 800305a:	0003      	movs	r3, r0
 800305c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003060:	f7ff fc62 	bl	8002928 <HAL_GetTick>
 8003064:	0002      	movs	r2, r0
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	; 0x64
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e279      	b.n	8003566 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003072:	4b82      	ldr	r3, [pc, #520]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	029b      	lsls	r3, r3, #10
 800307a:	4013      	ands	r3, r2
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x118>
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003080:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2202      	movs	r2, #2
 8003088:	4013      	ands	r3, r2
 800308a:	d100      	bne.n	800308e <HAL_RCC_OscConfig+0x146>
 800308c:	e06c      	b.n	8003168 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800308e:	4b7b      	ldr	r3, [pc, #492]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	220c      	movs	r2, #12
 8003094:	4013      	ands	r3, r2
 8003096:	d00e      	beq.n	80030b6 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003098:	4b78      	ldr	r3, [pc, #480]	; (800327c <HAL_RCC_OscConfig+0x334>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	220c      	movs	r2, #12
 800309e:	4013      	ands	r3, r2
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d11f      	bne.n	80030e4 <HAL_RCC_OscConfig+0x19c>
 80030a4:	4b75      	ldr	r3, [pc, #468]	; (800327c <HAL_RCC_OscConfig+0x334>)
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	23c0      	movs	r3, #192	; 0xc0
 80030aa:	025b      	lsls	r3, r3, #9
 80030ac:	401a      	ands	r2, r3
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d116      	bne.n	80030e4 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b6:	4b71      	ldr	r3, [pc, #452]	; (800327c <HAL_RCC_OscConfig+0x334>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2202      	movs	r2, #2
 80030bc:	4013      	ands	r3, r2
 80030be:	d005      	beq.n	80030cc <HAL_RCC_OscConfig+0x184>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e24c      	b.n	8003566 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030cc:	4b6b      	ldr	r3, [pc, #428]	; (800327c <HAL_RCC_OscConfig+0x334>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	22f8      	movs	r2, #248	; 0xf8
 80030d2:	4393      	bics	r3, r2
 80030d4:	0019      	movs	r1, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	00da      	lsls	r2, r3, #3
 80030dc:	4b67      	ldr	r3, [pc, #412]	; (800327c <HAL_RCC_OscConfig+0x334>)
 80030de:	430a      	orrs	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e2:	e041      	b.n	8003168 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d024      	beq.n	8003136 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ec:	4b63      	ldr	r3, [pc, #396]	; (800327c <HAL_RCC_OscConfig+0x334>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4b62      	ldr	r3, [pc, #392]	; (800327c <HAL_RCC_OscConfig+0x334>)
 80030f2:	2101      	movs	r1, #1
 80030f4:	430a      	orrs	r2, r1
 80030f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7ff fc16 	bl	8002928 <HAL_GetTick>
 80030fc:	0003      	movs	r3, r0
 80030fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003102:	f7ff fc11 	bl	8002928 <HAL_GetTick>
 8003106:	0002      	movs	r2, r0
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e228      	b.n	8003566 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003114:	4b59      	ldr	r3, [pc, #356]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2202      	movs	r2, #2
 800311a:	4013      	ands	r3, r2
 800311c:	d0f1      	beq.n	8003102 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311e:	4b57      	ldr	r3, [pc, #348]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	22f8      	movs	r2, #248	; 0xf8
 8003124:	4393      	bics	r3, r2
 8003126:	0019      	movs	r1, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	00da      	lsls	r2, r3, #3
 800312e:	4b53      	ldr	r3, [pc, #332]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8003130:	430a      	orrs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	e018      	b.n	8003168 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003136:	4b51      	ldr	r3, [pc, #324]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	4b50      	ldr	r3, [pc, #320]	; (800327c <HAL_RCC_OscConfig+0x334>)
 800313c:	2101      	movs	r1, #1
 800313e:	438a      	bics	r2, r1
 8003140:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003142:	f7ff fbf1 	bl	8002928 <HAL_GetTick>
 8003146:	0003      	movs	r3, r0
 8003148:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800314c:	f7ff fbec 	bl	8002928 <HAL_GetTick>
 8003150:	0002      	movs	r2, r0
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e203      	b.n	8003566 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315e:	4b47      	ldr	r3, [pc, #284]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2202      	movs	r2, #2
 8003164:	4013      	ands	r3, r2
 8003166:	d1f1      	bne.n	800314c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2208      	movs	r2, #8
 800316e:	4013      	ands	r3, r2
 8003170:	d036      	beq.n	80031e0 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d019      	beq.n	80031ae <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317a:	4b40      	ldr	r3, [pc, #256]	; (800327c <HAL_RCC_OscConfig+0x334>)
 800317c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800317e:	4b3f      	ldr	r3, [pc, #252]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8003180:	2101      	movs	r1, #1
 8003182:	430a      	orrs	r2, r1
 8003184:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003186:	f7ff fbcf 	bl	8002928 <HAL_GetTick>
 800318a:	0003      	movs	r3, r0
 800318c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003190:	f7ff fbca 	bl	8002928 <HAL_GetTick>
 8003194:	0002      	movs	r2, r0
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e1e1      	b.n	8003566 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a2:	4b36      	ldr	r3, [pc, #216]	; (800327c <HAL_RCC_OscConfig+0x334>)
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	2202      	movs	r2, #2
 80031a8:	4013      	ands	r3, r2
 80031aa:	d0f1      	beq.n	8003190 <HAL_RCC_OscConfig+0x248>
 80031ac:	e018      	b.n	80031e0 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ae:	4b33      	ldr	r3, [pc, #204]	; (800327c <HAL_RCC_OscConfig+0x334>)
 80031b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031b2:	4b32      	ldr	r3, [pc, #200]	; (800327c <HAL_RCC_OscConfig+0x334>)
 80031b4:	2101      	movs	r1, #1
 80031b6:	438a      	bics	r2, r1
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ba:	f7ff fbb5 	bl	8002928 <HAL_GetTick>
 80031be:	0003      	movs	r3, r0
 80031c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c4:	f7ff fbb0 	bl	8002928 <HAL_GetTick>
 80031c8:	0002      	movs	r2, r0
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e1c7      	b.n	8003566 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d6:	4b29      	ldr	r3, [pc, #164]	; (800327c <HAL_RCC_OscConfig+0x334>)
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	2202      	movs	r2, #2
 80031dc:	4013      	ands	r3, r2
 80031de:	d1f1      	bne.n	80031c4 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2204      	movs	r2, #4
 80031e6:	4013      	ands	r3, r2
 80031e8:	d100      	bne.n	80031ec <HAL_RCC_OscConfig+0x2a4>
 80031ea:	e0b5      	b.n	8003358 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ec:	201f      	movs	r0, #31
 80031ee:	183b      	adds	r3, r7, r0
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f4:	4b21      	ldr	r3, [pc, #132]	; (800327c <HAL_RCC_OscConfig+0x334>)
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	055b      	lsls	r3, r3, #21
 80031fc:	4013      	ands	r3, r2
 80031fe:	d110      	bne.n	8003222 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003200:	4b1e      	ldr	r3, [pc, #120]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	4b1d      	ldr	r3, [pc, #116]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8003206:	2180      	movs	r1, #128	; 0x80
 8003208:	0549      	lsls	r1, r1, #21
 800320a:	430a      	orrs	r2, r1
 800320c:	61da      	str	r2, [r3, #28]
 800320e:	4b1b      	ldr	r3, [pc, #108]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8003210:	69da      	ldr	r2, [r3, #28]
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	055b      	lsls	r3, r3, #21
 8003216:	4013      	ands	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800321c:	183b      	adds	r3, r7, r0
 800321e:	2201      	movs	r2, #1
 8003220:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003222:	4b19      	ldr	r3, [pc, #100]	; (8003288 <HAL_RCC_OscConfig+0x340>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4013      	ands	r3, r2
 800322c:	d11a      	bne.n	8003264 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800322e:	4b16      	ldr	r3, [pc, #88]	; (8003288 <HAL_RCC_OscConfig+0x340>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4b15      	ldr	r3, [pc, #84]	; (8003288 <HAL_RCC_OscConfig+0x340>)
 8003234:	2180      	movs	r1, #128	; 0x80
 8003236:	0049      	lsls	r1, r1, #1
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323c:	f7ff fb74 	bl	8002928 <HAL_GetTick>
 8003240:	0003      	movs	r3, r0
 8003242:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003246:	f7ff fb6f 	bl	8002928 <HAL_GetTick>
 800324a:	0002      	movs	r2, r0
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b64      	cmp	r3, #100	; 0x64
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e186      	b.n	8003566 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_RCC_OscConfig+0x340>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4013      	ands	r3, r2
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d10f      	bne.n	800328c <HAL_RCC_OscConfig+0x344>
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <HAL_RCC_OscConfig+0x334>)
 800326e:	6a1a      	ldr	r2, [r3, #32]
 8003270:	4b02      	ldr	r3, [pc, #8]	; (800327c <HAL_RCC_OscConfig+0x334>)
 8003272:	2101      	movs	r1, #1
 8003274:	430a      	orrs	r2, r1
 8003276:	621a      	str	r2, [r3, #32]
 8003278:	e036      	b.n	80032e8 <HAL_RCC_OscConfig+0x3a0>
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	40021000 	.word	0x40021000
 8003280:	fffeffff 	.word	0xfffeffff
 8003284:	fffbffff 	.word	0xfffbffff
 8003288:	40007000 	.word	0x40007000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10c      	bne.n	80032ae <HAL_RCC_OscConfig+0x366>
 8003294:	4bb6      	ldr	r3, [pc, #728]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 8003296:	6a1a      	ldr	r2, [r3, #32]
 8003298:	4bb5      	ldr	r3, [pc, #724]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 800329a:	2101      	movs	r1, #1
 800329c:	438a      	bics	r2, r1
 800329e:	621a      	str	r2, [r3, #32]
 80032a0:	4bb3      	ldr	r3, [pc, #716]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80032a2:	6a1a      	ldr	r2, [r3, #32]
 80032a4:	4bb2      	ldr	r3, [pc, #712]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80032a6:	2104      	movs	r1, #4
 80032a8:	438a      	bics	r2, r1
 80032aa:	621a      	str	r2, [r3, #32]
 80032ac:	e01c      	b.n	80032e8 <HAL_RCC_OscConfig+0x3a0>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2b05      	cmp	r3, #5
 80032b4:	d10c      	bne.n	80032d0 <HAL_RCC_OscConfig+0x388>
 80032b6:	4bae      	ldr	r3, [pc, #696]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80032b8:	6a1a      	ldr	r2, [r3, #32]
 80032ba:	4bad      	ldr	r3, [pc, #692]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80032bc:	2104      	movs	r1, #4
 80032be:	430a      	orrs	r2, r1
 80032c0:	621a      	str	r2, [r3, #32]
 80032c2:	4bab      	ldr	r3, [pc, #684]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80032c4:	6a1a      	ldr	r2, [r3, #32]
 80032c6:	4baa      	ldr	r3, [pc, #680]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80032c8:	2101      	movs	r1, #1
 80032ca:	430a      	orrs	r2, r1
 80032cc:	621a      	str	r2, [r3, #32]
 80032ce:	e00b      	b.n	80032e8 <HAL_RCC_OscConfig+0x3a0>
 80032d0:	4ba7      	ldr	r3, [pc, #668]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80032d2:	6a1a      	ldr	r2, [r3, #32]
 80032d4:	4ba6      	ldr	r3, [pc, #664]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80032d6:	2101      	movs	r1, #1
 80032d8:	438a      	bics	r2, r1
 80032da:	621a      	str	r2, [r3, #32]
 80032dc:	4ba4      	ldr	r3, [pc, #656]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80032de:	6a1a      	ldr	r2, [r3, #32]
 80032e0:	4ba3      	ldr	r3, [pc, #652]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80032e2:	2104      	movs	r1, #4
 80032e4:	438a      	bics	r2, r1
 80032e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d014      	beq.n	800331a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f0:	f7ff fb1a 	bl	8002928 <HAL_GetTick>
 80032f4:	0003      	movs	r3, r0
 80032f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f8:	e009      	b.n	800330e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032fa:	f7ff fb15 	bl	8002928 <HAL_GetTick>
 80032fe:	0002      	movs	r2, r0
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	4a9b      	ldr	r2, [pc, #620]	; (8003574 <HAL_RCC_OscConfig+0x62c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e12b      	b.n	8003566 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330e:	4b98      	ldr	r3, [pc, #608]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	2202      	movs	r2, #2
 8003314:	4013      	ands	r3, r2
 8003316:	d0f0      	beq.n	80032fa <HAL_RCC_OscConfig+0x3b2>
 8003318:	e013      	b.n	8003342 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800331a:	f7ff fb05 	bl	8002928 <HAL_GetTick>
 800331e:	0003      	movs	r3, r0
 8003320:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003322:	e009      	b.n	8003338 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003324:	f7ff fb00 	bl	8002928 <HAL_GetTick>
 8003328:	0002      	movs	r2, r0
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	4a91      	ldr	r2, [pc, #580]	; (8003574 <HAL_RCC_OscConfig+0x62c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e116      	b.n	8003566 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003338:	4b8d      	ldr	r3, [pc, #564]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	2202      	movs	r2, #2
 800333e:	4013      	ands	r3, r2
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003342:	231f      	movs	r3, #31
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d105      	bne.n	8003358 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800334c:	4b88      	ldr	r3, [pc, #544]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	4b87      	ldr	r3, [pc, #540]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 8003352:	4989      	ldr	r1, [pc, #548]	; (8003578 <HAL_RCC_OscConfig+0x630>)
 8003354:	400a      	ands	r2, r1
 8003356:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2210      	movs	r2, #16
 800335e:	4013      	ands	r3, r2
 8003360:	d063      	beq.n	800342a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d12a      	bne.n	80033c0 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800336a:	4b81      	ldr	r3, [pc, #516]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 800336c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800336e:	4b80      	ldr	r3, [pc, #512]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 8003370:	2104      	movs	r1, #4
 8003372:	430a      	orrs	r2, r1
 8003374:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003376:	4b7e      	ldr	r3, [pc, #504]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 8003378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800337a:	4b7d      	ldr	r3, [pc, #500]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 800337c:	2101      	movs	r1, #1
 800337e:	430a      	orrs	r2, r1
 8003380:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003382:	f7ff fad1 	bl	8002928 <HAL_GetTick>
 8003386:	0003      	movs	r3, r0
 8003388:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800338c:	f7ff facc 	bl	8002928 <HAL_GetTick>
 8003390:	0002      	movs	r2, r0
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e0e3      	b.n	8003566 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800339e:	4b74      	ldr	r3, [pc, #464]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80033a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a2:	2202      	movs	r2, #2
 80033a4:	4013      	ands	r3, r2
 80033a6:	d0f1      	beq.n	800338c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80033a8:	4b71      	ldr	r3, [pc, #452]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80033aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ac:	22f8      	movs	r2, #248	; 0xf8
 80033ae:	4393      	bics	r3, r2
 80033b0:	0019      	movs	r1, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	00da      	lsls	r2, r3, #3
 80033b8:	4b6d      	ldr	r3, [pc, #436]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80033ba:	430a      	orrs	r2, r1
 80033bc:	635a      	str	r2, [r3, #52]	; 0x34
 80033be:	e034      	b.n	800342a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	3305      	adds	r3, #5
 80033c6:	d111      	bne.n	80033ec <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80033c8:	4b69      	ldr	r3, [pc, #420]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80033ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033cc:	4b68      	ldr	r3, [pc, #416]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80033ce:	2104      	movs	r1, #4
 80033d0:	438a      	bics	r2, r1
 80033d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80033d4:	4b66      	ldr	r3, [pc, #408]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80033d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d8:	22f8      	movs	r2, #248	; 0xf8
 80033da:	4393      	bics	r3, r2
 80033dc:	0019      	movs	r1, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	00da      	lsls	r2, r3, #3
 80033e4:	4b62      	ldr	r3, [pc, #392]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80033e6:	430a      	orrs	r2, r1
 80033e8:	635a      	str	r2, [r3, #52]	; 0x34
 80033ea:	e01e      	b.n	800342a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80033ec:	4b60      	ldr	r3, [pc, #384]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80033ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033f0:	4b5f      	ldr	r3, [pc, #380]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80033f2:	2104      	movs	r1, #4
 80033f4:	430a      	orrs	r2, r1
 80033f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80033f8:	4b5d      	ldr	r3, [pc, #372]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80033fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033fc:	4b5c      	ldr	r3, [pc, #368]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80033fe:	2101      	movs	r1, #1
 8003400:	438a      	bics	r2, r1
 8003402:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003404:	f7ff fa90 	bl	8002928 <HAL_GetTick>
 8003408:	0003      	movs	r3, r0
 800340a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800340e:	f7ff fa8b 	bl	8002928 <HAL_GetTick>
 8003412:	0002      	movs	r2, r0
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e0a2      	b.n	8003566 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003420:	4b53      	ldr	r3, [pc, #332]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 8003422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003424:	2202      	movs	r2, #2
 8003426:	4013      	ands	r3, r2
 8003428:	d1f1      	bne.n	800340e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d100      	bne.n	8003434 <HAL_RCC_OscConfig+0x4ec>
 8003432:	e097      	b.n	8003564 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003434:	4b4e      	ldr	r3, [pc, #312]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	220c      	movs	r2, #12
 800343a:	4013      	ands	r3, r2
 800343c:	2b08      	cmp	r3, #8
 800343e:	d100      	bne.n	8003442 <HAL_RCC_OscConfig+0x4fa>
 8003440:	e06b      	b.n	800351a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d14c      	bne.n	80034e4 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344a:	4b49      	ldr	r3, [pc, #292]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	4b48      	ldr	r3, [pc, #288]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 8003450:	494a      	ldr	r1, [pc, #296]	; (800357c <HAL_RCC_OscConfig+0x634>)
 8003452:	400a      	ands	r2, r1
 8003454:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003456:	f7ff fa67 	bl	8002928 <HAL_GetTick>
 800345a:	0003      	movs	r3, r0
 800345c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003460:	f7ff fa62 	bl	8002928 <HAL_GetTick>
 8003464:	0002      	movs	r2, r0
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e079      	b.n	8003566 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003472:	4b3f      	ldr	r3, [pc, #252]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	049b      	lsls	r3, r3, #18
 800347a:	4013      	ands	r3, r2
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800347e:	4b3c      	ldr	r3, [pc, #240]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	220f      	movs	r2, #15
 8003484:	4393      	bics	r3, r2
 8003486:	0019      	movs	r1, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348c:	4b38      	ldr	r3, [pc, #224]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 800348e:	430a      	orrs	r2, r1
 8003490:	62da      	str	r2, [r3, #44]	; 0x2c
 8003492:	4b37      	ldr	r3, [pc, #220]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4a3a      	ldr	r2, [pc, #232]	; (8003580 <HAL_RCC_OscConfig+0x638>)
 8003498:	4013      	ands	r3, r2
 800349a:	0019      	movs	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	431a      	orrs	r2, r3
 80034a6:	4b32      	ldr	r3, [pc, #200]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80034a8:	430a      	orrs	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ac:	4b30      	ldr	r3, [pc, #192]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80034b2:	2180      	movs	r1, #128	; 0x80
 80034b4:	0449      	lsls	r1, r1, #17
 80034b6:	430a      	orrs	r2, r1
 80034b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ba:	f7ff fa35 	bl	8002928 <HAL_GetTick>
 80034be:	0003      	movs	r3, r0
 80034c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c4:	f7ff fa30 	bl	8002928 <HAL_GetTick>
 80034c8:	0002      	movs	r2, r0
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e047      	b.n	8003566 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034d6:	4b26      	ldr	r3, [pc, #152]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	049b      	lsls	r3, r3, #18
 80034de:	4013      	ands	r3, r2
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x57c>
 80034e2:	e03f      	b.n	8003564 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e4:	4b22      	ldr	r3, [pc, #136]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	4b21      	ldr	r3, [pc, #132]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 80034ea:	4924      	ldr	r1, [pc, #144]	; (800357c <HAL_RCC_OscConfig+0x634>)
 80034ec:	400a      	ands	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7ff fa1a 	bl	8002928 <HAL_GetTick>
 80034f4:	0003      	movs	r3, r0
 80034f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fa:	f7ff fa15 	bl	8002928 <HAL_GetTick>
 80034fe:	0002      	movs	r2, r0
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e02c      	b.n	8003566 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800350c:	4b18      	ldr	r3, [pc, #96]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	2380      	movs	r3, #128	; 0x80
 8003512:	049b      	lsls	r3, r3, #18
 8003514:	4013      	ands	r3, r2
 8003516:	d1f0      	bne.n	80034fa <HAL_RCC_OscConfig+0x5b2>
 8003518:	e024      	b.n	8003564 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e01f      	b.n	8003566 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003526:	4b12      	ldr	r3, [pc, #72]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800352c:	4b10      	ldr	r3, [pc, #64]	; (8003570 <HAL_RCC_OscConfig+0x628>)
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	23c0      	movs	r3, #192	; 0xc0
 8003536:	025b      	lsls	r3, r3, #9
 8003538:	401a      	ands	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	429a      	cmp	r2, r3
 8003540:	d10e      	bne.n	8003560 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	220f      	movs	r2, #15
 8003546:	401a      	ands	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800354c:	429a      	cmp	r2, r3
 800354e:	d107      	bne.n	8003560 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	23f0      	movs	r3, #240	; 0xf0
 8003554:	039b      	lsls	r3, r3, #14
 8003556:	401a      	ands	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	0018      	movs	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	b008      	add	sp, #32
 800356c:	bd80      	pop	{r7, pc}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	40021000 	.word	0x40021000
 8003574:	00001388 	.word	0x00001388
 8003578:	efffffff 	.word	0xefffffff
 800357c:	feffffff 	.word	0xfeffffff
 8003580:	ffc27fff 	.word	0xffc27fff

08003584 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0b3      	b.n	8003700 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003598:	4b5b      	ldr	r3, [pc, #364]	; (8003708 <HAL_RCC_ClockConfig+0x184>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2201      	movs	r2, #1
 800359e:	4013      	ands	r3, r2
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d911      	bls.n	80035ca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	4b58      	ldr	r3, [pc, #352]	; (8003708 <HAL_RCC_ClockConfig+0x184>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2201      	movs	r2, #1
 80035ac:	4393      	bics	r3, r2
 80035ae:	0019      	movs	r1, r3
 80035b0:	4b55      	ldr	r3, [pc, #340]	; (8003708 <HAL_RCC_ClockConfig+0x184>)
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b8:	4b53      	ldr	r3, [pc, #332]	; (8003708 <HAL_RCC_ClockConfig+0x184>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2201      	movs	r2, #1
 80035be:	4013      	ands	r3, r2
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d001      	beq.n	80035ca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e09a      	b.n	8003700 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2202      	movs	r2, #2
 80035d0:	4013      	ands	r3, r2
 80035d2:	d015      	beq.n	8003600 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2204      	movs	r2, #4
 80035da:	4013      	ands	r3, r2
 80035dc:	d006      	beq.n	80035ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035de:	4b4b      	ldr	r3, [pc, #300]	; (800370c <HAL_RCC_ClockConfig+0x188>)
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	4b4a      	ldr	r3, [pc, #296]	; (800370c <HAL_RCC_ClockConfig+0x188>)
 80035e4:	21e0      	movs	r1, #224	; 0xe0
 80035e6:	00c9      	lsls	r1, r1, #3
 80035e8:	430a      	orrs	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ec:	4b47      	ldr	r3, [pc, #284]	; (800370c <HAL_RCC_ClockConfig+0x188>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	22f0      	movs	r2, #240	; 0xf0
 80035f2:	4393      	bics	r3, r2
 80035f4:	0019      	movs	r1, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	4b44      	ldr	r3, [pc, #272]	; (800370c <HAL_RCC_ClockConfig+0x188>)
 80035fc:	430a      	orrs	r2, r1
 80035fe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2201      	movs	r2, #1
 8003606:	4013      	ands	r3, r2
 8003608:	d040      	beq.n	800368c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d107      	bne.n	8003622 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	4b3e      	ldr	r3, [pc, #248]	; (800370c <HAL_RCC_ClockConfig+0x188>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	029b      	lsls	r3, r3, #10
 800361a:	4013      	ands	r3, r2
 800361c:	d114      	bne.n	8003648 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e06e      	b.n	8003700 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d107      	bne.n	800363a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362a:	4b38      	ldr	r3, [pc, #224]	; (800370c <HAL_RCC_ClockConfig+0x188>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	2380      	movs	r3, #128	; 0x80
 8003630:	049b      	lsls	r3, r3, #18
 8003632:	4013      	ands	r3, r2
 8003634:	d108      	bne.n	8003648 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e062      	b.n	8003700 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363a:	4b34      	ldr	r3, [pc, #208]	; (800370c <HAL_RCC_ClockConfig+0x188>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2202      	movs	r2, #2
 8003640:	4013      	ands	r3, r2
 8003642:	d101      	bne.n	8003648 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e05b      	b.n	8003700 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003648:	4b30      	ldr	r3, [pc, #192]	; (800370c <HAL_RCC_ClockConfig+0x188>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2203      	movs	r2, #3
 800364e:	4393      	bics	r3, r2
 8003650:	0019      	movs	r1, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	4b2d      	ldr	r3, [pc, #180]	; (800370c <HAL_RCC_ClockConfig+0x188>)
 8003658:	430a      	orrs	r2, r1
 800365a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800365c:	f7ff f964 	bl	8002928 <HAL_GetTick>
 8003660:	0003      	movs	r3, r0
 8003662:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003664:	e009      	b.n	800367a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003666:	f7ff f95f 	bl	8002928 <HAL_GetTick>
 800366a:	0002      	movs	r2, r0
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	4a27      	ldr	r2, [pc, #156]	; (8003710 <HAL_RCC_ClockConfig+0x18c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d901      	bls.n	800367a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e042      	b.n	8003700 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367a:	4b24      	ldr	r3, [pc, #144]	; (800370c <HAL_RCC_ClockConfig+0x188>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	220c      	movs	r2, #12
 8003680:	401a      	ands	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	429a      	cmp	r2, r3
 800368a:	d1ec      	bne.n	8003666 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800368c:	4b1e      	ldr	r3, [pc, #120]	; (8003708 <HAL_RCC_ClockConfig+0x184>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2201      	movs	r2, #1
 8003692:	4013      	ands	r3, r2
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d211      	bcs.n	80036be <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369a:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <HAL_RCC_ClockConfig+0x184>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2201      	movs	r2, #1
 80036a0:	4393      	bics	r3, r2
 80036a2:	0019      	movs	r1, r3
 80036a4:	4b18      	ldr	r3, [pc, #96]	; (8003708 <HAL_RCC_ClockConfig+0x184>)
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ac:	4b16      	ldr	r3, [pc, #88]	; (8003708 <HAL_RCC_ClockConfig+0x184>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2201      	movs	r2, #1
 80036b2:	4013      	ands	r3, r2
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d001      	beq.n	80036be <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e020      	b.n	8003700 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2204      	movs	r2, #4
 80036c4:	4013      	ands	r3, r2
 80036c6:	d009      	beq.n	80036dc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036c8:	4b10      	ldr	r3, [pc, #64]	; (800370c <HAL_RCC_ClockConfig+0x188>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	4a11      	ldr	r2, [pc, #68]	; (8003714 <HAL_RCC_ClockConfig+0x190>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	0019      	movs	r1, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	4b0d      	ldr	r3, [pc, #52]	; (800370c <HAL_RCC_ClockConfig+0x188>)
 80036d8:	430a      	orrs	r2, r1
 80036da:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036dc:	f000 f820 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 80036e0:	0001      	movs	r1, r0
 80036e2:	4b0a      	ldr	r3, [pc, #40]	; (800370c <HAL_RCC_ClockConfig+0x188>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	091b      	lsrs	r3, r3, #4
 80036e8:	220f      	movs	r2, #15
 80036ea:	4013      	ands	r3, r2
 80036ec:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <HAL_RCC_ClockConfig+0x194>)
 80036ee:	5cd3      	ldrb	r3, [r2, r3]
 80036f0:	000a      	movs	r2, r1
 80036f2:	40da      	lsrs	r2, r3
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <HAL_RCC_ClockConfig+0x198>)
 80036f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80036f8:	2000      	movs	r0, #0
 80036fa:	f7ff f8cf 	bl	800289c <HAL_InitTick>
  
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b004      	add	sp, #16
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40022000 	.word	0x40022000
 800370c:	40021000 	.word	0x40021000
 8003710:	00001388 	.word	0x00001388
 8003714:	fffff8ff 	.word	0xfffff8ff
 8003718:	080068fc 	.word	0x080068fc
 800371c:	20000004 	.word	0x20000004

08003720 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	2300      	movs	r3, #0
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	2300      	movs	r3, #0
 8003734:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800373a:	4b21      	ldr	r3, [pc, #132]	; (80037c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	220c      	movs	r2, #12
 8003744:	4013      	ands	r3, r2
 8003746:	2b04      	cmp	r3, #4
 8003748:	d002      	beq.n	8003750 <HAL_RCC_GetSysClockFreq+0x30>
 800374a:	2b08      	cmp	r3, #8
 800374c:	d003      	beq.n	8003756 <HAL_RCC_GetSysClockFreq+0x36>
 800374e:	e02e      	b.n	80037ae <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003750:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003752:	613b      	str	r3, [r7, #16]
      break;
 8003754:	e02e      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	0c9b      	lsrs	r3, r3, #18
 800375a:	220f      	movs	r2, #15
 800375c:	4013      	ands	r3, r2
 800375e:	4a1a      	ldr	r2, [pc, #104]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003760:	5cd3      	ldrb	r3, [r2, r3]
 8003762:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003764:	4b16      	ldr	r3, [pc, #88]	; (80037c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	220f      	movs	r2, #15
 800376a:	4013      	ands	r3, r2
 800376c:	4a17      	ldr	r2, [pc, #92]	; (80037cc <HAL_RCC_GetSysClockFreq+0xac>)
 800376e:	5cd3      	ldrb	r3, [r2, r3]
 8003770:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	23c0      	movs	r3, #192	; 0xc0
 8003776:	025b      	lsls	r3, r3, #9
 8003778:	401a      	ands	r2, r3
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	025b      	lsls	r3, r3, #9
 800377e:	429a      	cmp	r2, r3
 8003780:	d109      	bne.n	8003796 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003782:	68b9      	ldr	r1, [r7, #8]
 8003784:	480f      	ldr	r0, [pc, #60]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003786:	f7fc fcd1 	bl	800012c <__udivsi3>
 800378a:	0003      	movs	r3, r0
 800378c:	001a      	movs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4353      	muls	r3, r2
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	e008      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	480a      	ldr	r0, [pc, #40]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800379a:	f7fc fcc7 	bl	800012c <__udivsi3>
 800379e:	0003      	movs	r3, r0
 80037a0:	001a      	movs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4353      	muls	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	613b      	str	r3, [r7, #16]
      break;
 80037ac:	e002      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037b0:	613b      	str	r3, [r7, #16]
      break;
 80037b2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80037b4:	693b      	ldr	r3, [r7, #16]
}
 80037b6:	0018      	movs	r0, r3
 80037b8:	46bd      	mov	sp, r7
 80037ba:	b006      	add	sp, #24
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	40021000 	.word	0x40021000
 80037c4:	007a1200 	.word	0x007a1200
 80037c8:	08006914 	.word	0x08006914
 80037cc:	08006924 	.word	0x08006924

080037d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d4:	4b02      	ldr	r3, [pc, #8]	; (80037e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80037d6:	681b      	ldr	r3, [r3, #0]
}
 80037d8:	0018      	movs	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	20000004 	.word	0x20000004

080037e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80037e8:	f7ff fff2 	bl	80037d0 <HAL_RCC_GetHCLKFreq>
 80037ec:	0001      	movs	r1, r0
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	0a1b      	lsrs	r3, r3, #8
 80037f4:	2207      	movs	r2, #7
 80037f6:	4013      	ands	r3, r2
 80037f8:	4a04      	ldr	r2, [pc, #16]	; (800380c <HAL_RCC_GetPCLK1Freq+0x28>)
 80037fa:	5cd3      	ldrb	r3, [r2, r3]
 80037fc:	40d9      	lsrs	r1, r3
 80037fe:	000b      	movs	r3, r1
}    
 8003800:	0018      	movs	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	40021000 	.word	0x40021000
 800380c:	0800690c 	.word	0x0800690c

08003810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e042      	b.n	80038a8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	223d      	movs	r2, #61	; 0x3d
 8003826:	5c9b      	ldrb	r3, [r3, r2]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d107      	bne.n	800383e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	223c      	movs	r2, #60	; 0x3c
 8003832:	2100      	movs	r1, #0
 8003834:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	0018      	movs	r0, r3
 800383a:	f7fe fdd5 	bl	80023e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	223d      	movs	r2, #61	; 0x3d
 8003842:	2102      	movs	r1, #2
 8003844:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3304      	adds	r3, #4
 800384e:	0019      	movs	r1, r3
 8003850:	0010      	movs	r0, r2
 8003852:	f000 fccb 	bl	80041ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2246      	movs	r2, #70	; 0x46
 800385a:	2101      	movs	r1, #1
 800385c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	223e      	movs	r2, #62	; 0x3e
 8003862:	2101      	movs	r1, #1
 8003864:	5499      	strb	r1, [r3, r2]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	223f      	movs	r2, #63	; 0x3f
 800386a:	2101      	movs	r1, #1
 800386c:	5499      	strb	r1, [r3, r2]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2240      	movs	r2, #64	; 0x40
 8003872:	2101      	movs	r1, #1
 8003874:	5499      	strb	r1, [r3, r2]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2241      	movs	r2, #65	; 0x41
 800387a:	2101      	movs	r1, #1
 800387c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2242      	movs	r2, #66	; 0x42
 8003882:	2101      	movs	r1, #1
 8003884:	5499      	strb	r1, [r3, r2]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2243      	movs	r2, #67	; 0x43
 800388a:	2101      	movs	r1, #1
 800388c:	5499      	strb	r1, [r3, r2]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2244      	movs	r2, #68	; 0x44
 8003892:	2101      	movs	r1, #1
 8003894:	5499      	strb	r1, [r3, r2]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2245      	movs	r2, #69	; 0x45
 800389a:	2101      	movs	r1, #1
 800389c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	223d      	movs	r2, #61	; 0x3d
 80038a2:	2101      	movs	r1, #1
 80038a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	0018      	movs	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b002      	add	sp, #8
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	223d      	movs	r2, #61	; 0x3d
 80038bc:	5c9b      	ldrb	r3, [r3, r2]
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d001      	beq.n	80038c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e035      	b.n	8003934 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	223d      	movs	r2, #61	; 0x3d
 80038cc:	2102      	movs	r1, #2
 80038ce:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2101      	movs	r1, #1
 80038dc:	430a      	orrs	r2, r1
 80038de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a15      	ldr	r2, [pc, #84]	; (800393c <HAL_TIM_Base_Start_IT+0x8c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d009      	beq.n	80038fe <HAL_TIM_Base_Start_IT+0x4e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a14      	ldr	r2, [pc, #80]	; (8003940 <HAL_TIM_Base_Start_IT+0x90>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d004      	beq.n	80038fe <HAL_TIM_Base_Start_IT+0x4e>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a12      	ldr	r2, [pc, #72]	; (8003944 <HAL_TIM_Base_Start_IT+0x94>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d111      	bne.n	8003922 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2207      	movs	r2, #7
 8003906:	4013      	ands	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b06      	cmp	r3, #6
 800390e:	d010      	beq.n	8003932 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2101      	movs	r1, #1
 800391c:	430a      	orrs	r2, r1
 800391e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003920:	e007      	b.n	8003932 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2101      	movs	r1, #1
 800392e:	430a      	orrs	r2, r1
 8003930:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	0018      	movs	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	b004      	add	sp, #16
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40012c00 	.word	0x40012c00
 8003940:	40000400 	.word	0x40000400
 8003944:	40014000 	.word	0x40014000

08003948 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e042      	b.n	80039e0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	223d      	movs	r2, #61	; 0x3d
 800395e:	5c9b      	ldrb	r3, [r3, r2]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d107      	bne.n	8003976 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	223c      	movs	r2, #60	; 0x3c
 800396a:	2100      	movs	r1, #0
 800396c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	0018      	movs	r0, r3
 8003972:	f000 f839 	bl	80039e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	223d      	movs	r2, #61	; 0x3d
 800397a:	2102      	movs	r1, #2
 800397c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3304      	adds	r3, #4
 8003986:	0019      	movs	r1, r3
 8003988:	0010      	movs	r0, r2
 800398a:	f000 fc2f 	bl	80041ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2246      	movs	r2, #70	; 0x46
 8003992:	2101      	movs	r1, #1
 8003994:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	223e      	movs	r2, #62	; 0x3e
 800399a:	2101      	movs	r1, #1
 800399c:	5499      	strb	r1, [r3, r2]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	223f      	movs	r2, #63	; 0x3f
 80039a2:	2101      	movs	r1, #1
 80039a4:	5499      	strb	r1, [r3, r2]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2240      	movs	r2, #64	; 0x40
 80039aa:	2101      	movs	r1, #1
 80039ac:	5499      	strb	r1, [r3, r2]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2241      	movs	r2, #65	; 0x41
 80039b2:	2101      	movs	r1, #1
 80039b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2242      	movs	r2, #66	; 0x42
 80039ba:	2101      	movs	r1, #1
 80039bc:	5499      	strb	r1, [r3, r2]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2243      	movs	r2, #67	; 0x43
 80039c2:	2101      	movs	r1, #1
 80039c4:	5499      	strb	r1, [r3, r2]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2244      	movs	r2, #68	; 0x44
 80039ca:	2101      	movs	r1, #1
 80039cc:	5499      	strb	r1, [r3, r2]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2245      	movs	r2, #69	; 0x45
 80039d2:	2101      	movs	r1, #1
 80039d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	223d      	movs	r2, #61	; 0x3d
 80039da:	2101      	movs	r1, #1
 80039dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	0018      	movs	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b002      	add	sp, #8
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039f0:	46c0      	nop			; (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b002      	add	sp, #8
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d108      	bne.n	8003a1a <HAL_TIM_PWM_Start+0x22>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	223e      	movs	r2, #62	; 0x3e
 8003a0c:	5c9b      	ldrb	r3, [r3, r2]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	1e5a      	subs	r2, r3, #1
 8003a14:	4193      	sbcs	r3, r2
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	e01f      	b.n	8003a5a <HAL_TIM_PWM_Start+0x62>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d108      	bne.n	8003a32 <HAL_TIM_PWM_Start+0x3a>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	223f      	movs	r2, #63	; 0x3f
 8003a24:	5c9b      	ldrb	r3, [r3, r2]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	1e5a      	subs	r2, r3, #1
 8003a2c:	4193      	sbcs	r3, r2
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	e013      	b.n	8003a5a <HAL_TIM_PWM_Start+0x62>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d108      	bne.n	8003a4a <HAL_TIM_PWM_Start+0x52>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2240      	movs	r2, #64	; 0x40
 8003a3c:	5c9b      	ldrb	r3, [r3, r2]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	1e5a      	subs	r2, r3, #1
 8003a44:	4193      	sbcs	r3, r2
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	e007      	b.n	8003a5a <HAL_TIM_PWM_Start+0x62>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2241      	movs	r2, #65	; 0x41
 8003a4e:	5c9b      	ldrb	r3, [r3, r2]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	1e5a      	subs	r2, r3, #1
 8003a56:	4193      	sbcs	r3, r2
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e06e      	b.n	8003b40 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d104      	bne.n	8003a72 <HAL_TIM_PWM_Start+0x7a>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	223e      	movs	r2, #62	; 0x3e
 8003a6c:	2102      	movs	r1, #2
 8003a6e:	5499      	strb	r1, [r3, r2]
 8003a70:	e013      	b.n	8003a9a <HAL_TIM_PWM_Start+0xa2>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d104      	bne.n	8003a82 <HAL_TIM_PWM_Start+0x8a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	223f      	movs	r2, #63	; 0x3f
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	5499      	strb	r1, [r3, r2]
 8003a80:	e00b      	b.n	8003a9a <HAL_TIM_PWM_Start+0xa2>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d104      	bne.n	8003a92 <HAL_TIM_PWM_Start+0x9a>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2240      	movs	r2, #64	; 0x40
 8003a8c:	2102      	movs	r1, #2
 8003a8e:	5499      	strb	r1, [r3, r2]
 8003a90:	e003      	b.n	8003a9a <HAL_TIM_PWM_Start+0xa2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2241      	movs	r2, #65	; 0x41
 8003a96:	2102      	movs	r1, #2
 8003a98:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6839      	ldr	r1, [r7, #0]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f000 fe14 	bl	80046d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a26      	ldr	r2, [pc, #152]	; (8003b48 <HAL_TIM_PWM_Start+0x150>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00e      	beq.n	8003ad0 <HAL_TIM_PWM_Start+0xd8>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a25      	ldr	r2, [pc, #148]	; (8003b4c <HAL_TIM_PWM_Start+0x154>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d009      	beq.n	8003ad0 <HAL_TIM_PWM_Start+0xd8>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a23      	ldr	r2, [pc, #140]	; (8003b50 <HAL_TIM_PWM_Start+0x158>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d004      	beq.n	8003ad0 <HAL_TIM_PWM_Start+0xd8>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a22      	ldr	r2, [pc, #136]	; (8003b54 <HAL_TIM_PWM_Start+0x15c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d101      	bne.n	8003ad4 <HAL_TIM_PWM_Start+0xdc>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e000      	b.n	8003ad6 <HAL_TIM_PWM_Start+0xde>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2180      	movs	r1, #128	; 0x80
 8003ae6:	0209      	lsls	r1, r1, #8
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a15      	ldr	r2, [pc, #84]	; (8003b48 <HAL_TIM_PWM_Start+0x150>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d009      	beq.n	8003b0a <HAL_TIM_PWM_Start+0x112>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a17      	ldr	r2, [pc, #92]	; (8003b58 <HAL_TIM_PWM_Start+0x160>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d004      	beq.n	8003b0a <HAL_TIM_PWM_Start+0x112>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a11      	ldr	r2, [pc, #68]	; (8003b4c <HAL_TIM_PWM_Start+0x154>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d111      	bne.n	8003b2e <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2207      	movs	r2, #7
 8003b12:	4013      	ands	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b06      	cmp	r3, #6
 8003b1a:	d010      	beq.n	8003b3e <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2101      	movs	r1, #1
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2c:	e007      	b.n	8003b3e <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2101      	movs	r1, #1
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	0018      	movs	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b004      	add	sp, #16
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40012c00 	.word	0x40012c00
 8003b4c:	40014000 	.word	0x40014000
 8003b50:	40014400 	.word	0x40014400
 8003b54:	40014800 	.word	0x40014800
 8003b58:	40000400 	.word	0x40000400

08003b5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e090      	b.n	8003c92 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	223d      	movs	r2, #61	; 0x3d
 8003b74:	5c9b      	ldrb	r3, [r3, r2]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d107      	bne.n	8003b8c <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	223c      	movs	r2, #60	; 0x3c
 8003b80:	2100      	movs	r1, #0
 8003b82:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	0018      	movs	r0, r3
 8003b88:	f7fe fba8 	bl	80022dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	223d      	movs	r2, #61	; 0x3d
 8003b90:	2102      	movs	r1, #2
 8003b92:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	493f      	ldr	r1, [pc, #252]	; (8003c9c <HAL_TIM_Encoder_Init+0x140>)
 8003ba0:	400a      	ands	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3304      	adds	r3, #4
 8003bac:	0019      	movs	r1, r3
 8003bae:	0010      	movs	r0, r2
 8003bb0:	f000 fb1c 	bl	80041ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4a31      	ldr	r2, [pc, #196]	; (8003ca0 <HAL_TIM_Encoder_Init+0x144>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	4313      	orrs	r3, r2
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4a2c      	ldr	r2, [pc, #176]	; (8003ca4 <HAL_TIM_Encoder_Init+0x148>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4a2b      	ldr	r2, [pc, #172]	; (8003ca8 <HAL_TIM_Encoder_Init+0x14c>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	021b      	lsls	r3, r3, #8
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	011a      	lsls	r2, r3, #4
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	031b      	lsls	r3, r3, #12
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2222      	movs	r2, #34	; 0x22
 8003c2a:	4393      	bics	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2288      	movs	r2, #136	; 0x88
 8003c32:	4393      	bics	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	4313      	orrs	r3, r2
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2246      	movs	r2, #70	; 0x46
 8003c64:	2101      	movs	r1, #1
 8003c66:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	223e      	movs	r2, #62	; 0x3e
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	223f      	movs	r2, #63	; 0x3f
 8003c74:	2101      	movs	r1, #1
 8003c76:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2242      	movs	r2, #66	; 0x42
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2243      	movs	r2, #67	; 0x43
 8003c84:	2101      	movs	r1, #1
 8003c86:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	223d      	movs	r2, #61	; 0x3d
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	0018      	movs	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b006      	add	sp, #24
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	ffffbff8 	.word	0xffffbff8
 8003ca0:	fffffcfc 	.word	0xfffffcfc
 8003ca4:	fffff3f3 	.word	0xfffff3f3
 8003ca8:	ffff0f0f 	.word	0xffff0f0f

08003cac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cac:	b590      	push	{r4, r7, lr}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003cb6:	200f      	movs	r0, #15
 8003cb8:	183b      	adds	r3, r7, r0
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	213e      	movs	r1, #62	; 0x3e
 8003cbe:	5c52      	ldrb	r2, [r2, r1]
 8003cc0:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003cc2:	230e      	movs	r3, #14
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	213f      	movs	r1, #63	; 0x3f
 8003cca:	5c52      	ldrb	r2, [r2, r1]
 8003ccc:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003cce:	240d      	movs	r4, #13
 8003cd0:	193b      	adds	r3, r7, r4
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	2142      	movs	r1, #66	; 0x42
 8003cd6:	5c52      	ldrb	r2, [r2, r1]
 8003cd8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003cda:	230c      	movs	r3, #12
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	2143      	movs	r1, #67	; 0x43
 8003ce2:	5c52      	ldrb	r2, [r2, r1]
 8003ce4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d112      	bne.n	8003d12 <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cec:	183b      	adds	r3, r7, r0
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d103      	bne.n	8003cfc <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cf4:	193b      	adds	r3, r7, r4
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d001      	beq.n	8003d00 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e075      	b.n	8003dec <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	223e      	movs	r2, #62	; 0x3e
 8003d04:	2102      	movs	r1, #2
 8003d06:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2242      	movs	r2, #66	; 0x42
 8003d0c:	2102      	movs	r1, #2
 8003d0e:	5499      	strb	r1, [r3, r2]
 8003d10:	e03d      	b.n	8003d8e <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d114      	bne.n	8003d42 <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d18:	230e      	movs	r3, #14
 8003d1a:	18fb      	adds	r3, r7, r3
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d104      	bne.n	8003d2c <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d22:	230c      	movs	r3, #12
 8003d24:	18fb      	adds	r3, r7, r3
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d001      	beq.n	8003d30 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e05d      	b.n	8003dec <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	223f      	movs	r2, #63	; 0x3f
 8003d34:	2102      	movs	r1, #2
 8003d36:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2243      	movs	r2, #67	; 0x43
 8003d3c:	2102      	movs	r1, #2
 8003d3e:	5499      	strb	r1, [r3, r2]
 8003d40:	e025      	b.n	8003d8e <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d42:	230f      	movs	r3, #15
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d10e      	bne.n	8003d6a <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d4c:	230e      	movs	r3, #14
 8003d4e:	18fb      	adds	r3, r7, r3
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d109      	bne.n	8003d6a <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d56:	230d      	movs	r3, #13
 8003d58:	18fb      	adds	r3, r7, r3
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d104      	bne.n	8003d6a <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d60:	230c      	movs	r3, #12
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d001      	beq.n	8003d6e <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e03e      	b.n	8003dec <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	223e      	movs	r2, #62	; 0x3e
 8003d72:	2102      	movs	r1, #2
 8003d74:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	223f      	movs	r2, #63	; 0x3f
 8003d7a:	2102      	movs	r1, #2
 8003d7c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2242      	movs	r2, #66	; 0x42
 8003d82:	2102      	movs	r1, #2
 8003d84:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2243      	movs	r2, #67	; 0x43
 8003d8a:	2102      	movs	r1, #2
 8003d8c:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_TIM_Encoder_Start+0xf0>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d008      	beq.n	8003dac <HAL_TIM_Encoder_Start+0x100>
 8003d9a:	e00f      	b.n	8003dbc <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2201      	movs	r2, #1
 8003da2:	2100      	movs	r1, #0
 8003da4:	0018      	movs	r0, r3
 8003da6:	f000 fc93 	bl	80046d0 <TIM_CCxChannelCmd>
      break;
 8003daa:	e016      	b.n	8003dda <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2201      	movs	r2, #1
 8003db2:	2104      	movs	r1, #4
 8003db4:	0018      	movs	r0, r3
 8003db6:	f000 fc8b 	bl	80046d0 <TIM_CCxChannelCmd>
      break;
 8003dba:	e00e      	b.n	8003dda <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f000 fc83 	bl	80046d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	2104      	movs	r1, #4
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f000 fc7c 	bl	80046d0 <TIM_CCxChannelCmd>
      break;
 8003dd8:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2101      	movs	r1, #1
 8003de6:	430a      	orrs	r2, r1
 8003de8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	0018      	movs	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b005      	add	sp, #20
 8003df2:	bd90      	pop	{r4, r7, pc}

08003df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2202      	movs	r2, #2
 8003e04:	4013      	ands	r3, r2
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d124      	bne.n	8003e54 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2202      	movs	r2, #2
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d11d      	bne.n	8003e54 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	4252      	negs	r2, r2
 8003e20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2203      	movs	r2, #3
 8003e30:	4013      	ands	r3, r2
 8003e32:	d004      	beq.n	8003e3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	0018      	movs	r0, r3
 8003e38:	f000 f9c0 	bl	80041bc <HAL_TIM_IC_CaptureCallback>
 8003e3c:	e007      	b.n	8003e4e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	0018      	movs	r0, r3
 8003e42:	f000 f9b3 	bl	80041ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f000 f9bf 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2204      	movs	r2, #4
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d125      	bne.n	8003eae <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2204      	movs	r2, #4
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d11e      	bne.n	8003eae <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2205      	movs	r2, #5
 8003e76:	4252      	negs	r2, r2
 8003e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699a      	ldr	r2, [r3, #24]
 8003e86:	23c0      	movs	r3, #192	; 0xc0
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d004      	beq.n	8003e98 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	0018      	movs	r0, r3
 8003e92:	f000 f993 	bl	80041bc <HAL_TIM_IC_CaptureCallback>
 8003e96:	e007      	b.n	8003ea8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f000 f986 	bl	80041ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f000 f992 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2208      	movs	r2, #8
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d124      	bne.n	8003f06 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	2208      	movs	r2, #8
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d11d      	bne.n	8003f06 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2209      	movs	r2, #9
 8003ed0:	4252      	negs	r2, r2
 8003ed2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2204      	movs	r2, #4
 8003ed8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d004      	beq.n	8003ef0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f000 f967 	bl	80041bc <HAL_TIM_IC_CaptureCallback>
 8003eee:	e007      	b.n	8003f00 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f000 f95a 	bl	80041ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	0018      	movs	r0, r3
 8003efc:	f000 f966 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	2210      	movs	r2, #16
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b10      	cmp	r3, #16
 8003f12:	d125      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	2210      	movs	r2, #16
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	2b10      	cmp	r3, #16
 8003f20:	d11e      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2211      	movs	r2, #17
 8003f28:	4252      	negs	r2, r2
 8003f2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2208      	movs	r2, #8
 8003f30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	23c0      	movs	r3, #192	; 0xc0
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	d004      	beq.n	8003f4a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	0018      	movs	r0, r3
 8003f44:	f000 f93a 	bl	80041bc <HAL_TIM_IC_CaptureCallback>
 8003f48:	e007      	b.n	8003f5a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f000 f92d 	bl	80041ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	0018      	movs	r0, r3
 8003f56:	f000 f939 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2201      	movs	r2, #1
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d10f      	bne.n	8003f8e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	4013      	ands	r3, r2
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d108      	bne.n	8003f8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2202      	movs	r2, #2
 8003f82:	4252      	negs	r2, r2
 8003f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7fd f8dd 	bl	8001148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	2280      	movs	r2, #128	; 0x80
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b80      	cmp	r3, #128	; 0x80
 8003f9a:	d10f      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2280      	movs	r2, #128	; 0x80
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b80      	cmp	r3, #128	; 0x80
 8003fa8:	d108      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2281      	movs	r2, #129	; 0x81
 8003fb0:	4252      	negs	r2, r2
 8003fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f000 fc6c 	bl	8004894 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2240      	movs	r2, #64	; 0x40
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b40      	cmp	r3, #64	; 0x40
 8003fc8:	d10f      	bne.n	8003fea <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	2240      	movs	r2, #64	; 0x40
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b40      	cmp	r3, #64	; 0x40
 8003fd6:	d108      	bne.n	8003fea <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2241      	movs	r2, #65	; 0x41
 8003fde:	4252      	negs	r2, r2
 8003fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f000 f8f9 	bl	80041dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	d10f      	bne.n	8004018 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	4013      	ands	r3, r2
 8004002:	2b20      	cmp	r3, #32
 8004004:	d108      	bne.n	8004018 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2221      	movs	r2, #33	; 0x21
 800400c:	4252      	negs	r2, r2
 800400e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	0018      	movs	r0, r3
 8004014:	f000 fc36 	bl	8004884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004018:	46c0      	nop			; (mov r8, r8)
 800401a:	46bd      	mov	sp, r7
 800401c:	b002      	add	sp, #8
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800402c:	2317      	movs	r3, #23
 800402e:	18fb      	adds	r3, r7, r3
 8004030:	2200      	movs	r2, #0
 8004032:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	223c      	movs	r2, #60	; 0x3c
 8004038:	5c9b      	ldrb	r3, [r3, r2]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_TIM_PWM_ConfigChannel+0x22>
 800403e:	2302      	movs	r3, #2
 8004040:	e0ad      	b.n	800419e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	223c      	movs	r2, #60	; 0x3c
 8004046:	2101      	movs	r1, #1
 8004048:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b0c      	cmp	r3, #12
 800404e:	d100      	bne.n	8004052 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004050:	e076      	b.n	8004140 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b0c      	cmp	r3, #12
 8004056:	d900      	bls.n	800405a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004058:	e095      	b.n	8004186 <HAL_TIM_PWM_ConfigChannel+0x166>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b08      	cmp	r3, #8
 800405e:	d04e      	beq.n	80040fe <HAL_TIM_PWM_ConfigChannel+0xde>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b08      	cmp	r3, #8
 8004064:	d900      	bls.n	8004068 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004066:	e08e      	b.n	8004186 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_TIM_PWM_ConfigChannel+0x56>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b04      	cmp	r3, #4
 8004072:	d021      	beq.n	80040b8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004074:	e087      	b.n	8004186 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	0011      	movs	r1, r2
 800407e:	0018      	movs	r0, r3
 8004080:	f000 f92a 	bl	80042d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2108      	movs	r1, #8
 8004090:	430a      	orrs	r2, r1
 8004092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699a      	ldr	r2, [r3, #24]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2104      	movs	r1, #4
 80040a0:	438a      	bics	r2, r1
 80040a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6999      	ldr	r1, [r3, #24]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	619a      	str	r2, [r3, #24]
      break;
 80040b6:	e06b      	b.n	8004190 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	0011      	movs	r1, r2
 80040c0:	0018      	movs	r0, r3
 80040c2:	f000 f991 	bl	80043e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699a      	ldr	r2, [r3, #24]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2180      	movs	r1, #128	; 0x80
 80040d2:	0109      	lsls	r1, r1, #4
 80040d4:	430a      	orrs	r2, r1
 80040d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4931      	ldr	r1, [pc, #196]	; (80041a8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80040e4:	400a      	ands	r2, r1
 80040e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6999      	ldr	r1, [r3, #24]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	021a      	lsls	r2, r3, #8
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	619a      	str	r2, [r3, #24]
      break;
 80040fc:	e048      	b.n	8004190 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	0011      	movs	r1, r2
 8004106:	0018      	movs	r0, r3
 8004108:	f000 f9f2 	bl	80044f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	69da      	ldr	r2, [r3, #28]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2108      	movs	r1, #8
 8004118:	430a      	orrs	r2, r1
 800411a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69da      	ldr	r2, [r3, #28]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2104      	movs	r1, #4
 8004128:	438a      	bics	r2, r1
 800412a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69d9      	ldr	r1, [r3, #28]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	61da      	str	r2, [r3, #28]
      break;
 800413e:	e027      	b.n	8004190 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	0011      	movs	r1, r2
 8004148:	0018      	movs	r0, r3
 800414a:	f000 fa57 	bl	80045fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69da      	ldr	r2, [r3, #28]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2180      	movs	r1, #128	; 0x80
 800415a:	0109      	lsls	r1, r1, #4
 800415c:	430a      	orrs	r2, r1
 800415e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69da      	ldr	r2, [r3, #28]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	490f      	ldr	r1, [pc, #60]	; (80041a8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800416c:	400a      	ands	r2, r1
 800416e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69d9      	ldr	r1, [r3, #28]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	021a      	lsls	r2, r3, #8
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	61da      	str	r2, [r3, #28]
      break;
 8004184:	e004      	b.n	8004190 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004186:	2317      	movs	r3, #23
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	2201      	movs	r2, #1
 800418c:	701a      	strb	r2, [r3, #0]
      break;
 800418e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	223c      	movs	r2, #60	; 0x3c
 8004194:	2100      	movs	r1, #0
 8004196:	5499      	strb	r1, [r3, r2]

  return status;
 8004198:	2317      	movs	r3, #23
 800419a:	18fb      	adds	r3, r7, r3
 800419c:	781b      	ldrb	r3, [r3, #0]
}
 800419e:	0018      	movs	r0, r3
 80041a0:	46bd      	mov	sp, r7
 80041a2:	b006      	add	sp, #24
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	fffffbff 	.word	0xfffffbff

080041ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041b4:	46c0      	nop			; (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b002      	add	sp, #8
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041c4:	46c0      	nop			; (mov r8, r8)
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b002      	add	sp, #8
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b002      	add	sp, #8
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041e4:	46c0      	nop			; (mov r8, r8)
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b002      	add	sp, #8
 80041ea:	bd80      	pop	{r7, pc}

080041ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a2f      	ldr	r2, [pc, #188]	; (80042bc <TIM_Base_SetConfig+0xd0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d003      	beq.n	800420c <TIM_Base_SetConfig+0x20>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a2e      	ldr	r2, [pc, #184]	; (80042c0 <TIM_Base_SetConfig+0xd4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d108      	bne.n	800421e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2270      	movs	r2, #112	; 0x70
 8004210:	4393      	bics	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a26      	ldr	r2, [pc, #152]	; (80042bc <TIM_Base_SetConfig+0xd0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d013      	beq.n	800424e <TIM_Base_SetConfig+0x62>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a25      	ldr	r2, [pc, #148]	; (80042c0 <TIM_Base_SetConfig+0xd4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00f      	beq.n	800424e <TIM_Base_SetConfig+0x62>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a24      	ldr	r2, [pc, #144]	; (80042c4 <TIM_Base_SetConfig+0xd8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00b      	beq.n	800424e <TIM_Base_SetConfig+0x62>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a23      	ldr	r2, [pc, #140]	; (80042c8 <TIM_Base_SetConfig+0xdc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d007      	beq.n	800424e <TIM_Base_SetConfig+0x62>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a22      	ldr	r2, [pc, #136]	; (80042cc <TIM_Base_SetConfig+0xe0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d003      	beq.n	800424e <TIM_Base_SetConfig+0x62>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a21      	ldr	r2, [pc, #132]	; (80042d0 <TIM_Base_SetConfig+0xe4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d108      	bne.n	8004260 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4a20      	ldr	r2, [pc, #128]	; (80042d4 <TIM_Base_SetConfig+0xe8>)
 8004252:	4013      	ands	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2280      	movs	r2, #128	; 0x80
 8004264:	4393      	bics	r3, r2
 8004266:	001a      	movs	r2, r3
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a0c      	ldr	r2, [pc, #48]	; (80042bc <TIM_Base_SetConfig+0xd0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00b      	beq.n	80042a6 <TIM_Base_SetConfig+0xba>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a0d      	ldr	r2, [pc, #52]	; (80042c8 <TIM_Base_SetConfig+0xdc>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d007      	beq.n	80042a6 <TIM_Base_SetConfig+0xba>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a0c      	ldr	r2, [pc, #48]	; (80042cc <TIM_Base_SetConfig+0xe0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d003      	beq.n	80042a6 <TIM_Base_SetConfig+0xba>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a0b      	ldr	r2, [pc, #44]	; (80042d0 <TIM_Base_SetConfig+0xe4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d103      	bne.n	80042ae <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	615a      	str	r2, [r3, #20]
}
 80042b4:	46c0      	nop			; (mov r8, r8)
 80042b6:	46bd      	mov	sp, r7
 80042b8:	b004      	add	sp, #16
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40012c00 	.word	0x40012c00
 80042c0:	40000400 	.word	0x40000400
 80042c4:	40002000 	.word	0x40002000
 80042c8:	40014000 	.word	0x40014000
 80042cc:	40014400 	.word	0x40014400
 80042d0:	40014800 	.word	0x40014800
 80042d4:	fffffcff 	.word	0xfffffcff

080042d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	2201      	movs	r2, #1
 80042e8:	4393      	bics	r3, r2
 80042ea:	001a      	movs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2270      	movs	r2, #112	; 0x70
 8004306:	4393      	bics	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2203      	movs	r2, #3
 800430e:	4393      	bics	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4313      	orrs	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2202      	movs	r2, #2
 8004320:	4393      	bics	r3, r2
 8004322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a27      	ldr	r2, [pc, #156]	; (80043d0 <TIM_OC1_SetConfig+0xf8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00b      	beq.n	800434e <TIM_OC1_SetConfig+0x76>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a26      	ldr	r2, [pc, #152]	; (80043d4 <TIM_OC1_SetConfig+0xfc>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d007      	beq.n	800434e <TIM_OC1_SetConfig+0x76>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a25      	ldr	r2, [pc, #148]	; (80043d8 <TIM_OC1_SetConfig+0x100>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d003      	beq.n	800434e <TIM_OC1_SetConfig+0x76>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a24      	ldr	r2, [pc, #144]	; (80043dc <TIM_OC1_SetConfig+0x104>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d10c      	bne.n	8004368 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2208      	movs	r2, #8
 8004352:	4393      	bics	r3, r2
 8004354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2204      	movs	r2, #4
 8004364:	4393      	bics	r3, r2
 8004366:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a19      	ldr	r2, [pc, #100]	; (80043d0 <TIM_OC1_SetConfig+0xf8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00b      	beq.n	8004388 <TIM_OC1_SetConfig+0xb0>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a18      	ldr	r2, [pc, #96]	; (80043d4 <TIM_OC1_SetConfig+0xfc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d007      	beq.n	8004388 <TIM_OC1_SetConfig+0xb0>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a17      	ldr	r2, [pc, #92]	; (80043d8 <TIM_OC1_SetConfig+0x100>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d003      	beq.n	8004388 <TIM_OC1_SetConfig+0xb0>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a16      	ldr	r2, [pc, #88]	; (80043dc <TIM_OC1_SetConfig+0x104>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d111      	bne.n	80043ac <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	4a15      	ldr	r2, [pc, #84]	; (80043e0 <TIM_OC1_SetConfig+0x108>)
 800438c:	4013      	ands	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	4a14      	ldr	r2, [pc, #80]	; (80043e4 <TIM_OC1_SetConfig+0x10c>)
 8004394:	4013      	ands	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	621a      	str	r2, [r3, #32]
}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	46bd      	mov	sp, r7
 80043ca:	b006      	add	sp, #24
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	40012c00 	.word	0x40012c00
 80043d4:	40014000 	.word	0x40014000
 80043d8:	40014400 	.word	0x40014400
 80043dc:	40014800 	.word	0x40014800
 80043e0:	fffffeff 	.word	0xfffffeff
 80043e4:	fffffdff 	.word	0xfffffdff

080043e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	2210      	movs	r2, #16
 80043f8:	4393      	bics	r3, r2
 80043fa:	001a      	movs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4a2e      	ldr	r2, [pc, #184]	; (80044d0 <TIM_OC2_SetConfig+0xe8>)
 8004416:	4013      	ands	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4a2d      	ldr	r2, [pc, #180]	; (80044d4 <TIM_OC2_SetConfig+0xec>)
 800441e:	4013      	ands	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2220      	movs	r2, #32
 8004432:	4393      	bics	r3, r2
 8004434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	4313      	orrs	r3, r2
 8004440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a24      	ldr	r2, [pc, #144]	; (80044d8 <TIM_OC2_SetConfig+0xf0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d10d      	bne.n	8004466 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2280      	movs	r2, #128	; 0x80
 800444e:	4393      	bics	r3, r2
 8004450:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2240      	movs	r2, #64	; 0x40
 8004462:	4393      	bics	r3, r2
 8004464:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <TIM_OC2_SetConfig+0xf0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00b      	beq.n	8004486 <TIM_OC2_SetConfig+0x9e>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a1a      	ldr	r2, [pc, #104]	; (80044dc <TIM_OC2_SetConfig+0xf4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d007      	beq.n	8004486 <TIM_OC2_SetConfig+0x9e>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a19      	ldr	r2, [pc, #100]	; (80044e0 <TIM_OC2_SetConfig+0xf8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d003      	beq.n	8004486 <TIM_OC2_SetConfig+0x9e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a18      	ldr	r2, [pc, #96]	; (80044e4 <TIM_OC2_SetConfig+0xfc>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d113      	bne.n	80044ae <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4a17      	ldr	r2, [pc, #92]	; (80044e8 <TIM_OC2_SetConfig+0x100>)
 800448a:	4013      	ands	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4a16      	ldr	r2, [pc, #88]	; (80044ec <TIM_OC2_SetConfig+0x104>)
 8004492:	4013      	ands	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	621a      	str	r2, [r3, #32]
}
 80044c8:	46c0      	nop			; (mov r8, r8)
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b006      	add	sp, #24
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	ffff8fff 	.word	0xffff8fff
 80044d4:	fffffcff 	.word	0xfffffcff
 80044d8:	40012c00 	.word	0x40012c00
 80044dc:	40014000 	.word	0x40014000
 80044e0:	40014400 	.word	0x40014400
 80044e4:	40014800 	.word	0x40014800
 80044e8:	fffffbff 	.word	0xfffffbff
 80044ec:	fffff7ff 	.word	0xfffff7ff

080044f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	4a35      	ldr	r2, [pc, #212]	; (80045d4 <TIM_OC3_SetConfig+0xe4>)
 8004500:	401a      	ands	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2270      	movs	r2, #112	; 0x70
 800451c:	4393      	bics	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2203      	movs	r2, #3
 8004524:	4393      	bics	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	4a28      	ldr	r2, [pc, #160]	; (80045d8 <TIM_OC3_SetConfig+0xe8>)
 8004536:	4013      	ands	r3, r2
 8004538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	021b      	lsls	r3, r3, #8
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a24      	ldr	r2, [pc, #144]	; (80045dc <TIM_OC3_SetConfig+0xec>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d10d      	bne.n	800456a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	4a23      	ldr	r2, [pc, #140]	; (80045e0 <TIM_OC3_SetConfig+0xf0>)
 8004552:	4013      	ands	r3, r2
 8004554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	021b      	lsls	r3, r3, #8
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	4a1f      	ldr	r2, [pc, #124]	; (80045e4 <TIM_OC3_SetConfig+0xf4>)
 8004566:	4013      	ands	r3, r2
 8004568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a1b      	ldr	r2, [pc, #108]	; (80045dc <TIM_OC3_SetConfig+0xec>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00b      	beq.n	800458a <TIM_OC3_SetConfig+0x9a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a1c      	ldr	r2, [pc, #112]	; (80045e8 <TIM_OC3_SetConfig+0xf8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d007      	beq.n	800458a <TIM_OC3_SetConfig+0x9a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a1b      	ldr	r2, [pc, #108]	; (80045ec <TIM_OC3_SetConfig+0xfc>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d003      	beq.n	800458a <TIM_OC3_SetConfig+0x9a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a1a      	ldr	r2, [pc, #104]	; (80045f0 <TIM_OC3_SetConfig+0x100>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d113      	bne.n	80045b2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	4a19      	ldr	r2, [pc, #100]	; (80045f4 <TIM_OC3_SetConfig+0x104>)
 800458e:	4013      	ands	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4a18      	ldr	r2, [pc, #96]	; (80045f8 <TIM_OC3_SetConfig+0x108>)
 8004596:	4013      	ands	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	621a      	str	r2, [r3, #32]
}
 80045cc:	46c0      	nop			; (mov r8, r8)
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b006      	add	sp, #24
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	fffffeff 	.word	0xfffffeff
 80045d8:	fffffdff 	.word	0xfffffdff
 80045dc:	40012c00 	.word	0x40012c00
 80045e0:	fffff7ff 	.word	0xfffff7ff
 80045e4:	fffffbff 	.word	0xfffffbff
 80045e8:	40014000 	.word	0x40014000
 80045ec:	40014400 	.word	0x40014400
 80045f0:	40014800 	.word	0x40014800
 80045f4:	ffffefff 	.word	0xffffefff
 80045f8:	ffffdfff 	.word	0xffffdfff

080045fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	4a28      	ldr	r2, [pc, #160]	; (80046ac <TIM_OC4_SetConfig+0xb0>)
 800460c:	401a      	ands	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4a22      	ldr	r2, [pc, #136]	; (80046b0 <TIM_OC4_SetConfig+0xb4>)
 8004628:	4013      	ands	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a21      	ldr	r2, [pc, #132]	; (80046b4 <TIM_OC4_SetConfig+0xb8>)
 8004630:	4013      	ands	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4a1d      	ldr	r2, [pc, #116]	; (80046b8 <TIM_OC4_SetConfig+0xbc>)
 8004644:	4013      	ands	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	031b      	lsls	r3, r3, #12
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a19      	ldr	r2, [pc, #100]	; (80046bc <TIM_OC4_SetConfig+0xc0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00b      	beq.n	8004674 <TIM_OC4_SetConfig+0x78>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <TIM_OC4_SetConfig+0xc4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d007      	beq.n	8004674 <TIM_OC4_SetConfig+0x78>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a17      	ldr	r2, [pc, #92]	; (80046c4 <TIM_OC4_SetConfig+0xc8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d003      	beq.n	8004674 <TIM_OC4_SetConfig+0x78>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a16      	ldr	r2, [pc, #88]	; (80046c8 <TIM_OC4_SetConfig+0xcc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d109      	bne.n	8004688 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	4a15      	ldr	r2, [pc, #84]	; (80046cc <TIM_OC4_SetConfig+0xd0>)
 8004678:	4013      	ands	r3, r2
 800467a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	019b      	lsls	r3, r3, #6
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	621a      	str	r2, [r3, #32]
}
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	46bd      	mov	sp, r7
 80046a6:	b006      	add	sp, #24
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	ffffefff 	.word	0xffffefff
 80046b0:	ffff8fff 	.word	0xffff8fff
 80046b4:	fffffcff 	.word	0xfffffcff
 80046b8:	ffffdfff 	.word	0xffffdfff
 80046bc:	40012c00 	.word	0x40012c00
 80046c0:	40014000 	.word	0x40014000
 80046c4:	40014400 	.word	0x40014400
 80046c8:	40014800 	.word	0x40014800
 80046cc:	ffffbfff 	.word	0xffffbfff

080046d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	221f      	movs	r2, #31
 80046e0:	4013      	ands	r3, r2
 80046e2:	2201      	movs	r2, #1
 80046e4:	409a      	lsls	r2, r3
 80046e6:	0013      	movs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	43d2      	mvns	r2, r2
 80046f2:	401a      	ands	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a1a      	ldr	r2, [r3, #32]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	211f      	movs	r1, #31
 8004700:	400b      	ands	r3, r1
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4099      	lsls	r1, r3
 8004706:	000b      	movs	r3, r1
 8004708:	431a      	orrs	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	621a      	str	r2, [r3, #32]
}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	46bd      	mov	sp, r7
 8004712:	b006      	add	sp, #24
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	223c      	movs	r2, #60	; 0x3c
 8004726:	5c9b      	ldrb	r3, [r3, r2]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800472c:	2302      	movs	r3, #2
 800472e:	e041      	b.n	80047b4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	223c      	movs	r2, #60	; 0x3c
 8004734:	2101      	movs	r1, #1
 8004736:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	223d      	movs	r2, #61	; 0x3d
 800473c:	2102      	movs	r1, #2
 800473e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2270      	movs	r2, #112	; 0x70
 8004754:	4393      	bics	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a13      	ldr	r2, [pc, #76]	; (80047bc <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d009      	beq.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a11      	ldr	r2, [pc, #68]	; (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a10      	ldr	r2, [pc, #64]	; (80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d10c      	bne.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2280      	movs	r2, #128	; 0x80
 800478c:	4393      	bics	r3, r2
 800478e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	4313      	orrs	r3, r2
 8004798:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	223d      	movs	r2, #61	; 0x3d
 80047a6:	2101      	movs	r1, #1
 80047a8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	223c      	movs	r2, #60	; 0x3c
 80047ae:	2100      	movs	r1, #0
 80047b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	0018      	movs	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	b004      	add	sp, #16
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40012c00 	.word	0x40012c00
 80047c0:	40000400 	.word	0x40000400
 80047c4:	40014000 	.word	0x40014000

080047c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	223c      	movs	r2, #60	; 0x3c
 80047da:	5c9b      	ldrb	r3, [r3, r2]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e03e      	b.n	8004862 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	223c      	movs	r2, #60	; 0x3c
 80047e8:	2101      	movs	r1, #1
 80047ea:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	22ff      	movs	r2, #255	; 0xff
 80047f0:	4393      	bics	r3, r2
 80047f2:	001a      	movs	r2, r3
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4a1b      	ldr	r2, [pc, #108]	; (800486c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004800:	401a      	ands	r2, r3
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4a18      	ldr	r2, [pc, #96]	; (8004870 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800480e:	401a      	ands	r2, r3
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	4313      	orrs	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4a16      	ldr	r2, [pc, #88]	; (8004874 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800481c:	401a      	ands	r2, r3
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4a13      	ldr	r2, [pc, #76]	; (8004878 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800482a:	401a      	ands	r2, r3
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4a11      	ldr	r2, [pc, #68]	; (800487c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004838:	401a      	ands	r2, r3
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4a0e      	ldr	r2, [pc, #56]	; (8004880 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004846:	401a      	ands	r2, r3
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	223c      	movs	r2, #60	; 0x3c
 800485c:	2100      	movs	r1, #0
 800485e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	0018      	movs	r0, r3
 8004864:	46bd      	mov	sp, r7
 8004866:	b004      	add	sp, #16
 8004868:	bd80      	pop	{r7, pc}
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	fffffcff 	.word	0xfffffcff
 8004870:	fffffbff 	.word	0xfffffbff
 8004874:	fffff7ff 	.word	0xfffff7ff
 8004878:	ffffefff 	.word	0xffffefff
 800487c:	ffffdfff 	.word	0xffffdfff
 8004880:	ffffbfff 	.word	0xffffbfff

08004884 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800488c:	46c0      	nop			; (mov r8, r8)
 800488e:	46bd      	mov	sp, r7
 8004890:	b002      	add	sp, #8
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800489c:	46c0      	nop			; (mov r8, r8)
 800489e:	46bd      	mov	sp, r7
 80048a0:	b002      	add	sp, #8
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e044      	b.n	8004940 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d107      	bne.n	80048ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2278      	movs	r2, #120	; 0x78
 80048c2:	2100      	movs	r1, #0
 80048c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	0018      	movs	r0, r3
 80048ca:	f7fd fe8f 	bl	80025ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2224      	movs	r2, #36	; 0x24
 80048d2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2101      	movs	r1, #1
 80048e0:	438a      	bics	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	0018      	movs	r0, r3
 80048e8:	f000 fbd4 	bl	8005094 <UART_SetConfig>
 80048ec:	0003      	movs	r3, r0
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e024      	b.n	8004940 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	0018      	movs	r0, r3
 8004902:	f000 fd1f 	bl	8005344 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	490d      	ldr	r1, [pc, #52]	; (8004948 <HAL_UART_Init+0xa4>)
 8004912:	400a      	ands	r2, r1
 8004914:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2108      	movs	r1, #8
 8004922:	438a      	bics	r2, r1
 8004924:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2101      	movs	r1, #1
 8004932:	430a      	orrs	r2, r1
 8004934:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	0018      	movs	r0, r3
 800493a:	f000 fdb7 	bl	80054ac <UART_CheckIdleState>
 800493e:	0003      	movs	r3, r0
}
 8004940:	0018      	movs	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	b002      	add	sp, #8
 8004946:	bd80      	pop	{r7, pc}
 8004948:	fffff7ff 	.word	0xfffff7ff

0800494c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	1dbb      	adds	r3, r7, #6
 8004958:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800495e:	2b20      	cmp	r3, #32
 8004960:	d15b      	bne.n	8004a1a <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <HAL_UART_Transmit_IT+0x24>
 8004968:	1dbb      	adds	r3, r7, #6
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e053      	b.n	8004a1c <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	2380      	movs	r3, #128	; 0x80
 800497a:	015b      	lsls	r3, r3, #5
 800497c:	429a      	cmp	r2, r3
 800497e:	d109      	bne.n	8004994 <HAL_UART_Transmit_IT+0x48>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d105      	bne.n	8004994 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2201      	movs	r2, #1
 800498c:	4013      	ands	r3, r2
 800498e:	d001      	beq.n	8004994 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e043      	b.n	8004a1c <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	1dba      	adds	r2, r7, #6
 800499e:	2150      	movs	r1, #80	; 0x50
 80049a0:	8812      	ldrh	r2, [r2, #0]
 80049a2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	1dba      	adds	r2, r7, #6
 80049a8:	2152      	movs	r1, #82	; 0x52
 80049aa:	8812      	ldrh	r2, [r2, #0]
 80049ac:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2284      	movs	r2, #132	; 0x84
 80049b8:	2100      	movs	r1, #0
 80049ba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2221      	movs	r2, #33	; 0x21
 80049c0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	2380      	movs	r3, #128	; 0x80
 80049c8:	015b      	lsls	r3, r3, #5
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d107      	bne.n	80049de <HAL_UART_Transmit_IT+0x92>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d103      	bne.n	80049de <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4a12      	ldr	r2, [pc, #72]	; (8004a24 <HAL_UART_Transmit_IT+0xd8>)
 80049da:	66da      	str	r2, [r3, #108]	; 0x6c
 80049dc:	e002      	b.n	80049e4 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	4a11      	ldr	r2, [pc, #68]	; (8004a28 <HAL_UART_Transmit_IT+0xdc>)
 80049e2:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e4:	f3ef 8310 	mrs	r3, PRIMASK
 80049e8:	613b      	str	r3, [r7, #16]
  return(result);
 80049ea:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80049ec:	61fb      	str	r3, [r7, #28]
 80049ee:	2301      	movs	r3, #1
 80049f0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f383 8810 	msr	PRIMASK, r3
}
 80049f8:	46c0      	nop			; (mov r8, r8)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2180      	movs	r1, #128	; 0x80
 8004a06:	430a      	orrs	r2, r1
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	f383 8810 	msr	PRIMASK, r3
}
 8004a14:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	e000      	b.n	8004a1c <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8004a1a:	2302      	movs	r3, #2
  }
}
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b008      	add	sp, #32
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	08005a0f 	.word	0x08005a0f
 8004a28:	0800595b 	.word	0x0800595b

08004a2c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	1dbb      	adds	r3, r7, #6
 8004a38:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2280      	movs	r2, #128	; 0x80
 8004a3e:	589b      	ldr	r3, [r3, r2]
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	d145      	bne.n	8004ad0 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_UART_Receive_IT+0x26>
 8004a4a:	1dbb      	adds	r3, r7, #6
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e03d      	b.n	8004ad2 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	2380      	movs	r3, #128	; 0x80
 8004a5c:	015b      	lsls	r3, r3, #5
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d109      	bne.n	8004a76 <HAL_UART_Receive_IT+0x4a>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d105      	bne.n	8004a76 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d001      	beq.n	8004a76 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e02d      	b.n	8004ad2 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	2380      	movs	r3, #128	; 0x80
 8004a84:	041b      	lsls	r3, r3, #16
 8004a86:	4013      	ands	r3, r2
 8004a88:	d019      	beq.n	8004abe <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a8e:	613b      	str	r3, [r7, #16]
  return(result);
 8004a90:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a92:	61fb      	str	r3, [r7, #28]
 8004a94:	2301      	movs	r3, #1
 8004a96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f383 8810 	msr	PRIMASK, r3
}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2180      	movs	r1, #128	; 0x80
 8004aac:	04c9      	lsls	r1, r1, #19
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	f383 8810 	msr	PRIMASK, r3
}
 8004abc:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004abe:	1dbb      	adds	r3, r7, #6
 8004ac0:	881a      	ldrh	r2, [r3, #0]
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f000 fe02 	bl	80056d0 <UART_Start_Receive_IT>
 8004acc:	0003      	movs	r3, r0
 8004ace:	e000      	b.n	8004ad2 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004ad0:	2302      	movs	r3, #2
  }
}
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	b008      	add	sp, #32
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004adc:	b590      	push	{r4, r7, lr}
 8004ade:	b0ab      	sub	sp, #172	; 0xac
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	22a4      	movs	r2, #164	; 0xa4
 8004aec:	18b9      	adds	r1, r7, r2
 8004aee:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	20a0      	movs	r0, #160	; 0xa0
 8004af8:	1839      	adds	r1, r7, r0
 8004afa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	219c      	movs	r1, #156	; 0x9c
 8004b04:	1879      	adds	r1, r7, r1
 8004b06:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b08:	0011      	movs	r1, r2
 8004b0a:	18bb      	adds	r3, r7, r2
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a99      	ldr	r2, [pc, #612]	; (8004d74 <HAL_UART_IRQHandler+0x298>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	2298      	movs	r2, #152	; 0x98
 8004b14:	18bc      	adds	r4, r7, r2
 8004b16:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004b18:	18bb      	adds	r3, r7, r2
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d114      	bne.n	8004b4a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b20:	187b      	adds	r3, r7, r1
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2220      	movs	r2, #32
 8004b26:	4013      	ands	r3, r2
 8004b28:	d00f      	beq.n	8004b4a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b2a:	183b      	adds	r3, r7, r0
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	4013      	ands	r3, r2
 8004b32:	d00a      	beq.n	8004b4a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d100      	bne.n	8004b3e <HAL_UART_IRQHandler+0x62>
 8004b3c:	e286      	b.n	800504c <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	0010      	movs	r0, r2
 8004b46:	4798      	blx	r3
      }
      return;
 8004b48:	e280      	b.n	800504c <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b4a:	2398      	movs	r3, #152	; 0x98
 8004b4c:	18fb      	adds	r3, r7, r3
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d100      	bne.n	8004b56 <HAL_UART_IRQHandler+0x7a>
 8004b54:	e114      	b.n	8004d80 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b56:	239c      	movs	r3, #156	; 0x9c
 8004b58:	18fb      	adds	r3, r7, r3
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d106      	bne.n	8004b70 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004b62:	23a0      	movs	r3, #160	; 0xa0
 8004b64:	18fb      	adds	r3, r7, r3
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a83      	ldr	r2, [pc, #524]	; (8004d78 <HAL_UART_IRQHandler+0x29c>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d100      	bne.n	8004b70 <HAL_UART_IRQHandler+0x94>
 8004b6e:	e107      	b.n	8004d80 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b70:	23a4      	movs	r3, #164	; 0xa4
 8004b72:	18fb      	adds	r3, r7, r3
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2201      	movs	r2, #1
 8004b78:	4013      	ands	r3, r2
 8004b7a:	d012      	beq.n	8004ba2 <HAL_UART_IRQHandler+0xc6>
 8004b7c:	23a0      	movs	r3, #160	; 0xa0
 8004b7e:	18fb      	adds	r3, r7, r3
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	2380      	movs	r3, #128	; 0x80
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	4013      	ands	r3, r2
 8004b88:	d00b      	beq.n	8004ba2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2284      	movs	r2, #132	; 0x84
 8004b96:	589b      	ldr	r3, [r3, r2]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2184      	movs	r1, #132	; 0x84
 8004ba0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ba2:	23a4      	movs	r3, #164	; 0xa4
 8004ba4:	18fb      	adds	r3, r7, r3
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2202      	movs	r2, #2
 8004baa:	4013      	ands	r3, r2
 8004bac:	d011      	beq.n	8004bd2 <HAL_UART_IRQHandler+0xf6>
 8004bae:	239c      	movs	r3, #156	; 0x9c
 8004bb0:	18fb      	adds	r3, r7, r3
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d00b      	beq.n	8004bd2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2284      	movs	r2, #132	; 0x84
 8004bc6:	589b      	ldr	r3, [r3, r2]
 8004bc8:	2204      	movs	r2, #4
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2184      	movs	r1, #132	; 0x84
 8004bd0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bd2:	23a4      	movs	r3, #164	; 0xa4
 8004bd4:	18fb      	adds	r3, r7, r3
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2204      	movs	r2, #4
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d011      	beq.n	8004c02 <HAL_UART_IRQHandler+0x126>
 8004bde:	239c      	movs	r3, #156	; 0x9c
 8004be0:	18fb      	adds	r3, r7, r3
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2201      	movs	r2, #1
 8004be6:	4013      	ands	r3, r2
 8004be8:	d00b      	beq.n	8004c02 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2204      	movs	r2, #4
 8004bf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2284      	movs	r2, #132	; 0x84
 8004bf6:	589b      	ldr	r3, [r3, r2]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2184      	movs	r1, #132	; 0x84
 8004c00:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c02:	23a4      	movs	r3, #164	; 0xa4
 8004c04:	18fb      	adds	r3, r7, r3
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2208      	movs	r2, #8
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d017      	beq.n	8004c3e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c0e:	23a0      	movs	r3, #160	; 0xa0
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2220      	movs	r2, #32
 8004c16:	4013      	ands	r3, r2
 8004c18:	d105      	bne.n	8004c26 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c1a:	239c      	movs	r3, #156	; 0x9c
 8004c1c:	18fb      	adds	r3, r7, r3
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2201      	movs	r2, #1
 8004c22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c24:	d00b      	beq.n	8004c3e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2208      	movs	r2, #8
 8004c2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2284      	movs	r2, #132	; 0x84
 8004c32:	589b      	ldr	r3, [r3, r2]
 8004c34:	2208      	movs	r2, #8
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2184      	movs	r1, #132	; 0x84
 8004c3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c3e:	23a4      	movs	r3, #164	; 0xa4
 8004c40:	18fb      	adds	r3, r7, r3
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	2380      	movs	r3, #128	; 0x80
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	4013      	ands	r3, r2
 8004c4a:	d013      	beq.n	8004c74 <HAL_UART_IRQHandler+0x198>
 8004c4c:	23a0      	movs	r3, #160	; 0xa0
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	04db      	lsls	r3, r3, #19
 8004c56:	4013      	ands	r3, r2
 8004c58:	d00c      	beq.n	8004c74 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2280      	movs	r2, #128	; 0x80
 8004c60:	0112      	lsls	r2, r2, #4
 8004c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2284      	movs	r2, #132	; 0x84
 8004c68:	589b      	ldr	r3, [r3, r2]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2184      	movs	r1, #132	; 0x84
 8004c72:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2284      	movs	r2, #132	; 0x84
 8004c78:	589b      	ldr	r3, [r3, r2]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d100      	bne.n	8004c80 <HAL_UART_IRQHandler+0x1a4>
 8004c7e:	e1e7      	b.n	8005050 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c80:	23a4      	movs	r3, #164	; 0xa4
 8004c82:	18fb      	adds	r3, r7, r3
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2220      	movs	r2, #32
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d00e      	beq.n	8004caa <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c8c:	23a0      	movs	r3, #160	; 0xa0
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2220      	movs	r2, #32
 8004c94:	4013      	ands	r3, r2
 8004c96:	d008      	beq.n	8004caa <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d004      	beq.n	8004caa <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	0010      	movs	r0, r2
 8004ca8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2284      	movs	r2, #132	; 0x84
 8004cae:	589b      	ldr	r3, [r3, r2]
 8004cb0:	2194      	movs	r1, #148	; 0x94
 8004cb2:	187a      	adds	r2, r7, r1
 8004cb4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2240      	movs	r2, #64	; 0x40
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b40      	cmp	r3, #64	; 0x40
 8004cc2:	d004      	beq.n	8004cce <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004cc4:	187b      	adds	r3, r7, r1
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2228      	movs	r2, #40	; 0x28
 8004cca:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ccc:	d047      	beq.n	8004d5e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f000 fdc7 	bl	8005864 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2240      	movs	r2, #64	; 0x40
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b40      	cmp	r3, #64	; 0x40
 8004ce2:	d137      	bne.n	8004d54 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ce8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cec:	2090      	movs	r0, #144	; 0x90
 8004cee:	183a      	adds	r2, r7, r0
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cf8:	f383 8810 	msr	PRIMASK, r3
}
 8004cfc:	46c0      	nop			; (mov r8, r8)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2140      	movs	r1, #64	; 0x40
 8004d0a:	438a      	bics	r2, r1
 8004d0c:	609a      	str	r2, [r3, #8]
 8004d0e:	183b      	adds	r3, r7, r0
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d16:	f383 8810 	msr	PRIMASK, r3
}
 8004d1a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d012      	beq.n	8004d4a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d28:	4a14      	ldr	r2, [pc, #80]	; (8004d7c <HAL_UART_IRQHandler+0x2a0>)
 8004d2a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d30:	0018      	movs	r0, r3
 8004d32:	f7fd ff19 	bl	8002b68 <HAL_DMA_Abort_IT>
 8004d36:	1e03      	subs	r3, r0, #0
 8004d38:	d01a      	beq.n	8004d70 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d44:	0018      	movs	r0, r3
 8004d46:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d48:	e012      	b.n	8004d70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f000 f98d 	bl	800506c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d52:	e00d      	b.n	8004d70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	0018      	movs	r0, r3
 8004d58:	f000 f988 	bl	800506c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d5c:	e008      	b.n	8004d70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f000 f983 	bl	800506c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2284      	movs	r2, #132	; 0x84
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004d6e:	e16f      	b.n	8005050 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d70:	46c0      	nop			; (mov r8, r8)
    return;
 8004d72:	e16d      	b.n	8005050 <HAL_UART_IRQHandler+0x574>
 8004d74:	0000080f 	.word	0x0000080f
 8004d78:	04000120 	.word	0x04000120
 8004d7c:	0800592d 	.word	0x0800592d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d000      	beq.n	8004d8a <HAL_UART_IRQHandler+0x2ae>
 8004d88:	e139      	b.n	8004ffe <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d8a:	23a4      	movs	r3, #164	; 0xa4
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2210      	movs	r2, #16
 8004d92:	4013      	ands	r3, r2
 8004d94:	d100      	bne.n	8004d98 <HAL_UART_IRQHandler+0x2bc>
 8004d96:	e132      	b.n	8004ffe <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d98:	23a0      	movs	r3, #160	; 0xa0
 8004d9a:	18fb      	adds	r3, r7, r3
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2210      	movs	r2, #16
 8004da0:	4013      	ands	r3, r2
 8004da2:	d100      	bne.n	8004da6 <HAL_UART_IRQHandler+0x2ca>
 8004da4:	e12b      	b.n	8004ffe <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2210      	movs	r2, #16
 8004dac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2240      	movs	r2, #64	; 0x40
 8004db6:	4013      	ands	r3, r2
 8004db8:	2b40      	cmp	r3, #64	; 0x40
 8004dba:	d000      	beq.n	8004dbe <HAL_UART_IRQHandler+0x2e2>
 8004dbc:	e09f      	b.n	8004efe <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	217e      	movs	r1, #126	; 0x7e
 8004dc8:	187b      	adds	r3, r7, r1
 8004dca:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004dcc:	187b      	adds	r3, r7, r1
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d100      	bne.n	8004dd6 <HAL_UART_IRQHandler+0x2fa>
 8004dd4:	e13e      	b.n	8005054 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2258      	movs	r2, #88	; 0x58
 8004dda:	5a9b      	ldrh	r3, [r3, r2]
 8004ddc:	187a      	adds	r2, r7, r1
 8004dde:	8812      	ldrh	r2, [r2, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d300      	bcc.n	8004de6 <HAL_UART_IRQHandler+0x30a>
 8004de4:	e136      	b.n	8005054 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	187a      	adds	r2, r7, r1
 8004dea:	215a      	movs	r1, #90	; 0x5a
 8004dec:	8812      	ldrh	r2, [r2, #0]
 8004dee:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	2b20      	cmp	r3, #32
 8004df8:	d06f      	beq.n	8004eda <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8004dfe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e02:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e04:	2301      	movs	r3, #1
 8004e06:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0a:	f383 8810 	msr	PRIMASK, r3
}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4992      	ldr	r1, [pc, #584]	; (8005064 <HAL_UART_IRQHandler+0x588>)
 8004e1c:	400a      	ands	r2, r1
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e22:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	f383 8810 	msr	PRIMASK, r3
}
 8004e2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e34:	677b      	str	r3, [r7, #116]	; 0x74
 8004e36:	2301      	movs	r3, #1
 8004e38:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e3c:	f383 8810 	msr	PRIMASK, r3
}
 8004e40:	46c0      	nop			; (mov r8, r8)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	438a      	bics	r2, r1
 8004e50:	609a      	str	r2, [r3, #8]
 8004e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e54:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e58:	f383 8810 	msr	PRIMASK, r3
}
 8004e5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e62:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e66:	673b      	str	r3, [r7, #112]	; 0x70
 8004e68:	2301      	movs	r3, #1
 8004e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6e:	f383 8810 	msr	PRIMASK, r3
}
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2140      	movs	r1, #64	; 0x40
 8004e80:	438a      	bics	r2, r1
 8004e82:	609a      	str	r2, [r3, #8]
 8004e84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e86:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e8a:	f383 8810 	msr	PRIMASK, r3
}
 8004e8e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2280      	movs	r2, #128	; 0x80
 8004e94:	2120      	movs	r1, #32
 8004e96:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eae:	f383 8810 	msr	PRIMASK, r3
}
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2110      	movs	r1, #16
 8004ec0:	438a      	bics	r2, r1
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eca:	f383 8810 	msr	PRIMASK, r3
}
 8004ece:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f7fd fe0f 	bl	8002af8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2202      	movs	r2, #2
 8004ede:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2258      	movs	r2, #88	; 0x58
 8004ee4:	5a9a      	ldrh	r2, [r3, r2]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	215a      	movs	r1, #90	; 0x5a
 8004eea:	5a5b      	ldrh	r3, [r3, r1]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	0011      	movs	r1, r2
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f000 f8c0 	bl	800507c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004efc:	e0aa      	b.n	8005054 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2258      	movs	r2, #88	; 0x58
 8004f02:	5a99      	ldrh	r1, [r3, r2]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	225a      	movs	r2, #90	; 0x5a
 8004f08:	5a9b      	ldrh	r3, [r3, r2]
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	208e      	movs	r0, #142	; 0x8e
 8004f0e:	183b      	adds	r3, r7, r0
 8004f10:	1a8a      	subs	r2, r1, r2
 8004f12:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	225a      	movs	r2, #90	; 0x5a
 8004f18:	5a9b      	ldrh	r3, [r3, r2]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d100      	bne.n	8004f22 <HAL_UART_IRQHandler+0x446>
 8004f20:	e09a      	b.n	8005058 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8004f22:	183b      	adds	r3, r7, r0
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d100      	bne.n	8004f2c <HAL_UART_IRQHandler+0x450>
 8004f2a:	e095      	b.n	8005058 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f30:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f32:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f34:	2488      	movs	r4, #136	; 0x88
 8004f36:	193a      	adds	r2, r7, r4
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f383 8810 	msr	PRIMASK, r3
}
 8004f44:	46c0      	nop			; (mov r8, r8)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4945      	ldr	r1, [pc, #276]	; (8005068 <HAL_UART_IRQHandler+0x58c>)
 8004f52:	400a      	ands	r2, r1
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	193b      	adds	r3, r7, r4
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f383 8810 	msr	PRIMASK, r3
}
 8004f62:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f64:	f3ef 8310 	mrs	r3, PRIMASK
 8004f68:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f6a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6c:	2484      	movs	r4, #132	; 0x84
 8004f6e:	193a      	adds	r2, r7, r4
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	2301      	movs	r3, #1
 8004f74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	f383 8810 	msr	PRIMASK, r3
}
 8004f7c:	46c0      	nop			; (mov r8, r8)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2101      	movs	r1, #1
 8004f8a:	438a      	bics	r2, r1
 8004f8c:	609a      	str	r2, [r3, #8]
 8004f8e:	193b      	adds	r3, r7, r4
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	f383 8810 	msr	PRIMASK, r3
}
 8004f9a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2280      	movs	r2, #128	; 0x80
 8004fa0:	2120      	movs	r1, #32
 8004fa2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb8:	2480      	movs	r4, #128	; 0x80
 8004fba:	193a      	adds	r2, r7, r4
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc4:	f383 8810 	msr	PRIMASK, r3
}
 8004fc8:	46c0      	nop			; (mov r8, r8)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2110      	movs	r1, #16
 8004fd6:	438a      	bics	r2, r1
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	193b      	adds	r3, r7, r4
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe2:	f383 8810 	msr	PRIMASK, r3
}
 8004fe6:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fee:	183b      	adds	r3, r7, r0
 8004ff0:	881a      	ldrh	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	0011      	movs	r1, r2
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f000 f840 	bl	800507c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ffc:	e02c      	b.n	8005058 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ffe:	23a4      	movs	r3, #164	; 0xa4
 8005000:	18fb      	adds	r3, r7, r3
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2280      	movs	r2, #128	; 0x80
 8005006:	4013      	ands	r3, r2
 8005008:	d00f      	beq.n	800502a <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800500a:	23a0      	movs	r3, #160	; 0xa0
 800500c:	18fb      	adds	r3, r7, r3
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2280      	movs	r2, #128	; 0x80
 8005012:	4013      	ands	r3, r2
 8005014:	d009      	beq.n	800502a <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800501a:	2b00      	cmp	r3, #0
 800501c:	d01e      	beq.n	800505c <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	0010      	movs	r0, r2
 8005026:	4798      	blx	r3
    }
    return;
 8005028:	e018      	b.n	800505c <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800502a:	23a4      	movs	r3, #164	; 0xa4
 800502c:	18fb      	adds	r3, r7, r3
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2240      	movs	r2, #64	; 0x40
 8005032:	4013      	ands	r3, r2
 8005034:	d013      	beq.n	800505e <HAL_UART_IRQHandler+0x582>
 8005036:	23a0      	movs	r3, #160	; 0xa0
 8005038:	18fb      	adds	r3, r7, r3
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2240      	movs	r2, #64	; 0x40
 800503e:	4013      	ands	r3, r2
 8005040:	d00d      	beq.n	800505e <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	0018      	movs	r0, r3
 8005046:	f000 fd40 	bl	8005aca <UART_EndTransmit_IT>
    return;
 800504a:	e008      	b.n	800505e <HAL_UART_IRQHandler+0x582>
      return;
 800504c:	46c0      	nop			; (mov r8, r8)
 800504e:	e006      	b.n	800505e <HAL_UART_IRQHandler+0x582>
    return;
 8005050:	46c0      	nop			; (mov r8, r8)
 8005052:	e004      	b.n	800505e <HAL_UART_IRQHandler+0x582>
      return;
 8005054:	46c0      	nop			; (mov r8, r8)
 8005056:	e002      	b.n	800505e <HAL_UART_IRQHandler+0x582>
      return;
 8005058:	46c0      	nop			; (mov r8, r8)
 800505a:	e000      	b.n	800505e <HAL_UART_IRQHandler+0x582>
    return;
 800505c:	46c0      	nop			; (mov r8, r8)
  }

}
 800505e:	46bd      	mov	sp, r7
 8005060:	b02b      	add	sp, #172	; 0xac
 8005062:	bd90      	pop	{r4, r7, pc}
 8005064:	fffffeff 	.word	0xfffffeff
 8005068:	fffffedf 	.word	0xfffffedf

0800506c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005074:	46c0      	nop			; (mov r8, r8)
 8005076:	46bd      	mov	sp, r7
 8005078:	b002      	add	sp, #8
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	000a      	movs	r2, r1
 8005086:	1cbb      	adds	r3, r7, #2
 8005088:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	46bd      	mov	sp, r7
 800508e:	b002      	add	sp, #8
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800509c:	231e      	movs	r3, #30
 800509e:	18fb      	adds	r3, r7, r3
 80050a0:	2200      	movs	r2, #0
 80050a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a97      	ldr	r2, [pc, #604]	; (8005320 <UART_SetConfig+0x28c>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	0019      	movs	r1, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	4a92      	ldr	r2, [pc, #584]	; (8005324 <UART_SetConfig+0x290>)
 80050da:	4013      	ands	r3, r2
 80050dc:	0019      	movs	r1, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	4a89      	ldr	r2, [pc, #548]	; (8005328 <UART_SetConfig+0x294>)
 8005102:	4013      	ands	r3, r2
 8005104:	0019      	movs	r1, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	430a      	orrs	r2, r1
 800510e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a85      	ldr	r2, [pc, #532]	; (800532c <UART_SetConfig+0x298>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d127      	bne.n	800516a <UART_SetConfig+0xd6>
 800511a:	4b85      	ldr	r3, [pc, #532]	; (8005330 <UART_SetConfig+0x29c>)
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	2203      	movs	r2, #3
 8005120:	4013      	ands	r3, r2
 8005122:	2b03      	cmp	r3, #3
 8005124:	d00d      	beq.n	8005142 <UART_SetConfig+0xae>
 8005126:	d81b      	bhi.n	8005160 <UART_SetConfig+0xcc>
 8005128:	2b02      	cmp	r3, #2
 800512a:	d014      	beq.n	8005156 <UART_SetConfig+0xc2>
 800512c:	d818      	bhi.n	8005160 <UART_SetConfig+0xcc>
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <UART_SetConfig+0xa4>
 8005132:	2b01      	cmp	r3, #1
 8005134:	d00a      	beq.n	800514c <UART_SetConfig+0xb8>
 8005136:	e013      	b.n	8005160 <UART_SetConfig+0xcc>
 8005138:	231f      	movs	r3, #31
 800513a:	18fb      	adds	r3, r7, r3
 800513c:	2200      	movs	r2, #0
 800513e:	701a      	strb	r2, [r3, #0]
 8005140:	e035      	b.n	80051ae <UART_SetConfig+0x11a>
 8005142:	231f      	movs	r3, #31
 8005144:	18fb      	adds	r3, r7, r3
 8005146:	2202      	movs	r2, #2
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	e030      	b.n	80051ae <UART_SetConfig+0x11a>
 800514c:	231f      	movs	r3, #31
 800514e:	18fb      	adds	r3, r7, r3
 8005150:	2204      	movs	r2, #4
 8005152:	701a      	strb	r2, [r3, #0]
 8005154:	e02b      	b.n	80051ae <UART_SetConfig+0x11a>
 8005156:	231f      	movs	r3, #31
 8005158:	18fb      	adds	r3, r7, r3
 800515a:	2208      	movs	r2, #8
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	e026      	b.n	80051ae <UART_SetConfig+0x11a>
 8005160:	231f      	movs	r3, #31
 8005162:	18fb      	adds	r3, r7, r3
 8005164:	2210      	movs	r2, #16
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	e021      	b.n	80051ae <UART_SetConfig+0x11a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a71      	ldr	r2, [pc, #452]	; (8005334 <UART_SetConfig+0x2a0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d104      	bne.n	800517e <UART_SetConfig+0xea>
 8005174:	231f      	movs	r3, #31
 8005176:	18fb      	adds	r3, r7, r3
 8005178:	2200      	movs	r2, #0
 800517a:	701a      	strb	r2, [r3, #0]
 800517c:	e017      	b.n	80051ae <UART_SetConfig+0x11a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a6d      	ldr	r2, [pc, #436]	; (8005338 <UART_SetConfig+0x2a4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d104      	bne.n	8005192 <UART_SetConfig+0xfe>
 8005188:	231f      	movs	r3, #31
 800518a:	18fb      	adds	r3, r7, r3
 800518c:	2200      	movs	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]
 8005190:	e00d      	b.n	80051ae <UART_SetConfig+0x11a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a69      	ldr	r2, [pc, #420]	; (800533c <UART_SetConfig+0x2a8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d104      	bne.n	80051a6 <UART_SetConfig+0x112>
 800519c:	231f      	movs	r3, #31
 800519e:	18fb      	adds	r3, r7, r3
 80051a0:	2200      	movs	r2, #0
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	e003      	b.n	80051ae <UART_SetConfig+0x11a>
 80051a6:	231f      	movs	r3, #31
 80051a8:	18fb      	adds	r3, r7, r3
 80051aa:	2210      	movs	r2, #16
 80051ac:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69da      	ldr	r2, [r3, #28]
 80051b2:	2380      	movs	r3, #128	; 0x80
 80051b4:	021b      	lsls	r3, r3, #8
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d15c      	bne.n	8005274 <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 80051ba:	231f      	movs	r3, #31
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d015      	beq.n	80051f0 <UART_SetConfig+0x15c>
 80051c4:	dc18      	bgt.n	80051f8 <UART_SetConfig+0x164>
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d00d      	beq.n	80051e6 <UART_SetConfig+0x152>
 80051ca:	dc15      	bgt.n	80051f8 <UART_SetConfig+0x164>
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <UART_SetConfig+0x142>
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d005      	beq.n	80051e0 <UART_SetConfig+0x14c>
 80051d4:	e010      	b.n	80051f8 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d6:	f7fe fb05 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 80051da:	0003      	movs	r3, r0
 80051dc:	61bb      	str	r3, [r7, #24]
        break;
 80051de:	e012      	b.n	8005206 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e0:	4b57      	ldr	r3, [pc, #348]	; (8005340 <UART_SetConfig+0x2ac>)
 80051e2:	61bb      	str	r3, [r7, #24]
        break;
 80051e4:	e00f      	b.n	8005206 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051e6:	f7fe fa9b 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 80051ea:	0003      	movs	r3, r0
 80051ec:	61bb      	str	r3, [r7, #24]
        break;
 80051ee:	e00a      	b.n	8005206 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051f0:	2380      	movs	r3, #128	; 0x80
 80051f2:	021b      	lsls	r3, r3, #8
 80051f4:	61bb      	str	r3, [r7, #24]
        break;
 80051f6:	e006      	b.n	8005206 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051fc:	231e      	movs	r3, #30
 80051fe:	18fb      	adds	r3, r7, r3
 8005200:	2201      	movs	r2, #1
 8005202:	701a      	strb	r2, [r3, #0]
        break;
 8005204:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d100      	bne.n	800520e <UART_SetConfig+0x17a>
 800520c:	e07a      	b.n	8005304 <UART_SetConfig+0x270>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	005a      	lsls	r2, r3, #1
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	085b      	lsrs	r3, r3, #1
 8005218:	18d2      	adds	r2, r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	0019      	movs	r1, r3
 8005220:	0010      	movs	r0, r2
 8005222:	f7fa ff83 	bl	800012c <__udivsi3>
 8005226:	0003      	movs	r3, r0
 8005228:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	2b0f      	cmp	r3, #15
 800522e:	d91c      	bls.n	800526a <UART_SetConfig+0x1d6>
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	2380      	movs	r3, #128	; 0x80
 8005234:	025b      	lsls	r3, r3, #9
 8005236:	429a      	cmp	r2, r3
 8005238:	d217      	bcs.n	800526a <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	b29a      	uxth	r2, r3
 800523e:	200e      	movs	r0, #14
 8005240:	183b      	adds	r3, r7, r0
 8005242:	210f      	movs	r1, #15
 8005244:	438a      	bics	r2, r1
 8005246:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	085b      	lsrs	r3, r3, #1
 800524c:	b29b      	uxth	r3, r3
 800524e:	2207      	movs	r2, #7
 8005250:	4013      	ands	r3, r2
 8005252:	b299      	uxth	r1, r3
 8005254:	183b      	adds	r3, r7, r0
 8005256:	183a      	adds	r2, r7, r0
 8005258:	8812      	ldrh	r2, [r2, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	183a      	adds	r2, r7, r0
 8005264:	8812      	ldrh	r2, [r2, #0]
 8005266:	60da      	str	r2, [r3, #12]
 8005268:	e04c      	b.n	8005304 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 800526a:	231e      	movs	r3, #30
 800526c:	18fb      	adds	r3, r7, r3
 800526e:	2201      	movs	r2, #1
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	e047      	b.n	8005304 <UART_SetConfig+0x270>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005274:	231f      	movs	r3, #31
 8005276:	18fb      	adds	r3, r7, r3
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b08      	cmp	r3, #8
 800527c:	d015      	beq.n	80052aa <UART_SetConfig+0x216>
 800527e:	dc18      	bgt.n	80052b2 <UART_SetConfig+0x21e>
 8005280:	2b04      	cmp	r3, #4
 8005282:	d00d      	beq.n	80052a0 <UART_SetConfig+0x20c>
 8005284:	dc15      	bgt.n	80052b2 <UART_SetConfig+0x21e>
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <UART_SetConfig+0x1fc>
 800528a:	2b02      	cmp	r3, #2
 800528c:	d005      	beq.n	800529a <UART_SetConfig+0x206>
 800528e:	e010      	b.n	80052b2 <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005290:	f7fe faa8 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 8005294:	0003      	movs	r3, r0
 8005296:	61bb      	str	r3, [r7, #24]
        break;
 8005298:	e012      	b.n	80052c0 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800529a:	4b29      	ldr	r3, [pc, #164]	; (8005340 <UART_SetConfig+0x2ac>)
 800529c:	61bb      	str	r3, [r7, #24]
        break;
 800529e:	e00f      	b.n	80052c0 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052a0:	f7fe fa3e 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 80052a4:	0003      	movs	r3, r0
 80052a6:	61bb      	str	r3, [r7, #24]
        break;
 80052a8:	e00a      	b.n	80052c0 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052aa:	2380      	movs	r3, #128	; 0x80
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	61bb      	str	r3, [r7, #24]
        break;
 80052b0:	e006      	b.n	80052c0 <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052b6:	231e      	movs	r3, #30
 80052b8:	18fb      	adds	r3, r7, r3
 80052ba:	2201      	movs	r2, #1
 80052bc:	701a      	strb	r2, [r3, #0]
        break;
 80052be:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01e      	beq.n	8005304 <UART_SetConfig+0x270>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	085a      	lsrs	r2, r3, #1
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	18d2      	adds	r2, r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	0019      	movs	r1, r3
 80052d6:	0010      	movs	r0, r2
 80052d8:	f7fa ff28 	bl	800012c <__udivsi3>
 80052dc:	0003      	movs	r3, r0
 80052de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	2b0f      	cmp	r3, #15
 80052e4:	d90a      	bls.n	80052fc <UART_SetConfig+0x268>
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	2380      	movs	r3, #128	; 0x80
 80052ea:	025b      	lsls	r3, r3, #9
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d205      	bcs.n	80052fc <UART_SetConfig+0x268>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	60da      	str	r2, [r3, #12]
 80052fa:	e003      	b.n	8005304 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 80052fc:	231e      	movs	r3, #30
 80052fe:	18fb      	adds	r3, r7, r3
 8005300:	2201      	movs	r2, #1
 8005302:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005310:	231e      	movs	r3, #30
 8005312:	18fb      	adds	r3, r7, r3
 8005314:	781b      	ldrb	r3, [r3, #0]
}
 8005316:	0018      	movs	r0, r3
 8005318:	46bd      	mov	sp, r7
 800531a:	b008      	add	sp, #32
 800531c:	bd80      	pop	{r7, pc}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	efff69f3 	.word	0xefff69f3
 8005324:	ffffcfff 	.word	0xffffcfff
 8005328:	fffff4ff 	.word	0xfffff4ff
 800532c:	40013800 	.word	0x40013800
 8005330:	40021000 	.word	0x40021000
 8005334:	40004400 	.word	0x40004400
 8005338:	40004800 	.word	0x40004800
 800533c:	40004c00 	.word	0x40004c00
 8005340:	007a1200 	.word	0x007a1200

08005344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	2201      	movs	r2, #1
 8005352:	4013      	ands	r3, r2
 8005354:	d00b      	beq.n	800536e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	4a4a      	ldr	r2, [pc, #296]	; (8005488 <UART_AdvFeatureConfig+0x144>)
 800535e:	4013      	ands	r3, r2
 8005360:	0019      	movs	r1, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	2202      	movs	r2, #2
 8005374:	4013      	ands	r3, r2
 8005376:	d00b      	beq.n	8005390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	4a43      	ldr	r2, [pc, #268]	; (800548c <UART_AdvFeatureConfig+0x148>)
 8005380:	4013      	ands	r3, r2
 8005382:	0019      	movs	r1, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	2204      	movs	r2, #4
 8005396:	4013      	ands	r3, r2
 8005398:	d00b      	beq.n	80053b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	4a3b      	ldr	r2, [pc, #236]	; (8005490 <UART_AdvFeatureConfig+0x14c>)
 80053a2:	4013      	ands	r3, r2
 80053a4:	0019      	movs	r1, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	2208      	movs	r2, #8
 80053b8:	4013      	ands	r3, r2
 80053ba:	d00b      	beq.n	80053d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	4a34      	ldr	r2, [pc, #208]	; (8005494 <UART_AdvFeatureConfig+0x150>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	0019      	movs	r1, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	2210      	movs	r2, #16
 80053da:	4013      	ands	r3, r2
 80053dc:	d00b      	beq.n	80053f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	4a2c      	ldr	r2, [pc, #176]	; (8005498 <UART_AdvFeatureConfig+0x154>)
 80053e6:	4013      	ands	r3, r2
 80053e8:	0019      	movs	r1, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	2220      	movs	r2, #32
 80053fc:	4013      	ands	r3, r2
 80053fe:	d00b      	beq.n	8005418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	4a25      	ldr	r2, [pc, #148]	; (800549c <UART_AdvFeatureConfig+0x158>)
 8005408:	4013      	ands	r3, r2
 800540a:	0019      	movs	r1, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	2240      	movs	r2, #64	; 0x40
 800541e:	4013      	ands	r3, r2
 8005420:	d01d      	beq.n	800545e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	4a1d      	ldr	r2, [pc, #116]	; (80054a0 <UART_AdvFeatureConfig+0x15c>)
 800542a:	4013      	ands	r3, r2
 800542c:	0019      	movs	r1, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800543e:	2380      	movs	r3, #128	; 0x80
 8005440:	035b      	lsls	r3, r3, #13
 8005442:	429a      	cmp	r2, r3
 8005444:	d10b      	bne.n	800545e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	4a15      	ldr	r2, [pc, #84]	; (80054a4 <UART_AdvFeatureConfig+0x160>)
 800544e:	4013      	ands	r3, r2
 8005450:	0019      	movs	r1, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	2280      	movs	r2, #128	; 0x80
 8005464:	4013      	ands	r3, r2
 8005466:	d00b      	beq.n	8005480 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	4a0e      	ldr	r2, [pc, #56]	; (80054a8 <UART_AdvFeatureConfig+0x164>)
 8005470:	4013      	ands	r3, r2
 8005472:	0019      	movs	r1, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	605a      	str	r2, [r3, #4]
  }
}
 8005480:	46c0      	nop			; (mov r8, r8)
 8005482:	46bd      	mov	sp, r7
 8005484:	b002      	add	sp, #8
 8005486:	bd80      	pop	{r7, pc}
 8005488:	fffdffff 	.word	0xfffdffff
 800548c:	fffeffff 	.word	0xfffeffff
 8005490:	fffbffff 	.word	0xfffbffff
 8005494:	ffff7fff 	.word	0xffff7fff
 8005498:	ffffefff 	.word	0xffffefff
 800549c:	ffffdfff 	.word	0xffffdfff
 80054a0:	ffefffff 	.word	0xffefffff
 80054a4:	ff9fffff 	.word	0xff9fffff
 80054a8:	fff7ffff 	.word	0xfff7ffff

080054ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b092      	sub	sp, #72	; 0x48
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2284      	movs	r2, #132	; 0x84
 80054b8:	2100      	movs	r1, #0
 80054ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054bc:	f7fd fa34 	bl	8002928 <HAL_GetTick>
 80054c0:	0003      	movs	r3, r0
 80054c2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2208      	movs	r2, #8
 80054cc:	4013      	ands	r3, r2
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d12c      	bne.n	800552c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d4:	2280      	movs	r2, #128	; 0x80
 80054d6:	0391      	lsls	r1, r2, #14
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	4a46      	ldr	r2, [pc, #280]	; (80055f4 <UART_CheckIdleState+0x148>)
 80054dc:	9200      	str	r2, [sp, #0]
 80054de:	2200      	movs	r2, #0
 80054e0:	f000 f88c 	bl	80055fc <UART_WaitOnFlagUntilTimeout>
 80054e4:	1e03      	subs	r3, r0, #0
 80054e6:	d021      	beq.n	800552c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054e8:	f3ef 8310 	mrs	r3, PRIMASK
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80054f2:	2301      	movs	r3, #1
 80054f4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f8:	f383 8810 	msr	PRIMASK, r3
}
 80054fc:	46c0      	nop			; (mov r8, r8)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2180      	movs	r1, #128	; 0x80
 800550a:	438a      	bics	r2, r1
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005514:	f383 8810 	msr	PRIMASK, r3
}
 8005518:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2220      	movs	r2, #32
 800551e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2278      	movs	r2, #120	; 0x78
 8005524:	2100      	movs	r1, #0
 8005526:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e05f      	b.n	80055ec <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2204      	movs	r2, #4
 8005534:	4013      	ands	r3, r2
 8005536:	2b04      	cmp	r3, #4
 8005538:	d146      	bne.n	80055c8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800553a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800553c:	2280      	movs	r2, #128	; 0x80
 800553e:	03d1      	lsls	r1, r2, #15
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	4a2c      	ldr	r2, [pc, #176]	; (80055f4 <UART_CheckIdleState+0x148>)
 8005544:	9200      	str	r2, [sp, #0]
 8005546:	2200      	movs	r2, #0
 8005548:	f000 f858 	bl	80055fc <UART_WaitOnFlagUntilTimeout>
 800554c:	1e03      	subs	r3, r0, #0
 800554e:	d03b      	beq.n	80055c8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005550:	f3ef 8310 	mrs	r3, PRIMASK
 8005554:	60fb      	str	r3, [r7, #12]
  return(result);
 8005556:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005558:	637b      	str	r3, [r7, #52]	; 0x34
 800555a:	2301      	movs	r3, #1
 800555c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f383 8810 	msr	PRIMASK, r3
}
 8005564:	46c0      	nop			; (mov r8, r8)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4921      	ldr	r1, [pc, #132]	; (80055f8 <UART_CheckIdleState+0x14c>)
 8005572:	400a      	ands	r2, r1
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005578:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f383 8810 	msr	PRIMASK, r3
}
 8005580:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005582:	f3ef 8310 	mrs	r3, PRIMASK
 8005586:	61bb      	str	r3, [r7, #24]
  return(result);
 8005588:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558a:	633b      	str	r3, [r7, #48]	; 0x30
 800558c:	2301      	movs	r3, #1
 800558e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	f383 8810 	msr	PRIMASK, r3
}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2101      	movs	r1, #1
 80055a4:	438a      	bics	r2, r1
 80055a6:	609a      	str	r2, [r3, #8]
 80055a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	f383 8810 	msr	PRIMASK, r3
}
 80055b2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2280      	movs	r2, #128	; 0x80
 80055b8:	2120      	movs	r1, #32
 80055ba:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2278      	movs	r2, #120	; 0x78
 80055c0:	2100      	movs	r1, #0
 80055c2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e011      	b.n	80055ec <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2280      	movs	r2, #128	; 0x80
 80055d2:	2120      	movs	r1, #32
 80055d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2278      	movs	r2, #120	; 0x78
 80055e6:	2100      	movs	r1, #0
 80055e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	0018      	movs	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b010      	add	sp, #64	; 0x40
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	01ffffff 	.word	0x01ffffff
 80055f8:	fffffedf 	.word	0xfffffedf

080055fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	1dfb      	adds	r3, r7, #7
 800560a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800560c:	e04b      	b.n	80056a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	3301      	adds	r3, #1
 8005612:	d048      	beq.n	80056a6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005614:	f7fd f988 	bl	8002928 <HAL_GetTick>
 8005618:	0002      	movs	r2, r0
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	429a      	cmp	r2, r3
 8005622:	d302      	bcc.n	800562a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e04b      	b.n	80056c6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2204      	movs	r2, #4
 8005636:	4013      	ands	r3, r2
 8005638:	d035      	beq.n	80056a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	2208      	movs	r2, #8
 8005642:	4013      	ands	r3, r2
 8005644:	2b08      	cmp	r3, #8
 8005646:	d111      	bne.n	800566c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2208      	movs	r2, #8
 800564e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	0018      	movs	r0, r3
 8005654:	f000 f906 	bl	8005864 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2284      	movs	r2, #132	; 0x84
 800565c:	2108      	movs	r1, #8
 800565e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2278      	movs	r2, #120	; 0x78
 8005664:	2100      	movs	r1, #0
 8005666:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e02c      	b.n	80056c6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	69da      	ldr	r2, [r3, #28]
 8005672:	2380      	movs	r3, #128	; 0x80
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	401a      	ands	r2, r3
 8005678:	2380      	movs	r3, #128	; 0x80
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	429a      	cmp	r2, r3
 800567e:	d112      	bne.n	80056a6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2280      	movs	r2, #128	; 0x80
 8005686:	0112      	lsls	r2, r2, #4
 8005688:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	0018      	movs	r0, r3
 800568e:	f000 f8e9 	bl	8005864 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2284      	movs	r2, #132	; 0x84
 8005696:	2120      	movs	r1, #32
 8005698:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2278      	movs	r2, #120	; 0x78
 800569e:	2100      	movs	r1, #0
 80056a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e00f      	b.n	80056c6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	4013      	ands	r3, r2
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	425a      	negs	r2, r3
 80056b6:	4153      	adcs	r3, r2
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	001a      	movs	r2, r3
 80056bc:	1dfb      	adds	r3, r7, #7
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d0a4      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	0018      	movs	r0, r3
 80056c8:	46bd      	mov	sp, r7
 80056ca:	b004      	add	sp, #16
 80056cc:	bd80      	pop	{r7, pc}
	...

080056d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b090      	sub	sp, #64	; 0x40
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	1dbb      	adds	r3, r7, #6
 80056dc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	1dba      	adds	r2, r7, #6
 80056e8:	2158      	movs	r1, #88	; 0x58
 80056ea:	8812      	ldrh	r2, [r2, #0]
 80056ec:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1dba      	adds	r2, r7, #6
 80056f2:	215a      	movs	r1, #90	; 0x5a
 80056f4:	8812      	ldrh	r2, [r2, #0]
 80056f6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	2380      	movs	r3, #128	; 0x80
 8005704:	015b      	lsls	r3, r3, #5
 8005706:	429a      	cmp	r2, r3
 8005708:	d10d      	bne.n	8005726 <UART_Start_Receive_IT+0x56>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d104      	bne.n	800571c <UART_Start_Receive_IT+0x4c>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	225c      	movs	r2, #92	; 0x5c
 8005716:	4950      	ldr	r1, [pc, #320]	; (8005858 <UART_Start_Receive_IT+0x188>)
 8005718:	5299      	strh	r1, [r3, r2]
 800571a:	e02e      	b.n	800577a <UART_Start_Receive_IT+0xaa>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	225c      	movs	r2, #92	; 0x5c
 8005720:	21ff      	movs	r1, #255	; 0xff
 8005722:	5299      	strh	r1, [r3, r2]
 8005724:	e029      	b.n	800577a <UART_Start_Receive_IT+0xaa>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10d      	bne.n	800574a <UART_Start_Receive_IT+0x7a>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d104      	bne.n	8005740 <UART_Start_Receive_IT+0x70>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	225c      	movs	r2, #92	; 0x5c
 800573a:	21ff      	movs	r1, #255	; 0xff
 800573c:	5299      	strh	r1, [r3, r2]
 800573e:	e01c      	b.n	800577a <UART_Start_Receive_IT+0xaa>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	225c      	movs	r2, #92	; 0x5c
 8005744:	217f      	movs	r1, #127	; 0x7f
 8005746:	5299      	strh	r1, [r3, r2]
 8005748:	e017      	b.n	800577a <UART_Start_Receive_IT+0xaa>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	2380      	movs	r3, #128	; 0x80
 8005750:	055b      	lsls	r3, r3, #21
 8005752:	429a      	cmp	r2, r3
 8005754:	d10d      	bne.n	8005772 <UART_Start_Receive_IT+0xa2>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d104      	bne.n	8005768 <UART_Start_Receive_IT+0x98>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	225c      	movs	r2, #92	; 0x5c
 8005762:	217f      	movs	r1, #127	; 0x7f
 8005764:	5299      	strh	r1, [r3, r2]
 8005766:	e008      	b.n	800577a <UART_Start_Receive_IT+0xaa>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	225c      	movs	r2, #92	; 0x5c
 800576c:	213f      	movs	r1, #63	; 0x3f
 800576e:	5299      	strh	r1, [r3, r2]
 8005770:	e003      	b.n	800577a <UART_Start_Receive_IT+0xaa>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	225c      	movs	r2, #92	; 0x5c
 8005776:	2100      	movs	r1, #0
 8005778:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2284      	movs	r2, #132	; 0x84
 800577e:	2100      	movs	r1, #0
 8005780:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2280      	movs	r2, #128	; 0x80
 8005786:	2122      	movs	r1, #34	; 0x22
 8005788:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800578a:	f3ef 8310 	mrs	r3, PRIMASK
 800578e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005794:	2301      	movs	r3, #1
 8005796:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579a:	f383 8810 	msr	PRIMASK, r3
}
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2101      	movs	r1, #1
 80057ac:	430a      	orrs	r2, r1
 80057ae:	609a      	str	r2, [r3, #8]
 80057b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	f383 8810 	msr	PRIMASK, r3
}
 80057ba:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	2380      	movs	r3, #128	; 0x80
 80057c2:	015b      	lsls	r3, r3, #5
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d107      	bne.n	80057d8 <UART_Start_Receive_IT+0x108>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d103      	bne.n	80057d8 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4a22      	ldr	r2, [pc, #136]	; (800585c <UART_Start_Receive_IT+0x18c>)
 80057d4:	669a      	str	r2, [r3, #104]	; 0x68
 80057d6:	e002      	b.n	80057de <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4a21      	ldr	r2, [pc, #132]	; (8005860 <UART_Start_Receive_IT+0x190>)
 80057dc:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d019      	beq.n	800581a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057e6:	f3ef 8310 	mrs	r3, PRIMASK
 80057ea:	61fb      	str	r3, [r7, #28]
  return(result);
 80057ec:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80057ee:	637b      	str	r3, [r7, #52]	; 0x34
 80057f0:	2301      	movs	r3, #1
 80057f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	f383 8810 	msr	PRIMASK, r3
}
 80057fa:	46c0      	nop			; (mov r8, r8)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2190      	movs	r1, #144	; 0x90
 8005808:	0049      	lsls	r1, r1, #1
 800580a:	430a      	orrs	r2, r1
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005810:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	f383 8810 	msr	PRIMASK, r3
}
 8005818:	e018      	b.n	800584c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800581a:	f3ef 8310 	mrs	r3, PRIMASK
 800581e:	613b      	str	r3, [r7, #16]
  return(result);
 8005820:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005822:	63bb      	str	r3, [r7, #56]	; 0x38
 8005824:	2301      	movs	r3, #1
 8005826:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f383 8810 	msr	PRIMASK, r3
}
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2120      	movs	r1, #32
 800583c:	430a      	orrs	r2, r1
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	f383 8810 	msr	PRIMASK, r3
}
 800584a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	0018      	movs	r0, r3
 8005850:	46bd      	mov	sp, r7
 8005852:	b010      	add	sp, #64	; 0x40
 8005854:	bd80      	pop	{r7, pc}
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	000001ff 	.word	0x000001ff
 800585c:	08005cd9 	.word	0x08005cd9
 8005860:	08005b21 	.word	0x08005b21

08005864 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08e      	sub	sp, #56	; 0x38
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800586c:	f3ef 8310 	mrs	r3, PRIMASK
 8005870:	617b      	str	r3, [r7, #20]
  return(result);
 8005872:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005874:	637b      	str	r3, [r7, #52]	; 0x34
 8005876:	2301      	movs	r3, #1
 8005878:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	f383 8810 	msr	PRIMASK, r3
}
 8005880:	46c0      	nop			; (mov r8, r8)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4926      	ldr	r1, [pc, #152]	; (8005928 <UART_EndRxTransfer+0xc4>)
 800588e:	400a      	ands	r2, r1
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005894:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	f383 8810 	msr	PRIMASK, r3
}
 800589c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800589e:	f3ef 8310 	mrs	r3, PRIMASK
 80058a2:	623b      	str	r3, [r7, #32]
  return(result);
 80058a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a6:	633b      	str	r3, [r7, #48]	; 0x30
 80058a8:	2301      	movs	r3, #1
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	f383 8810 	msr	PRIMASK, r3
}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689a      	ldr	r2, [r3, #8]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2101      	movs	r1, #1
 80058c0:	438a      	bics	r2, r1
 80058c2:	609a      	str	r2, [r3, #8]
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	f383 8810 	msr	PRIMASK, r3
}
 80058ce:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d118      	bne.n	800590a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058d8:	f3ef 8310 	mrs	r3, PRIMASK
 80058dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80058de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058e2:	2301      	movs	r3, #1
 80058e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f383 8810 	msr	PRIMASK, r3
}
 80058ec:	46c0      	nop			; (mov r8, r8)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2110      	movs	r1, #16
 80058fa:	438a      	bics	r2, r1
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005900:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f383 8810 	msr	PRIMASK, r3
}
 8005908:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2280      	movs	r2, #128	; 0x80
 800590e:	2120      	movs	r1, #32
 8005910:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	46bd      	mov	sp, r7
 8005922:	b00e      	add	sp, #56	; 0x38
 8005924:	bd80      	pop	{r7, pc}
 8005926:	46c0      	nop			; (mov r8, r8)
 8005928:	fffffedf 	.word	0xfffffedf

0800592c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	225a      	movs	r2, #90	; 0x5a
 800593e:	2100      	movs	r1, #0
 8005940:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2252      	movs	r2, #82	; 0x52
 8005946:	2100      	movs	r1, #0
 8005948:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	0018      	movs	r0, r3
 800594e:	f7ff fb8d 	bl	800506c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005952:	46c0      	nop			; (mov r8, r8)
 8005954:	46bd      	mov	sp, r7
 8005956:	b004      	add	sp, #16
 8005958:	bd80      	pop	{r7, pc}

0800595a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b08a      	sub	sp, #40	; 0x28
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005966:	2b21      	cmp	r3, #33	; 0x21
 8005968:	d14d      	bne.n	8005a06 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2252      	movs	r2, #82	; 0x52
 800596e:	5a9b      	ldrh	r3, [r3, r2]
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d132      	bne.n	80059dc <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005976:	f3ef 8310 	mrs	r3, PRIMASK
 800597a:	60bb      	str	r3, [r7, #8]
  return(result);
 800597c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
 8005980:	2301      	movs	r3, #1
 8005982:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f383 8810 	msr	PRIMASK, r3
}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2180      	movs	r1, #128	; 0x80
 8005998:	438a      	bics	r2, r1
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	f383 8810 	msr	PRIMASK, r3
}
 80059a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059a8:	f3ef 8310 	mrs	r3, PRIMASK
 80059ac:	617b      	str	r3, [r7, #20]
  return(result);
 80059ae:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059b0:	623b      	str	r3, [r7, #32]
 80059b2:	2301      	movs	r3, #1
 80059b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	f383 8810 	msr	PRIMASK, r3
}
 80059bc:	46c0      	nop			; (mov r8, r8)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2140      	movs	r1, #64	; 0x40
 80059ca:	430a      	orrs	r2, r1
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	f383 8810 	msr	PRIMASK, r3
}
 80059d8:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80059da:	e014      	b.n	8005a06 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e0:	781a      	ldrb	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	b292      	uxth	r2, r2
 80059e8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2252      	movs	r2, #82	; 0x52
 80059f8:	5a9b      	ldrh	r3, [r3, r2]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	3b01      	subs	r3, #1
 80059fe:	b299      	uxth	r1, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2252      	movs	r2, #82	; 0x52
 8005a04:	5299      	strh	r1, [r3, r2]
}
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	b00a      	add	sp, #40	; 0x28
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b08c      	sub	sp, #48	; 0x30
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a1a:	2b21      	cmp	r3, #33	; 0x21
 8005a1c:	d151      	bne.n	8005ac2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2252      	movs	r2, #82	; 0x52
 8005a22:	5a9b      	ldrh	r3, [r3, r2]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d132      	bne.n	8005a90 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a30:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005a32:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a34:	2301      	movs	r3, #1
 8005a36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f383 8810 	msr	PRIMASK, r3
}
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2180      	movs	r1, #128	; 0x80
 8005a4c:	438a      	bics	r2, r1
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f383 8810 	msr	PRIMASK, r3
}
 8005a5a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a60:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a62:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
 8005a66:	2301      	movs	r3, #1
 8005a68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	f383 8810 	msr	PRIMASK, r3
}
 8005a70:	46c0      	nop			; (mov r8, r8)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2140      	movs	r1, #64	; 0x40
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	f383 8810 	msr	PRIMASK, r3
}
 8005a8c:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005a8e:	e018      	b.n	8005ac2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a94:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a98:	881a      	ldrh	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	05d2      	lsls	r2, r2, #23
 8005aa0:	0dd2      	lsrs	r2, r2, #23
 8005aa2:	b292      	uxth	r2, r2
 8005aa4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aaa:	1c9a      	adds	r2, r3, #2
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2252      	movs	r2, #82	; 0x52
 8005ab4:	5a9b      	ldrh	r3, [r3, r2]
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	b299      	uxth	r1, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2252      	movs	r2, #82	; 0x52
 8005ac0:	5299      	strh	r1, [r3, r2]
}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	b00c      	add	sp, #48	; 0x30
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b086      	sub	sp, #24
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ad6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ad8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	2301      	movs	r3, #1
 8005ade:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f383 8810 	msr	PRIMASK, r3
}
 8005ae6:	46c0      	nop			; (mov r8, r8)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2140      	movs	r1, #64	; 0x40
 8005af4:	438a      	bics	r2, r1
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f383 8810 	msr	PRIMASK, r3
}
 8005b02:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	0018      	movs	r0, r3
 8005b14:	f7fb ff5e 	bl	80019d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b18:	46c0      	nop			; (mov r8, r8)
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b006      	add	sp, #24
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b094      	sub	sp, #80	; 0x50
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005b28:	204e      	movs	r0, #78	; 0x4e
 8005b2a:	183b      	adds	r3, r7, r0
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	215c      	movs	r1, #92	; 0x5c
 8005b30:	5a52      	ldrh	r2, [r2, r1]
 8005b32:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2280      	movs	r2, #128	; 0x80
 8005b38:	589b      	ldr	r3, [r3, r2]
 8005b3a:	2b22      	cmp	r3, #34	; 0x22
 8005b3c:	d000      	beq.n	8005b40 <UART_RxISR_8BIT+0x20>
 8005b3e:	e0ba      	b.n	8005cb6 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	214c      	movs	r1, #76	; 0x4c
 8005b46:	187b      	adds	r3, r7, r1
 8005b48:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005b4a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b4c:	187b      	adds	r3, r7, r1
 8005b4e:	881b      	ldrh	r3, [r3, #0]
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	183b      	adds	r3, r7, r0
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	b2d9      	uxtb	r1, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5c:	400a      	ands	r2, r1
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	225a      	movs	r2, #90	; 0x5a
 8005b70:	5a9b      	ldrh	r3, [r3, r2]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b299      	uxth	r1, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	225a      	movs	r2, #90	; 0x5a
 8005b7c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	225a      	movs	r2, #90	; 0x5a
 8005b82:	5a9b      	ldrh	r3, [r3, r2]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d000      	beq.n	8005b8c <UART_RxISR_8BIT+0x6c>
 8005b8a:	e09c      	b.n	8005cc6 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b94:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b96:	2301      	movs	r3, #1
 8005b98:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	f383 8810 	msr	PRIMASK, r3
}
 8005ba0:	46c0      	nop			; (mov r8, r8)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4948      	ldr	r1, [pc, #288]	; (8005cd0 <UART_RxISR_8BIT+0x1b0>)
 8005bae:	400a      	ands	r2, r1
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	f383 8810 	msr	PRIMASK, r3
}
 8005bbc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8005bc2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8005bc8:	2301      	movs	r3, #1
 8005bca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bce:	f383 8810 	msr	PRIMASK, r3
}
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2101      	movs	r1, #1
 8005be0:	438a      	bics	r2, r1
 8005be2:	609a      	str	r2, [r3, #8]
 8005be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bea:	f383 8810 	msr	PRIMASK, r3
}
 8005bee:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2280      	movs	r2, #128	; 0x80
 8005bf4:	2120      	movs	r1, #32
 8005bf6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	2380      	movs	r3, #128	; 0x80
 8005c0c:	041b      	lsls	r3, r3, #16
 8005c0e:	4013      	ands	r3, r2
 8005c10:	d018      	beq.n	8005c44 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c12:	f3ef 8310 	mrs	r3, PRIMASK
 8005c16:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c18:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	f383 8810 	msr	PRIMASK, r3
}
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4928      	ldr	r1, [pc, #160]	; (8005cd4 <UART_RxISR_8BIT+0x1b4>)
 8005c34:	400a      	ands	r2, r1
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	f383 8810 	msr	PRIMASK, r3
}
 8005c42:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d12f      	bne.n	8005cac <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c52:	f3ef 8310 	mrs	r3, PRIMASK
 8005c56:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c58:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f383 8810 	msr	PRIMASK, r3
}
 8005c66:	46c0      	nop			; (mov r8, r8)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2110      	movs	r1, #16
 8005c74:	438a      	bics	r2, r1
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f383 8810 	msr	PRIMASK, r3
}
 8005c82:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	2210      	movs	r2, #16
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	2b10      	cmp	r3, #16
 8005c90:	d103      	bne.n	8005c9a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2210      	movs	r2, #16
 8005c98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2258      	movs	r2, #88	; 0x58
 8005c9e:	5a9a      	ldrh	r2, [r3, r2]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	0011      	movs	r1, r2
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	f7ff f9e9 	bl	800507c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005caa:	e00c      	b.n	8005cc6 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f7fb fbf6 	bl	80014a0 <HAL_UART_RxCpltCallback>
}
 8005cb4:	e007      	b.n	8005cc6 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	699a      	ldr	r2, [r3, #24]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2108      	movs	r1, #8
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	619a      	str	r2, [r3, #24]
}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	b014      	add	sp, #80	; 0x50
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	fffffedf 	.word	0xfffffedf
 8005cd4:	fbffffff 	.word	0xfbffffff

08005cd8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b094      	sub	sp, #80	; 0x50
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005ce0:	204e      	movs	r0, #78	; 0x4e
 8005ce2:	183b      	adds	r3, r7, r0
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	215c      	movs	r1, #92	; 0x5c
 8005ce8:	5a52      	ldrh	r2, [r2, r1]
 8005cea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2280      	movs	r2, #128	; 0x80
 8005cf0:	589b      	ldr	r3, [r3, r2]
 8005cf2:	2b22      	cmp	r3, #34	; 0x22
 8005cf4:	d000      	beq.n	8005cf8 <UART_RxISR_16BIT+0x20>
 8005cf6:	e0ba      	b.n	8005e6e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	214c      	movs	r1, #76	; 0x4c
 8005cfe:	187b      	adds	r3, r7, r1
 8005d00:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005d02:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d08:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005d0a:	187b      	adds	r3, r7, r1
 8005d0c:	183a      	adds	r2, r7, r0
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	8812      	ldrh	r2, [r2, #0]
 8005d12:	4013      	ands	r3, r2
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d18:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1e:	1c9a      	adds	r2, r3, #2
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	225a      	movs	r2, #90	; 0x5a
 8005d28:	5a9b      	ldrh	r3, [r3, r2]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b299      	uxth	r1, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	225a      	movs	r2, #90	; 0x5a
 8005d34:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	225a      	movs	r2, #90	; 0x5a
 8005d3a:	5a9b      	ldrh	r3, [r3, r2]
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d000      	beq.n	8005d44 <UART_RxISR_16BIT+0x6c>
 8005d42:	e09c      	b.n	8005e7e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d44:	f3ef 8310 	mrs	r3, PRIMASK
 8005d48:	623b      	str	r3, [r7, #32]
  return(result);
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d4c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d4e:	2301      	movs	r3, #1
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	f383 8810 	msr	PRIMASK, r3
}
 8005d58:	46c0      	nop			; (mov r8, r8)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4948      	ldr	r1, [pc, #288]	; (8005e88 <UART_RxISR_16BIT+0x1b0>)
 8005d66:	400a      	ands	r2, r1
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	f383 8810 	msr	PRIMASK, r3
}
 8005d74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d76:	f3ef 8310 	mrs	r3, PRIMASK
 8005d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8005d80:	2301      	movs	r3, #1
 8005d82:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d86:	f383 8810 	msr	PRIMASK, r3
}
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2101      	movs	r1, #1
 8005d98:	438a      	bics	r2, r1
 8005d9a:	609a      	str	r2, [r3, #8]
 8005d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d9e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da2:	f383 8810 	msr	PRIMASK, r3
}
 8005da6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2280      	movs	r2, #128	; 0x80
 8005dac:	2120      	movs	r1, #32
 8005dae:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	2380      	movs	r3, #128	; 0x80
 8005dc4:	041b      	lsls	r3, r3, #16
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	d018      	beq.n	8005dfc <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dca:	f3ef 8310 	mrs	r3, PRIMASK
 8005dce:	617b      	str	r3, [r7, #20]
  return(result);
 8005dd0:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	f383 8810 	msr	PRIMASK, r3
}
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4928      	ldr	r1, [pc, #160]	; (8005e8c <UART_RxISR_16BIT+0x1b4>)
 8005dec:	400a      	ands	r2, r1
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	f383 8810 	msr	PRIMASK, r3
}
 8005dfa:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d12f      	bne.n	8005e64 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e10:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e14:	2301      	movs	r3, #1
 8005e16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f383 8810 	msr	PRIMASK, r3
}
 8005e1e:	46c0      	nop			; (mov r8, r8)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2110      	movs	r1, #16
 8005e2c:	438a      	bics	r2, r1
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f383 8810 	msr	PRIMASK, r3
}
 8005e3a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	2210      	movs	r2, #16
 8005e44:	4013      	ands	r3, r2
 8005e46:	2b10      	cmp	r3, #16
 8005e48:	d103      	bne.n	8005e52 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2210      	movs	r2, #16
 8005e50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2258      	movs	r2, #88	; 0x58
 8005e56:	5a9a      	ldrh	r2, [r3, r2]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	0011      	movs	r1, r2
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f7ff f90d 	bl	800507c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e62:	e00c      	b.n	8005e7e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	0018      	movs	r0, r3
 8005e68:	f7fb fb1a 	bl	80014a0 <HAL_UART_RxCpltCallback>
}
 8005e6c:	e007      	b.n	8005e7e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	699a      	ldr	r2, [r3, #24]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2108      	movs	r1, #8
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	619a      	str	r2, [r3, #24]
}
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	46bd      	mov	sp, r7
 8005e82:	b014      	add	sp, #80	; 0x50
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	fffffedf 	.word	0xfffffedf
 8005e8c:	fbffffff 	.word	0xfbffffff

08005e90 <siprintf>:
 8005e90:	b40e      	push	{r1, r2, r3}
 8005e92:	b500      	push	{lr}
 8005e94:	490b      	ldr	r1, [pc, #44]	; (8005ec4 <siprintf+0x34>)
 8005e96:	b09c      	sub	sp, #112	; 0x70
 8005e98:	ab1d      	add	r3, sp, #116	; 0x74
 8005e9a:	9002      	str	r0, [sp, #8]
 8005e9c:	9006      	str	r0, [sp, #24]
 8005e9e:	9107      	str	r1, [sp, #28]
 8005ea0:	9104      	str	r1, [sp, #16]
 8005ea2:	4809      	ldr	r0, [pc, #36]	; (8005ec8 <siprintf+0x38>)
 8005ea4:	4909      	ldr	r1, [pc, #36]	; (8005ecc <siprintf+0x3c>)
 8005ea6:	cb04      	ldmia	r3!, {r2}
 8005ea8:	9105      	str	r1, [sp, #20]
 8005eaa:	6800      	ldr	r0, [r0, #0]
 8005eac:	a902      	add	r1, sp, #8
 8005eae:	9301      	str	r3, [sp, #4]
 8005eb0:	f000 f9a2 	bl	80061f8 <_svfiprintf_r>
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	9b02      	ldr	r3, [sp, #8]
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	b01c      	add	sp, #112	; 0x70
 8005ebc:	bc08      	pop	{r3}
 8005ebe:	b003      	add	sp, #12
 8005ec0:	4718      	bx	r3
 8005ec2:	46c0      	nop			; (mov r8, r8)
 8005ec4:	7fffffff 	.word	0x7fffffff
 8005ec8:	2000005c 	.word	0x2000005c
 8005ecc:	ffff0208 	.word	0xffff0208

08005ed0 <memset>:
 8005ed0:	0003      	movs	r3, r0
 8005ed2:	1882      	adds	r2, r0, r2
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d100      	bne.n	8005eda <memset+0xa>
 8005ed8:	4770      	bx	lr
 8005eda:	7019      	strb	r1, [r3, #0]
 8005edc:	3301      	adds	r3, #1
 8005ede:	e7f9      	b.n	8005ed4 <memset+0x4>

08005ee0 <__errno>:
 8005ee0:	4b01      	ldr	r3, [pc, #4]	; (8005ee8 <__errno+0x8>)
 8005ee2:	6818      	ldr	r0, [r3, #0]
 8005ee4:	4770      	bx	lr
 8005ee6:	46c0      	nop			; (mov r8, r8)
 8005ee8:	2000005c 	.word	0x2000005c

08005eec <__libc_init_array>:
 8005eec:	b570      	push	{r4, r5, r6, lr}
 8005eee:	2600      	movs	r6, #0
 8005ef0:	4c0c      	ldr	r4, [pc, #48]	; (8005f24 <__libc_init_array+0x38>)
 8005ef2:	4d0d      	ldr	r5, [pc, #52]	; (8005f28 <__libc_init_array+0x3c>)
 8005ef4:	1b64      	subs	r4, r4, r5
 8005ef6:	10a4      	asrs	r4, r4, #2
 8005ef8:	42a6      	cmp	r6, r4
 8005efa:	d109      	bne.n	8005f10 <__libc_init_array+0x24>
 8005efc:	2600      	movs	r6, #0
 8005efe:	f000 fc6d 	bl	80067dc <_init>
 8005f02:	4c0a      	ldr	r4, [pc, #40]	; (8005f2c <__libc_init_array+0x40>)
 8005f04:	4d0a      	ldr	r5, [pc, #40]	; (8005f30 <__libc_init_array+0x44>)
 8005f06:	1b64      	subs	r4, r4, r5
 8005f08:	10a4      	asrs	r4, r4, #2
 8005f0a:	42a6      	cmp	r6, r4
 8005f0c:	d105      	bne.n	8005f1a <__libc_init_array+0x2e>
 8005f0e:	bd70      	pop	{r4, r5, r6, pc}
 8005f10:	00b3      	lsls	r3, r6, #2
 8005f12:	58eb      	ldr	r3, [r5, r3]
 8005f14:	4798      	blx	r3
 8005f16:	3601      	adds	r6, #1
 8005f18:	e7ee      	b.n	8005ef8 <__libc_init_array+0xc>
 8005f1a:	00b3      	lsls	r3, r6, #2
 8005f1c:	58eb      	ldr	r3, [r5, r3]
 8005f1e:	4798      	blx	r3
 8005f20:	3601      	adds	r6, #1
 8005f22:	e7f2      	b.n	8005f0a <__libc_init_array+0x1e>
 8005f24:	08006968 	.word	0x08006968
 8005f28:	08006968 	.word	0x08006968
 8005f2c:	0800696c 	.word	0x0800696c
 8005f30:	08006968 	.word	0x08006968

08005f34 <__retarget_lock_acquire_recursive>:
 8005f34:	4770      	bx	lr

08005f36 <__retarget_lock_release_recursive>:
 8005f36:	4770      	bx	lr

08005f38 <_free_r>:
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	0005      	movs	r5, r0
 8005f3c:	2900      	cmp	r1, #0
 8005f3e:	d010      	beq.n	8005f62 <_free_r+0x2a>
 8005f40:	1f0c      	subs	r4, r1, #4
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	da00      	bge.n	8005f4a <_free_r+0x12>
 8005f48:	18e4      	adds	r4, r4, r3
 8005f4a:	0028      	movs	r0, r5
 8005f4c:	f000 f8e2 	bl	8006114 <__malloc_lock>
 8005f50:	4a1d      	ldr	r2, [pc, #116]	; (8005fc8 <_free_r+0x90>)
 8005f52:	6813      	ldr	r3, [r2, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d105      	bne.n	8005f64 <_free_r+0x2c>
 8005f58:	6063      	str	r3, [r4, #4]
 8005f5a:	6014      	str	r4, [r2, #0]
 8005f5c:	0028      	movs	r0, r5
 8005f5e:	f000 f8e1 	bl	8006124 <__malloc_unlock>
 8005f62:	bd70      	pop	{r4, r5, r6, pc}
 8005f64:	42a3      	cmp	r3, r4
 8005f66:	d908      	bls.n	8005f7a <_free_r+0x42>
 8005f68:	6820      	ldr	r0, [r4, #0]
 8005f6a:	1821      	adds	r1, r4, r0
 8005f6c:	428b      	cmp	r3, r1
 8005f6e:	d1f3      	bne.n	8005f58 <_free_r+0x20>
 8005f70:	6819      	ldr	r1, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	1809      	adds	r1, r1, r0
 8005f76:	6021      	str	r1, [r4, #0]
 8005f78:	e7ee      	b.n	8005f58 <_free_r+0x20>
 8005f7a:	001a      	movs	r2, r3
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <_free_r+0x4e>
 8005f82:	42a3      	cmp	r3, r4
 8005f84:	d9f9      	bls.n	8005f7a <_free_r+0x42>
 8005f86:	6811      	ldr	r1, [r2, #0]
 8005f88:	1850      	adds	r0, r2, r1
 8005f8a:	42a0      	cmp	r0, r4
 8005f8c:	d10b      	bne.n	8005fa6 <_free_r+0x6e>
 8005f8e:	6820      	ldr	r0, [r4, #0]
 8005f90:	1809      	adds	r1, r1, r0
 8005f92:	1850      	adds	r0, r2, r1
 8005f94:	6011      	str	r1, [r2, #0]
 8005f96:	4283      	cmp	r3, r0
 8005f98:	d1e0      	bne.n	8005f5c <_free_r+0x24>
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	1841      	adds	r1, r0, r1
 8005fa0:	6011      	str	r1, [r2, #0]
 8005fa2:	6053      	str	r3, [r2, #4]
 8005fa4:	e7da      	b.n	8005f5c <_free_r+0x24>
 8005fa6:	42a0      	cmp	r0, r4
 8005fa8:	d902      	bls.n	8005fb0 <_free_r+0x78>
 8005faa:	230c      	movs	r3, #12
 8005fac:	602b      	str	r3, [r5, #0]
 8005fae:	e7d5      	b.n	8005f5c <_free_r+0x24>
 8005fb0:	6820      	ldr	r0, [r4, #0]
 8005fb2:	1821      	adds	r1, r4, r0
 8005fb4:	428b      	cmp	r3, r1
 8005fb6:	d103      	bne.n	8005fc0 <_free_r+0x88>
 8005fb8:	6819      	ldr	r1, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	1809      	adds	r1, r1, r0
 8005fbe:	6021      	str	r1, [r4, #0]
 8005fc0:	6063      	str	r3, [r4, #4]
 8005fc2:	6054      	str	r4, [r2, #4]
 8005fc4:	e7ca      	b.n	8005f5c <_free_r+0x24>
 8005fc6:	46c0      	nop			; (mov r8, r8)
 8005fc8:	20000528 	.word	0x20000528

08005fcc <sbrk_aligned>:
 8005fcc:	b570      	push	{r4, r5, r6, lr}
 8005fce:	4e0f      	ldr	r6, [pc, #60]	; (800600c <sbrk_aligned+0x40>)
 8005fd0:	000d      	movs	r5, r1
 8005fd2:	6831      	ldr	r1, [r6, #0]
 8005fd4:	0004      	movs	r4, r0
 8005fd6:	2900      	cmp	r1, #0
 8005fd8:	d102      	bne.n	8005fe0 <sbrk_aligned+0x14>
 8005fda:	f000 fba1 	bl	8006720 <_sbrk_r>
 8005fde:	6030      	str	r0, [r6, #0]
 8005fe0:	0029      	movs	r1, r5
 8005fe2:	0020      	movs	r0, r4
 8005fe4:	f000 fb9c 	bl	8006720 <_sbrk_r>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	d00a      	beq.n	8006002 <sbrk_aligned+0x36>
 8005fec:	2303      	movs	r3, #3
 8005fee:	1cc5      	adds	r5, r0, #3
 8005ff0:	439d      	bics	r5, r3
 8005ff2:	42a8      	cmp	r0, r5
 8005ff4:	d007      	beq.n	8006006 <sbrk_aligned+0x3a>
 8005ff6:	1a29      	subs	r1, r5, r0
 8005ff8:	0020      	movs	r0, r4
 8005ffa:	f000 fb91 	bl	8006720 <_sbrk_r>
 8005ffe:	3001      	adds	r0, #1
 8006000:	d101      	bne.n	8006006 <sbrk_aligned+0x3a>
 8006002:	2501      	movs	r5, #1
 8006004:	426d      	negs	r5, r5
 8006006:	0028      	movs	r0, r5
 8006008:	bd70      	pop	{r4, r5, r6, pc}
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	2000052c 	.word	0x2000052c

08006010 <_malloc_r>:
 8006010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006012:	2203      	movs	r2, #3
 8006014:	1ccb      	adds	r3, r1, #3
 8006016:	4393      	bics	r3, r2
 8006018:	3308      	adds	r3, #8
 800601a:	0006      	movs	r6, r0
 800601c:	001f      	movs	r7, r3
 800601e:	2b0c      	cmp	r3, #12
 8006020:	d238      	bcs.n	8006094 <_malloc_r+0x84>
 8006022:	270c      	movs	r7, #12
 8006024:	42b9      	cmp	r1, r7
 8006026:	d837      	bhi.n	8006098 <_malloc_r+0x88>
 8006028:	0030      	movs	r0, r6
 800602a:	f000 f873 	bl	8006114 <__malloc_lock>
 800602e:	4b38      	ldr	r3, [pc, #224]	; (8006110 <_malloc_r+0x100>)
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	001c      	movs	r4, r3
 8006036:	2c00      	cmp	r4, #0
 8006038:	d133      	bne.n	80060a2 <_malloc_r+0x92>
 800603a:	0039      	movs	r1, r7
 800603c:	0030      	movs	r0, r6
 800603e:	f7ff ffc5 	bl	8005fcc <sbrk_aligned>
 8006042:	0004      	movs	r4, r0
 8006044:	1c43      	adds	r3, r0, #1
 8006046:	d15e      	bne.n	8006106 <_malloc_r+0xf6>
 8006048:	9b00      	ldr	r3, [sp, #0]
 800604a:	681c      	ldr	r4, [r3, #0]
 800604c:	0025      	movs	r5, r4
 800604e:	2d00      	cmp	r5, #0
 8006050:	d14e      	bne.n	80060f0 <_malloc_r+0xe0>
 8006052:	2c00      	cmp	r4, #0
 8006054:	d051      	beq.n	80060fa <_malloc_r+0xea>
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	0029      	movs	r1, r5
 800605a:	18e3      	adds	r3, r4, r3
 800605c:	0030      	movs	r0, r6
 800605e:	9301      	str	r3, [sp, #4]
 8006060:	f000 fb5e 	bl	8006720 <_sbrk_r>
 8006064:	9b01      	ldr	r3, [sp, #4]
 8006066:	4283      	cmp	r3, r0
 8006068:	d147      	bne.n	80060fa <_malloc_r+0xea>
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	0030      	movs	r0, r6
 800606e:	1aff      	subs	r7, r7, r3
 8006070:	0039      	movs	r1, r7
 8006072:	f7ff ffab 	bl	8005fcc <sbrk_aligned>
 8006076:	3001      	adds	r0, #1
 8006078:	d03f      	beq.n	80060fa <_malloc_r+0xea>
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	19db      	adds	r3, r3, r7
 800607e:	6023      	str	r3, [r4, #0]
 8006080:	9b00      	ldr	r3, [sp, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d040      	beq.n	800610a <_malloc_r+0xfa>
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	42a2      	cmp	r2, r4
 800608c:	d133      	bne.n	80060f6 <_malloc_r+0xe6>
 800608e:	2200      	movs	r2, #0
 8006090:	605a      	str	r2, [r3, #4]
 8006092:	e014      	b.n	80060be <_malloc_r+0xae>
 8006094:	2b00      	cmp	r3, #0
 8006096:	dac5      	bge.n	8006024 <_malloc_r+0x14>
 8006098:	230c      	movs	r3, #12
 800609a:	2500      	movs	r5, #0
 800609c:	6033      	str	r3, [r6, #0]
 800609e:	0028      	movs	r0, r5
 80060a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80060a2:	6821      	ldr	r1, [r4, #0]
 80060a4:	1bc9      	subs	r1, r1, r7
 80060a6:	d420      	bmi.n	80060ea <_malloc_r+0xda>
 80060a8:	290b      	cmp	r1, #11
 80060aa:	d918      	bls.n	80060de <_malloc_r+0xce>
 80060ac:	19e2      	adds	r2, r4, r7
 80060ae:	6027      	str	r7, [r4, #0]
 80060b0:	42a3      	cmp	r3, r4
 80060b2:	d112      	bne.n	80060da <_malloc_r+0xca>
 80060b4:	9b00      	ldr	r3, [sp, #0]
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	6863      	ldr	r3, [r4, #4]
 80060ba:	6011      	str	r1, [r2, #0]
 80060bc:	6053      	str	r3, [r2, #4]
 80060be:	0030      	movs	r0, r6
 80060c0:	0025      	movs	r5, r4
 80060c2:	f000 f82f 	bl	8006124 <__malloc_unlock>
 80060c6:	2207      	movs	r2, #7
 80060c8:	350b      	adds	r5, #11
 80060ca:	1d23      	adds	r3, r4, #4
 80060cc:	4395      	bics	r5, r2
 80060ce:	1aea      	subs	r2, r5, r3
 80060d0:	429d      	cmp	r5, r3
 80060d2:	d0e4      	beq.n	800609e <_malloc_r+0x8e>
 80060d4:	1b5b      	subs	r3, r3, r5
 80060d6:	50a3      	str	r3, [r4, r2]
 80060d8:	e7e1      	b.n	800609e <_malloc_r+0x8e>
 80060da:	605a      	str	r2, [r3, #4]
 80060dc:	e7ec      	b.n	80060b8 <_malloc_r+0xa8>
 80060de:	6862      	ldr	r2, [r4, #4]
 80060e0:	42a3      	cmp	r3, r4
 80060e2:	d1d5      	bne.n	8006090 <_malloc_r+0x80>
 80060e4:	9b00      	ldr	r3, [sp, #0]
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	e7e9      	b.n	80060be <_malloc_r+0xae>
 80060ea:	0023      	movs	r3, r4
 80060ec:	6864      	ldr	r4, [r4, #4]
 80060ee:	e7a2      	b.n	8006036 <_malloc_r+0x26>
 80060f0:	002c      	movs	r4, r5
 80060f2:	686d      	ldr	r5, [r5, #4]
 80060f4:	e7ab      	b.n	800604e <_malloc_r+0x3e>
 80060f6:	0013      	movs	r3, r2
 80060f8:	e7c4      	b.n	8006084 <_malloc_r+0x74>
 80060fa:	230c      	movs	r3, #12
 80060fc:	0030      	movs	r0, r6
 80060fe:	6033      	str	r3, [r6, #0]
 8006100:	f000 f810 	bl	8006124 <__malloc_unlock>
 8006104:	e7cb      	b.n	800609e <_malloc_r+0x8e>
 8006106:	6027      	str	r7, [r4, #0]
 8006108:	e7d9      	b.n	80060be <_malloc_r+0xae>
 800610a:	605b      	str	r3, [r3, #4]
 800610c:	deff      	udf	#255	; 0xff
 800610e:	46c0      	nop			; (mov r8, r8)
 8006110:	20000528 	.word	0x20000528

08006114 <__malloc_lock>:
 8006114:	b510      	push	{r4, lr}
 8006116:	4802      	ldr	r0, [pc, #8]	; (8006120 <__malloc_lock+0xc>)
 8006118:	f7ff ff0c 	bl	8005f34 <__retarget_lock_acquire_recursive>
 800611c:	bd10      	pop	{r4, pc}
 800611e:	46c0      	nop			; (mov r8, r8)
 8006120:	20000524 	.word	0x20000524

08006124 <__malloc_unlock>:
 8006124:	b510      	push	{r4, lr}
 8006126:	4802      	ldr	r0, [pc, #8]	; (8006130 <__malloc_unlock+0xc>)
 8006128:	f7ff ff05 	bl	8005f36 <__retarget_lock_release_recursive>
 800612c:	bd10      	pop	{r4, pc}
 800612e:	46c0      	nop			; (mov r8, r8)
 8006130:	20000524 	.word	0x20000524

08006134 <__ssputs_r>:
 8006134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006136:	b085      	sub	sp, #20
 8006138:	9301      	str	r3, [sp, #4]
 800613a:	9203      	str	r2, [sp, #12]
 800613c:	688e      	ldr	r6, [r1, #8]
 800613e:	9a01      	ldr	r2, [sp, #4]
 8006140:	0007      	movs	r7, r0
 8006142:	000c      	movs	r4, r1
 8006144:	680b      	ldr	r3, [r1, #0]
 8006146:	4296      	cmp	r6, r2
 8006148:	d831      	bhi.n	80061ae <__ssputs_r+0x7a>
 800614a:	898a      	ldrh	r2, [r1, #12]
 800614c:	2190      	movs	r1, #144	; 0x90
 800614e:	00c9      	lsls	r1, r1, #3
 8006150:	420a      	tst	r2, r1
 8006152:	d029      	beq.n	80061a8 <__ssputs_r+0x74>
 8006154:	2003      	movs	r0, #3
 8006156:	6921      	ldr	r1, [r4, #16]
 8006158:	1a5b      	subs	r3, r3, r1
 800615a:	9302      	str	r3, [sp, #8]
 800615c:	6963      	ldr	r3, [r4, #20]
 800615e:	4343      	muls	r3, r0
 8006160:	0fdd      	lsrs	r5, r3, #31
 8006162:	18ed      	adds	r5, r5, r3
 8006164:	9b01      	ldr	r3, [sp, #4]
 8006166:	9802      	ldr	r0, [sp, #8]
 8006168:	3301      	adds	r3, #1
 800616a:	181b      	adds	r3, r3, r0
 800616c:	106d      	asrs	r5, r5, #1
 800616e:	42ab      	cmp	r3, r5
 8006170:	d900      	bls.n	8006174 <__ssputs_r+0x40>
 8006172:	001d      	movs	r5, r3
 8006174:	0552      	lsls	r2, r2, #21
 8006176:	d529      	bpl.n	80061cc <__ssputs_r+0x98>
 8006178:	0029      	movs	r1, r5
 800617a:	0038      	movs	r0, r7
 800617c:	f7ff ff48 	bl	8006010 <_malloc_r>
 8006180:	1e06      	subs	r6, r0, #0
 8006182:	d02d      	beq.n	80061e0 <__ssputs_r+0xac>
 8006184:	9a02      	ldr	r2, [sp, #8]
 8006186:	6921      	ldr	r1, [r4, #16]
 8006188:	f000 fae7 	bl	800675a <memcpy>
 800618c:	89a2      	ldrh	r2, [r4, #12]
 800618e:	4b19      	ldr	r3, [pc, #100]	; (80061f4 <__ssputs_r+0xc0>)
 8006190:	401a      	ands	r2, r3
 8006192:	2380      	movs	r3, #128	; 0x80
 8006194:	4313      	orrs	r3, r2
 8006196:	81a3      	strh	r3, [r4, #12]
 8006198:	9b02      	ldr	r3, [sp, #8]
 800619a:	6126      	str	r6, [r4, #16]
 800619c:	18f6      	adds	r6, r6, r3
 800619e:	6026      	str	r6, [r4, #0]
 80061a0:	6165      	str	r5, [r4, #20]
 80061a2:	9e01      	ldr	r6, [sp, #4]
 80061a4:	1aed      	subs	r5, r5, r3
 80061a6:	60a5      	str	r5, [r4, #8]
 80061a8:	9b01      	ldr	r3, [sp, #4]
 80061aa:	429e      	cmp	r6, r3
 80061ac:	d900      	bls.n	80061b0 <__ssputs_r+0x7c>
 80061ae:	9e01      	ldr	r6, [sp, #4]
 80061b0:	0032      	movs	r2, r6
 80061b2:	9903      	ldr	r1, [sp, #12]
 80061b4:	6820      	ldr	r0, [r4, #0]
 80061b6:	f000 fa9f 	bl	80066f8 <memmove>
 80061ba:	2000      	movs	r0, #0
 80061bc:	68a3      	ldr	r3, [r4, #8]
 80061be:	1b9b      	subs	r3, r3, r6
 80061c0:	60a3      	str	r3, [r4, #8]
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	199b      	adds	r3, r3, r6
 80061c6:	6023      	str	r3, [r4, #0]
 80061c8:	b005      	add	sp, #20
 80061ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061cc:	002a      	movs	r2, r5
 80061ce:	0038      	movs	r0, r7
 80061d0:	f000 facc 	bl	800676c <_realloc_r>
 80061d4:	1e06      	subs	r6, r0, #0
 80061d6:	d1df      	bne.n	8006198 <__ssputs_r+0x64>
 80061d8:	0038      	movs	r0, r7
 80061da:	6921      	ldr	r1, [r4, #16]
 80061dc:	f7ff feac 	bl	8005f38 <_free_r>
 80061e0:	230c      	movs	r3, #12
 80061e2:	2001      	movs	r0, #1
 80061e4:	603b      	str	r3, [r7, #0]
 80061e6:	89a2      	ldrh	r2, [r4, #12]
 80061e8:	3334      	adds	r3, #52	; 0x34
 80061ea:	4313      	orrs	r3, r2
 80061ec:	81a3      	strh	r3, [r4, #12]
 80061ee:	4240      	negs	r0, r0
 80061f0:	e7ea      	b.n	80061c8 <__ssputs_r+0x94>
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	fffffb7f 	.word	0xfffffb7f

080061f8 <_svfiprintf_r>:
 80061f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061fa:	b0a1      	sub	sp, #132	; 0x84
 80061fc:	9003      	str	r0, [sp, #12]
 80061fe:	001d      	movs	r5, r3
 8006200:	898b      	ldrh	r3, [r1, #12]
 8006202:	000f      	movs	r7, r1
 8006204:	0016      	movs	r6, r2
 8006206:	061b      	lsls	r3, r3, #24
 8006208:	d511      	bpl.n	800622e <_svfiprintf_r+0x36>
 800620a:	690b      	ldr	r3, [r1, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10e      	bne.n	800622e <_svfiprintf_r+0x36>
 8006210:	2140      	movs	r1, #64	; 0x40
 8006212:	f7ff fefd 	bl	8006010 <_malloc_r>
 8006216:	6038      	str	r0, [r7, #0]
 8006218:	6138      	str	r0, [r7, #16]
 800621a:	2800      	cmp	r0, #0
 800621c:	d105      	bne.n	800622a <_svfiprintf_r+0x32>
 800621e:	230c      	movs	r3, #12
 8006220:	9a03      	ldr	r2, [sp, #12]
 8006222:	3801      	subs	r0, #1
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	b021      	add	sp, #132	; 0x84
 8006228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800622a:	2340      	movs	r3, #64	; 0x40
 800622c:	617b      	str	r3, [r7, #20]
 800622e:	2300      	movs	r3, #0
 8006230:	ac08      	add	r4, sp, #32
 8006232:	6163      	str	r3, [r4, #20]
 8006234:	3320      	adds	r3, #32
 8006236:	7663      	strb	r3, [r4, #25]
 8006238:	3310      	adds	r3, #16
 800623a:	76a3      	strb	r3, [r4, #26]
 800623c:	9507      	str	r5, [sp, #28]
 800623e:	0035      	movs	r5, r6
 8006240:	782b      	ldrb	r3, [r5, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <_svfiprintf_r+0x52>
 8006246:	2b25      	cmp	r3, #37	; 0x25
 8006248:	d148      	bne.n	80062dc <_svfiprintf_r+0xe4>
 800624a:	1bab      	subs	r3, r5, r6
 800624c:	9305      	str	r3, [sp, #20]
 800624e:	42b5      	cmp	r5, r6
 8006250:	d00b      	beq.n	800626a <_svfiprintf_r+0x72>
 8006252:	0032      	movs	r2, r6
 8006254:	0039      	movs	r1, r7
 8006256:	9803      	ldr	r0, [sp, #12]
 8006258:	f7ff ff6c 	bl	8006134 <__ssputs_r>
 800625c:	3001      	adds	r0, #1
 800625e:	d100      	bne.n	8006262 <_svfiprintf_r+0x6a>
 8006260:	e0af      	b.n	80063c2 <_svfiprintf_r+0x1ca>
 8006262:	6963      	ldr	r3, [r4, #20]
 8006264:	9a05      	ldr	r2, [sp, #20]
 8006266:	189b      	adds	r3, r3, r2
 8006268:	6163      	str	r3, [r4, #20]
 800626a:	782b      	ldrb	r3, [r5, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d100      	bne.n	8006272 <_svfiprintf_r+0x7a>
 8006270:	e0a7      	b.n	80063c2 <_svfiprintf_r+0x1ca>
 8006272:	2201      	movs	r2, #1
 8006274:	2300      	movs	r3, #0
 8006276:	4252      	negs	r2, r2
 8006278:	6062      	str	r2, [r4, #4]
 800627a:	a904      	add	r1, sp, #16
 800627c:	3254      	adds	r2, #84	; 0x54
 800627e:	1852      	adds	r2, r2, r1
 8006280:	1c6e      	adds	r6, r5, #1
 8006282:	6023      	str	r3, [r4, #0]
 8006284:	60e3      	str	r3, [r4, #12]
 8006286:	60a3      	str	r3, [r4, #8]
 8006288:	7013      	strb	r3, [r2, #0]
 800628a:	65a3      	str	r3, [r4, #88]	; 0x58
 800628c:	4b55      	ldr	r3, [pc, #340]	; (80063e4 <_svfiprintf_r+0x1ec>)
 800628e:	2205      	movs	r2, #5
 8006290:	0018      	movs	r0, r3
 8006292:	7831      	ldrb	r1, [r6, #0]
 8006294:	9305      	str	r3, [sp, #20]
 8006296:	f000 fa55 	bl	8006744 <memchr>
 800629a:	1c75      	adds	r5, r6, #1
 800629c:	2800      	cmp	r0, #0
 800629e:	d11f      	bne.n	80062e0 <_svfiprintf_r+0xe8>
 80062a0:	6822      	ldr	r2, [r4, #0]
 80062a2:	06d3      	lsls	r3, r2, #27
 80062a4:	d504      	bpl.n	80062b0 <_svfiprintf_r+0xb8>
 80062a6:	2353      	movs	r3, #83	; 0x53
 80062a8:	a904      	add	r1, sp, #16
 80062aa:	185b      	adds	r3, r3, r1
 80062ac:	2120      	movs	r1, #32
 80062ae:	7019      	strb	r1, [r3, #0]
 80062b0:	0713      	lsls	r3, r2, #28
 80062b2:	d504      	bpl.n	80062be <_svfiprintf_r+0xc6>
 80062b4:	2353      	movs	r3, #83	; 0x53
 80062b6:	a904      	add	r1, sp, #16
 80062b8:	185b      	adds	r3, r3, r1
 80062ba:	212b      	movs	r1, #43	; 0x2b
 80062bc:	7019      	strb	r1, [r3, #0]
 80062be:	7833      	ldrb	r3, [r6, #0]
 80062c0:	2b2a      	cmp	r3, #42	; 0x2a
 80062c2:	d016      	beq.n	80062f2 <_svfiprintf_r+0xfa>
 80062c4:	0035      	movs	r5, r6
 80062c6:	2100      	movs	r1, #0
 80062c8:	200a      	movs	r0, #10
 80062ca:	68e3      	ldr	r3, [r4, #12]
 80062cc:	782a      	ldrb	r2, [r5, #0]
 80062ce:	1c6e      	adds	r6, r5, #1
 80062d0:	3a30      	subs	r2, #48	; 0x30
 80062d2:	2a09      	cmp	r2, #9
 80062d4:	d94e      	bls.n	8006374 <_svfiprintf_r+0x17c>
 80062d6:	2900      	cmp	r1, #0
 80062d8:	d111      	bne.n	80062fe <_svfiprintf_r+0x106>
 80062da:	e017      	b.n	800630c <_svfiprintf_r+0x114>
 80062dc:	3501      	adds	r5, #1
 80062de:	e7af      	b.n	8006240 <_svfiprintf_r+0x48>
 80062e0:	9b05      	ldr	r3, [sp, #20]
 80062e2:	6822      	ldr	r2, [r4, #0]
 80062e4:	1ac0      	subs	r0, r0, r3
 80062e6:	2301      	movs	r3, #1
 80062e8:	4083      	lsls	r3, r0
 80062ea:	4313      	orrs	r3, r2
 80062ec:	002e      	movs	r6, r5
 80062ee:	6023      	str	r3, [r4, #0]
 80062f0:	e7cc      	b.n	800628c <_svfiprintf_r+0x94>
 80062f2:	9b07      	ldr	r3, [sp, #28]
 80062f4:	1d19      	adds	r1, r3, #4
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	9107      	str	r1, [sp, #28]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	db01      	blt.n	8006302 <_svfiprintf_r+0x10a>
 80062fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006300:	e004      	b.n	800630c <_svfiprintf_r+0x114>
 8006302:	425b      	negs	r3, r3
 8006304:	60e3      	str	r3, [r4, #12]
 8006306:	2302      	movs	r3, #2
 8006308:	4313      	orrs	r3, r2
 800630a:	6023      	str	r3, [r4, #0]
 800630c:	782b      	ldrb	r3, [r5, #0]
 800630e:	2b2e      	cmp	r3, #46	; 0x2e
 8006310:	d10a      	bne.n	8006328 <_svfiprintf_r+0x130>
 8006312:	786b      	ldrb	r3, [r5, #1]
 8006314:	2b2a      	cmp	r3, #42	; 0x2a
 8006316:	d135      	bne.n	8006384 <_svfiprintf_r+0x18c>
 8006318:	9b07      	ldr	r3, [sp, #28]
 800631a:	3502      	adds	r5, #2
 800631c:	1d1a      	adds	r2, r3, #4
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	9207      	str	r2, [sp, #28]
 8006322:	2b00      	cmp	r3, #0
 8006324:	db2b      	blt.n	800637e <_svfiprintf_r+0x186>
 8006326:	9309      	str	r3, [sp, #36]	; 0x24
 8006328:	4e2f      	ldr	r6, [pc, #188]	; (80063e8 <_svfiprintf_r+0x1f0>)
 800632a:	2203      	movs	r2, #3
 800632c:	0030      	movs	r0, r6
 800632e:	7829      	ldrb	r1, [r5, #0]
 8006330:	f000 fa08 	bl	8006744 <memchr>
 8006334:	2800      	cmp	r0, #0
 8006336:	d006      	beq.n	8006346 <_svfiprintf_r+0x14e>
 8006338:	2340      	movs	r3, #64	; 0x40
 800633a:	1b80      	subs	r0, r0, r6
 800633c:	4083      	lsls	r3, r0
 800633e:	6822      	ldr	r2, [r4, #0]
 8006340:	3501      	adds	r5, #1
 8006342:	4313      	orrs	r3, r2
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	7829      	ldrb	r1, [r5, #0]
 8006348:	2206      	movs	r2, #6
 800634a:	4828      	ldr	r0, [pc, #160]	; (80063ec <_svfiprintf_r+0x1f4>)
 800634c:	1c6e      	adds	r6, r5, #1
 800634e:	7621      	strb	r1, [r4, #24]
 8006350:	f000 f9f8 	bl	8006744 <memchr>
 8006354:	2800      	cmp	r0, #0
 8006356:	d03c      	beq.n	80063d2 <_svfiprintf_r+0x1da>
 8006358:	4b25      	ldr	r3, [pc, #148]	; (80063f0 <_svfiprintf_r+0x1f8>)
 800635a:	2b00      	cmp	r3, #0
 800635c:	d125      	bne.n	80063aa <_svfiprintf_r+0x1b2>
 800635e:	2207      	movs	r2, #7
 8006360:	9b07      	ldr	r3, [sp, #28]
 8006362:	3307      	adds	r3, #7
 8006364:	4393      	bics	r3, r2
 8006366:	3308      	adds	r3, #8
 8006368:	9307      	str	r3, [sp, #28]
 800636a:	6963      	ldr	r3, [r4, #20]
 800636c:	9a04      	ldr	r2, [sp, #16]
 800636e:	189b      	adds	r3, r3, r2
 8006370:	6163      	str	r3, [r4, #20]
 8006372:	e764      	b.n	800623e <_svfiprintf_r+0x46>
 8006374:	4343      	muls	r3, r0
 8006376:	0035      	movs	r5, r6
 8006378:	2101      	movs	r1, #1
 800637a:	189b      	adds	r3, r3, r2
 800637c:	e7a6      	b.n	80062cc <_svfiprintf_r+0xd4>
 800637e:	2301      	movs	r3, #1
 8006380:	425b      	negs	r3, r3
 8006382:	e7d0      	b.n	8006326 <_svfiprintf_r+0x12e>
 8006384:	2300      	movs	r3, #0
 8006386:	200a      	movs	r0, #10
 8006388:	001a      	movs	r2, r3
 800638a:	3501      	adds	r5, #1
 800638c:	6063      	str	r3, [r4, #4]
 800638e:	7829      	ldrb	r1, [r5, #0]
 8006390:	1c6e      	adds	r6, r5, #1
 8006392:	3930      	subs	r1, #48	; 0x30
 8006394:	2909      	cmp	r1, #9
 8006396:	d903      	bls.n	80063a0 <_svfiprintf_r+0x1a8>
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0c5      	beq.n	8006328 <_svfiprintf_r+0x130>
 800639c:	9209      	str	r2, [sp, #36]	; 0x24
 800639e:	e7c3      	b.n	8006328 <_svfiprintf_r+0x130>
 80063a0:	4342      	muls	r2, r0
 80063a2:	0035      	movs	r5, r6
 80063a4:	2301      	movs	r3, #1
 80063a6:	1852      	adds	r2, r2, r1
 80063a8:	e7f1      	b.n	800638e <_svfiprintf_r+0x196>
 80063aa:	aa07      	add	r2, sp, #28
 80063ac:	9200      	str	r2, [sp, #0]
 80063ae:	0021      	movs	r1, r4
 80063b0:	003a      	movs	r2, r7
 80063b2:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <_svfiprintf_r+0x1fc>)
 80063b4:	9803      	ldr	r0, [sp, #12]
 80063b6:	e000      	b.n	80063ba <_svfiprintf_r+0x1c2>
 80063b8:	bf00      	nop
 80063ba:	9004      	str	r0, [sp, #16]
 80063bc:	9b04      	ldr	r3, [sp, #16]
 80063be:	3301      	adds	r3, #1
 80063c0:	d1d3      	bne.n	800636a <_svfiprintf_r+0x172>
 80063c2:	89bb      	ldrh	r3, [r7, #12]
 80063c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80063c6:	065b      	lsls	r3, r3, #25
 80063c8:	d400      	bmi.n	80063cc <_svfiprintf_r+0x1d4>
 80063ca:	e72c      	b.n	8006226 <_svfiprintf_r+0x2e>
 80063cc:	2001      	movs	r0, #1
 80063ce:	4240      	negs	r0, r0
 80063d0:	e729      	b.n	8006226 <_svfiprintf_r+0x2e>
 80063d2:	aa07      	add	r2, sp, #28
 80063d4:	9200      	str	r2, [sp, #0]
 80063d6:	0021      	movs	r1, r4
 80063d8:	003a      	movs	r2, r7
 80063da:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <_svfiprintf_r+0x1fc>)
 80063dc:	9803      	ldr	r0, [sp, #12]
 80063de:	f000 f87b 	bl	80064d8 <_printf_i>
 80063e2:	e7ea      	b.n	80063ba <_svfiprintf_r+0x1c2>
 80063e4:	08006934 	.word	0x08006934
 80063e8:	0800693a 	.word	0x0800693a
 80063ec:	0800693e 	.word	0x0800693e
 80063f0:	00000000 	.word	0x00000000
 80063f4:	08006135 	.word	0x08006135

080063f8 <_printf_common>:
 80063f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063fa:	0016      	movs	r6, r2
 80063fc:	9301      	str	r3, [sp, #4]
 80063fe:	688a      	ldr	r2, [r1, #8]
 8006400:	690b      	ldr	r3, [r1, #16]
 8006402:	000c      	movs	r4, r1
 8006404:	9000      	str	r0, [sp, #0]
 8006406:	4293      	cmp	r3, r2
 8006408:	da00      	bge.n	800640c <_printf_common+0x14>
 800640a:	0013      	movs	r3, r2
 800640c:	0022      	movs	r2, r4
 800640e:	6033      	str	r3, [r6, #0]
 8006410:	3243      	adds	r2, #67	; 0x43
 8006412:	7812      	ldrb	r2, [r2, #0]
 8006414:	2a00      	cmp	r2, #0
 8006416:	d001      	beq.n	800641c <_printf_common+0x24>
 8006418:	3301      	adds	r3, #1
 800641a:	6033      	str	r3, [r6, #0]
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	069b      	lsls	r3, r3, #26
 8006420:	d502      	bpl.n	8006428 <_printf_common+0x30>
 8006422:	6833      	ldr	r3, [r6, #0]
 8006424:	3302      	adds	r3, #2
 8006426:	6033      	str	r3, [r6, #0]
 8006428:	6822      	ldr	r2, [r4, #0]
 800642a:	2306      	movs	r3, #6
 800642c:	0015      	movs	r5, r2
 800642e:	401d      	ands	r5, r3
 8006430:	421a      	tst	r2, r3
 8006432:	d027      	beq.n	8006484 <_printf_common+0x8c>
 8006434:	0023      	movs	r3, r4
 8006436:	3343      	adds	r3, #67	; 0x43
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	1e5a      	subs	r2, r3, #1
 800643c:	4193      	sbcs	r3, r2
 800643e:	6822      	ldr	r2, [r4, #0]
 8006440:	0692      	lsls	r2, r2, #26
 8006442:	d430      	bmi.n	80064a6 <_printf_common+0xae>
 8006444:	0022      	movs	r2, r4
 8006446:	9901      	ldr	r1, [sp, #4]
 8006448:	9800      	ldr	r0, [sp, #0]
 800644a:	9d08      	ldr	r5, [sp, #32]
 800644c:	3243      	adds	r2, #67	; 0x43
 800644e:	47a8      	blx	r5
 8006450:	3001      	adds	r0, #1
 8006452:	d025      	beq.n	80064a0 <_printf_common+0xa8>
 8006454:	2206      	movs	r2, #6
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	2500      	movs	r5, #0
 800645a:	4013      	ands	r3, r2
 800645c:	2b04      	cmp	r3, #4
 800645e:	d105      	bne.n	800646c <_printf_common+0x74>
 8006460:	6833      	ldr	r3, [r6, #0]
 8006462:	68e5      	ldr	r5, [r4, #12]
 8006464:	1aed      	subs	r5, r5, r3
 8006466:	43eb      	mvns	r3, r5
 8006468:	17db      	asrs	r3, r3, #31
 800646a:	401d      	ands	r5, r3
 800646c:	68a3      	ldr	r3, [r4, #8]
 800646e:	6922      	ldr	r2, [r4, #16]
 8006470:	4293      	cmp	r3, r2
 8006472:	dd01      	ble.n	8006478 <_printf_common+0x80>
 8006474:	1a9b      	subs	r3, r3, r2
 8006476:	18ed      	adds	r5, r5, r3
 8006478:	2600      	movs	r6, #0
 800647a:	42b5      	cmp	r5, r6
 800647c:	d120      	bne.n	80064c0 <_printf_common+0xc8>
 800647e:	2000      	movs	r0, #0
 8006480:	e010      	b.n	80064a4 <_printf_common+0xac>
 8006482:	3501      	adds	r5, #1
 8006484:	68e3      	ldr	r3, [r4, #12]
 8006486:	6832      	ldr	r2, [r6, #0]
 8006488:	1a9b      	subs	r3, r3, r2
 800648a:	42ab      	cmp	r3, r5
 800648c:	ddd2      	ble.n	8006434 <_printf_common+0x3c>
 800648e:	0022      	movs	r2, r4
 8006490:	2301      	movs	r3, #1
 8006492:	9901      	ldr	r1, [sp, #4]
 8006494:	9800      	ldr	r0, [sp, #0]
 8006496:	9f08      	ldr	r7, [sp, #32]
 8006498:	3219      	adds	r2, #25
 800649a:	47b8      	blx	r7
 800649c:	3001      	adds	r0, #1
 800649e:	d1f0      	bne.n	8006482 <_printf_common+0x8a>
 80064a0:	2001      	movs	r0, #1
 80064a2:	4240      	negs	r0, r0
 80064a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064a6:	2030      	movs	r0, #48	; 0x30
 80064a8:	18e1      	adds	r1, r4, r3
 80064aa:	3143      	adds	r1, #67	; 0x43
 80064ac:	7008      	strb	r0, [r1, #0]
 80064ae:	0021      	movs	r1, r4
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	3145      	adds	r1, #69	; 0x45
 80064b4:	7809      	ldrb	r1, [r1, #0]
 80064b6:	18a2      	adds	r2, r4, r2
 80064b8:	3243      	adds	r2, #67	; 0x43
 80064ba:	3302      	adds	r3, #2
 80064bc:	7011      	strb	r1, [r2, #0]
 80064be:	e7c1      	b.n	8006444 <_printf_common+0x4c>
 80064c0:	0022      	movs	r2, r4
 80064c2:	2301      	movs	r3, #1
 80064c4:	9901      	ldr	r1, [sp, #4]
 80064c6:	9800      	ldr	r0, [sp, #0]
 80064c8:	9f08      	ldr	r7, [sp, #32]
 80064ca:	321a      	adds	r2, #26
 80064cc:	47b8      	blx	r7
 80064ce:	3001      	adds	r0, #1
 80064d0:	d0e6      	beq.n	80064a0 <_printf_common+0xa8>
 80064d2:	3601      	adds	r6, #1
 80064d4:	e7d1      	b.n	800647a <_printf_common+0x82>
	...

080064d8 <_printf_i>:
 80064d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064da:	b08b      	sub	sp, #44	; 0x2c
 80064dc:	9206      	str	r2, [sp, #24]
 80064de:	000a      	movs	r2, r1
 80064e0:	3243      	adds	r2, #67	; 0x43
 80064e2:	9307      	str	r3, [sp, #28]
 80064e4:	9005      	str	r0, [sp, #20]
 80064e6:	9204      	str	r2, [sp, #16]
 80064e8:	7e0a      	ldrb	r2, [r1, #24]
 80064ea:	000c      	movs	r4, r1
 80064ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064ee:	2a78      	cmp	r2, #120	; 0x78
 80064f0:	d809      	bhi.n	8006506 <_printf_i+0x2e>
 80064f2:	2a62      	cmp	r2, #98	; 0x62
 80064f4:	d80b      	bhi.n	800650e <_printf_i+0x36>
 80064f6:	2a00      	cmp	r2, #0
 80064f8:	d100      	bne.n	80064fc <_printf_i+0x24>
 80064fa:	e0be      	b.n	800667a <_printf_i+0x1a2>
 80064fc:	497c      	ldr	r1, [pc, #496]	; (80066f0 <_printf_i+0x218>)
 80064fe:	9103      	str	r1, [sp, #12]
 8006500:	2a58      	cmp	r2, #88	; 0x58
 8006502:	d100      	bne.n	8006506 <_printf_i+0x2e>
 8006504:	e093      	b.n	800662e <_printf_i+0x156>
 8006506:	0026      	movs	r6, r4
 8006508:	3642      	adds	r6, #66	; 0x42
 800650a:	7032      	strb	r2, [r6, #0]
 800650c:	e022      	b.n	8006554 <_printf_i+0x7c>
 800650e:	0010      	movs	r0, r2
 8006510:	3863      	subs	r0, #99	; 0x63
 8006512:	2815      	cmp	r0, #21
 8006514:	d8f7      	bhi.n	8006506 <_printf_i+0x2e>
 8006516:	f7f9 fdff 	bl	8000118 <__gnu_thumb1_case_shi>
 800651a:	0016      	.short	0x0016
 800651c:	fff6001f 	.word	0xfff6001f
 8006520:	fff6fff6 	.word	0xfff6fff6
 8006524:	001ffff6 	.word	0x001ffff6
 8006528:	fff6fff6 	.word	0xfff6fff6
 800652c:	fff6fff6 	.word	0xfff6fff6
 8006530:	003600a3 	.word	0x003600a3
 8006534:	fff60083 	.word	0xfff60083
 8006538:	00b4fff6 	.word	0x00b4fff6
 800653c:	0036fff6 	.word	0x0036fff6
 8006540:	fff6fff6 	.word	0xfff6fff6
 8006544:	0087      	.short	0x0087
 8006546:	0026      	movs	r6, r4
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	3642      	adds	r6, #66	; 0x42
 800654c:	1d11      	adds	r1, r2, #4
 800654e:	6019      	str	r1, [r3, #0]
 8006550:	6813      	ldr	r3, [r2, #0]
 8006552:	7033      	strb	r3, [r6, #0]
 8006554:	2301      	movs	r3, #1
 8006556:	e0a2      	b.n	800669e <_printf_i+0x1c6>
 8006558:	6818      	ldr	r0, [r3, #0]
 800655a:	6809      	ldr	r1, [r1, #0]
 800655c:	1d02      	adds	r2, r0, #4
 800655e:	060d      	lsls	r5, r1, #24
 8006560:	d50b      	bpl.n	800657a <_printf_i+0xa2>
 8006562:	6805      	ldr	r5, [r0, #0]
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	2d00      	cmp	r5, #0
 8006568:	da03      	bge.n	8006572 <_printf_i+0x9a>
 800656a:	232d      	movs	r3, #45	; 0x2d
 800656c:	9a04      	ldr	r2, [sp, #16]
 800656e:	426d      	negs	r5, r5
 8006570:	7013      	strb	r3, [r2, #0]
 8006572:	4b5f      	ldr	r3, [pc, #380]	; (80066f0 <_printf_i+0x218>)
 8006574:	270a      	movs	r7, #10
 8006576:	9303      	str	r3, [sp, #12]
 8006578:	e01b      	b.n	80065b2 <_printf_i+0xda>
 800657a:	6805      	ldr	r5, [r0, #0]
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	0649      	lsls	r1, r1, #25
 8006580:	d5f1      	bpl.n	8006566 <_printf_i+0x8e>
 8006582:	b22d      	sxth	r5, r5
 8006584:	e7ef      	b.n	8006566 <_printf_i+0x8e>
 8006586:	680d      	ldr	r5, [r1, #0]
 8006588:	6819      	ldr	r1, [r3, #0]
 800658a:	1d08      	adds	r0, r1, #4
 800658c:	6018      	str	r0, [r3, #0]
 800658e:	062e      	lsls	r6, r5, #24
 8006590:	d501      	bpl.n	8006596 <_printf_i+0xbe>
 8006592:	680d      	ldr	r5, [r1, #0]
 8006594:	e003      	b.n	800659e <_printf_i+0xc6>
 8006596:	066d      	lsls	r5, r5, #25
 8006598:	d5fb      	bpl.n	8006592 <_printf_i+0xba>
 800659a:	680d      	ldr	r5, [r1, #0]
 800659c:	b2ad      	uxth	r5, r5
 800659e:	4b54      	ldr	r3, [pc, #336]	; (80066f0 <_printf_i+0x218>)
 80065a0:	2708      	movs	r7, #8
 80065a2:	9303      	str	r3, [sp, #12]
 80065a4:	2a6f      	cmp	r2, #111	; 0x6f
 80065a6:	d000      	beq.n	80065aa <_printf_i+0xd2>
 80065a8:	3702      	adds	r7, #2
 80065aa:	0023      	movs	r3, r4
 80065ac:	2200      	movs	r2, #0
 80065ae:	3343      	adds	r3, #67	; 0x43
 80065b0:	701a      	strb	r2, [r3, #0]
 80065b2:	6863      	ldr	r3, [r4, #4]
 80065b4:	60a3      	str	r3, [r4, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	db03      	blt.n	80065c2 <_printf_i+0xea>
 80065ba:	2104      	movs	r1, #4
 80065bc:	6822      	ldr	r2, [r4, #0]
 80065be:	438a      	bics	r2, r1
 80065c0:	6022      	str	r2, [r4, #0]
 80065c2:	2d00      	cmp	r5, #0
 80065c4:	d102      	bne.n	80065cc <_printf_i+0xf4>
 80065c6:	9e04      	ldr	r6, [sp, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00c      	beq.n	80065e6 <_printf_i+0x10e>
 80065cc:	9e04      	ldr	r6, [sp, #16]
 80065ce:	0028      	movs	r0, r5
 80065d0:	0039      	movs	r1, r7
 80065d2:	f7f9 fe31 	bl	8000238 <__aeabi_uidivmod>
 80065d6:	9b03      	ldr	r3, [sp, #12]
 80065d8:	3e01      	subs	r6, #1
 80065da:	5c5b      	ldrb	r3, [r3, r1]
 80065dc:	7033      	strb	r3, [r6, #0]
 80065de:	002b      	movs	r3, r5
 80065e0:	0005      	movs	r5, r0
 80065e2:	429f      	cmp	r7, r3
 80065e4:	d9f3      	bls.n	80065ce <_printf_i+0xf6>
 80065e6:	2f08      	cmp	r7, #8
 80065e8:	d109      	bne.n	80065fe <_printf_i+0x126>
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	07db      	lsls	r3, r3, #31
 80065ee:	d506      	bpl.n	80065fe <_printf_i+0x126>
 80065f0:	6862      	ldr	r2, [r4, #4]
 80065f2:	6923      	ldr	r3, [r4, #16]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	dc02      	bgt.n	80065fe <_printf_i+0x126>
 80065f8:	2330      	movs	r3, #48	; 0x30
 80065fa:	3e01      	subs	r6, #1
 80065fc:	7033      	strb	r3, [r6, #0]
 80065fe:	9b04      	ldr	r3, [sp, #16]
 8006600:	1b9b      	subs	r3, r3, r6
 8006602:	6123      	str	r3, [r4, #16]
 8006604:	9b07      	ldr	r3, [sp, #28]
 8006606:	0021      	movs	r1, r4
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	9805      	ldr	r0, [sp, #20]
 800660c:	9b06      	ldr	r3, [sp, #24]
 800660e:	aa09      	add	r2, sp, #36	; 0x24
 8006610:	f7ff fef2 	bl	80063f8 <_printf_common>
 8006614:	3001      	adds	r0, #1
 8006616:	d147      	bne.n	80066a8 <_printf_i+0x1d0>
 8006618:	2001      	movs	r0, #1
 800661a:	4240      	negs	r0, r0
 800661c:	b00b      	add	sp, #44	; 0x2c
 800661e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006620:	2220      	movs	r2, #32
 8006622:	6809      	ldr	r1, [r1, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	6022      	str	r2, [r4, #0]
 8006628:	2278      	movs	r2, #120	; 0x78
 800662a:	4932      	ldr	r1, [pc, #200]	; (80066f4 <_printf_i+0x21c>)
 800662c:	9103      	str	r1, [sp, #12]
 800662e:	0021      	movs	r1, r4
 8006630:	3145      	adds	r1, #69	; 0x45
 8006632:	700a      	strb	r2, [r1, #0]
 8006634:	6819      	ldr	r1, [r3, #0]
 8006636:	6822      	ldr	r2, [r4, #0]
 8006638:	c920      	ldmia	r1!, {r5}
 800663a:	0610      	lsls	r0, r2, #24
 800663c:	d402      	bmi.n	8006644 <_printf_i+0x16c>
 800663e:	0650      	lsls	r0, r2, #25
 8006640:	d500      	bpl.n	8006644 <_printf_i+0x16c>
 8006642:	b2ad      	uxth	r5, r5
 8006644:	6019      	str	r1, [r3, #0]
 8006646:	07d3      	lsls	r3, r2, #31
 8006648:	d502      	bpl.n	8006650 <_printf_i+0x178>
 800664a:	2320      	movs	r3, #32
 800664c:	4313      	orrs	r3, r2
 800664e:	6023      	str	r3, [r4, #0]
 8006650:	2710      	movs	r7, #16
 8006652:	2d00      	cmp	r5, #0
 8006654:	d1a9      	bne.n	80065aa <_printf_i+0xd2>
 8006656:	2220      	movs	r2, #32
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	4393      	bics	r3, r2
 800665c:	6023      	str	r3, [r4, #0]
 800665e:	e7a4      	b.n	80065aa <_printf_i+0xd2>
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	680d      	ldr	r5, [r1, #0]
 8006664:	1d10      	adds	r0, r2, #4
 8006666:	6949      	ldr	r1, [r1, #20]
 8006668:	6018      	str	r0, [r3, #0]
 800666a:	6813      	ldr	r3, [r2, #0]
 800666c:	062e      	lsls	r6, r5, #24
 800666e:	d501      	bpl.n	8006674 <_printf_i+0x19c>
 8006670:	6019      	str	r1, [r3, #0]
 8006672:	e002      	b.n	800667a <_printf_i+0x1a2>
 8006674:	066d      	lsls	r5, r5, #25
 8006676:	d5fb      	bpl.n	8006670 <_printf_i+0x198>
 8006678:	8019      	strh	r1, [r3, #0]
 800667a:	2300      	movs	r3, #0
 800667c:	9e04      	ldr	r6, [sp, #16]
 800667e:	6123      	str	r3, [r4, #16]
 8006680:	e7c0      	b.n	8006604 <_printf_i+0x12c>
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	1d11      	adds	r1, r2, #4
 8006686:	6019      	str	r1, [r3, #0]
 8006688:	6816      	ldr	r6, [r2, #0]
 800668a:	2100      	movs	r1, #0
 800668c:	0030      	movs	r0, r6
 800668e:	6862      	ldr	r2, [r4, #4]
 8006690:	f000 f858 	bl	8006744 <memchr>
 8006694:	2800      	cmp	r0, #0
 8006696:	d001      	beq.n	800669c <_printf_i+0x1c4>
 8006698:	1b80      	subs	r0, r0, r6
 800669a:	6060      	str	r0, [r4, #4]
 800669c:	6863      	ldr	r3, [r4, #4]
 800669e:	6123      	str	r3, [r4, #16]
 80066a0:	2300      	movs	r3, #0
 80066a2:	9a04      	ldr	r2, [sp, #16]
 80066a4:	7013      	strb	r3, [r2, #0]
 80066a6:	e7ad      	b.n	8006604 <_printf_i+0x12c>
 80066a8:	0032      	movs	r2, r6
 80066aa:	6923      	ldr	r3, [r4, #16]
 80066ac:	9906      	ldr	r1, [sp, #24]
 80066ae:	9805      	ldr	r0, [sp, #20]
 80066b0:	9d07      	ldr	r5, [sp, #28]
 80066b2:	47a8      	blx	r5
 80066b4:	3001      	adds	r0, #1
 80066b6:	d0af      	beq.n	8006618 <_printf_i+0x140>
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	079b      	lsls	r3, r3, #30
 80066bc:	d415      	bmi.n	80066ea <_printf_i+0x212>
 80066be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c0:	68e0      	ldr	r0, [r4, #12]
 80066c2:	4298      	cmp	r0, r3
 80066c4:	daaa      	bge.n	800661c <_printf_i+0x144>
 80066c6:	0018      	movs	r0, r3
 80066c8:	e7a8      	b.n	800661c <_printf_i+0x144>
 80066ca:	0022      	movs	r2, r4
 80066cc:	2301      	movs	r3, #1
 80066ce:	9906      	ldr	r1, [sp, #24]
 80066d0:	9805      	ldr	r0, [sp, #20]
 80066d2:	9e07      	ldr	r6, [sp, #28]
 80066d4:	3219      	adds	r2, #25
 80066d6:	47b0      	blx	r6
 80066d8:	3001      	adds	r0, #1
 80066da:	d09d      	beq.n	8006618 <_printf_i+0x140>
 80066dc:	3501      	adds	r5, #1
 80066de:	68e3      	ldr	r3, [r4, #12]
 80066e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e2:	1a9b      	subs	r3, r3, r2
 80066e4:	42ab      	cmp	r3, r5
 80066e6:	dcf0      	bgt.n	80066ca <_printf_i+0x1f2>
 80066e8:	e7e9      	b.n	80066be <_printf_i+0x1e6>
 80066ea:	2500      	movs	r5, #0
 80066ec:	e7f7      	b.n	80066de <_printf_i+0x206>
 80066ee:	46c0      	nop			; (mov r8, r8)
 80066f0:	08006945 	.word	0x08006945
 80066f4:	08006956 	.word	0x08006956

080066f8 <memmove>:
 80066f8:	b510      	push	{r4, lr}
 80066fa:	4288      	cmp	r0, r1
 80066fc:	d902      	bls.n	8006704 <memmove+0xc>
 80066fe:	188b      	adds	r3, r1, r2
 8006700:	4298      	cmp	r0, r3
 8006702:	d303      	bcc.n	800670c <memmove+0x14>
 8006704:	2300      	movs	r3, #0
 8006706:	e007      	b.n	8006718 <memmove+0x20>
 8006708:	5c8b      	ldrb	r3, [r1, r2]
 800670a:	5483      	strb	r3, [r0, r2]
 800670c:	3a01      	subs	r2, #1
 800670e:	d2fb      	bcs.n	8006708 <memmove+0x10>
 8006710:	bd10      	pop	{r4, pc}
 8006712:	5ccc      	ldrb	r4, [r1, r3]
 8006714:	54c4      	strb	r4, [r0, r3]
 8006716:	3301      	adds	r3, #1
 8006718:	429a      	cmp	r2, r3
 800671a:	d1fa      	bne.n	8006712 <memmove+0x1a>
 800671c:	e7f8      	b.n	8006710 <memmove+0x18>
	...

08006720 <_sbrk_r>:
 8006720:	2300      	movs	r3, #0
 8006722:	b570      	push	{r4, r5, r6, lr}
 8006724:	4d06      	ldr	r5, [pc, #24]	; (8006740 <_sbrk_r+0x20>)
 8006726:	0004      	movs	r4, r0
 8006728:	0008      	movs	r0, r1
 800672a:	602b      	str	r3, [r5, #0]
 800672c:	f7fc f83c 	bl	80027a8 <_sbrk>
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	d103      	bne.n	800673c <_sbrk_r+0x1c>
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d000      	beq.n	800673c <_sbrk_r+0x1c>
 800673a:	6023      	str	r3, [r4, #0]
 800673c:	bd70      	pop	{r4, r5, r6, pc}
 800673e:	46c0      	nop			; (mov r8, r8)
 8006740:	20000520 	.word	0x20000520

08006744 <memchr>:
 8006744:	b2c9      	uxtb	r1, r1
 8006746:	1882      	adds	r2, r0, r2
 8006748:	4290      	cmp	r0, r2
 800674a:	d101      	bne.n	8006750 <memchr+0xc>
 800674c:	2000      	movs	r0, #0
 800674e:	4770      	bx	lr
 8006750:	7803      	ldrb	r3, [r0, #0]
 8006752:	428b      	cmp	r3, r1
 8006754:	d0fb      	beq.n	800674e <memchr+0xa>
 8006756:	3001      	adds	r0, #1
 8006758:	e7f6      	b.n	8006748 <memchr+0x4>

0800675a <memcpy>:
 800675a:	2300      	movs	r3, #0
 800675c:	b510      	push	{r4, lr}
 800675e:	429a      	cmp	r2, r3
 8006760:	d100      	bne.n	8006764 <memcpy+0xa>
 8006762:	bd10      	pop	{r4, pc}
 8006764:	5ccc      	ldrb	r4, [r1, r3]
 8006766:	54c4      	strb	r4, [r0, r3]
 8006768:	3301      	adds	r3, #1
 800676a:	e7f8      	b.n	800675e <memcpy+0x4>

0800676c <_realloc_r>:
 800676c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800676e:	0007      	movs	r7, r0
 8006770:	000e      	movs	r6, r1
 8006772:	0014      	movs	r4, r2
 8006774:	2900      	cmp	r1, #0
 8006776:	d105      	bne.n	8006784 <_realloc_r+0x18>
 8006778:	0011      	movs	r1, r2
 800677a:	f7ff fc49 	bl	8006010 <_malloc_r>
 800677e:	0005      	movs	r5, r0
 8006780:	0028      	movs	r0, r5
 8006782:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006784:	2a00      	cmp	r2, #0
 8006786:	d103      	bne.n	8006790 <_realloc_r+0x24>
 8006788:	f7ff fbd6 	bl	8005f38 <_free_r>
 800678c:	0025      	movs	r5, r4
 800678e:	e7f7      	b.n	8006780 <_realloc_r+0x14>
 8006790:	f000 f81b 	bl	80067ca <_malloc_usable_size_r>
 8006794:	9001      	str	r0, [sp, #4]
 8006796:	4284      	cmp	r4, r0
 8006798:	d803      	bhi.n	80067a2 <_realloc_r+0x36>
 800679a:	0035      	movs	r5, r6
 800679c:	0843      	lsrs	r3, r0, #1
 800679e:	42a3      	cmp	r3, r4
 80067a0:	d3ee      	bcc.n	8006780 <_realloc_r+0x14>
 80067a2:	0021      	movs	r1, r4
 80067a4:	0038      	movs	r0, r7
 80067a6:	f7ff fc33 	bl	8006010 <_malloc_r>
 80067aa:	1e05      	subs	r5, r0, #0
 80067ac:	d0e8      	beq.n	8006780 <_realloc_r+0x14>
 80067ae:	9b01      	ldr	r3, [sp, #4]
 80067b0:	0022      	movs	r2, r4
 80067b2:	429c      	cmp	r4, r3
 80067b4:	d900      	bls.n	80067b8 <_realloc_r+0x4c>
 80067b6:	001a      	movs	r2, r3
 80067b8:	0031      	movs	r1, r6
 80067ba:	0028      	movs	r0, r5
 80067bc:	f7ff ffcd 	bl	800675a <memcpy>
 80067c0:	0031      	movs	r1, r6
 80067c2:	0038      	movs	r0, r7
 80067c4:	f7ff fbb8 	bl	8005f38 <_free_r>
 80067c8:	e7da      	b.n	8006780 <_realloc_r+0x14>

080067ca <_malloc_usable_size_r>:
 80067ca:	1f0b      	subs	r3, r1, #4
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	1f18      	subs	r0, r3, #4
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	da01      	bge.n	80067d8 <_malloc_usable_size_r+0xe>
 80067d4:	580b      	ldr	r3, [r1, r0]
 80067d6:	18c0      	adds	r0, r0, r3
 80067d8:	4770      	bx	lr
	...

080067dc <_init>:
 80067dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067de:	46c0      	nop			; (mov r8, r8)
 80067e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e2:	bc08      	pop	{r3}
 80067e4:	469e      	mov	lr, r3
 80067e6:	4770      	bx	lr

080067e8 <_fini>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	46c0      	nop			; (mov r8, r8)
 80067ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ee:	bc08      	pop	{r3}
 80067f0:	469e      	mov	lr, r3
 80067f2:	4770      	bx	lr
